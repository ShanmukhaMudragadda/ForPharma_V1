
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.EmployeeScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  email: 'email',
  passwordHash: 'passwordHash',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  profilePic: 'profilePic',
  role: 'role',
  reportingManagerId: 'reportingManagerId',
  teamId: 'teamId',
  employeeCode: 'employeeCode',
  city: 'city',
  state: 'state',
  assignedLatitude: 'assignedLatitude',
  assignedLongitude: 'assignedLongitude',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLoginAt: 'lastLoginAt',
  isActive: 'isActive'
};

exports.Prisma.TeamScalarFieldEnum = {
  id: 'id',
  teamName: 'teamName',
  leadId: 'leadId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isActive: 'isActive'
};

exports.Prisma.TerritoryScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  name: 'name',
  type: 'type',
  parentTerritoryId: 'parentTerritoryId',
  boundaries: 'boundaries',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmployeeTerritoryScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  territoryId: 'territoryId',
  assignedAt: 'assignedAt',
  unassignedAt: 'unassignedAt',
  isPrimary: 'isPrimary'
};

exports.Prisma.EmployeeTrainingRecordScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  trainingName: 'trainingName',
  description: 'description',
  completionDate: 'completionDate',
  createdAt: 'createdAt'
};

exports.Prisma.HospitalChainScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  name: 'name',
  headquartersAddress: 'headquartersAddress',
  contactEmail: 'contactEmail',
  contactPhone: 'contactPhone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isActive: 'isActive'
};

exports.Prisma.ChemistChainScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  name: 'name',
  headquartersAddress: 'headquartersAddress',
  contactEmail: 'contactEmail',
  contactPhone: 'contactPhone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isActive: 'isActive'
};

exports.Prisma.HospitalScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  hospitalChainId: 'hospitalChainId',
  territoryId: 'territoryId',
  name: 'name',
  type: 'type',
  address: 'address',
  city: 'city',
  state: 'state',
  pincode: 'pincode',
  latitude: 'latitude',
  longitude: 'longitude',
  phone: 'phone',
  email: 'email',
  website: 'website',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isActive: 'isActive'
};

exports.Prisma.DoctorScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  name: 'name',
  designation: 'designation',
  specialization: 'specialization',
  email: 'email',
  phone: 'phone',
  description: 'description',
  profilePictureUrl: 'profilePictureUrl',
  qualification: 'qualification',
  experienceYears: 'experienceYears',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  isActive: 'isActive'
};

exports.Prisma.DoctorHospitalAssociationScalarFieldEnum = {
  id: 'id',
  doctorId: 'doctorId',
  hospitalId: 'hospitalId',
  department: 'department',
  position: 'position',
  isPrimary: 'isPrimary',
  associationStartDate: 'associationStartDate',
  associationEndDate: 'associationEndDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DoctorConsultationScheduleScalarFieldEnum = {
  id: 'id',
  doctorId: 'doctorId',
  hospitalId: 'hospitalId',
  dayOfWeek: 'dayOfWeek',
  startTime: 'startTime',
  endTime: 'endTime',
  consultationType: 'consultationType',
  isActive: 'isActive',
  effectiveFrom: 'effectiveFrom',
  effectiveTo: 'effectiveTo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DoctorNoteScalarFieldEnum = {
  id: 'id',
  doctorId: 'doctorId',
  createdById: 'createdById',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DoctorInteractionScalarFieldEnum = {
  id: 'id',
  doctorId: 'doctorId',
  employeeId: 'employeeId',
  hospitalId: 'hospitalId',
  interactionType: 'interactionType',
  startTime: 'startTime',
  endTime: 'endTime',
  purpose: 'purpose',
  outcome: 'outcome',
  comments: 'comments',
  rating: 'rating',
  createdAt: 'createdAt',
  doctorTaskId: 'doctorTaskId'
};

exports.Prisma.DrugScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  name: 'name',
  composition: 'composition',
  manufacturer: 'manufacturer',
  indications: 'indications',
  sideEffects: 'sideEffects',
  safetyAdvice: 'safetyAdvice',
  dosageForms: 'dosageForms',
  price: 'price',
  schedule: 'schedule',
  regulatoryApprovals: 'regulatoryApprovals',
  category: 'category',
  isAvailable: 'isAvailable',
  images: 'images',
  marketingMaterials: 'marketingMaterials',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  isActive: 'isActive'
};

exports.Prisma.ChemistScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  chemistChainId: 'chemistChainId',
  territoryId: 'territoryId',
  name: 'name',
  type: 'type',
  email: 'email',
  phone: 'phone',
  address: 'address',
  city: 'city',
  state: 'state',
  pincode: 'pincode',
  latitude: 'latitude',
  longitude: 'longitude',
  description: 'description',
  profilePictureUrl: 'profilePictureUrl',
  visitingHours: 'visitingHours',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  isActive: 'isActive'
};

exports.Prisma.ChemistNoteScalarFieldEnum = {
  id: 'id',
  chemistId: 'chemistId',
  createdById: 'createdById',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChemistInteractionScalarFieldEnum = {
  id: 'id',
  chemistId: 'chemistId',
  employeeId: 'employeeId',
  interactionType: 'interactionType',
  startTime: 'startTime',
  endTime: 'endTime',
  purpose: 'purpose',
  outcome: 'outcome',
  comments: 'comments',
  rating: 'rating',
  createdAt: 'createdAt',
  chemistTaskId: 'chemistTaskId'
};

exports.Prisma.DoctorChemistRelationScalarFieldEnum = {
  id: 'id',
  doctorId: 'doctorId',
  chemistId: 'chemistId',
  createdAt: 'createdAt',
  createdById: 'createdById'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  chemistId: 'chemistId',
  totalAmount: 'totalAmount',
  status: 'status',
  orderDate: 'orderDate',
  deliveryDate: 'deliveryDate',
  specialInstructions: 'specialInstructions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  orderId: 'orderId',
  drugId: 'drugId',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  subtotal: 'subtotal',
  createdAt: 'createdAt'
};

exports.Prisma.DcrReportScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  employeeId: 'employeeId',
  taskId: 'taskId',
  taskType: 'taskType',
  reportDate: 'reportDate',
  productsDiscussed: 'productsDiscussed',
  comments: 'comments',
  isDraft: 'isDraft',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RcpaReportScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  employeeId: 'employeeId',
  chemistId: 'chemistId',
  reportingPeriod: 'reportingPeriod',
  startDate: 'startDate',
  endDate: 'endDate',
  totalPrescription: 'totalPrescription',
  remarks: 'remarks',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RcpaDrugDataScalarFieldEnum = {
  id: 'id',
  rcpaReportId: 'rcpaReportId',
  drugId: 'drugId',
  competitorDrugName: 'competitorDrugName',
  ownQuantity: 'ownQuantity',
  competitorQuantity: 'competitorQuantity',
  ownPackSize: 'ownPackSize',
  competitorPackSize: 'competitorPackSize',
  createdAt: 'createdAt'
};

exports.Prisma.CheckInScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  employeeId: 'employeeId',
  checkInTime: 'checkInTime',
  checkOutTime: 'checkOutTime',
  checkInLatitude: 'checkInLatitude',
  checkInLongitude: 'checkInLongitude',
  checkOutLatitude: 'checkOutLatitude',
  checkOutLongitude: 'checkOutLongitude',
  createdAt: 'createdAt'
};

exports.Prisma.TaskPlannerScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DoctorTaskScalarFieldEnum = {
  id: 'id',
  plannerId: 'plannerId',
  employeeId: 'employeeId',
  doctorId: 'doctorId',
  taskDate: 'taskDate',
  startTime: 'startTime',
  endTime: 'endTime',
  taskStatus: 'taskStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChemistTaskScalarFieldEnum = {
  id: 'id',
  plannerId: 'plannerId',
  employeeId: 'employeeId',
  chemistId: 'chemistId',
  taskDate: 'taskDate',
  startTime: 'startTime',
  endTime: 'endTime',
  taskStatus: 'taskStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TourPlanTaskScalarFieldEnum = {
  id: 'id',
  plannerId: 'plannerId',
  employeeId: 'employeeId',
  tourPlanId: 'tourPlanId',
  location: 'location',
  taskDate: 'taskDate',
  startTime: 'startTime',
  endTime: 'endTime',
  taskStatus: 'taskStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TourPlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TourPlanReportScalarFieldEnum = {
  id: 'id',
  tourTaskId: 'tourTaskId',
  interactionTime: 'interactionTime',
  purpose: 'purpose',
  outcome: 'outcome',
  comments: 'comments',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExpenseTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  icon: 'icon',
  formFields: 'formFields',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExpenseRoleConfigScalarFieldEnum = {
  id: 'id',
  expenseTypeId: 'expenseTypeId',
  role: 'role',
  limits: 'limits',
  rates: 'rates',
  validationRules: 'validationRules',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExpenseClaimScalarFieldEnum = {
  id: 'id',
  claimNumber: 'claimNumber',
  employeeId: 'employeeId',
  expenseTypeId: 'expenseTypeId',
  expenseRoleConfigId: 'expenseRoleConfigId',
  expenseData: 'expenseData',
  status: 'status',
  submittedAt: 'submittedAt',
  approvedAt: 'approvedAt',
  approvedBy: 'approvedBy',
  approvalComments: 'approvalComments',
  rejectionReason: 'rejectionReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GiftScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  unitCost: 'unitCost',
  specifications: 'specifications',
  giftImages: 'giftImages',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  isActive: 'isActive'
};

exports.Prisma.UserDrugInventoryScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  drugId: 'drugId',
  quantity: 'quantity',
  lastRestockedAt: 'lastRestockedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserGiftInventoryScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  giftId: 'giftId',
  quantity: 'quantity',
  lastRestockedAt: 'lastRestockedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DoctorDistributionScalarFieldEnum = {
  id: 'id',
  doctorInteractionId: 'doctorInteractionId',
  employeeId: 'employeeId',
  distributedAt: 'distributedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DoctorDistributionDrugItemScalarFieldEnum = {
  id: 'id',
  doctorDistributionId: 'doctorDistributionId',
  drugId: 'drugId',
  fromInventoryId: 'fromInventoryId',
  quantity: 'quantity',
  unitCost: 'unitCost',
  totalCost: 'totalCost',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DoctorDistributionGiftItemScalarFieldEnum = {
  id: 'id',
  doctorDistributionId: 'doctorDistributionId',
  giftId: 'giftId',
  fromInventoryId: 'fromInventoryId',
  quantity: 'quantity',
  unitCost: 'unitCost',
  totalCost: 'totalCost',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  employeeId: 'employeeId',
  tableName: 'tableName',
  actionType: 'actionType',
  recordId: 'recordId',
  oldValues: 'oldValues',
  newValues: 'newValues',
  ipAddress: 'ipAddress',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.EmployeeRole = exports.$Enums.EmployeeRole = {
  MEDICAL_REPRESENTATIVE: 'MEDICAL_REPRESENTATIVE',
  SALES_MANAGER: 'SALES_MANAGER',
  SYSTEM_ADMINISTRATOR: 'SYSTEM_ADMINISTRATOR'
};

exports.DayOfWeek = exports.$Enums.DayOfWeek = {
  MONDAY: 'MONDAY',
  TUESDAY: 'TUESDAY',
  WEDNESDAY: 'WEDNESDAY',
  THURSDAY: 'THURSDAY',
  FRIDAY: 'FRIDAY',
  SATURDAY: 'SATURDAY',
  SUNDAY: 'SUNDAY'
};

exports.ConsultationType = exports.$Enums.ConsultationType = {
  OPD: 'OPD',
  EMERGENCY: 'EMERGENCY',
  SURGERY: 'SURGERY',
  SPECIAL: 'SPECIAL'
};

exports.InteractionType = exports.$Enums.InteractionType = {
  MEETING: 'MEETING',
  CALL: 'CALL',
  EMAIL: 'EMAIL',
  WHATSAPP: 'WHATSAPP'
};

exports.ChemistType = exports.$Enums.ChemistType = {
  CHEMIST: 'CHEMIST',
  STOCKIST: 'STOCKIST'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  CONFIRMED: 'CONFIRMED',
  DRAFT: 'DRAFT'
};

exports.TaskTypeReference = exports.$Enums.TaskTypeReference = {
  DOCTOR_TASK: 'DOCTOR_TASK',
  CHEMIST_TASK: 'CHEMIST_TASK',
  TOUR_PLAN_TASK: 'TOUR_PLAN_TASK'
};

exports.ReportingPeriod = exports.$Enums.ReportingPeriod = {
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY'
};

exports.TaskPlannerStatus = exports.$Enums.TaskPlannerStatus = {
  DRAFT: 'DRAFT',
  PENDING_APPROVAL: 'PENDING_APPROVAL',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.TaskStatus = exports.$Enums.TaskStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  RESCHEDULED: 'RESCHEDULED'
};

exports.ExpenseClaimStatus = exports.$Enums.ExpenseClaimStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.Prisma.ModelName = {
  Employee: 'Employee',
  Team: 'Team',
  Territory: 'Territory',
  EmployeeTerritory: 'EmployeeTerritory',
  EmployeeTrainingRecord: 'EmployeeTrainingRecord',
  HospitalChain: 'HospitalChain',
  ChemistChain: 'ChemistChain',
  Hospital: 'Hospital',
  Doctor: 'Doctor',
  DoctorHospitalAssociation: 'DoctorHospitalAssociation',
  DoctorConsultationSchedule: 'DoctorConsultationSchedule',
  DoctorNote: 'DoctorNote',
  DoctorInteraction: 'DoctorInteraction',
  Drug: 'Drug',
  Chemist: 'Chemist',
  ChemistNote: 'ChemistNote',
  ChemistInteraction: 'ChemistInteraction',
  DoctorChemistRelation: 'DoctorChemistRelation',
  Order: 'Order',
  OrderItem: 'OrderItem',
  DcrReport: 'DcrReport',
  RcpaReport: 'RcpaReport',
  RcpaDrugData: 'RcpaDrugData',
  CheckIn: 'CheckIn',
  TaskPlanner: 'TaskPlanner',
  DoctorTask: 'DoctorTask',
  ChemistTask: 'ChemistTask',
  TourPlanTask: 'TourPlanTask',
  TourPlan: 'TourPlan',
  TourPlanReport: 'TourPlanReport',
  ExpenseType: 'ExpenseType',
  ExpenseRoleConfig: 'ExpenseRoleConfig',
  ExpenseClaim: 'ExpenseClaim',
  Gift: 'Gift',
  UserDrugInventory: 'UserDrugInventory',
  UserGiftInventory: 'UserGiftInventory',
  DoctorDistribution: 'DoctorDistribution',
  DoctorDistributionDrugItem: 'DoctorDistributionDrugItem',
  DoctorDistributionGiftItem: 'DoctorDistributionGiftItem',
  AuditLog: 'AuditLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
