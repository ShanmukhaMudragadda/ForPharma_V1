
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Employee
 * 
 */
export type Employee = $Result.DefaultSelection<Prisma.$EmployeePayload>
/**
 * Model Team
 * 
 */
export type Team = $Result.DefaultSelection<Prisma.$TeamPayload>
/**
 * Model Territory
 * 
 */
export type Territory = $Result.DefaultSelection<Prisma.$TerritoryPayload>
/**
 * Model EmployeeTerritory
 * 
 */
export type EmployeeTerritory = $Result.DefaultSelection<Prisma.$EmployeeTerritoryPayload>
/**
 * Model EmployeeTrainingRecord
 * 
 */
export type EmployeeTrainingRecord = $Result.DefaultSelection<Prisma.$EmployeeTrainingRecordPayload>
/**
 * Model HospitalChain
 * 
 */
export type HospitalChain = $Result.DefaultSelection<Prisma.$HospitalChainPayload>
/**
 * Model ChemistChain
 * 
 */
export type ChemistChain = $Result.DefaultSelection<Prisma.$ChemistChainPayload>
/**
 * Model Hospital
 * 
 */
export type Hospital = $Result.DefaultSelection<Prisma.$HospitalPayload>
/**
 * Model Doctor
 * 
 */
export type Doctor = $Result.DefaultSelection<Prisma.$DoctorPayload>
/**
 * Model DoctorHospitalAssociation
 * 
 */
export type DoctorHospitalAssociation = $Result.DefaultSelection<Prisma.$DoctorHospitalAssociationPayload>
/**
 * Model DoctorConsultationSchedule
 * 
 */
export type DoctorConsultationSchedule = $Result.DefaultSelection<Prisma.$DoctorConsultationSchedulePayload>
/**
 * Model DoctorNote
 * 
 */
export type DoctorNote = $Result.DefaultSelection<Prisma.$DoctorNotePayload>
/**
 * Model DoctorInteraction
 * 
 */
export type DoctorInteraction = $Result.DefaultSelection<Prisma.$DoctorInteractionPayload>
/**
 * Model Drug
 * 
 */
export type Drug = $Result.DefaultSelection<Prisma.$DrugPayload>
/**
 * Model Chemist
 * 
 */
export type Chemist = $Result.DefaultSelection<Prisma.$ChemistPayload>
/**
 * Model ChemistNote
 * 
 */
export type ChemistNote = $Result.DefaultSelection<Prisma.$ChemistNotePayload>
/**
 * Model ChemistInteraction
 * 
 */
export type ChemistInteraction = $Result.DefaultSelection<Prisma.$ChemistInteractionPayload>
/**
 * Model DoctorChemistRelation
 * 
 */
export type DoctorChemistRelation = $Result.DefaultSelection<Prisma.$DoctorChemistRelationPayload>
/**
 * Model Order
 * 
 */
export type Order = $Result.DefaultSelection<Prisma.$OrderPayload>
/**
 * Model OrderItem
 * 
 */
export type OrderItem = $Result.DefaultSelection<Prisma.$OrderItemPayload>
/**
 * Model DcrReport
 * 
 */
export type DcrReport = $Result.DefaultSelection<Prisma.$DcrReportPayload>
/**
 * Model RcpaReport
 * 
 */
export type RcpaReport = $Result.DefaultSelection<Prisma.$RcpaReportPayload>
/**
 * Model RcpaDrugData
 * 
 */
export type RcpaDrugData = $Result.DefaultSelection<Prisma.$RcpaDrugDataPayload>
/**
 * Model CheckIn
 * 
 */
export type CheckIn = $Result.DefaultSelection<Prisma.$CheckInPayload>
/**
 * Model TaskPlanner
 * 
 */
export type TaskPlanner = $Result.DefaultSelection<Prisma.$TaskPlannerPayload>
/**
 * Model DoctorTask
 * 
 */
export type DoctorTask = $Result.DefaultSelection<Prisma.$DoctorTaskPayload>
/**
 * Model ChemistTask
 * 
 */
export type ChemistTask = $Result.DefaultSelection<Prisma.$ChemistTaskPayload>
/**
 * Model TourPlanTask
 * 
 */
export type TourPlanTask = $Result.DefaultSelection<Prisma.$TourPlanTaskPayload>
/**
 * Model TourPlan
 * 
 */
export type TourPlan = $Result.DefaultSelection<Prisma.$TourPlanPayload>
/**
 * Model TourPlanReport
 * 
 */
export type TourPlanReport = $Result.DefaultSelection<Prisma.$TourPlanReportPayload>
/**
 * Model ExpenseType
 * 
 */
export type ExpenseType = $Result.DefaultSelection<Prisma.$ExpenseTypePayload>
/**
 * Model ExpenseRoleConfig
 * 
 */
export type ExpenseRoleConfig = $Result.DefaultSelection<Prisma.$ExpenseRoleConfigPayload>
/**
 * Model ExpenseClaim
 * 
 */
export type ExpenseClaim = $Result.DefaultSelection<Prisma.$ExpenseClaimPayload>
/**
 * Model Gift
 * 
 */
export type Gift = $Result.DefaultSelection<Prisma.$GiftPayload>
/**
 * Model UserDrugInventory
 * 
 */
export type UserDrugInventory = $Result.DefaultSelection<Prisma.$UserDrugInventoryPayload>
/**
 * Model UserGiftInventory
 * 
 */
export type UserGiftInventory = $Result.DefaultSelection<Prisma.$UserGiftInventoryPayload>
/**
 * Model DoctorDistribution
 * 
 */
export type DoctorDistribution = $Result.DefaultSelection<Prisma.$DoctorDistributionPayload>
/**
 * Model DoctorDistributionDrugItem
 * 
 */
export type DoctorDistributionDrugItem = $Result.DefaultSelection<Prisma.$DoctorDistributionDrugItemPayload>
/**
 * Model DoctorDistributionGiftItem
 * 
 */
export type DoctorDistributionGiftItem = $Result.DefaultSelection<Prisma.$DoctorDistributionGiftItemPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const EmployeeRole: {
  MEDICAL_REPRESENTATIVE: 'MEDICAL_REPRESENTATIVE',
  SALES_MANAGER: 'SALES_MANAGER',
  SYSTEM_ADMINISTRATOR: 'SYSTEM_ADMINISTRATOR'
};

export type EmployeeRole = (typeof EmployeeRole)[keyof typeof EmployeeRole]


export const TaskType: {
  DOCTOR: 'DOCTOR',
  CHEMIST: 'CHEMIST',
  TOUR_PLANNER: 'TOUR_PLANNER'
};

export type TaskType = (typeof TaskType)[keyof typeof TaskType]


export const TaskStatus: {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  RESCHEDULED: 'RESCHEDULED'
};

export type TaskStatus = (typeof TaskStatus)[keyof typeof TaskStatus]


export const AssociationType: {
  DOCTOR: 'DOCTOR',
  CHEMIST: 'CHEMIST'
};

export type AssociationType = (typeof AssociationType)[keyof typeof AssociationType]


export const DayOfWeek: {
  MONDAY: 'MONDAY',
  TUESDAY: 'TUESDAY',
  WEDNESDAY: 'WEDNESDAY',
  THURSDAY: 'THURSDAY',
  FRIDAY: 'FRIDAY',
  SATURDAY: 'SATURDAY',
  SUNDAY: 'SUNDAY'
};

export type DayOfWeek = (typeof DayOfWeek)[keyof typeof DayOfWeek]


export const ConsultationType: {
  OPD: 'OPD',
  EMERGENCY: 'EMERGENCY',
  SURGERY: 'SURGERY',
  SPECIAL: 'SPECIAL'
};

export type ConsultationType = (typeof ConsultationType)[keyof typeof ConsultationType]


export const InteractionType: {
  MEETING: 'MEETING',
  CALL: 'CALL',
  EMAIL: 'EMAIL',
  WHATSAPP: 'WHATSAPP'
};

export type InteractionType = (typeof InteractionType)[keyof typeof InteractionType]


export const OrderStatus: {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  DISPATCHED: 'DISPATCHED',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED'
};

export type OrderStatus = (typeof OrderStatus)[keyof typeof OrderStatus]


export const EventType: {
  MEETING: 'MEETING',
  VISIT: 'VISIT',
  TRAINING: 'TRAINING',
  OTHER: 'OTHER'
};

export type EventType = (typeof EventType)[keyof typeof EventType]


export const EventStatus: {
  SCHEDULED: 'SCHEDULED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  RESCHEDULED: 'RESCHEDULED'
};

export type EventStatus = (typeof EventStatus)[keyof typeof EventStatus]


export const ExpenseClaimStatus: {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

export type ExpenseClaimStatus = (typeof ExpenseClaimStatus)[keyof typeof ExpenseClaimStatus]


export const TaskPlannerStatus: {
  DRAFT: 'DRAFT',
  PENDING_APPROVAL: 'PENDING_APPROVAL',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

export type TaskPlannerStatus = (typeof TaskPlannerStatus)[keyof typeof TaskPlannerStatus]


export const TaskTypeReference: {
  DOCTOR_TASK: 'DOCTOR_TASK',
  CHEMIST_TASK: 'CHEMIST_TASK',
  TOUR_PLAN_TASK: 'TOUR_PLAN_TASK'
};

export type TaskTypeReference = (typeof TaskTypeReference)[keyof typeof TaskTypeReference]


export const ChemistType: {
  CHEMIST: 'CHEMIST',
  STOCKIST: 'STOCKIST'
};

export type ChemistType = (typeof ChemistType)[keyof typeof ChemistType]

}

export type EmployeeRole = $Enums.EmployeeRole

export const EmployeeRole: typeof $Enums.EmployeeRole

export type TaskType = $Enums.TaskType

export const TaskType: typeof $Enums.TaskType

export type TaskStatus = $Enums.TaskStatus

export const TaskStatus: typeof $Enums.TaskStatus

export type AssociationType = $Enums.AssociationType

export const AssociationType: typeof $Enums.AssociationType

export type DayOfWeek = $Enums.DayOfWeek

export const DayOfWeek: typeof $Enums.DayOfWeek

export type ConsultationType = $Enums.ConsultationType

export const ConsultationType: typeof $Enums.ConsultationType

export type InteractionType = $Enums.InteractionType

export const InteractionType: typeof $Enums.InteractionType

export type OrderStatus = $Enums.OrderStatus

export const OrderStatus: typeof $Enums.OrderStatus

export type EventType = $Enums.EventType

export const EventType: typeof $Enums.EventType

export type EventStatus = $Enums.EventStatus

export const EventStatus: typeof $Enums.EventStatus

export type ExpenseClaimStatus = $Enums.ExpenseClaimStatus

export const ExpenseClaimStatus: typeof $Enums.ExpenseClaimStatus

export type TaskPlannerStatus = $Enums.TaskPlannerStatus

export const TaskPlannerStatus: typeof $Enums.TaskPlannerStatus

export type TaskTypeReference = $Enums.TaskTypeReference

export const TaskTypeReference: typeof $Enums.TaskTypeReference

export type ChemistType = $Enums.ChemistType

export const ChemistType: typeof $Enums.ChemistType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Employees
 * const employees = await prisma.employee.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Employees
   * const employees = await prisma.employee.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.employee`: Exposes CRUD operations for the **Employee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Employees
    * const employees = await prisma.employee.findMany()
    * ```
    */
  get employee(): Prisma.EmployeeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.team`: Exposes CRUD operations for the **Team** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.team.findMany()
    * ```
    */
  get team(): Prisma.TeamDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.territory`: Exposes CRUD operations for the **Territory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Territories
    * const territories = await prisma.territory.findMany()
    * ```
    */
  get territory(): Prisma.TerritoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.employeeTerritory`: Exposes CRUD operations for the **EmployeeTerritory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmployeeTerritories
    * const employeeTerritories = await prisma.employeeTerritory.findMany()
    * ```
    */
  get employeeTerritory(): Prisma.EmployeeTerritoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.employeeTrainingRecord`: Exposes CRUD operations for the **EmployeeTrainingRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmployeeTrainingRecords
    * const employeeTrainingRecords = await prisma.employeeTrainingRecord.findMany()
    * ```
    */
  get employeeTrainingRecord(): Prisma.EmployeeTrainingRecordDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.hospitalChain`: Exposes CRUD operations for the **HospitalChain** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HospitalChains
    * const hospitalChains = await prisma.hospitalChain.findMany()
    * ```
    */
  get hospitalChain(): Prisma.HospitalChainDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chemistChain`: Exposes CRUD operations for the **ChemistChain** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChemistChains
    * const chemistChains = await prisma.chemistChain.findMany()
    * ```
    */
  get chemistChain(): Prisma.ChemistChainDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.hospital`: Exposes CRUD operations for the **Hospital** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Hospitals
    * const hospitals = await prisma.hospital.findMany()
    * ```
    */
  get hospital(): Prisma.HospitalDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.doctor`: Exposes CRUD operations for the **Doctor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Doctors
    * const doctors = await prisma.doctor.findMany()
    * ```
    */
  get doctor(): Prisma.DoctorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.doctorHospitalAssociation`: Exposes CRUD operations for the **DoctorHospitalAssociation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DoctorHospitalAssociations
    * const doctorHospitalAssociations = await prisma.doctorHospitalAssociation.findMany()
    * ```
    */
  get doctorHospitalAssociation(): Prisma.DoctorHospitalAssociationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.doctorConsultationSchedule`: Exposes CRUD operations for the **DoctorConsultationSchedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DoctorConsultationSchedules
    * const doctorConsultationSchedules = await prisma.doctorConsultationSchedule.findMany()
    * ```
    */
  get doctorConsultationSchedule(): Prisma.DoctorConsultationScheduleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.doctorNote`: Exposes CRUD operations for the **DoctorNote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DoctorNotes
    * const doctorNotes = await prisma.doctorNote.findMany()
    * ```
    */
  get doctorNote(): Prisma.DoctorNoteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.doctorInteraction`: Exposes CRUD operations for the **DoctorInteraction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DoctorInteractions
    * const doctorInteractions = await prisma.doctorInteraction.findMany()
    * ```
    */
  get doctorInteraction(): Prisma.DoctorInteractionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.drug`: Exposes CRUD operations for the **Drug** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Drugs
    * const drugs = await prisma.drug.findMany()
    * ```
    */
  get drug(): Prisma.DrugDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chemist`: Exposes CRUD operations for the **Chemist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chemists
    * const chemists = await prisma.chemist.findMany()
    * ```
    */
  get chemist(): Prisma.ChemistDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chemistNote`: Exposes CRUD operations for the **ChemistNote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChemistNotes
    * const chemistNotes = await prisma.chemistNote.findMany()
    * ```
    */
  get chemistNote(): Prisma.ChemistNoteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chemistInteraction`: Exposes CRUD operations for the **ChemistInteraction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChemistInteractions
    * const chemistInteractions = await prisma.chemistInteraction.findMany()
    * ```
    */
  get chemistInteraction(): Prisma.ChemistInteractionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.doctorChemistRelation`: Exposes CRUD operations for the **DoctorChemistRelation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DoctorChemistRelations
    * const doctorChemistRelations = await prisma.doctorChemistRelation.findMany()
    * ```
    */
  get doctorChemistRelation(): Prisma.DoctorChemistRelationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.orderItem`: Exposes CRUD operations for the **OrderItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderItems
    * const orderItems = await prisma.orderItem.findMany()
    * ```
    */
  get orderItem(): Prisma.OrderItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.dcrReport`: Exposes CRUD operations for the **DcrReport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DcrReports
    * const dcrReports = await prisma.dcrReport.findMany()
    * ```
    */
  get dcrReport(): Prisma.DcrReportDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rcpaReport`: Exposes CRUD operations for the **RcpaReport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RcpaReports
    * const rcpaReports = await prisma.rcpaReport.findMany()
    * ```
    */
  get rcpaReport(): Prisma.RcpaReportDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rcpaDrugData`: Exposes CRUD operations for the **RcpaDrugData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RcpaDrugData
    * const rcpaDrugData = await prisma.rcpaDrugData.findMany()
    * ```
    */
  get rcpaDrugData(): Prisma.RcpaDrugDataDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.checkIn`: Exposes CRUD operations for the **CheckIn** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CheckIns
    * const checkIns = await prisma.checkIn.findMany()
    * ```
    */
  get checkIn(): Prisma.CheckInDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.taskPlanner`: Exposes CRUD operations for the **TaskPlanner** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TaskPlanners
    * const taskPlanners = await prisma.taskPlanner.findMany()
    * ```
    */
  get taskPlanner(): Prisma.TaskPlannerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.doctorTask`: Exposes CRUD operations for the **DoctorTask** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DoctorTasks
    * const doctorTasks = await prisma.doctorTask.findMany()
    * ```
    */
  get doctorTask(): Prisma.DoctorTaskDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chemistTask`: Exposes CRUD operations for the **ChemistTask** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChemistTasks
    * const chemistTasks = await prisma.chemistTask.findMany()
    * ```
    */
  get chemistTask(): Prisma.ChemistTaskDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tourPlanTask`: Exposes CRUD operations for the **TourPlanTask** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TourPlanTasks
    * const tourPlanTasks = await prisma.tourPlanTask.findMany()
    * ```
    */
  get tourPlanTask(): Prisma.TourPlanTaskDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tourPlan`: Exposes CRUD operations for the **TourPlan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TourPlans
    * const tourPlans = await prisma.tourPlan.findMany()
    * ```
    */
  get tourPlan(): Prisma.TourPlanDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tourPlanReport`: Exposes CRUD operations for the **TourPlanReport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TourPlanReports
    * const tourPlanReports = await prisma.tourPlanReport.findMany()
    * ```
    */
  get tourPlanReport(): Prisma.TourPlanReportDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.expenseType`: Exposes CRUD operations for the **ExpenseType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExpenseTypes
    * const expenseTypes = await prisma.expenseType.findMany()
    * ```
    */
  get expenseType(): Prisma.ExpenseTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.expenseRoleConfig`: Exposes CRUD operations for the **ExpenseRoleConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExpenseRoleConfigs
    * const expenseRoleConfigs = await prisma.expenseRoleConfig.findMany()
    * ```
    */
  get expenseRoleConfig(): Prisma.ExpenseRoleConfigDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.expenseClaim`: Exposes CRUD operations for the **ExpenseClaim** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExpenseClaims
    * const expenseClaims = await prisma.expenseClaim.findMany()
    * ```
    */
  get expenseClaim(): Prisma.ExpenseClaimDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gift`: Exposes CRUD operations for the **Gift** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Gifts
    * const gifts = await prisma.gift.findMany()
    * ```
    */
  get gift(): Prisma.GiftDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userDrugInventory`: Exposes CRUD operations for the **UserDrugInventory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserDrugInventories
    * const userDrugInventories = await prisma.userDrugInventory.findMany()
    * ```
    */
  get userDrugInventory(): Prisma.UserDrugInventoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userGiftInventory`: Exposes CRUD operations for the **UserGiftInventory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserGiftInventories
    * const userGiftInventories = await prisma.userGiftInventory.findMany()
    * ```
    */
  get userGiftInventory(): Prisma.UserGiftInventoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.doctorDistribution`: Exposes CRUD operations for the **DoctorDistribution** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DoctorDistributions
    * const doctorDistributions = await prisma.doctorDistribution.findMany()
    * ```
    */
  get doctorDistribution(): Prisma.DoctorDistributionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.doctorDistributionDrugItem`: Exposes CRUD operations for the **DoctorDistributionDrugItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DoctorDistributionDrugItems
    * const doctorDistributionDrugItems = await prisma.doctorDistributionDrugItem.findMany()
    * ```
    */
  get doctorDistributionDrugItem(): Prisma.DoctorDistributionDrugItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.doctorDistributionGiftItem`: Exposes CRUD operations for the **DoctorDistributionGiftItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DoctorDistributionGiftItems
    * const doctorDistributionGiftItems = await prisma.doctorDistributionGiftItem.findMany()
    * ```
    */
  get doctorDistributionGiftItem(): Prisma.DoctorDistributionGiftItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.12.0
   * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Employee: 'Employee',
    Team: 'Team',
    Territory: 'Territory',
    EmployeeTerritory: 'EmployeeTerritory',
    EmployeeTrainingRecord: 'EmployeeTrainingRecord',
    HospitalChain: 'HospitalChain',
    ChemistChain: 'ChemistChain',
    Hospital: 'Hospital',
    Doctor: 'Doctor',
    DoctorHospitalAssociation: 'DoctorHospitalAssociation',
    DoctorConsultationSchedule: 'DoctorConsultationSchedule',
    DoctorNote: 'DoctorNote',
    DoctorInteraction: 'DoctorInteraction',
    Drug: 'Drug',
    Chemist: 'Chemist',
    ChemistNote: 'ChemistNote',
    ChemistInteraction: 'ChemistInteraction',
    DoctorChemistRelation: 'DoctorChemistRelation',
    Order: 'Order',
    OrderItem: 'OrderItem',
    DcrReport: 'DcrReport',
    RcpaReport: 'RcpaReport',
    RcpaDrugData: 'RcpaDrugData',
    CheckIn: 'CheckIn',
    TaskPlanner: 'TaskPlanner',
    DoctorTask: 'DoctorTask',
    ChemistTask: 'ChemistTask',
    TourPlanTask: 'TourPlanTask',
    TourPlan: 'TourPlan',
    TourPlanReport: 'TourPlanReport',
    ExpenseType: 'ExpenseType',
    ExpenseRoleConfig: 'ExpenseRoleConfig',
    ExpenseClaim: 'ExpenseClaim',
    Gift: 'Gift',
    UserDrugInventory: 'UserDrugInventory',
    UserGiftInventory: 'UserGiftInventory',
    DoctorDistribution: 'DoctorDistribution',
    DoctorDistributionDrugItem: 'DoctorDistributionDrugItem',
    DoctorDistributionGiftItem: 'DoctorDistributionGiftItem',
    AuditLog: 'AuditLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "employee" | "team" | "territory" | "employeeTerritory" | "employeeTrainingRecord" | "hospitalChain" | "chemistChain" | "hospital" | "doctor" | "doctorHospitalAssociation" | "doctorConsultationSchedule" | "doctorNote" | "doctorInteraction" | "drug" | "chemist" | "chemistNote" | "chemistInteraction" | "doctorChemistRelation" | "order" | "orderItem" | "dcrReport" | "rcpaReport" | "rcpaDrugData" | "checkIn" | "taskPlanner" | "doctorTask" | "chemistTask" | "tourPlanTask" | "tourPlan" | "tourPlanReport" | "expenseType" | "expenseRoleConfig" | "expenseClaim" | "gift" | "userDrugInventory" | "userGiftInventory" | "doctorDistribution" | "doctorDistributionDrugItem" | "doctorDistributionGiftItem" | "auditLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Employee: {
        payload: Prisma.$EmployeePayload<ExtArgs>
        fields: Prisma.EmployeeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmployeeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmployeeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findFirst: {
            args: Prisma.EmployeeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmployeeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findMany: {
            args: Prisma.EmployeeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          create: {
            args: Prisma.EmployeeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          createMany: {
            args: Prisma.EmployeeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmployeeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          delete: {
            args: Prisma.EmployeeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          update: {
            args: Prisma.EmployeeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          deleteMany: {
            args: Prisma.EmployeeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmployeeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmployeeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          upsert: {
            args: Prisma.EmployeeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          aggregate: {
            args: Prisma.EmployeeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmployee>
          }
          groupBy: {
            args: Prisma.EmployeeGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmployeeGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmployeeCountArgs<ExtArgs>
            result: $Utils.Optional<EmployeeCountAggregateOutputType> | number
          }
        }
      }
      Team: {
        payload: Prisma.$TeamPayload<ExtArgs>
        fields: Prisma.TeamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findFirst: {
            args: Prisma.TeamFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findMany: {
            args: Prisma.TeamFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          create: {
            args: Prisma.TeamCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          createMany: {
            args: Prisma.TeamCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeamCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          delete: {
            args: Prisma.TeamDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          update: {
            args: Prisma.TeamUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          deleteMany: {
            args: Prisma.TeamDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeamUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          upsert: {
            args: Prisma.TeamUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          aggregate: {
            args: Prisma.TeamAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeam>
          }
          groupBy: {
            args: Prisma.TeamGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamCountArgs<ExtArgs>
            result: $Utils.Optional<TeamCountAggregateOutputType> | number
          }
        }
      }
      Territory: {
        payload: Prisma.$TerritoryPayload<ExtArgs>
        fields: Prisma.TerritoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TerritoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerritoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TerritoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerritoryPayload>
          }
          findFirst: {
            args: Prisma.TerritoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerritoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TerritoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerritoryPayload>
          }
          findMany: {
            args: Prisma.TerritoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerritoryPayload>[]
          }
          create: {
            args: Prisma.TerritoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerritoryPayload>
          }
          createMany: {
            args: Prisma.TerritoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TerritoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerritoryPayload>[]
          }
          delete: {
            args: Prisma.TerritoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerritoryPayload>
          }
          update: {
            args: Prisma.TerritoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerritoryPayload>
          }
          deleteMany: {
            args: Prisma.TerritoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TerritoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TerritoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerritoryPayload>[]
          }
          upsert: {
            args: Prisma.TerritoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerritoryPayload>
          }
          aggregate: {
            args: Prisma.TerritoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTerritory>
          }
          groupBy: {
            args: Prisma.TerritoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<TerritoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.TerritoryCountArgs<ExtArgs>
            result: $Utils.Optional<TerritoryCountAggregateOutputType> | number
          }
        }
      }
      EmployeeTerritory: {
        payload: Prisma.$EmployeeTerritoryPayload<ExtArgs>
        fields: Prisma.EmployeeTerritoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmployeeTerritoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTerritoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmployeeTerritoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTerritoryPayload>
          }
          findFirst: {
            args: Prisma.EmployeeTerritoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTerritoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmployeeTerritoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTerritoryPayload>
          }
          findMany: {
            args: Prisma.EmployeeTerritoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTerritoryPayload>[]
          }
          create: {
            args: Prisma.EmployeeTerritoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTerritoryPayload>
          }
          createMany: {
            args: Prisma.EmployeeTerritoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmployeeTerritoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTerritoryPayload>[]
          }
          delete: {
            args: Prisma.EmployeeTerritoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTerritoryPayload>
          }
          update: {
            args: Prisma.EmployeeTerritoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTerritoryPayload>
          }
          deleteMany: {
            args: Prisma.EmployeeTerritoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmployeeTerritoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmployeeTerritoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTerritoryPayload>[]
          }
          upsert: {
            args: Prisma.EmployeeTerritoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTerritoryPayload>
          }
          aggregate: {
            args: Prisma.EmployeeTerritoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmployeeTerritory>
          }
          groupBy: {
            args: Prisma.EmployeeTerritoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmployeeTerritoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmployeeTerritoryCountArgs<ExtArgs>
            result: $Utils.Optional<EmployeeTerritoryCountAggregateOutputType> | number
          }
        }
      }
      EmployeeTrainingRecord: {
        payload: Prisma.$EmployeeTrainingRecordPayload<ExtArgs>
        fields: Prisma.EmployeeTrainingRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmployeeTrainingRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTrainingRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmployeeTrainingRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTrainingRecordPayload>
          }
          findFirst: {
            args: Prisma.EmployeeTrainingRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTrainingRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmployeeTrainingRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTrainingRecordPayload>
          }
          findMany: {
            args: Prisma.EmployeeTrainingRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTrainingRecordPayload>[]
          }
          create: {
            args: Prisma.EmployeeTrainingRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTrainingRecordPayload>
          }
          createMany: {
            args: Prisma.EmployeeTrainingRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmployeeTrainingRecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTrainingRecordPayload>[]
          }
          delete: {
            args: Prisma.EmployeeTrainingRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTrainingRecordPayload>
          }
          update: {
            args: Prisma.EmployeeTrainingRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTrainingRecordPayload>
          }
          deleteMany: {
            args: Prisma.EmployeeTrainingRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmployeeTrainingRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmployeeTrainingRecordUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTrainingRecordPayload>[]
          }
          upsert: {
            args: Prisma.EmployeeTrainingRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTrainingRecordPayload>
          }
          aggregate: {
            args: Prisma.EmployeeTrainingRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmployeeTrainingRecord>
          }
          groupBy: {
            args: Prisma.EmployeeTrainingRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmployeeTrainingRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmployeeTrainingRecordCountArgs<ExtArgs>
            result: $Utils.Optional<EmployeeTrainingRecordCountAggregateOutputType> | number
          }
        }
      }
      HospitalChain: {
        payload: Prisma.$HospitalChainPayload<ExtArgs>
        fields: Prisma.HospitalChainFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HospitalChainFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HospitalChainPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HospitalChainFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HospitalChainPayload>
          }
          findFirst: {
            args: Prisma.HospitalChainFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HospitalChainPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HospitalChainFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HospitalChainPayload>
          }
          findMany: {
            args: Prisma.HospitalChainFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HospitalChainPayload>[]
          }
          create: {
            args: Prisma.HospitalChainCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HospitalChainPayload>
          }
          createMany: {
            args: Prisma.HospitalChainCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HospitalChainCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HospitalChainPayload>[]
          }
          delete: {
            args: Prisma.HospitalChainDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HospitalChainPayload>
          }
          update: {
            args: Prisma.HospitalChainUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HospitalChainPayload>
          }
          deleteMany: {
            args: Prisma.HospitalChainDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HospitalChainUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HospitalChainUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HospitalChainPayload>[]
          }
          upsert: {
            args: Prisma.HospitalChainUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HospitalChainPayload>
          }
          aggregate: {
            args: Prisma.HospitalChainAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHospitalChain>
          }
          groupBy: {
            args: Prisma.HospitalChainGroupByArgs<ExtArgs>
            result: $Utils.Optional<HospitalChainGroupByOutputType>[]
          }
          count: {
            args: Prisma.HospitalChainCountArgs<ExtArgs>
            result: $Utils.Optional<HospitalChainCountAggregateOutputType> | number
          }
        }
      }
      ChemistChain: {
        payload: Prisma.$ChemistChainPayload<ExtArgs>
        fields: Prisma.ChemistChainFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChemistChainFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistChainPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChemistChainFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistChainPayload>
          }
          findFirst: {
            args: Prisma.ChemistChainFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistChainPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChemistChainFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistChainPayload>
          }
          findMany: {
            args: Prisma.ChemistChainFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistChainPayload>[]
          }
          create: {
            args: Prisma.ChemistChainCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistChainPayload>
          }
          createMany: {
            args: Prisma.ChemistChainCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChemistChainCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistChainPayload>[]
          }
          delete: {
            args: Prisma.ChemistChainDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistChainPayload>
          }
          update: {
            args: Prisma.ChemistChainUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistChainPayload>
          }
          deleteMany: {
            args: Prisma.ChemistChainDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChemistChainUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChemistChainUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistChainPayload>[]
          }
          upsert: {
            args: Prisma.ChemistChainUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistChainPayload>
          }
          aggregate: {
            args: Prisma.ChemistChainAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChemistChain>
          }
          groupBy: {
            args: Prisma.ChemistChainGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChemistChainGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChemistChainCountArgs<ExtArgs>
            result: $Utils.Optional<ChemistChainCountAggregateOutputType> | number
          }
        }
      }
      Hospital: {
        payload: Prisma.$HospitalPayload<ExtArgs>
        fields: Prisma.HospitalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HospitalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HospitalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HospitalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HospitalPayload>
          }
          findFirst: {
            args: Prisma.HospitalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HospitalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HospitalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HospitalPayload>
          }
          findMany: {
            args: Prisma.HospitalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HospitalPayload>[]
          }
          create: {
            args: Prisma.HospitalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HospitalPayload>
          }
          createMany: {
            args: Prisma.HospitalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HospitalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HospitalPayload>[]
          }
          delete: {
            args: Prisma.HospitalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HospitalPayload>
          }
          update: {
            args: Prisma.HospitalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HospitalPayload>
          }
          deleteMany: {
            args: Prisma.HospitalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HospitalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HospitalUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HospitalPayload>[]
          }
          upsert: {
            args: Prisma.HospitalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HospitalPayload>
          }
          aggregate: {
            args: Prisma.HospitalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHospital>
          }
          groupBy: {
            args: Prisma.HospitalGroupByArgs<ExtArgs>
            result: $Utils.Optional<HospitalGroupByOutputType>[]
          }
          count: {
            args: Prisma.HospitalCountArgs<ExtArgs>
            result: $Utils.Optional<HospitalCountAggregateOutputType> | number
          }
        }
      }
      Doctor: {
        payload: Prisma.$DoctorPayload<ExtArgs>
        fields: Prisma.DoctorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DoctorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DoctorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          findFirst: {
            args: Prisma.DoctorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DoctorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          findMany: {
            args: Prisma.DoctorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>[]
          }
          create: {
            args: Prisma.DoctorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          createMany: {
            args: Prisma.DoctorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DoctorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>[]
          }
          delete: {
            args: Prisma.DoctorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          update: {
            args: Prisma.DoctorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          deleteMany: {
            args: Prisma.DoctorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DoctorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DoctorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>[]
          }
          upsert: {
            args: Prisma.DoctorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          aggregate: {
            args: Prisma.DoctorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDoctor>
          }
          groupBy: {
            args: Prisma.DoctorGroupByArgs<ExtArgs>
            result: $Utils.Optional<DoctorGroupByOutputType>[]
          }
          count: {
            args: Prisma.DoctorCountArgs<ExtArgs>
            result: $Utils.Optional<DoctorCountAggregateOutputType> | number
          }
        }
      }
      DoctorHospitalAssociation: {
        payload: Prisma.$DoctorHospitalAssociationPayload<ExtArgs>
        fields: Prisma.DoctorHospitalAssociationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DoctorHospitalAssociationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorHospitalAssociationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DoctorHospitalAssociationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorHospitalAssociationPayload>
          }
          findFirst: {
            args: Prisma.DoctorHospitalAssociationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorHospitalAssociationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DoctorHospitalAssociationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorHospitalAssociationPayload>
          }
          findMany: {
            args: Prisma.DoctorHospitalAssociationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorHospitalAssociationPayload>[]
          }
          create: {
            args: Prisma.DoctorHospitalAssociationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorHospitalAssociationPayload>
          }
          createMany: {
            args: Prisma.DoctorHospitalAssociationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DoctorHospitalAssociationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorHospitalAssociationPayload>[]
          }
          delete: {
            args: Prisma.DoctorHospitalAssociationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorHospitalAssociationPayload>
          }
          update: {
            args: Prisma.DoctorHospitalAssociationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorHospitalAssociationPayload>
          }
          deleteMany: {
            args: Prisma.DoctorHospitalAssociationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DoctorHospitalAssociationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DoctorHospitalAssociationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorHospitalAssociationPayload>[]
          }
          upsert: {
            args: Prisma.DoctorHospitalAssociationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorHospitalAssociationPayload>
          }
          aggregate: {
            args: Prisma.DoctorHospitalAssociationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDoctorHospitalAssociation>
          }
          groupBy: {
            args: Prisma.DoctorHospitalAssociationGroupByArgs<ExtArgs>
            result: $Utils.Optional<DoctorHospitalAssociationGroupByOutputType>[]
          }
          count: {
            args: Prisma.DoctorHospitalAssociationCountArgs<ExtArgs>
            result: $Utils.Optional<DoctorHospitalAssociationCountAggregateOutputType> | number
          }
        }
      }
      DoctorConsultationSchedule: {
        payload: Prisma.$DoctorConsultationSchedulePayload<ExtArgs>
        fields: Prisma.DoctorConsultationScheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DoctorConsultationScheduleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorConsultationSchedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DoctorConsultationScheduleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorConsultationSchedulePayload>
          }
          findFirst: {
            args: Prisma.DoctorConsultationScheduleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorConsultationSchedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DoctorConsultationScheduleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorConsultationSchedulePayload>
          }
          findMany: {
            args: Prisma.DoctorConsultationScheduleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorConsultationSchedulePayload>[]
          }
          create: {
            args: Prisma.DoctorConsultationScheduleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorConsultationSchedulePayload>
          }
          createMany: {
            args: Prisma.DoctorConsultationScheduleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DoctorConsultationScheduleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorConsultationSchedulePayload>[]
          }
          delete: {
            args: Prisma.DoctorConsultationScheduleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorConsultationSchedulePayload>
          }
          update: {
            args: Prisma.DoctorConsultationScheduleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorConsultationSchedulePayload>
          }
          deleteMany: {
            args: Prisma.DoctorConsultationScheduleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DoctorConsultationScheduleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DoctorConsultationScheduleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorConsultationSchedulePayload>[]
          }
          upsert: {
            args: Prisma.DoctorConsultationScheduleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorConsultationSchedulePayload>
          }
          aggregate: {
            args: Prisma.DoctorConsultationScheduleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDoctorConsultationSchedule>
          }
          groupBy: {
            args: Prisma.DoctorConsultationScheduleGroupByArgs<ExtArgs>
            result: $Utils.Optional<DoctorConsultationScheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.DoctorConsultationScheduleCountArgs<ExtArgs>
            result: $Utils.Optional<DoctorConsultationScheduleCountAggregateOutputType> | number
          }
        }
      }
      DoctorNote: {
        payload: Prisma.$DoctorNotePayload<ExtArgs>
        fields: Prisma.DoctorNoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DoctorNoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorNotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DoctorNoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorNotePayload>
          }
          findFirst: {
            args: Prisma.DoctorNoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorNotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DoctorNoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorNotePayload>
          }
          findMany: {
            args: Prisma.DoctorNoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorNotePayload>[]
          }
          create: {
            args: Prisma.DoctorNoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorNotePayload>
          }
          createMany: {
            args: Prisma.DoctorNoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DoctorNoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorNotePayload>[]
          }
          delete: {
            args: Prisma.DoctorNoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorNotePayload>
          }
          update: {
            args: Prisma.DoctorNoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorNotePayload>
          }
          deleteMany: {
            args: Prisma.DoctorNoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DoctorNoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DoctorNoteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorNotePayload>[]
          }
          upsert: {
            args: Prisma.DoctorNoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorNotePayload>
          }
          aggregate: {
            args: Prisma.DoctorNoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDoctorNote>
          }
          groupBy: {
            args: Prisma.DoctorNoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<DoctorNoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.DoctorNoteCountArgs<ExtArgs>
            result: $Utils.Optional<DoctorNoteCountAggregateOutputType> | number
          }
        }
      }
      DoctorInteraction: {
        payload: Prisma.$DoctorInteractionPayload<ExtArgs>
        fields: Prisma.DoctorInteractionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DoctorInteractionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorInteractionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DoctorInteractionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorInteractionPayload>
          }
          findFirst: {
            args: Prisma.DoctorInteractionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorInteractionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DoctorInteractionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorInteractionPayload>
          }
          findMany: {
            args: Prisma.DoctorInteractionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorInteractionPayload>[]
          }
          create: {
            args: Prisma.DoctorInteractionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorInteractionPayload>
          }
          createMany: {
            args: Prisma.DoctorInteractionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DoctorInteractionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorInteractionPayload>[]
          }
          delete: {
            args: Prisma.DoctorInteractionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorInteractionPayload>
          }
          update: {
            args: Prisma.DoctorInteractionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorInteractionPayload>
          }
          deleteMany: {
            args: Prisma.DoctorInteractionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DoctorInteractionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DoctorInteractionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorInteractionPayload>[]
          }
          upsert: {
            args: Prisma.DoctorInteractionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorInteractionPayload>
          }
          aggregate: {
            args: Prisma.DoctorInteractionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDoctorInteraction>
          }
          groupBy: {
            args: Prisma.DoctorInteractionGroupByArgs<ExtArgs>
            result: $Utils.Optional<DoctorInteractionGroupByOutputType>[]
          }
          count: {
            args: Prisma.DoctorInteractionCountArgs<ExtArgs>
            result: $Utils.Optional<DoctorInteractionCountAggregateOutputType> | number
          }
        }
      }
      Drug: {
        payload: Prisma.$DrugPayload<ExtArgs>
        fields: Prisma.DrugFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DrugFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrugPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DrugFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrugPayload>
          }
          findFirst: {
            args: Prisma.DrugFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrugPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DrugFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrugPayload>
          }
          findMany: {
            args: Prisma.DrugFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrugPayload>[]
          }
          create: {
            args: Prisma.DrugCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrugPayload>
          }
          createMany: {
            args: Prisma.DrugCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DrugCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrugPayload>[]
          }
          delete: {
            args: Prisma.DrugDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrugPayload>
          }
          update: {
            args: Prisma.DrugUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrugPayload>
          }
          deleteMany: {
            args: Prisma.DrugDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DrugUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DrugUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrugPayload>[]
          }
          upsert: {
            args: Prisma.DrugUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrugPayload>
          }
          aggregate: {
            args: Prisma.DrugAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDrug>
          }
          groupBy: {
            args: Prisma.DrugGroupByArgs<ExtArgs>
            result: $Utils.Optional<DrugGroupByOutputType>[]
          }
          count: {
            args: Prisma.DrugCountArgs<ExtArgs>
            result: $Utils.Optional<DrugCountAggregateOutputType> | number
          }
        }
      }
      Chemist: {
        payload: Prisma.$ChemistPayload<ExtArgs>
        fields: Prisma.ChemistFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChemistFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChemistFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistPayload>
          }
          findFirst: {
            args: Prisma.ChemistFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChemistFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistPayload>
          }
          findMany: {
            args: Prisma.ChemistFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistPayload>[]
          }
          create: {
            args: Prisma.ChemistCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistPayload>
          }
          createMany: {
            args: Prisma.ChemistCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChemistCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistPayload>[]
          }
          delete: {
            args: Prisma.ChemistDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistPayload>
          }
          update: {
            args: Prisma.ChemistUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistPayload>
          }
          deleteMany: {
            args: Prisma.ChemistDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChemistUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChemistUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistPayload>[]
          }
          upsert: {
            args: Prisma.ChemistUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistPayload>
          }
          aggregate: {
            args: Prisma.ChemistAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChemist>
          }
          groupBy: {
            args: Prisma.ChemistGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChemistGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChemistCountArgs<ExtArgs>
            result: $Utils.Optional<ChemistCountAggregateOutputType> | number
          }
        }
      }
      ChemistNote: {
        payload: Prisma.$ChemistNotePayload<ExtArgs>
        fields: Prisma.ChemistNoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChemistNoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistNotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChemistNoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistNotePayload>
          }
          findFirst: {
            args: Prisma.ChemistNoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistNotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChemistNoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistNotePayload>
          }
          findMany: {
            args: Prisma.ChemistNoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistNotePayload>[]
          }
          create: {
            args: Prisma.ChemistNoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistNotePayload>
          }
          createMany: {
            args: Prisma.ChemistNoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChemistNoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistNotePayload>[]
          }
          delete: {
            args: Prisma.ChemistNoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistNotePayload>
          }
          update: {
            args: Prisma.ChemistNoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistNotePayload>
          }
          deleteMany: {
            args: Prisma.ChemistNoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChemistNoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChemistNoteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistNotePayload>[]
          }
          upsert: {
            args: Prisma.ChemistNoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistNotePayload>
          }
          aggregate: {
            args: Prisma.ChemistNoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChemistNote>
          }
          groupBy: {
            args: Prisma.ChemistNoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChemistNoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChemistNoteCountArgs<ExtArgs>
            result: $Utils.Optional<ChemistNoteCountAggregateOutputType> | number
          }
        }
      }
      ChemistInteraction: {
        payload: Prisma.$ChemistInteractionPayload<ExtArgs>
        fields: Prisma.ChemistInteractionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChemistInteractionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistInteractionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChemistInteractionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistInteractionPayload>
          }
          findFirst: {
            args: Prisma.ChemistInteractionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistInteractionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChemistInteractionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistInteractionPayload>
          }
          findMany: {
            args: Prisma.ChemistInteractionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistInteractionPayload>[]
          }
          create: {
            args: Prisma.ChemistInteractionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistInteractionPayload>
          }
          createMany: {
            args: Prisma.ChemistInteractionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChemistInteractionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistInteractionPayload>[]
          }
          delete: {
            args: Prisma.ChemistInteractionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistInteractionPayload>
          }
          update: {
            args: Prisma.ChemistInteractionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistInteractionPayload>
          }
          deleteMany: {
            args: Prisma.ChemistInteractionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChemistInteractionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChemistInteractionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistInteractionPayload>[]
          }
          upsert: {
            args: Prisma.ChemistInteractionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistInteractionPayload>
          }
          aggregate: {
            args: Prisma.ChemistInteractionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChemistInteraction>
          }
          groupBy: {
            args: Prisma.ChemistInteractionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChemistInteractionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChemistInteractionCountArgs<ExtArgs>
            result: $Utils.Optional<ChemistInteractionCountAggregateOutputType> | number
          }
        }
      }
      DoctorChemistRelation: {
        payload: Prisma.$DoctorChemistRelationPayload<ExtArgs>
        fields: Prisma.DoctorChemistRelationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DoctorChemistRelationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorChemistRelationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DoctorChemistRelationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorChemistRelationPayload>
          }
          findFirst: {
            args: Prisma.DoctorChemistRelationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorChemistRelationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DoctorChemistRelationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorChemistRelationPayload>
          }
          findMany: {
            args: Prisma.DoctorChemistRelationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorChemistRelationPayload>[]
          }
          create: {
            args: Prisma.DoctorChemistRelationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorChemistRelationPayload>
          }
          createMany: {
            args: Prisma.DoctorChemistRelationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DoctorChemistRelationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorChemistRelationPayload>[]
          }
          delete: {
            args: Prisma.DoctorChemistRelationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorChemistRelationPayload>
          }
          update: {
            args: Prisma.DoctorChemistRelationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorChemistRelationPayload>
          }
          deleteMany: {
            args: Prisma.DoctorChemistRelationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DoctorChemistRelationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DoctorChemistRelationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorChemistRelationPayload>[]
          }
          upsert: {
            args: Prisma.DoctorChemistRelationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorChemistRelationPayload>
          }
          aggregate: {
            args: Prisma.DoctorChemistRelationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDoctorChemistRelation>
          }
          groupBy: {
            args: Prisma.DoctorChemistRelationGroupByArgs<ExtArgs>
            result: $Utils.Optional<DoctorChemistRelationGroupByOutputType>[]
          }
          count: {
            args: Prisma.DoctorChemistRelationCountArgs<ExtArgs>
            result: $Utils.Optional<DoctorChemistRelationCountAggregateOutputType> | number
          }
        }
      }
      Order: {
        payload: Prisma.$OrderPayload<ExtArgs>
        fields: Prisma.OrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findFirst: {
            args: Prisma.OrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findMany: {
            args: Prisma.OrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          create: {
            args: Prisma.OrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          createMany: {
            args: Prisma.OrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          delete: {
            args: Prisma.OrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          update: {
            args: Prisma.OrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          deleteMany: {
            args: Prisma.OrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          upsert: {
            args: Prisma.OrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          aggregate: {
            args: Prisma.OrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrder>
          }
          groupBy: {
            args: Prisma.OrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderCountArgs<ExtArgs>
            result: $Utils.Optional<OrderCountAggregateOutputType> | number
          }
        }
      }
      OrderItem: {
        payload: Prisma.$OrderItemPayload<ExtArgs>
        fields: Prisma.OrderItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          findFirst: {
            args: Prisma.OrderItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          findMany: {
            args: Prisma.OrderItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>[]
          }
          create: {
            args: Prisma.OrderItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          createMany: {
            args: Prisma.OrderItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>[]
          }
          delete: {
            args: Prisma.OrderItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          update: {
            args: Prisma.OrderItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          deleteMany: {
            args: Prisma.OrderItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrderItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>[]
          }
          upsert: {
            args: Prisma.OrderItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          aggregate: {
            args: Prisma.OrderItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrderItem>
          }
          groupBy: {
            args: Prisma.OrderItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderItemCountArgs<ExtArgs>
            result: $Utils.Optional<OrderItemCountAggregateOutputType> | number
          }
        }
      }
      DcrReport: {
        payload: Prisma.$DcrReportPayload<ExtArgs>
        fields: Prisma.DcrReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DcrReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DcrReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DcrReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DcrReportPayload>
          }
          findFirst: {
            args: Prisma.DcrReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DcrReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DcrReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DcrReportPayload>
          }
          findMany: {
            args: Prisma.DcrReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DcrReportPayload>[]
          }
          create: {
            args: Prisma.DcrReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DcrReportPayload>
          }
          createMany: {
            args: Prisma.DcrReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DcrReportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DcrReportPayload>[]
          }
          delete: {
            args: Prisma.DcrReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DcrReportPayload>
          }
          update: {
            args: Prisma.DcrReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DcrReportPayload>
          }
          deleteMany: {
            args: Prisma.DcrReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DcrReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DcrReportUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DcrReportPayload>[]
          }
          upsert: {
            args: Prisma.DcrReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DcrReportPayload>
          }
          aggregate: {
            args: Prisma.DcrReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDcrReport>
          }
          groupBy: {
            args: Prisma.DcrReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<DcrReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.DcrReportCountArgs<ExtArgs>
            result: $Utils.Optional<DcrReportCountAggregateOutputType> | number
          }
        }
      }
      RcpaReport: {
        payload: Prisma.$RcpaReportPayload<ExtArgs>
        fields: Prisma.RcpaReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RcpaReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RcpaReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RcpaReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RcpaReportPayload>
          }
          findFirst: {
            args: Prisma.RcpaReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RcpaReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RcpaReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RcpaReportPayload>
          }
          findMany: {
            args: Prisma.RcpaReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RcpaReportPayload>[]
          }
          create: {
            args: Prisma.RcpaReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RcpaReportPayload>
          }
          createMany: {
            args: Prisma.RcpaReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RcpaReportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RcpaReportPayload>[]
          }
          delete: {
            args: Prisma.RcpaReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RcpaReportPayload>
          }
          update: {
            args: Prisma.RcpaReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RcpaReportPayload>
          }
          deleteMany: {
            args: Prisma.RcpaReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RcpaReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RcpaReportUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RcpaReportPayload>[]
          }
          upsert: {
            args: Prisma.RcpaReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RcpaReportPayload>
          }
          aggregate: {
            args: Prisma.RcpaReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRcpaReport>
          }
          groupBy: {
            args: Prisma.RcpaReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<RcpaReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.RcpaReportCountArgs<ExtArgs>
            result: $Utils.Optional<RcpaReportCountAggregateOutputType> | number
          }
        }
      }
      RcpaDrugData: {
        payload: Prisma.$RcpaDrugDataPayload<ExtArgs>
        fields: Prisma.RcpaDrugDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RcpaDrugDataFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RcpaDrugDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RcpaDrugDataFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RcpaDrugDataPayload>
          }
          findFirst: {
            args: Prisma.RcpaDrugDataFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RcpaDrugDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RcpaDrugDataFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RcpaDrugDataPayload>
          }
          findMany: {
            args: Prisma.RcpaDrugDataFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RcpaDrugDataPayload>[]
          }
          create: {
            args: Prisma.RcpaDrugDataCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RcpaDrugDataPayload>
          }
          createMany: {
            args: Prisma.RcpaDrugDataCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RcpaDrugDataCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RcpaDrugDataPayload>[]
          }
          delete: {
            args: Prisma.RcpaDrugDataDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RcpaDrugDataPayload>
          }
          update: {
            args: Prisma.RcpaDrugDataUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RcpaDrugDataPayload>
          }
          deleteMany: {
            args: Prisma.RcpaDrugDataDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RcpaDrugDataUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RcpaDrugDataUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RcpaDrugDataPayload>[]
          }
          upsert: {
            args: Prisma.RcpaDrugDataUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RcpaDrugDataPayload>
          }
          aggregate: {
            args: Prisma.RcpaDrugDataAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRcpaDrugData>
          }
          groupBy: {
            args: Prisma.RcpaDrugDataGroupByArgs<ExtArgs>
            result: $Utils.Optional<RcpaDrugDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.RcpaDrugDataCountArgs<ExtArgs>
            result: $Utils.Optional<RcpaDrugDataCountAggregateOutputType> | number
          }
        }
      }
      CheckIn: {
        payload: Prisma.$CheckInPayload<ExtArgs>
        fields: Prisma.CheckInFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CheckInFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckInPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CheckInFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckInPayload>
          }
          findFirst: {
            args: Prisma.CheckInFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckInPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CheckInFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckInPayload>
          }
          findMany: {
            args: Prisma.CheckInFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckInPayload>[]
          }
          create: {
            args: Prisma.CheckInCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckInPayload>
          }
          createMany: {
            args: Prisma.CheckInCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CheckInCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckInPayload>[]
          }
          delete: {
            args: Prisma.CheckInDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckInPayload>
          }
          update: {
            args: Prisma.CheckInUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckInPayload>
          }
          deleteMany: {
            args: Prisma.CheckInDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CheckInUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CheckInUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckInPayload>[]
          }
          upsert: {
            args: Prisma.CheckInUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckInPayload>
          }
          aggregate: {
            args: Prisma.CheckInAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCheckIn>
          }
          groupBy: {
            args: Prisma.CheckInGroupByArgs<ExtArgs>
            result: $Utils.Optional<CheckInGroupByOutputType>[]
          }
          count: {
            args: Prisma.CheckInCountArgs<ExtArgs>
            result: $Utils.Optional<CheckInCountAggregateOutputType> | number
          }
        }
      }
      TaskPlanner: {
        payload: Prisma.$TaskPlannerPayload<ExtArgs>
        fields: Prisma.TaskPlannerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaskPlannerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPlannerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskPlannerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPlannerPayload>
          }
          findFirst: {
            args: Prisma.TaskPlannerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPlannerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskPlannerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPlannerPayload>
          }
          findMany: {
            args: Prisma.TaskPlannerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPlannerPayload>[]
          }
          create: {
            args: Prisma.TaskPlannerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPlannerPayload>
          }
          createMany: {
            args: Prisma.TaskPlannerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TaskPlannerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPlannerPayload>[]
          }
          delete: {
            args: Prisma.TaskPlannerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPlannerPayload>
          }
          update: {
            args: Prisma.TaskPlannerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPlannerPayload>
          }
          deleteMany: {
            args: Prisma.TaskPlannerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TaskPlannerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TaskPlannerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPlannerPayload>[]
          }
          upsert: {
            args: Prisma.TaskPlannerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPlannerPayload>
          }
          aggregate: {
            args: Prisma.TaskPlannerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTaskPlanner>
          }
          groupBy: {
            args: Prisma.TaskPlannerGroupByArgs<ExtArgs>
            result: $Utils.Optional<TaskPlannerGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaskPlannerCountArgs<ExtArgs>
            result: $Utils.Optional<TaskPlannerCountAggregateOutputType> | number
          }
        }
      }
      DoctorTask: {
        payload: Prisma.$DoctorTaskPayload<ExtArgs>
        fields: Prisma.DoctorTaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DoctorTaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorTaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DoctorTaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorTaskPayload>
          }
          findFirst: {
            args: Prisma.DoctorTaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorTaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DoctorTaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorTaskPayload>
          }
          findMany: {
            args: Prisma.DoctorTaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorTaskPayload>[]
          }
          create: {
            args: Prisma.DoctorTaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorTaskPayload>
          }
          createMany: {
            args: Prisma.DoctorTaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DoctorTaskCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorTaskPayload>[]
          }
          delete: {
            args: Prisma.DoctorTaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorTaskPayload>
          }
          update: {
            args: Prisma.DoctorTaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorTaskPayload>
          }
          deleteMany: {
            args: Prisma.DoctorTaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DoctorTaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DoctorTaskUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorTaskPayload>[]
          }
          upsert: {
            args: Prisma.DoctorTaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorTaskPayload>
          }
          aggregate: {
            args: Prisma.DoctorTaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDoctorTask>
          }
          groupBy: {
            args: Prisma.DoctorTaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<DoctorTaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.DoctorTaskCountArgs<ExtArgs>
            result: $Utils.Optional<DoctorTaskCountAggregateOutputType> | number
          }
        }
      }
      ChemistTask: {
        payload: Prisma.$ChemistTaskPayload<ExtArgs>
        fields: Prisma.ChemistTaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChemistTaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistTaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChemistTaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistTaskPayload>
          }
          findFirst: {
            args: Prisma.ChemistTaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistTaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChemistTaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistTaskPayload>
          }
          findMany: {
            args: Prisma.ChemistTaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistTaskPayload>[]
          }
          create: {
            args: Prisma.ChemistTaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistTaskPayload>
          }
          createMany: {
            args: Prisma.ChemistTaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChemistTaskCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistTaskPayload>[]
          }
          delete: {
            args: Prisma.ChemistTaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistTaskPayload>
          }
          update: {
            args: Prisma.ChemistTaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistTaskPayload>
          }
          deleteMany: {
            args: Prisma.ChemistTaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChemistTaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChemistTaskUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistTaskPayload>[]
          }
          upsert: {
            args: Prisma.ChemistTaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChemistTaskPayload>
          }
          aggregate: {
            args: Prisma.ChemistTaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChemistTask>
          }
          groupBy: {
            args: Prisma.ChemistTaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChemistTaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChemistTaskCountArgs<ExtArgs>
            result: $Utils.Optional<ChemistTaskCountAggregateOutputType> | number
          }
        }
      }
      TourPlanTask: {
        payload: Prisma.$TourPlanTaskPayload<ExtArgs>
        fields: Prisma.TourPlanTaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TourPlanTaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TourPlanTaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TourPlanTaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TourPlanTaskPayload>
          }
          findFirst: {
            args: Prisma.TourPlanTaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TourPlanTaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TourPlanTaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TourPlanTaskPayload>
          }
          findMany: {
            args: Prisma.TourPlanTaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TourPlanTaskPayload>[]
          }
          create: {
            args: Prisma.TourPlanTaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TourPlanTaskPayload>
          }
          createMany: {
            args: Prisma.TourPlanTaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TourPlanTaskCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TourPlanTaskPayload>[]
          }
          delete: {
            args: Prisma.TourPlanTaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TourPlanTaskPayload>
          }
          update: {
            args: Prisma.TourPlanTaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TourPlanTaskPayload>
          }
          deleteMany: {
            args: Prisma.TourPlanTaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TourPlanTaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TourPlanTaskUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TourPlanTaskPayload>[]
          }
          upsert: {
            args: Prisma.TourPlanTaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TourPlanTaskPayload>
          }
          aggregate: {
            args: Prisma.TourPlanTaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTourPlanTask>
          }
          groupBy: {
            args: Prisma.TourPlanTaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<TourPlanTaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.TourPlanTaskCountArgs<ExtArgs>
            result: $Utils.Optional<TourPlanTaskCountAggregateOutputType> | number
          }
        }
      }
      TourPlan: {
        payload: Prisma.$TourPlanPayload<ExtArgs>
        fields: Prisma.TourPlanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TourPlanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TourPlanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TourPlanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TourPlanPayload>
          }
          findFirst: {
            args: Prisma.TourPlanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TourPlanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TourPlanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TourPlanPayload>
          }
          findMany: {
            args: Prisma.TourPlanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TourPlanPayload>[]
          }
          create: {
            args: Prisma.TourPlanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TourPlanPayload>
          }
          createMany: {
            args: Prisma.TourPlanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TourPlanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TourPlanPayload>[]
          }
          delete: {
            args: Prisma.TourPlanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TourPlanPayload>
          }
          update: {
            args: Prisma.TourPlanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TourPlanPayload>
          }
          deleteMany: {
            args: Prisma.TourPlanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TourPlanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TourPlanUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TourPlanPayload>[]
          }
          upsert: {
            args: Prisma.TourPlanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TourPlanPayload>
          }
          aggregate: {
            args: Prisma.TourPlanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTourPlan>
          }
          groupBy: {
            args: Prisma.TourPlanGroupByArgs<ExtArgs>
            result: $Utils.Optional<TourPlanGroupByOutputType>[]
          }
          count: {
            args: Prisma.TourPlanCountArgs<ExtArgs>
            result: $Utils.Optional<TourPlanCountAggregateOutputType> | number
          }
        }
      }
      TourPlanReport: {
        payload: Prisma.$TourPlanReportPayload<ExtArgs>
        fields: Prisma.TourPlanReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TourPlanReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TourPlanReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TourPlanReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TourPlanReportPayload>
          }
          findFirst: {
            args: Prisma.TourPlanReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TourPlanReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TourPlanReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TourPlanReportPayload>
          }
          findMany: {
            args: Prisma.TourPlanReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TourPlanReportPayload>[]
          }
          create: {
            args: Prisma.TourPlanReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TourPlanReportPayload>
          }
          createMany: {
            args: Prisma.TourPlanReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TourPlanReportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TourPlanReportPayload>[]
          }
          delete: {
            args: Prisma.TourPlanReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TourPlanReportPayload>
          }
          update: {
            args: Prisma.TourPlanReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TourPlanReportPayload>
          }
          deleteMany: {
            args: Prisma.TourPlanReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TourPlanReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TourPlanReportUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TourPlanReportPayload>[]
          }
          upsert: {
            args: Prisma.TourPlanReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TourPlanReportPayload>
          }
          aggregate: {
            args: Prisma.TourPlanReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTourPlanReport>
          }
          groupBy: {
            args: Prisma.TourPlanReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<TourPlanReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.TourPlanReportCountArgs<ExtArgs>
            result: $Utils.Optional<TourPlanReportCountAggregateOutputType> | number
          }
        }
      }
      ExpenseType: {
        payload: Prisma.$ExpenseTypePayload<ExtArgs>
        fields: Prisma.ExpenseTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExpenseTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpenseTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExpenseTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpenseTypePayload>
          }
          findFirst: {
            args: Prisma.ExpenseTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpenseTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExpenseTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpenseTypePayload>
          }
          findMany: {
            args: Prisma.ExpenseTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpenseTypePayload>[]
          }
          create: {
            args: Prisma.ExpenseTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpenseTypePayload>
          }
          createMany: {
            args: Prisma.ExpenseTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExpenseTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpenseTypePayload>[]
          }
          delete: {
            args: Prisma.ExpenseTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpenseTypePayload>
          }
          update: {
            args: Prisma.ExpenseTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpenseTypePayload>
          }
          deleteMany: {
            args: Prisma.ExpenseTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExpenseTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ExpenseTypeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpenseTypePayload>[]
          }
          upsert: {
            args: Prisma.ExpenseTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpenseTypePayload>
          }
          aggregate: {
            args: Prisma.ExpenseTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExpenseType>
          }
          groupBy: {
            args: Prisma.ExpenseTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExpenseTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExpenseTypeCountArgs<ExtArgs>
            result: $Utils.Optional<ExpenseTypeCountAggregateOutputType> | number
          }
        }
      }
      ExpenseRoleConfig: {
        payload: Prisma.$ExpenseRoleConfigPayload<ExtArgs>
        fields: Prisma.ExpenseRoleConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExpenseRoleConfigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpenseRoleConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExpenseRoleConfigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpenseRoleConfigPayload>
          }
          findFirst: {
            args: Prisma.ExpenseRoleConfigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpenseRoleConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExpenseRoleConfigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpenseRoleConfigPayload>
          }
          findMany: {
            args: Prisma.ExpenseRoleConfigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpenseRoleConfigPayload>[]
          }
          create: {
            args: Prisma.ExpenseRoleConfigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpenseRoleConfigPayload>
          }
          createMany: {
            args: Prisma.ExpenseRoleConfigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExpenseRoleConfigCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpenseRoleConfigPayload>[]
          }
          delete: {
            args: Prisma.ExpenseRoleConfigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpenseRoleConfigPayload>
          }
          update: {
            args: Prisma.ExpenseRoleConfigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpenseRoleConfigPayload>
          }
          deleteMany: {
            args: Prisma.ExpenseRoleConfigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExpenseRoleConfigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ExpenseRoleConfigUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpenseRoleConfigPayload>[]
          }
          upsert: {
            args: Prisma.ExpenseRoleConfigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpenseRoleConfigPayload>
          }
          aggregate: {
            args: Prisma.ExpenseRoleConfigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExpenseRoleConfig>
          }
          groupBy: {
            args: Prisma.ExpenseRoleConfigGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExpenseRoleConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExpenseRoleConfigCountArgs<ExtArgs>
            result: $Utils.Optional<ExpenseRoleConfigCountAggregateOutputType> | number
          }
        }
      }
      ExpenseClaim: {
        payload: Prisma.$ExpenseClaimPayload<ExtArgs>
        fields: Prisma.ExpenseClaimFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExpenseClaimFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpenseClaimPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExpenseClaimFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpenseClaimPayload>
          }
          findFirst: {
            args: Prisma.ExpenseClaimFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpenseClaimPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExpenseClaimFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpenseClaimPayload>
          }
          findMany: {
            args: Prisma.ExpenseClaimFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpenseClaimPayload>[]
          }
          create: {
            args: Prisma.ExpenseClaimCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpenseClaimPayload>
          }
          createMany: {
            args: Prisma.ExpenseClaimCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExpenseClaimCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpenseClaimPayload>[]
          }
          delete: {
            args: Prisma.ExpenseClaimDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpenseClaimPayload>
          }
          update: {
            args: Prisma.ExpenseClaimUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpenseClaimPayload>
          }
          deleteMany: {
            args: Prisma.ExpenseClaimDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExpenseClaimUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ExpenseClaimUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpenseClaimPayload>[]
          }
          upsert: {
            args: Prisma.ExpenseClaimUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpenseClaimPayload>
          }
          aggregate: {
            args: Prisma.ExpenseClaimAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExpenseClaim>
          }
          groupBy: {
            args: Prisma.ExpenseClaimGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExpenseClaimGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExpenseClaimCountArgs<ExtArgs>
            result: $Utils.Optional<ExpenseClaimCountAggregateOutputType> | number
          }
        }
      }
      Gift: {
        payload: Prisma.$GiftPayload<ExtArgs>
        fields: Prisma.GiftFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GiftFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GiftPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GiftFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GiftPayload>
          }
          findFirst: {
            args: Prisma.GiftFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GiftPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GiftFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GiftPayload>
          }
          findMany: {
            args: Prisma.GiftFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GiftPayload>[]
          }
          create: {
            args: Prisma.GiftCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GiftPayload>
          }
          createMany: {
            args: Prisma.GiftCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GiftCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GiftPayload>[]
          }
          delete: {
            args: Prisma.GiftDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GiftPayload>
          }
          update: {
            args: Prisma.GiftUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GiftPayload>
          }
          deleteMany: {
            args: Prisma.GiftDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GiftUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GiftUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GiftPayload>[]
          }
          upsert: {
            args: Prisma.GiftUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GiftPayload>
          }
          aggregate: {
            args: Prisma.GiftAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGift>
          }
          groupBy: {
            args: Prisma.GiftGroupByArgs<ExtArgs>
            result: $Utils.Optional<GiftGroupByOutputType>[]
          }
          count: {
            args: Prisma.GiftCountArgs<ExtArgs>
            result: $Utils.Optional<GiftCountAggregateOutputType> | number
          }
        }
      }
      UserDrugInventory: {
        payload: Prisma.$UserDrugInventoryPayload<ExtArgs>
        fields: Prisma.UserDrugInventoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserDrugInventoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDrugInventoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserDrugInventoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDrugInventoryPayload>
          }
          findFirst: {
            args: Prisma.UserDrugInventoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDrugInventoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserDrugInventoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDrugInventoryPayload>
          }
          findMany: {
            args: Prisma.UserDrugInventoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDrugInventoryPayload>[]
          }
          create: {
            args: Prisma.UserDrugInventoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDrugInventoryPayload>
          }
          createMany: {
            args: Prisma.UserDrugInventoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserDrugInventoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDrugInventoryPayload>[]
          }
          delete: {
            args: Prisma.UserDrugInventoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDrugInventoryPayload>
          }
          update: {
            args: Prisma.UserDrugInventoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDrugInventoryPayload>
          }
          deleteMany: {
            args: Prisma.UserDrugInventoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserDrugInventoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserDrugInventoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDrugInventoryPayload>[]
          }
          upsert: {
            args: Prisma.UserDrugInventoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDrugInventoryPayload>
          }
          aggregate: {
            args: Prisma.UserDrugInventoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserDrugInventory>
          }
          groupBy: {
            args: Prisma.UserDrugInventoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserDrugInventoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserDrugInventoryCountArgs<ExtArgs>
            result: $Utils.Optional<UserDrugInventoryCountAggregateOutputType> | number
          }
        }
      }
      UserGiftInventory: {
        payload: Prisma.$UserGiftInventoryPayload<ExtArgs>
        fields: Prisma.UserGiftInventoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserGiftInventoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserGiftInventoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserGiftInventoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserGiftInventoryPayload>
          }
          findFirst: {
            args: Prisma.UserGiftInventoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserGiftInventoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserGiftInventoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserGiftInventoryPayload>
          }
          findMany: {
            args: Prisma.UserGiftInventoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserGiftInventoryPayload>[]
          }
          create: {
            args: Prisma.UserGiftInventoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserGiftInventoryPayload>
          }
          createMany: {
            args: Prisma.UserGiftInventoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserGiftInventoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserGiftInventoryPayload>[]
          }
          delete: {
            args: Prisma.UserGiftInventoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserGiftInventoryPayload>
          }
          update: {
            args: Prisma.UserGiftInventoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserGiftInventoryPayload>
          }
          deleteMany: {
            args: Prisma.UserGiftInventoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserGiftInventoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserGiftInventoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserGiftInventoryPayload>[]
          }
          upsert: {
            args: Prisma.UserGiftInventoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserGiftInventoryPayload>
          }
          aggregate: {
            args: Prisma.UserGiftInventoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserGiftInventory>
          }
          groupBy: {
            args: Prisma.UserGiftInventoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGiftInventoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserGiftInventoryCountArgs<ExtArgs>
            result: $Utils.Optional<UserGiftInventoryCountAggregateOutputType> | number
          }
        }
      }
      DoctorDistribution: {
        payload: Prisma.$DoctorDistributionPayload<ExtArgs>
        fields: Prisma.DoctorDistributionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DoctorDistributionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorDistributionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DoctorDistributionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorDistributionPayload>
          }
          findFirst: {
            args: Prisma.DoctorDistributionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorDistributionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DoctorDistributionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorDistributionPayload>
          }
          findMany: {
            args: Prisma.DoctorDistributionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorDistributionPayload>[]
          }
          create: {
            args: Prisma.DoctorDistributionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorDistributionPayload>
          }
          createMany: {
            args: Prisma.DoctorDistributionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DoctorDistributionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorDistributionPayload>[]
          }
          delete: {
            args: Prisma.DoctorDistributionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorDistributionPayload>
          }
          update: {
            args: Prisma.DoctorDistributionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorDistributionPayload>
          }
          deleteMany: {
            args: Prisma.DoctorDistributionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DoctorDistributionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DoctorDistributionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorDistributionPayload>[]
          }
          upsert: {
            args: Prisma.DoctorDistributionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorDistributionPayload>
          }
          aggregate: {
            args: Prisma.DoctorDistributionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDoctorDistribution>
          }
          groupBy: {
            args: Prisma.DoctorDistributionGroupByArgs<ExtArgs>
            result: $Utils.Optional<DoctorDistributionGroupByOutputType>[]
          }
          count: {
            args: Prisma.DoctorDistributionCountArgs<ExtArgs>
            result: $Utils.Optional<DoctorDistributionCountAggregateOutputType> | number
          }
        }
      }
      DoctorDistributionDrugItem: {
        payload: Prisma.$DoctorDistributionDrugItemPayload<ExtArgs>
        fields: Prisma.DoctorDistributionDrugItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DoctorDistributionDrugItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorDistributionDrugItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DoctorDistributionDrugItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorDistributionDrugItemPayload>
          }
          findFirst: {
            args: Prisma.DoctorDistributionDrugItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorDistributionDrugItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DoctorDistributionDrugItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorDistributionDrugItemPayload>
          }
          findMany: {
            args: Prisma.DoctorDistributionDrugItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorDistributionDrugItemPayload>[]
          }
          create: {
            args: Prisma.DoctorDistributionDrugItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorDistributionDrugItemPayload>
          }
          createMany: {
            args: Prisma.DoctorDistributionDrugItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DoctorDistributionDrugItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorDistributionDrugItemPayload>[]
          }
          delete: {
            args: Prisma.DoctorDistributionDrugItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorDistributionDrugItemPayload>
          }
          update: {
            args: Prisma.DoctorDistributionDrugItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorDistributionDrugItemPayload>
          }
          deleteMany: {
            args: Prisma.DoctorDistributionDrugItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DoctorDistributionDrugItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DoctorDistributionDrugItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorDistributionDrugItemPayload>[]
          }
          upsert: {
            args: Prisma.DoctorDistributionDrugItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorDistributionDrugItemPayload>
          }
          aggregate: {
            args: Prisma.DoctorDistributionDrugItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDoctorDistributionDrugItem>
          }
          groupBy: {
            args: Prisma.DoctorDistributionDrugItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<DoctorDistributionDrugItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.DoctorDistributionDrugItemCountArgs<ExtArgs>
            result: $Utils.Optional<DoctorDistributionDrugItemCountAggregateOutputType> | number
          }
        }
      }
      DoctorDistributionGiftItem: {
        payload: Prisma.$DoctorDistributionGiftItemPayload<ExtArgs>
        fields: Prisma.DoctorDistributionGiftItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DoctorDistributionGiftItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorDistributionGiftItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DoctorDistributionGiftItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorDistributionGiftItemPayload>
          }
          findFirst: {
            args: Prisma.DoctorDistributionGiftItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorDistributionGiftItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DoctorDistributionGiftItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorDistributionGiftItemPayload>
          }
          findMany: {
            args: Prisma.DoctorDistributionGiftItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorDistributionGiftItemPayload>[]
          }
          create: {
            args: Prisma.DoctorDistributionGiftItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorDistributionGiftItemPayload>
          }
          createMany: {
            args: Prisma.DoctorDistributionGiftItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DoctorDistributionGiftItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorDistributionGiftItemPayload>[]
          }
          delete: {
            args: Prisma.DoctorDistributionGiftItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorDistributionGiftItemPayload>
          }
          update: {
            args: Prisma.DoctorDistributionGiftItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorDistributionGiftItemPayload>
          }
          deleteMany: {
            args: Prisma.DoctorDistributionGiftItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DoctorDistributionGiftItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DoctorDistributionGiftItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorDistributionGiftItemPayload>[]
          }
          upsert: {
            args: Prisma.DoctorDistributionGiftItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorDistributionGiftItemPayload>
          }
          aggregate: {
            args: Prisma.DoctorDistributionGiftItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDoctorDistributionGiftItem>
          }
          groupBy: {
            args: Prisma.DoctorDistributionGiftItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<DoctorDistributionGiftItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.DoctorDistributionGiftItemCountArgs<ExtArgs>
            result: $Utils.Optional<DoctorDistributionGiftItemCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AuditLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    employee?: EmployeeOmit
    team?: TeamOmit
    territory?: TerritoryOmit
    employeeTerritory?: EmployeeTerritoryOmit
    employeeTrainingRecord?: EmployeeTrainingRecordOmit
    hospitalChain?: HospitalChainOmit
    chemistChain?: ChemistChainOmit
    hospital?: HospitalOmit
    doctor?: DoctorOmit
    doctorHospitalAssociation?: DoctorHospitalAssociationOmit
    doctorConsultationSchedule?: DoctorConsultationScheduleOmit
    doctorNote?: DoctorNoteOmit
    doctorInteraction?: DoctorInteractionOmit
    drug?: DrugOmit
    chemist?: ChemistOmit
    chemistNote?: ChemistNoteOmit
    chemistInteraction?: ChemistInteractionOmit
    doctorChemistRelation?: DoctorChemistRelationOmit
    order?: OrderOmit
    orderItem?: OrderItemOmit
    dcrReport?: DcrReportOmit
    rcpaReport?: RcpaReportOmit
    rcpaDrugData?: RcpaDrugDataOmit
    checkIn?: CheckInOmit
    taskPlanner?: TaskPlannerOmit
    doctorTask?: DoctorTaskOmit
    chemistTask?: ChemistTaskOmit
    tourPlanTask?: TourPlanTaskOmit
    tourPlan?: TourPlanOmit
    tourPlanReport?: TourPlanReportOmit
    expenseType?: ExpenseTypeOmit
    expenseRoleConfig?: ExpenseRoleConfigOmit
    expenseClaim?: ExpenseClaimOmit
    gift?: GiftOmit
    userDrugInventory?: UserDrugInventoryOmit
    userGiftInventory?: UserGiftInventoryOmit
    doctorDistribution?: DoctorDistributionOmit
    doctorDistributionDrugItem?: DoctorDistributionDrugItemOmit
    doctorDistributionGiftItem?: DoctorDistributionGiftItemOmit
    auditLog?: AuditLogOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type EmployeeCountOutputType
   */

  export type EmployeeCountOutputType = {
    subordinates: number
    territories: number
    trainingRecords: number
    doctorNotes: number
    chemistNotes: number
    doctorInteractions: number
    chemistInteractions: number
    dcrReports: number
    rcpaReports: number
    checkIns: number
    auditLogs: number
    ordersCreated: number
    doctorsCreated: number
    drugsCreated: number
    chemistsCreated: number
    doctorChemistRelations: number
    expenseClaims: number
    approvedClaims: number
    drugInventories: number
    giftInventories: number
    giftsCreated: number
    doctorDistributions: number
    taskPlans: number
    doctorTasks: number
    chemistTasks: number
    tourPlanTasks: number
  }

  export type EmployeeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subordinates?: boolean | EmployeeCountOutputTypeCountSubordinatesArgs
    territories?: boolean | EmployeeCountOutputTypeCountTerritoriesArgs
    trainingRecords?: boolean | EmployeeCountOutputTypeCountTrainingRecordsArgs
    doctorNotes?: boolean | EmployeeCountOutputTypeCountDoctorNotesArgs
    chemistNotes?: boolean | EmployeeCountOutputTypeCountChemistNotesArgs
    doctorInteractions?: boolean | EmployeeCountOutputTypeCountDoctorInteractionsArgs
    chemistInteractions?: boolean | EmployeeCountOutputTypeCountChemistInteractionsArgs
    dcrReports?: boolean | EmployeeCountOutputTypeCountDcrReportsArgs
    rcpaReports?: boolean | EmployeeCountOutputTypeCountRcpaReportsArgs
    checkIns?: boolean | EmployeeCountOutputTypeCountCheckInsArgs
    auditLogs?: boolean | EmployeeCountOutputTypeCountAuditLogsArgs
    ordersCreated?: boolean | EmployeeCountOutputTypeCountOrdersCreatedArgs
    doctorsCreated?: boolean | EmployeeCountOutputTypeCountDoctorsCreatedArgs
    drugsCreated?: boolean | EmployeeCountOutputTypeCountDrugsCreatedArgs
    chemistsCreated?: boolean | EmployeeCountOutputTypeCountChemistsCreatedArgs
    doctorChemistRelations?: boolean | EmployeeCountOutputTypeCountDoctorChemistRelationsArgs
    expenseClaims?: boolean | EmployeeCountOutputTypeCountExpenseClaimsArgs
    approvedClaims?: boolean | EmployeeCountOutputTypeCountApprovedClaimsArgs
    drugInventories?: boolean | EmployeeCountOutputTypeCountDrugInventoriesArgs
    giftInventories?: boolean | EmployeeCountOutputTypeCountGiftInventoriesArgs
    giftsCreated?: boolean | EmployeeCountOutputTypeCountGiftsCreatedArgs
    doctorDistributions?: boolean | EmployeeCountOutputTypeCountDoctorDistributionsArgs
    taskPlans?: boolean | EmployeeCountOutputTypeCountTaskPlansArgs
    doctorTasks?: boolean | EmployeeCountOutputTypeCountDoctorTasksArgs
    chemistTasks?: boolean | EmployeeCountOutputTypeCountChemistTasksArgs
    tourPlanTasks?: boolean | EmployeeCountOutputTypeCountTourPlanTasksArgs
  }

  // Custom InputTypes
  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeCountOutputType
     */
    select?: EmployeeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountSubordinatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountTerritoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeTerritoryWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountTrainingRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeTrainingRecordWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountDoctorNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorNoteWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountChemistNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChemistNoteWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountDoctorInteractionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorInteractionWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountChemistInteractionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChemistInteractionWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountDcrReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DcrReportWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountRcpaReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RcpaReportWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountCheckInsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CheckInWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountOrdersCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountDoctorsCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountDrugsCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DrugWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountChemistsCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChemistWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountDoctorChemistRelationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorChemistRelationWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountExpenseClaimsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExpenseClaimWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountApprovedClaimsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExpenseClaimWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountDrugInventoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserDrugInventoryWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountGiftInventoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserGiftInventoryWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountGiftsCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GiftWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountDoctorDistributionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorDistributionWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountTaskPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskPlannerWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountDoctorTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorTaskWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountChemistTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChemistTaskWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountTourPlanTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TourPlanTaskWhereInput
  }


  /**
   * Count Type TeamCountOutputType
   */

  export type TeamCountOutputType = {
    teamMembers: number
  }

  export type TeamCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teamMembers?: boolean | TeamCountOutputTypeCountTeamMembersArgs
  }

  // Custom InputTypes
  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCountOutputType
     */
    select?: TeamCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountTeamMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
  }


  /**
   * Count Type TerritoryCountOutputType
   */

  export type TerritoryCountOutputType = {
    childTerritories: number
    employees: number
    hospitals: number
    chemists: number
  }

  export type TerritoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    childTerritories?: boolean | TerritoryCountOutputTypeCountChildTerritoriesArgs
    employees?: boolean | TerritoryCountOutputTypeCountEmployeesArgs
    hospitals?: boolean | TerritoryCountOutputTypeCountHospitalsArgs
    chemists?: boolean | TerritoryCountOutputTypeCountChemistsArgs
  }

  // Custom InputTypes
  /**
   * TerritoryCountOutputType without action
   */
  export type TerritoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TerritoryCountOutputType
     */
    select?: TerritoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TerritoryCountOutputType without action
   */
  export type TerritoryCountOutputTypeCountChildTerritoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TerritoryWhereInput
  }

  /**
   * TerritoryCountOutputType without action
   */
  export type TerritoryCountOutputTypeCountEmployeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeTerritoryWhereInput
  }

  /**
   * TerritoryCountOutputType without action
   */
  export type TerritoryCountOutputTypeCountHospitalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HospitalWhereInput
  }

  /**
   * TerritoryCountOutputType without action
   */
  export type TerritoryCountOutputTypeCountChemistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChemistWhereInput
  }


  /**
   * Count Type HospitalChainCountOutputType
   */

  export type HospitalChainCountOutputType = {
    hospitals: number
  }

  export type HospitalChainCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hospitals?: boolean | HospitalChainCountOutputTypeCountHospitalsArgs
  }

  // Custom InputTypes
  /**
   * HospitalChainCountOutputType without action
   */
  export type HospitalChainCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HospitalChainCountOutputType
     */
    select?: HospitalChainCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * HospitalChainCountOutputType without action
   */
  export type HospitalChainCountOutputTypeCountHospitalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HospitalWhereInput
  }


  /**
   * Count Type ChemistChainCountOutputType
   */

  export type ChemistChainCountOutputType = {
    chemists: number
  }

  export type ChemistChainCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chemists?: boolean | ChemistChainCountOutputTypeCountChemistsArgs
  }

  // Custom InputTypes
  /**
   * ChemistChainCountOutputType without action
   */
  export type ChemistChainCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistChainCountOutputType
     */
    select?: ChemistChainCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChemistChainCountOutputType without action
   */
  export type ChemistChainCountOutputTypeCountChemistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChemistWhereInput
  }


  /**
   * Count Type HospitalCountOutputType
   */

  export type HospitalCountOutputType = {
    doctorAssociations: number
    consultationSchedules: number
    doctorInteractions: number
  }

  export type HospitalCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctorAssociations?: boolean | HospitalCountOutputTypeCountDoctorAssociationsArgs
    consultationSchedules?: boolean | HospitalCountOutputTypeCountConsultationSchedulesArgs
    doctorInteractions?: boolean | HospitalCountOutputTypeCountDoctorInteractionsArgs
  }

  // Custom InputTypes
  /**
   * HospitalCountOutputType without action
   */
  export type HospitalCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HospitalCountOutputType
     */
    select?: HospitalCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * HospitalCountOutputType without action
   */
  export type HospitalCountOutputTypeCountDoctorAssociationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorHospitalAssociationWhereInput
  }

  /**
   * HospitalCountOutputType without action
   */
  export type HospitalCountOutputTypeCountConsultationSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorConsultationScheduleWhereInput
  }

  /**
   * HospitalCountOutputType without action
   */
  export type HospitalCountOutputTypeCountDoctorInteractionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorInteractionWhereInput
  }


  /**
   * Count Type DoctorCountOutputType
   */

  export type DoctorCountOutputType = {
    hospitalAssociations: number
    consultationSchedules: number
    interactions: number
    notes: number
    chemistRelations: number
    DoctorTask: number
  }

  export type DoctorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hospitalAssociations?: boolean | DoctorCountOutputTypeCountHospitalAssociationsArgs
    consultationSchedules?: boolean | DoctorCountOutputTypeCountConsultationSchedulesArgs
    interactions?: boolean | DoctorCountOutputTypeCountInteractionsArgs
    notes?: boolean | DoctorCountOutputTypeCountNotesArgs
    chemistRelations?: boolean | DoctorCountOutputTypeCountChemistRelationsArgs
    DoctorTask?: boolean | DoctorCountOutputTypeCountDoctorTaskArgs
  }

  // Custom InputTypes
  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorCountOutputType
     */
    select?: DoctorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountHospitalAssociationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorHospitalAssociationWhereInput
  }

  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountConsultationSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorConsultationScheduleWhereInput
  }

  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountInteractionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorInteractionWhereInput
  }

  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorNoteWhereInput
  }

  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountChemistRelationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorChemistRelationWhereInput
  }

  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountDoctorTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorTaskWhereInput
  }


  /**
   * Count Type DoctorInteractionCountOutputType
   */

  export type DoctorInteractionCountOutputType = {
    DoctorDistribution: number
  }

  export type DoctorInteractionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    DoctorDistribution?: boolean | DoctorInteractionCountOutputTypeCountDoctorDistributionArgs
  }

  // Custom InputTypes
  /**
   * DoctorInteractionCountOutputType without action
   */
  export type DoctorInteractionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorInteractionCountOutputType
     */
    select?: DoctorInteractionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DoctorInteractionCountOutputType without action
   */
  export type DoctorInteractionCountOutputTypeCountDoctorDistributionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorDistributionWhereInput
  }


  /**
   * Count Type DrugCountOutputType
   */

  export type DrugCountOutputType = {
    orderItems: number
    rcpaData: number
    UserDrugInventory: number
    DoctorDistributionDrugItem: number
  }

  export type DrugCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderItems?: boolean | DrugCountOutputTypeCountOrderItemsArgs
    rcpaData?: boolean | DrugCountOutputTypeCountRcpaDataArgs
    UserDrugInventory?: boolean | DrugCountOutputTypeCountUserDrugInventoryArgs
    DoctorDistributionDrugItem?: boolean | DrugCountOutputTypeCountDoctorDistributionDrugItemArgs
  }

  // Custom InputTypes
  /**
   * DrugCountOutputType without action
   */
  export type DrugCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DrugCountOutputType
     */
    select?: DrugCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DrugCountOutputType without action
   */
  export type DrugCountOutputTypeCountOrderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
  }

  /**
   * DrugCountOutputType without action
   */
  export type DrugCountOutputTypeCountRcpaDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RcpaDrugDataWhereInput
  }

  /**
   * DrugCountOutputType without action
   */
  export type DrugCountOutputTypeCountUserDrugInventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserDrugInventoryWhereInput
  }

  /**
   * DrugCountOutputType without action
   */
  export type DrugCountOutputTypeCountDoctorDistributionDrugItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorDistributionDrugItemWhereInput
  }


  /**
   * Count Type ChemistCountOutputType
   */

  export type ChemistCountOutputType = {
    notes: number
    interactions: number
    doctorRelations: number
    orders: number
    rcpaReports: number
    chemistTasks: number
  }

  export type ChemistCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notes?: boolean | ChemistCountOutputTypeCountNotesArgs
    interactions?: boolean | ChemistCountOutputTypeCountInteractionsArgs
    doctorRelations?: boolean | ChemistCountOutputTypeCountDoctorRelationsArgs
    orders?: boolean | ChemistCountOutputTypeCountOrdersArgs
    rcpaReports?: boolean | ChemistCountOutputTypeCountRcpaReportsArgs
    chemistTasks?: boolean | ChemistCountOutputTypeCountChemistTasksArgs
  }

  // Custom InputTypes
  /**
   * ChemistCountOutputType without action
   */
  export type ChemistCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistCountOutputType
     */
    select?: ChemistCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChemistCountOutputType without action
   */
  export type ChemistCountOutputTypeCountNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChemistNoteWhereInput
  }

  /**
   * ChemistCountOutputType without action
   */
  export type ChemistCountOutputTypeCountInteractionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChemistInteractionWhereInput
  }

  /**
   * ChemistCountOutputType without action
   */
  export type ChemistCountOutputTypeCountDoctorRelationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorChemistRelationWhereInput
  }

  /**
   * ChemistCountOutputType without action
   */
  export type ChemistCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }

  /**
   * ChemistCountOutputType without action
   */
  export type ChemistCountOutputTypeCountRcpaReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RcpaReportWhereInput
  }

  /**
   * ChemistCountOutputType without action
   */
  export type ChemistCountOutputTypeCountChemistTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChemistTaskWhereInput
  }


  /**
   * Count Type OrderCountOutputType
   */

  export type OrderCountOutputType = {
    items: number
  }

  export type OrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | OrderCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     */
    select?: OrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
  }


  /**
   * Count Type RcpaReportCountOutputType
   */

  export type RcpaReportCountOutputType = {
    drugData: number
  }

  export type RcpaReportCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    drugData?: boolean | RcpaReportCountOutputTypeCountDrugDataArgs
  }

  // Custom InputTypes
  /**
   * RcpaReportCountOutputType without action
   */
  export type RcpaReportCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RcpaReportCountOutputType
     */
    select?: RcpaReportCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RcpaReportCountOutputType without action
   */
  export type RcpaReportCountOutputTypeCountDrugDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RcpaDrugDataWhereInput
  }


  /**
   * Count Type TaskPlannerCountOutputType
   */

  export type TaskPlannerCountOutputType = {
    doctorTasks: number
    chemistTasks: number
    tourPlanTasks: number
  }

  export type TaskPlannerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctorTasks?: boolean | TaskPlannerCountOutputTypeCountDoctorTasksArgs
    chemistTasks?: boolean | TaskPlannerCountOutputTypeCountChemistTasksArgs
    tourPlanTasks?: boolean | TaskPlannerCountOutputTypeCountTourPlanTasksArgs
  }

  // Custom InputTypes
  /**
   * TaskPlannerCountOutputType without action
   */
  export type TaskPlannerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskPlannerCountOutputType
     */
    select?: TaskPlannerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TaskPlannerCountOutputType without action
   */
  export type TaskPlannerCountOutputTypeCountDoctorTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorTaskWhereInput
  }

  /**
   * TaskPlannerCountOutputType without action
   */
  export type TaskPlannerCountOutputTypeCountChemistTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChemistTaskWhereInput
  }

  /**
   * TaskPlannerCountOutputType without action
   */
  export type TaskPlannerCountOutputTypeCountTourPlanTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TourPlanTaskWhereInput
  }


  /**
   * Count Type DoctorTaskCountOutputType
   */

  export type DoctorTaskCountOutputType = {
    doctorInteractions: number
    dcrReports: number
  }

  export type DoctorTaskCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctorInteractions?: boolean | DoctorTaskCountOutputTypeCountDoctorInteractionsArgs
    dcrReports?: boolean | DoctorTaskCountOutputTypeCountDcrReportsArgs
  }

  // Custom InputTypes
  /**
   * DoctorTaskCountOutputType without action
   */
  export type DoctorTaskCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorTaskCountOutputType
     */
    select?: DoctorTaskCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DoctorTaskCountOutputType without action
   */
  export type DoctorTaskCountOutputTypeCountDoctorInteractionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorInteractionWhereInput
  }

  /**
   * DoctorTaskCountOutputType without action
   */
  export type DoctorTaskCountOutputTypeCountDcrReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DcrReportWhereInput
  }


  /**
   * Count Type ChemistTaskCountOutputType
   */

  export type ChemistTaskCountOutputType = {
    chemistInteractions: number
    dcrReports: number
  }

  export type ChemistTaskCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chemistInteractions?: boolean | ChemistTaskCountOutputTypeCountChemistInteractionsArgs
    dcrReports?: boolean | ChemistTaskCountOutputTypeCountDcrReportsArgs
  }

  // Custom InputTypes
  /**
   * ChemistTaskCountOutputType without action
   */
  export type ChemistTaskCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistTaskCountOutputType
     */
    select?: ChemistTaskCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChemistTaskCountOutputType without action
   */
  export type ChemistTaskCountOutputTypeCountChemistInteractionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChemistInteractionWhereInput
  }

  /**
   * ChemistTaskCountOutputType without action
   */
  export type ChemistTaskCountOutputTypeCountDcrReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DcrReportWhereInput
  }


  /**
   * Count Type TourPlanTaskCountOutputType
   */

  export type TourPlanTaskCountOutputType = {
    tourPlanReports: number
    dcrReports: number
  }

  export type TourPlanTaskCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tourPlanReports?: boolean | TourPlanTaskCountOutputTypeCountTourPlanReportsArgs
    dcrReports?: boolean | TourPlanTaskCountOutputTypeCountDcrReportsArgs
  }

  // Custom InputTypes
  /**
   * TourPlanTaskCountOutputType without action
   */
  export type TourPlanTaskCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlanTaskCountOutputType
     */
    select?: TourPlanTaskCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TourPlanTaskCountOutputType without action
   */
  export type TourPlanTaskCountOutputTypeCountTourPlanReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TourPlanReportWhereInput
  }

  /**
   * TourPlanTaskCountOutputType without action
   */
  export type TourPlanTaskCountOutputTypeCountDcrReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DcrReportWhereInput
  }


  /**
   * Count Type TourPlanCountOutputType
   */

  export type TourPlanCountOutputType = {
    tourTasks: number
  }

  export type TourPlanCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tourTasks?: boolean | TourPlanCountOutputTypeCountTourTasksArgs
  }

  // Custom InputTypes
  /**
   * TourPlanCountOutputType without action
   */
  export type TourPlanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlanCountOutputType
     */
    select?: TourPlanCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TourPlanCountOutputType without action
   */
  export type TourPlanCountOutputTypeCountTourTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TourPlanTaskWhereInput
  }


  /**
   * Count Type ExpenseTypeCountOutputType
   */

  export type ExpenseTypeCountOutputType = {
    roleConfigs: number
    expenseClaims: number
  }

  export type ExpenseTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roleConfigs?: boolean | ExpenseTypeCountOutputTypeCountRoleConfigsArgs
    expenseClaims?: boolean | ExpenseTypeCountOutputTypeCountExpenseClaimsArgs
  }

  // Custom InputTypes
  /**
   * ExpenseTypeCountOutputType without action
   */
  export type ExpenseTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseTypeCountOutputType
     */
    select?: ExpenseTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ExpenseTypeCountOutputType without action
   */
  export type ExpenseTypeCountOutputTypeCountRoleConfigsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExpenseRoleConfigWhereInput
  }

  /**
   * ExpenseTypeCountOutputType without action
   */
  export type ExpenseTypeCountOutputTypeCountExpenseClaimsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExpenseClaimWhereInput
  }


  /**
   * Count Type ExpenseRoleConfigCountOutputType
   */

  export type ExpenseRoleConfigCountOutputType = {
    expenseClaims: number
  }

  export type ExpenseRoleConfigCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    expenseClaims?: boolean | ExpenseRoleConfigCountOutputTypeCountExpenseClaimsArgs
  }

  // Custom InputTypes
  /**
   * ExpenseRoleConfigCountOutputType without action
   */
  export type ExpenseRoleConfigCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseRoleConfigCountOutputType
     */
    select?: ExpenseRoleConfigCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ExpenseRoleConfigCountOutputType without action
   */
  export type ExpenseRoleConfigCountOutputTypeCountExpenseClaimsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExpenseClaimWhereInput
  }


  /**
   * Count Type GiftCountOutputType
   */

  export type GiftCountOutputType = {
    userGiftInventories: number
    doctorDistributionGiftItems: number
  }

  export type GiftCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userGiftInventories?: boolean | GiftCountOutputTypeCountUserGiftInventoriesArgs
    doctorDistributionGiftItems?: boolean | GiftCountOutputTypeCountDoctorDistributionGiftItemsArgs
  }

  // Custom InputTypes
  /**
   * GiftCountOutputType without action
   */
  export type GiftCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GiftCountOutputType
     */
    select?: GiftCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GiftCountOutputType without action
   */
  export type GiftCountOutputTypeCountUserGiftInventoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserGiftInventoryWhereInput
  }

  /**
   * GiftCountOutputType without action
   */
  export type GiftCountOutputTypeCountDoctorDistributionGiftItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorDistributionGiftItemWhereInput
  }


  /**
   * Count Type UserDrugInventoryCountOutputType
   */

  export type UserDrugInventoryCountOutputType = {
    doctorDistributionDrugItems: number
  }

  export type UserDrugInventoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctorDistributionDrugItems?: boolean | UserDrugInventoryCountOutputTypeCountDoctorDistributionDrugItemsArgs
  }

  // Custom InputTypes
  /**
   * UserDrugInventoryCountOutputType without action
   */
  export type UserDrugInventoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDrugInventoryCountOutputType
     */
    select?: UserDrugInventoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserDrugInventoryCountOutputType without action
   */
  export type UserDrugInventoryCountOutputTypeCountDoctorDistributionDrugItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorDistributionDrugItemWhereInput
  }


  /**
   * Count Type UserGiftInventoryCountOutputType
   */

  export type UserGiftInventoryCountOutputType = {
    doctorDistributionGiftItems: number
  }

  export type UserGiftInventoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctorDistributionGiftItems?: boolean | UserGiftInventoryCountOutputTypeCountDoctorDistributionGiftItemsArgs
  }

  // Custom InputTypes
  /**
   * UserGiftInventoryCountOutputType without action
   */
  export type UserGiftInventoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGiftInventoryCountOutputType
     */
    select?: UserGiftInventoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserGiftInventoryCountOutputType without action
   */
  export type UserGiftInventoryCountOutputTypeCountDoctorDistributionGiftItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorDistributionGiftItemWhereInput
  }


  /**
   * Count Type DoctorDistributionCountOutputType
   */

  export type DoctorDistributionCountOutputType = {
    drugItems: number
    giftItems: number
  }

  export type DoctorDistributionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    drugItems?: boolean | DoctorDistributionCountOutputTypeCountDrugItemsArgs
    giftItems?: boolean | DoctorDistributionCountOutputTypeCountGiftItemsArgs
  }

  // Custom InputTypes
  /**
   * DoctorDistributionCountOutputType without action
   */
  export type DoctorDistributionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistributionCountOutputType
     */
    select?: DoctorDistributionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DoctorDistributionCountOutputType without action
   */
  export type DoctorDistributionCountOutputTypeCountDrugItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorDistributionDrugItemWhereInput
  }

  /**
   * DoctorDistributionCountOutputType without action
   */
  export type DoctorDistributionCountOutputTypeCountGiftItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorDistributionGiftItemWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Employee
   */

  export type AggregateEmployee = {
    _count: EmployeeCountAggregateOutputType | null
    _avg: EmployeeAvgAggregateOutputType | null
    _sum: EmployeeSumAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  export type EmployeeAvgAggregateOutputType = {
    assignedLatitude: Decimal | null
    assignedLongitude: Decimal | null
  }

  export type EmployeeSumAggregateOutputType = {
    assignedLatitude: Decimal | null
    assignedLongitude: Decimal | null
  }

  export type EmployeeMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    email: string | null
    passwordHash: string | null
    firstName: string | null
    lastName: string | null
    phone: string | null
    profilePic: string | null
    role: $Enums.EmployeeRole | null
    reportingManagerId: string | null
    teamId: string | null
    employeeCode: string | null
    city: string | null
    state: string | null
    assignedLatitude: Decimal | null
    assignedLongitude: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLoginAt: Date | null
    isActive: boolean | null
  }

  export type EmployeeMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    email: string | null
    passwordHash: string | null
    firstName: string | null
    lastName: string | null
    phone: string | null
    profilePic: string | null
    role: $Enums.EmployeeRole | null
    reportingManagerId: string | null
    teamId: string | null
    employeeCode: string | null
    city: string | null
    state: string | null
    assignedLatitude: Decimal | null
    assignedLongitude: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLoginAt: Date | null
    isActive: boolean | null
  }

  export type EmployeeCountAggregateOutputType = {
    id: number
    organizationId: number
    email: number
    passwordHash: number
    firstName: number
    lastName: number
    phone: number
    profilePic: number
    role: number
    reportingManagerId: number
    teamId: number
    employeeCode: number
    city: number
    state: number
    assignedLatitude: number
    assignedLongitude: number
    createdAt: number
    updatedAt: number
    lastLoginAt: number
    isActive: number
    _all: number
  }


  export type EmployeeAvgAggregateInputType = {
    assignedLatitude?: true
    assignedLongitude?: true
  }

  export type EmployeeSumAggregateInputType = {
    assignedLatitude?: true
    assignedLongitude?: true
  }

  export type EmployeeMinAggregateInputType = {
    id?: true
    organizationId?: true
    email?: true
    passwordHash?: true
    firstName?: true
    lastName?: true
    phone?: true
    profilePic?: true
    role?: true
    reportingManagerId?: true
    teamId?: true
    employeeCode?: true
    city?: true
    state?: true
    assignedLatitude?: true
    assignedLongitude?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
    isActive?: true
  }

  export type EmployeeMaxAggregateInputType = {
    id?: true
    organizationId?: true
    email?: true
    passwordHash?: true
    firstName?: true
    lastName?: true
    phone?: true
    profilePic?: true
    role?: true
    reportingManagerId?: true
    teamId?: true
    employeeCode?: true
    city?: true
    state?: true
    assignedLatitude?: true
    assignedLongitude?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
    isActive?: true
  }

  export type EmployeeCountAggregateInputType = {
    id?: true
    organizationId?: true
    email?: true
    passwordHash?: true
    firstName?: true
    lastName?: true
    phone?: true
    profilePic?: true
    role?: true
    reportingManagerId?: true
    teamId?: true
    employeeCode?: true
    city?: true
    state?: true
    assignedLatitude?: true
    assignedLongitude?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
    isActive?: true
    _all?: true
  }

  export type EmployeeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employee to aggregate.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Employees
    **/
    _count?: true | EmployeeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmployeeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmployeeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeeMaxAggregateInputType
  }

  export type GetEmployeeAggregateType<T extends EmployeeAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployee[P]>
      : GetScalarType<T[P], AggregateEmployee[P]>
  }




  export type EmployeeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithAggregationInput | EmployeeOrderByWithAggregationInput[]
    by: EmployeeScalarFieldEnum[] | EmployeeScalarFieldEnum
    having?: EmployeeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeeCountAggregateInputType | true
    _avg?: EmployeeAvgAggregateInputType
    _sum?: EmployeeSumAggregateInputType
    _min?: EmployeeMinAggregateInputType
    _max?: EmployeeMaxAggregateInputType
  }

  export type EmployeeGroupByOutputType = {
    id: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string | null
    phone: string | null
    profilePic: string | null
    role: $Enums.EmployeeRole
    reportingManagerId: string | null
    teamId: string | null
    employeeCode: string | null
    city: string | null
    state: string | null
    assignedLatitude: Decimal | null
    assignedLongitude: Decimal | null
    createdAt: Date
    updatedAt: Date
    lastLoginAt: Date | null
    isActive: boolean
    _count: EmployeeCountAggregateOutputType | null
    _avg: EmployeeAvgAggregateOutputType | null
    _sum: EmployeeSumAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  type GetEmployeeGroupByPayload<T extends EmployeeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployeeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
        }
      >
    >


  export type EmployeeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    email?: boolean
    passwordHash?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    profilePic?: boolean
    role?: boolean
    reportingManagerId?: boolean
    teamId?: boolean
    employeeCode?: boolean
    city?: boolean
    state?: boolean
    assignedLatitude?: boolean
    assignedLongitude?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
    isActive?: boolean
    reportingManager?: boolean | Employee$reportingManagerArgs<ExtArgs>
    subordinates?: boolean | Employee$subordinatesArgs<ExtArgs>
    team?: boolean | Employee$teamArgs<ExtArgs>
    leadsTeam?: boolean | Employee$leadsTeamArgs<ExtArgs>
    territories?: boolean | Employee$territoriesArgs<ExtArgs>
    trainingRecords?: boolean | Employee$trainingRecordsArgs<ExtArgs>
    doctorNotes?: boolean | Employee$doctorNotesArgs<ExtArgs>
    chemistNotes?: boolean | Employee$chemistNotesArgs<ExtArgs>
    doctorInteractions?: boolean | Employee$doctorInteractionsArgs<ExtArgs>
    chemistInteractions?: boolean | Employee$chemistInteractionsArgs<ExtArgs>
    dcrReports?: boolean | Employee$dcrReportsArgs<ExtArgs>
    rcpaReports?: boolean | Employee$rcpaReportsArgs<ExtArgs>
    checkIns?: boolean | Employee$checkInsArgs<ExtArgs>
    auditLogs?: boolean | Employee$auditLogsArgs<ExtArgs>
    ordersCreated?: boolean | Employee$ordersCreatedArgs<ExtArgs>
    doctorsCreated?: boolean | Employee$doctorsCreatedArgs<ExtArgs>
    drugsCreated?: boolean | Employee$drugsCreatedArgs<ExtArgs>
    chemistsCreated?: boolean | Employee$chemistsCreatedArgs<ExtArgs>
    doctorChemistRelations?: boolean | Employee$doctorChemistRelationsArgs<ExtArgs>
    expenseClaims?: boolean | Employee$expenseClaimsArgs<ExtArgs>
    approvedClaims?: boolean | Employee$approvedClaimsArgs<ExtArgs>
    drugInventories?: boolean | Employee$drugInventoriesArgs<ExtArgs>
    giftInventories?: boolean | Employee$giftInventoriesArgs<ExtArgs>
    giftsCreated?: boolean | Employee$giftsCreatedArgs<ExtArgs>
    doctorDistributions?: boolean | Employee$doctorDistributionsArgs<ExtArgs>
    taskPlans?: boolean | Employee$taskPlansArgs<ExtArgs>
    doctorTasks?: boolean | Employee$doctorTasksArgs<ExtArgs>
    chemistTasks?: boolean | Employee$chemistTasksArgs<ExtArgs>
    tourPlanTasks?: boolean | Employee$tourPlanTasksArgs<ExtArgs>
    _count?: boolean | EmployeeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    email?: boolean
    passwordHash?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    profilePic?: boolean
    role?: boolean
    reportingManagerId?: boolean
    teamId?: boolean
    employeeCode?: boolean
    city?: boolean
    state?: boolean
    assignedLatitude?: boolean
    assignedLongitude?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
    isActive?: boolean
    reportingManager?: boolean | Employee$reportingManagerArgs<ExtArgs>
    team?: boolean | Employee$teamArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    email?: boolean
    passwordHash?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    profilePic?: boolean
    role?: boolean
    reportingManagerId?: boolean
    teamId?: boolean
    employeeCode?: boolean
    city?: boolean
    state?: boolean
    assignedLatitude?: boolean
    assignedLongitude?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
    isActive?: boolean
    reportingManager?: boolean | Employee$reportingManagerArgs<ExtArgs>
    team?: boolean | Employee$teamArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectScalar = {
    id?: boolean
    organizationId?: boolean
    email?: boolean
    passwordHash?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    profilePic?: boolean
    role?: boolean
    reportingManagerId?: boolean
    teamId?: boolean
    employeeCode?: boolean
    city?: boolean
    state?: boolean
    assignedLatitude?: boolean
    assignedLongitude?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
    isActive?: boolean
  }

  export type EmployeeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "email" | "passwordHash" | "firstName" | "lastName" | "phone" | "profilePic" | "role" | "reportingManagerId" | "teamId" | "employeeCode" | "city" | "state" | "assignedLatitude" | "assignedLongitude" | "createdAt" | "updatedAt" | "lastLoginAt" | "isActive", ExtArgs["result"]["employee"]>
  export type EmployeeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reportingManager?: boolean | Employee$reportingManagerArgs<ExtArgs>
    subordinates?: boolean | Employee$subordinatesArgs<ExtArgs>
    team?: boolean | Employee$teamArgs<ExtArgs>
    leadsTeam?: boolean | Employee$leadsTeamArgs<ExtArgs>
    territories?: boolean | Employee$territoriesArgs<ExtArgs>
    trainingRecords?: boolean | Employee$trainingRecordsArgs<ExtArgs>
    doctorNotes?: boolean | Employee$doctorNotesArgs<ExtArgs>
    chemistNotes?: boolean | Employee$chemistNotesArgs<ExtArgs>
    doctorInteractions?: boolean | Employee$doctorInteractionsArgs<ExtArgs>
    chemistInteractions?: boolean | Employee$chemistInteractionsArgs<ExtArgs>
    dcrReports?: boolean | Employee$dcrReportsArgs<ExtArgs>
    rcpaReports?: boolean | Employee$rcpaReportsArgs<ExtArgs>
    checkIns?: boolean | Employee$checkInsArgs<ExtArgs>
    auditLogs?: boolean | Employee$auditLogsArgs<ExtArgs>
    ordersCreated?: boolean | Employee$ordersCreatedArgs<ExtArgs>
    doctorsCreated?: boolean | Employee$doctorsCreatedArgs<ExtArgs>
    drugsCreated?: boolean | Employee$drugsCreatedArgs<ExtArgs>
    chemistsCreated?: boolean | Employee$chemistsCreatedArgs<ExtArgs>
    doctorChemistRelations?: boolean | Employee$doctorChemistRelationsArgs<ExtArgs>
    expenseClaims?: boolean | Employee$expenseClaimsArgs<ExtArgs>
    approvedClaims?: boolean | Employee$approvedClaimsArgs<ExtArgs>
    drugInventories?: boolean | Employee$drugInventoriesArgs<ExtArgs>
    giftInventories?: boolean | Employee$giftInventoriesArgs<ExtArgs>
    giftsCreated?: boolean | Employee$giftsCreatedArgs<ExtArgs>
    doctorDistributions?: boolean | Employee$doctorDistributionsArgs<ExtArgs>
    taskPlans?: boolean | Employee$taskPlansArgs<ExtArgs>
    doctorTasks?: boolean | Employee$doctorTasksArgs<ExtArgs>
    chemistTasks?: boolean | Employee$chemistTasksArgs<ExtArgs>
    tourPlanTasks?: boolean | Employee$tourPlanTasksArgs<ExtArgs>
    _count?: boolean | EmployeeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EmployeeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reportingManager?: boolean | Employee$reportingManagerArgs<ExtArgs>
    team?: boolean | Employee$teamArgs<ExtArgs>
  }
  export type EmployeeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reportingManager?: boolean | Employee$reportingManagerArgs<ExtArgs>
    team?: boolean | Employee$teamArgs<ExtArgs>
  }

  export type $EmployeePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Employee"
    objects: {
      reportingManager: Prisma.$EmployeePayload<ExtArgs> | null
      subordinates: Prisma.$EmployeePayload<ExtArgs>[]
      team: Prisma.$TeamPayload<ExtArgs> | null
      leadsTeam: Prisma.$TeamPayload<ExtArgs> | null
      territories: Prisma.$EmployeeTerritoryPayload<ExtArgs>[]
      trainingRecords: Prisma.$EmployeeTrainingRecordPayload<ExtArgs>[]
      doctorNotes: Prisma.$DoctorNotePayload<ExtArgs>[]
      chemistNotes: Prisma.$ChemistNotePayload<ExtArgs>[]
      doctorInteractions: Prisma.$DoctorInteractionPayload<ExtArgs>[]
      chemistInteractions: Prisma.$ChemistInteractionPayload<ExtArgs>[]
      dcrReports: Prisma.$DcrReportPayload<ExtArgs>[]
      rcpaReports: Prisma.$RcpaReportPayload<ExtArgs>[]
      checkIns: Prisma.$CheckInPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
      ordersCreated: Prisma.$OrderPayload<ExtArgs>[]
      doctorsCreated: Prisma.$DoctorPayload<ExtArgs>[]
      drugsCreated: Prisma.$DrugPayload<ExtArgs>[]
      chemistsCreated: Prisma.$ChemistPayload<ExtArgs>[]
      doctorChemistRelations: Prisma.$DoctorChemistRelationPayload<ExtArgs>[]
      expenseClaims: Prisma.$ExpenseClaimPayload<ExtArgs>[]
      approvedClaims: Prisma.$ExpenseClaimPayload<ExtArgs>[]
      drugInventories: Prisma.$UserDrugInventoryPayload<ExtArgs>[]
      giftInventories: Prisma.$UserGiftInventoryPayload<ExtArgs>[]
      giftsCreated: Prisma.$GiftPayload<ExtArgs>[]
      doctorDistributions: Prisma.$DoctorDistributionPayload<ExtArgs>[]
      taskPlans: Prisma.$TaskPlannerPayload<ExtArgs>[]
      doctorTasks: Prisma.$DoctorTaskPayload<ExtArgs>[]
      chemistTasks: Prisma.$ChemistTaskPayload<ExtArgs>[]
      tourPlanTasks: Prisma.$TourPlanTaskPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      email: string
      passwordHash: string
      firstName: string
      lastName: string | null
      phone: string | null
      profilePic: string | null
      role: $Enums.EmployeeRole
      reportingManagerId: string | null
      teamId: string | null
      employeeCode: string | null
      city: string | null
      state: string | null
      assignedLatitude: Prisma.Decimal | null
      assignedLongitude: Prisma.Decimal | null
      createdAt: Date
      updatedAt: Date
      lastLoginAt: Date | null
      isActive: boolean
    }, ExtArgs["result"]["employee"]>
    composites: {}
  }

  type EmployeeGetPayload<S extends boolean | null | undefined | EmployeeDefaultArgs> = $Result.GetResult<Prisma.$EmployeePayload, S>

  type EmployeeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmployeeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmployeeCountAggregateInputType | true
    }

  export interface EmployeeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Employee'], meta: { name: 'Employee' } }
    /**
     * Find zero or one Employee that matches the filter.
     * @param {EmployeeFindUniqueArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmployeeFindUniqueArgs>(args: SelectSubset<T, EmployeeFindUniqueArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Employee that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmployeeFindUniqueOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmployeeFindUniqueOrThrowArgs>(args: SelectSubset<T, EmployeeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Employee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmployeeFindFirstArgs>(args?: SelectSubset<T, EmployeeFindFirstArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Employee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmployeeFindFirstOrThrowArgs>(args?: SelectSubset<T, EmployeeFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Employees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Employees
     * const employees = await prisma.employee.findMany()
     * 
     * // Get first 10 Employees
     * const employees = await prisma.employee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeeWithIdOnly = await prisma.employee.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmployeeFindManyArgs>(args?: SelectSubset<T, EmployeeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Employee.
     * @param {EmployeeCreateArgs} args - Arguments to create a Employee.
     * @example
     * // Create one Employee
     * const Employee = await prisma.employee.create({
     *   data: {
     *     // ... data to create a Employee
     *   }
     * })
     * 
     */
    create<T extends EmployeeCreateArgs>(args: SelectSubset<T, EmployeeCreateArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Employees.
     * @param {EmployeeCreateManyArgs} args - Arguments to create many Employees.
     * @example
     * // Create many Employees
     * const employee = await prisma.employee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmployeeCreateManyArgs>(args?: SelectSubset<T, EmployeeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Employees and returns the data saved in the database.
     * @param {EmployeeCreateManyAndReturnArgs} args - Arguments to create many Employees.
     * @example
     * // Create many Employees
     * const employee = await prisma.employee.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Employees and only return the `id`
     * const employeeWithIdOnly = await prisma.employee.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmployeeCreateManyAndReturnArgs>(args?: SelectSubset<T, EmployeeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Employee.
     * @param {EmployeeDeleteArgs} args - Arguments to delete one Employee.
     * @example
     * // Delete one Employee
     * const Employee = await prisma.employee.delete({
     *   where: {
     *     // ... filter to delete one Employee
     *   }
     * })
     * 
     */
    delete<T extends EmployeeDeleteArgs>(args: SelectSubset<T, EmployeeDeleteArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Employee.
     * @param {EmployeeUpdateArgs} args - Arguments to update one Employee.
     * @example
     * // Update one Employee
     * const employee = await prisma.employee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmployeeUpdateArgs>(args: SelectSubset<T, EmployeeUpdateArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Employees.
     * @param {EmployeeDeleteManyArgs} args - Arguments to filter Employees to delete.
     * @example
     * // Delete a few Employees
     * const { count } = await prisma.employee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmployeeDeleteManyArgs>(args?: SelectSubset<T, EmployeeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Employees
     * const employee = await prisma.employee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmployeeUpdateManyArgs>(args: SelectSubset<T, EmployeeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employees and returns the data updated in the database.
     * @param {EmployeeUpdateManyAndReturnArgs} args - Arguments to update many Employees.
     * @example
     * // Update many Employees
     * const employee = await prisma.employee.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Employees and only return the `id`
     * const employeeWithIdOnly = await prisma.employee.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmployeeUpdateManyAndReturnArgs>(args: SelectSubset<T, EmployeeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Employee.
     * @param {EmployeeUpsertArgs} args - Arguments to update or create a Employee.
     * @example
     * // Update or create a Employee
     * const employee = await prisma.employee.upsert({
     *   create: {
     *     // ... data to create a Employee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Employee we want to update
     *   }
     * })
     */
    upsert<T extends EmployeeUpsertArgs>(args: SelectSubset<T, EmployeeUpsertArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeCountArgs} args - Arguments to filter Employees to count.
     * @example
     * // Count the number of Employees
     * const count = await prisma.employee.count({
     *   where: {
     *     // ... the filter for the Employees we want to count
     *   }
     * })
    **/
    count<T extends EmployeeCountArgs>(
      args?: Subset<T, EmployeeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeAggregateArgs>(args: Subset<T, EmployeeAggregateArgs>): Prisma.PrismaPromise<GetEmployeeAggregateType<T>>

    /**
     * Group by Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployeeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployeeGroupByArgs['orderBy'] }
        : { orderBy?: EmployeeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployeeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Employee model
   */
  readonly fields: EmployeeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Employee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmployeeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    reportingManager<T extends Employee$reportingManagerArgs<ExtArgs> = {}>(args?: Subset<T, Employee$reportingManagerArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    subordinates<T extends Employee$subordinatesArgs<ExtArgs> = {}>(args?: Subset<T, Employee$subordinatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    team<T extends Employee$teamArgs<ExtArgs> = {}>(args?: Subset<T, Employee$teamArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    leadsTeam<T extends Employee$leadsTeamArgs<ExtArgs> = {}>(args?: Subset<T, Employee$leadsTeamArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    territories<T extends Employee$territoriesArgs<ExtArgs> = {}>(args?: Subset<T, Employee$territoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeeTerritoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    trainingRecords<T extends Employee$trainingRecordsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$trainingRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeeTrainingRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    doctorNotes<T extends Employee$doctorNotesArgs<ExtArgs> = {}>(args?: Subset<T, Employee$doctorNotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorNotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    chemistNotes<T extends Employee$chemistNotesArgs<ExtArgs> = {}>(args?: Subset<T, Employee$chemistNotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChemistNotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    doctorInteractions<T extends Employee$doctorInteractionsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$doctorInteractionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorInteractionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    chemistInteractions<T extends Employee$chemistInteractionsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$chemistInteractionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChemistInteractionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    dcrReports<T extends Employee$dcrReportsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$dcrReportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DcrReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rcpaReports<T extends Employee$rcpaReportsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$rcpaReportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RcpaReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    checkIns<T extends Employee$checkInsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$checkInsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditLogs<T extends Employee$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ordersCreated<T extends Employee$ordersCreatedArgs<ExtArgs> = {}>(args?: Subset<T, Employee$ordersCreatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    doctorsCreated<T extends Employee$doctorsCreatedArgs<ExtArgs> = {}>(args?: Subset<T, Employee$doctorsCreatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    drugsCreated<T extends Employee$drugsCreatedArgs<ExtArgs> = {}>(args?: Subset<T, Employee$drugsCreatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DrugPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    chemistsCreated<T extends Employee$chemistsCreatedArgs<ExtArgs> = {}>(args?: Subset<T, Employee$chemistsCreatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChemistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    doctorChemistRelations<T extends Employee$doctorChemistRelationsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$doctorChemistRelationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorChemistRelationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    expenseClaims<T extends Employee$expenseClaimsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$expenseClaimsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpenseClaimPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    approvedClaims<T extends Employee$approvedClaimsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$approvedClaimsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpenseClaimPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    drugInventories<T extends Employee$drugInventoriesArgs<ExtArgs> = {}>(args?: Subset<T, Employee$drugInventoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserDrugInventoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    giftInventories<T extends Employee$giftInventoriesArgs<ExtArgs> = {}>(args?: Subset<T, Employee$giftInventoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserGiftInventoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    giftsCreated<T extends Employee$giftsCreatedArgs<ExtArgs> = {}>(args?: Subset<T, Employee$giftsCreatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GiftPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    doctorDistributions<T extends Employee$doctorDistributionsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$doctorDistributionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorDistributionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    taskPlans<T extends Employee$taskPlansArgs<ExtArgs> = {}>(args?: Subset<T, Employee$taskPlansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPlannerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    doctorTasks<T extends Employee$doctorTasksArgs<ExtArgs> = {}>(args?: Subset<T, Employee$doctorTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorTaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    chemistTasks<T extends Employee$chemistTasksArgs<ExtArgs> = {}>(args?: Subset<T, Employee$chemistTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChemistTaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tourPlanTasks<T extends Employee$tourPlanTasksArgs<ExtArgs> = {}>(args?: Subset<T, Employee$tourPlanTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TourPlanTaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Employee model
   */
  interface EmployeeFieldRefs {
    readonly id: FieldRef<"Employee", 'String'>
    readonly organizationId: FieldRef<"Employee", 'String'>
    readonly email: FieldRef<"Employee", 'String'>
    readonly passwordHash: FieldRef<"Employee", 'String'>
    readonly firstName: FieldRef<"Employee", 'String'>
    readonly lastName: FieldRef<"Employee", 'String'>
    readonly phone: FieldRef<"Employee", 'String'>
    readonly profilePic: FieldRef<"Employee", 'String'>
    readonly role: FieldRef<"Employee", 'EmployeeRole'>
    readonly reportingManagerId: FieldRef<"Employee", 'String'>
    readonly teamId: FieldRef<"Employee", 'String'>
    readonly employeeCode: FieldRef<"Employee", 'String'>
    readonly city: FieldRef<"Employee", 'String'>
    readonly state: FieldRef<"Employee", 'String'>
    readonly assignedLatitude: FieldRef<"Employee", 'Decimal'>
    readonly assignedLongitude: FieldRef<"Employee", 'Decimal'>
    readonly createdAt: FieldRef<"Employee", 'DateTime'>
    readonly updatedAt: FieldRef<"Employee", 'DateTime'>
    readonly lastLoginAt: FieldRef<"Employee", 'DateTime'>
    readonly isActive: FieldRef<"Employee", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Employee findUnique
   */
  export type EmployeeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee findUniqueOrThrow
   */
  export type EmployeeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee findFirst
   */
  export type EmployeeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee findFirstOrThrow
   */
  export type EmployeeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee findMany
   */
  export type EmployeeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employees to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee create
   */
  export type EmployeeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to create a Employee.
     */
    data: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
  }

  /**
   * Employee createMany
   */
  export type EmployeeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Employees.
     */
    data: EmployeeCreateManyInput | EmployeeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Employee createManyAndReturn
   */
  export type EmployeeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * The data used to create many Employees.
     */
    data: EmployeeCreateManyInput | EmployeeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Employee update
   */
  export type EmployeeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to update a Employee.
     */
    data: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
    /**
     * Choose, which Employee to update.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee updateMany
   */
  export type EmployeeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Employees.
     */
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyInput>
    /**
     * Filter which Employees to update
     */
    where?: EmployeeWhereInput
    /**
     * Limit how many Employees to update.
     */
    limit?: number
  }

  /**
   * Employee updateManyAndReturn
   */
  export type EmployeeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * The data used to update Employees.
     */
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyInput>
    /**
     * Filter which Employees to update
     */
    where?: EmployeeWhereInput
    /**
     * Limit how many Employees to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Employee upsert
   */
  export type EmployeeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The filter to search for the Employee to update in case it exists.
     */
    where: EmployeeWhereUniqueInput
    /**
     * In case the Employee found by the `where` argument doesn't exist, create a new Employee with this data.
     */
    create: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
    /**
     * In case the Employee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
  }

  /**
   * Employee delete
   */
  export type EmployeeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter which Employee to delete.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee deleteMany
   */
  export type EmployeeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employees to delete
     */
    where?: EmployeeWhereInput
    /**
     * Limit how many Employees to delete.
     */
    limit?: number
  }

  /**
   * Employee.reportingManager
   */
  export type Employee$reportingManagerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
  }

  /**
   * Employee.subordinates
   */
  export type Employee$subordinatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    cursor?: EmployeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee.team
   */
  export type Employee$teamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    where?: TeamWhereInput
  }

  /**
   * Employee.leadsTeam
   */
  export type Employee$leadsTeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    where?: TeamWhereInput
  }

  /**
   * Employee.territories
   */
  export type Employee$territoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTerritory
     */
    select?: EmployeeTerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTerritory
     */
    omit?: EmployeeTerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTerritoryInclude<ExtArgs> | null
    where?: EmployeeTerritoryWhereInput
    orderBy?: EmployeeTerritoryOrderByWithRelationInput | EmployeeTerritoryOrderByWithRelationInput[]
    cursor?: EmployeeTerritoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployeeTerritoryScalarFieldEnum | EmployeeTerritoryScalarFieldEnum[]
  }

  /**
   * Employee.trainingRecords
   */
  export type Employee$trainingRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTrainingRecord
     */
    select?: EmployeeTrainingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTrainingRecord
     */
    omit?: EmployeeTrainingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTrainingRecordInclude<ExtArgs> | null
    where?: EmployeeTrainingRecordWhereInput
    orderBy?: EmployeeTrainingRecordOrderByWithRelationInput | EmployeeTrainingRecordOrderByWithRelationInput[]
    cursor?: EmployeeTrainingRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployeeTrainingRecordScalarFieldEnum | EmployeeTrainingRecordScalarFieldEnum[]
  }

  /**
   * Employee.doctorNotes
   */
  export type Employee$doctorNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorNote
     */
    select?: DoctorNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorNote
     */
    omit?: DoctorNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorNoteInclude<ExtArgs> | null
    where?: DoctorNoteWhereInput
    orderBy?: DoctorNoteOrderByWithRelationInput | DoctorNoteOrderByWithRelationInput[]
    cursor?: DoctorNoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorNoteScalarFieldEnum | DoctorNoteScalarFieldEnum[]
  }

  /**
   * Employee.chemistNotes
   */
  export type Employee$chemistNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistNote
     */
    select?: ChemistNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistNote
     */
    omit?: ChemistNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistNoteInclude<ExtArgs> | null
    where?: ChemistNoteWhereInput
    orderBy?: ChemistNoteOrderByWithRelationInput | ChemistNoteOrderByWithRelationInput[]
    cursor?: ChemistNoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChemistNoteScalarFieldEnum | ChemistNoteScalarFieldEnum[]
  }

  /**
   * Employee.doctorInteractions
   */
  export type Employee$doctorInteractionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorInteraction
     */
    select?: DoctorInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorInteraction
     */
    omit?: DoctorInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInteractionInclude<ExtArgs> | null
    where?: DoctorInteractionWhereInput
    orderBy?: DoctorInteractionOrderByWithRelationInput | DoctorInteractionOrderByWithRelationInput[]
    cursor?: DoctorInteractionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorInteractionScalarFieldEnum | DoctorInteractionScalarFieldEnum[]
  }

  /**
   * Employee.chemistInteractions
   */
  export type Employee$chemistInteractionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistInteraction
     */
    select?: ChemistInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistInteraction
     */
    omit?: ChemistInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistInteractionInclude<ExtArgs> | null
    where?: ChemistInteractionWhereInput
    orderBy?: ChemistInteractionOrderByWithRelationInput | ChemistInteractionOrderByWithRelationInput[]
    cursor?: ChemistInteractionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChemistInteractionScalarFieldEnum | ChemistInteractionScalarFieldEnum[]
  }

  /**
   * Employee.dcrReports
   */
  export type Employee$dcrReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DcrReport
     */
    select?: DcrReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DcrReport
     */
    omit?: DcrReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DcrReportInclude<ExtArgs> | null
    where?: DcrReportWhereInput
    orderBy?: DcrReportOrderByWithRelationInput | DcrReportOrderByWithRelationInput[]
    cursor?: DcrReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DcrReportScalarFieldEnum | DcrReportScalarFieldEnum[]
  }

  /**
   * Employee.rcpaReports
   */
  export type Employee$rcpaReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RcpaReport
     */
    select?: RcpaReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RcpaReport
     */
    omit?: RcpaReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RcpaReportInclude<ExtArgs> | null
    where?: RcpaReportWhereInput
    orderBy?: RcpaReportOrderByWithRelationInput | RcpaReportOrderByWithRelationInput[]
    cursor?: RcpaReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RcpaReportScalarFieldEnum | RcpaReportScalarFieldEnum[]
  }

  /**
   * Employee.checkIns
   */
  export type Employee$checkInsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckIn
     */
    select?: CheckInSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckIn
     */
    omit?: CheckInOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckInInclude<ExtArgs> | null
    where?: CheckInWhereInput
    orderBy?: CheckInOrderByWithRelationInput | CheckInOrderByWithRelationInput[]
    cursor?: CheckInWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CheckInScalarFieldEnum | CheckInScalarFieldEnum[]
  }

  /**
   * Employee.auditLogs
   */
  export type Employee$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * Employee.ordersCreated
   */
  export type Employee$ordersCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Employee.doctorsCreated
   */
  export type Employee$doctorsCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    where?: DoctorWhereInput
    orderBy?: DoctorOrderByWithRelationInput | DoctorOrderByWithRelationInput[]
    cursor?: DoctorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }

  /**
   * Employee.drugsCreated
   */
  export type Employee$drugsCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Drug
     */
    select?: DrugSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Drug
     */
    omit?: DrugOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrugInclude<ExtArgs> | null
    where?: DrugWhereInput
    orderBy?: DrugOrderByWithRelationInput | DrugOrderByWithRelationInput[]
    cursor?: DrugWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DrugScalarFieldEnum | DrugScalarFieldEnum[]
  }

  /**
   * Employee.chemistsCreated
   */
  export type Employee$chemistsCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chemist
     */
    select?: ChemistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chemist
     */
    omit?: ChemistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistInclude<ExtArgs> | null
    where?: ChemistWhereInput
    orderBy?: ChemistOrderByWithRelationInput | ChemistOrderByWithRelationInput[]
    cursor?: ChemistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChemistScalarFieldEnum | ChemistScalarFieldEnum[]
  }

  /**
   * Employee.doctorChemistRelations
   */
  export type Employee$doctorChemistRelationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorChemistRelation
     */
    select?: DoctorChemistRelationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorChemistRelation
     */
    omit?: DoctorChemistRelationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorChemistRelationInclude<ExtArgs> | null
    where?: DoctorChemistRelationWhereInput
    orderBy?: DoctorChemistRelationOrderByWithRelationInput | DoctorChemistRelationOrderByWithRelationInput[]
    cursor?: DoctorChemistRelationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorChemistRelationScalarFieldEnum | DoctorChemistRelationScalarFieldEnum[]
  }

  /**
   * Employee.expenseClaims
   */
  export type Employee$expenseClaimsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseClaim
     */
    select?: ExpenseClaimSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseClaim
     */
    omit?: ExpenseClaimOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseClaimInclude<ExtArgs> | null
    where?: ExpenseClaimWhereInput
    orderBy?: ExpenseClaimOrderByWithRelationInput | ExpenseClaimOrderByWithRelationInput[]
    cursor?: ExpenseClaimWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExpenseClaimScalarFieldEnum | ExpenseClaimScalarFieldEnum[]
  }

  /**
   * Employee.approvedClaims
   */
  export type Employee$approvedClaimsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseClaim
     */
    select?: ExpenseClaimSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseClaim
     */
    omit?: ExpenseClaimOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseClaimInclude<ExtArgs> | null
    where?: ExpenseClaimWhereInput
    orderBy?: ExpenseClaimOrderByWithRelationInput | ExpenseClaimOrderByWithRelationInput[]
    cursor?: ExpenseClaimWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExpenseClaimScalarFieldEnum | ExpenseClaimScalarFieldEnum[]
  }

  /**
   * Employee.drugInventories
   */
  export type Employee$drugInventoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDrugInventory
     */
    select?: UserDrugInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDrugInventory
     */
    omit?: UserDrugInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDrugInventoryInclude<ExtArgs> | null
    where?: UserDrugInventoryWhereInput
    orderBy?: UserDrugInventoryOrderByWithRelationInput | UserDrugInventoryOrderByWithRelationInput[]
    cursor?: UserDrugInventoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserDrugInventoryScalarFieldEnum | UserDrugInventoryScalarFieldEnum[]
  }

  /**
   * Employee.giftInventories
   */
  export type Employee$giftInventoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGiftInventory
     */
    select?: UserGiftInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserGiftInventory
     */
    omit?: UserGiftInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGiftInventoryInclude<ExtArgs> | null
    where?: UserGiftInventoryWhereInput
    orderBy?: UserGiftInventoryOrderByWithRelationInput | UserGiftInventoryOrderByWithRelationInput[]
    cursor?: UserGiftInventoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserGiftInventoryScalarFieldEnum | UserGiftInventoryScalarFieldEnum[]
  }

  /**
   * Employee.giftsCreated
   */
  export type Employee$giftsCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gift
     */
    select?: GiftSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gift
     */
    omit?: GiftOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GiftInclude<ExtArgs> | null
    where?: GiftWhereInput
    orderBy?: GiftOrderByWithRelationInput | GiftOrderByWithRelationInput[]
    cursor?: GiftWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GiftScalarFieldEnum | GiftScalarFieldEnum[]
  }

  /**
   * Employee.doctorDistributions
   */
  export type Employee$doctorDistributionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistribution
     */
    select?: DoctorDistributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistribution
     */
    omit?: DoctorDistributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionInclude<ExtArgs> | null
    where?: DoctorDistributionWhereInput
    orderBy?: DoctorDistributionOrderByWithRelationInput | DoctorDistributionOrderByWithRelationInput[]
    cursor?: DoctorDistributionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorDistributionScalarFieldEnum | DoctorDistributionScalarFieldEnum[]
  }

  /**
   * Employee.taskPlans
   */
  export type Employee$taskPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskPlanner
     */
    select?: TaskPlannerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskPlanner
     */
    omit?: TaskPlannerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskPlannerInclude<ExtArgs> | null
    where?: TaskPlannerWhereInput
    orderBy?: TaskPlannerOrderByWithRelationInput | TaskPlannerOrderByWithRelationInput[]
    cursor?: TaskPlannerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskPlannerScalarFieldEnum | TaskPlannerScalarFieldEnum[]
  }

  /**
   * Employee.doctorTasks
   */
  export type Employee$doctorTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorTask
     */
    select?: DoctorTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorTask
     */
    omit?: DoctorTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorTaskInclude<ExtArgs> | null
    where?: DoctorTaskWhereInput
    orderBy?: DoctorTaskOrderByWithRelationInput | DoctorTaskOrderByWithRelationInput[]
    cursor?: DoctorTaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorTaskScalarFieldEnum | DoctorTaskScalarFieldEnum[]
  }

  /**
   * Employee.chemistTasks
   */
  export type Employee$chemistTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistTask
     */
    select?: ChemistTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistTask
     */
    omit?: ChemistTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistTaskInclude<ExtArgs> | null
    where?: ChemistTaskWhereInput
    orderBy?: ChemistTaskOrderByWithRelationInput | ChemistTaskOrderByWithRelationInput[]
    cursor?: ChemistTaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChemistTaskScalarFieldEnum | ChemistTaskScalarFieldEnum[]
  }

  /**
   * Employee.tourPlanTasks
   */
  export type Employee$tourPlanTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlanTask
     */
    select?: TourPlanTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlanTask
     */
    omit?: TourPlanTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanTaskInclude<ExtArgs> | null
    where?: TourPlanTaskWhereInput
    orderBy?: TourPlanTaskOrderByWithRelationInput | TourPlanTaskOrderByWithRelationInput[]
    cursor?: TourPlanTaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TourPlanTaskScalarFieldEnum | TourPlanTaskScalarFieldEnum[]
  }

  /**
   * Employee without action
   */
  export type EmployeeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
  }


  /**
   * Model Team
   */

  export type AggregateTeam = {
    _count: TeamCountAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  export type TeamMinAggregateOutputType = {
    id: string | null
    teamName: string | null
    leadId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isActive: boolean | null
  }

  export type TeamMaxAggregateOutputType = {
    id: string | null
    teamName: string | null
    leadId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isActive: boolean | null
  }

  export type TeamCountAggregateOutputType = {
    id: number
    teamName: number
    leadId: number
    createdAt: number
    updatedAt: number
    isActive: number
    _all: number
  }


  export type TeamMinAggregateInputType = {
    id?: true
    teamName?: true
    leadId?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
  }

  export type TeamMaxAggregateInputType = {
    id?: true
    teamName?: true
    leadId?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
  }

  export type TeamCountAggregateInputType = {
    id?: true
    teamName?: true
    leadId?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
    _all?: true
  }

  export type TeamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Team to aggregate.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teams
    **/
    _count?: true | TeamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMaxAggregateInputType
  }

  export type GetTeamAggregateType<T extends TeamAggregateArgs> = {
        [P in keyof T & keyof AggregateTeam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeam[P]>
      : GetScalarType<T[P], AggregateTeam[P]>
  }




  export type TeamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithAggregationInput | TeamOrderByWithAggregationInput[]
    by: TeamScalarFieldEnum[] | TeamScalarFieldEnum
    having?: TeamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamCountAggregateInputType | true
    _min?: TeamMinAggregateInputType
    _max?: TeamMaxAggregateInputType
  }

  export type TeamGroupByOutputType = {
    id: string
    teamName: string
    leadId: string
    createdAt: Date
    updatedAt: Date
    isActive: boolean
    _count: TeamCountAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  type GetTeamGroupByPayload<T extends TeamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamGroupByOutputType[P]>
            : GetScalarType<T[P], TeamGroupByOutputType[P]>
        }
      >
    >


  export type TeamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamName?: boolean
    leadId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    leadName?: boolean | EmployeeDefaultArgs<ExtArgs>
    teamMembers?: boolean | Team$teamMembersArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>

  export type TeamSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamName?: boolean
    leadId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    leadName?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>

  export type TeamSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamName?: boolean
    leadId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    leadName?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>

  export type TeamSelectScalar = {
    id?: boolean
    teamName?: boolean
    leadId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
  }

  export type TeamOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "teamName" | "leadId" | "createdAt" | "updatedAt" | "isActive", ExtArgs["result"]["team"]>
  export type TeamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leadName?: boolean | EmployeeDefaultArgs<ExtArgs>
    teamMembers?: boolean | Team$teamMembersArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TeamIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leadName?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type TeamIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leadName?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $TeamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Team"
    objects: {
      leadName: Prisma.$EmployeePayload<ExtArgs>
      teamMembers: Prisma.$EmployeePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      teamName: string
      leadId: string
      createdAt: Date
      updatedAt: Date
      isActive: boolean
    }, ExtArgs["result"]["team"]>
    composites: {}
  }

  type TeamGetPayload<S extends boolean | null | undefined | TeamDefaultArgs> = $Result.GetResult<Prisma.$TeamPayload, S>

  type TeamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeamFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeamCountAggregateInputType | true
    }

  export interface TeamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Team'], meta: { name: 'Team' } }
    /**
     * Find zero or one Team that matches the filter.
     * @param {TeamFindUniqueArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamFindUniqueArgs>(args: SelectSubset<T, TeamFindUniqueArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Team that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeamFindUniqueOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Team that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamFindFirstArgs>(args?: SelectSubset<T, TeamFindFirstArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Team that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teams
     * const teams = await prisma.team.findMany()
     * 
     * // Get first 10 Teams
     * const teams = await prisma.team.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamWithIdOnly = await prisma.team.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamFindManyArgs>(args?: SelectSubset<T, TeamFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Team.
     * @param {TeamCreateArgs} args - Arguments to create a Team.
     * @example
     * // Create one Team
     * const Team = await prisma.team.create({
     *   data: {
     *     // ... data to create a Team
     *   }
     * })
     * 
     */
    create<T extends TeamCreateArgs>(args: SelectSubset<T, TeamCreateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Teams.
     * @param {TeamCreateManyArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamCreateManyArgs>(args?: SelectSubset<T, TeamCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Teams and returns the data saved in the database.
     * @param {TeamCreateManyAndReturnArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Teams and only return the `id`
     * const teamWithIdOnly = await prisma.team.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeamCreateManyAndReturnArgs>(args?: SelectSubset<T, TeamCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Team.
     * @param {TeamDeleteArgs} args - Arguments to delete one Team.
     * @example
     * // Delete one Team
     * const Team = await prisma.team.delete({
     *   where: {
     *     // ... filter to delete one Team
     *   }
     * })
     * 
     */
    delete<T extends TeamDeleteArgs>(args: SelectSubset<T, TeamDeleteArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Team.
     * @param {TeamUpdateArgs} args - Arguments to update one Team.
     * @example
     * // Update one Team
     * const team = await prisma.team.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamUpdateArgs>(args: SelectSubset<T, TeamUpdateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Teams.
     * @param {TeamDeleteManyArgs} args - Arguments to filter Teams to delete.
     * @example
     * // Delete a few Teams
     * const { count } = await prisma.team.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamDeleteManyArgs>(args?: SelectSubset<T, TeamDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamUpdateManyArgs>(args: SelectSubset<T, TeamUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams and returns the data updated in the database.
     * @param {TeamUpdateManyAndReturnArgs} args - Arguments to update many Teams.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Teams and only return the `id`
     * const teamWithIdOnly = await prisma.team.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeamUpdateManyAndReturnArgs>(args: SelectSubset<T, TeamUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Team.
     * @param {TeamUpsertArgs} args - Arguments to update or create a Team.
     * @example
     * // Update or create a Team
     * const team = await prisma.team.upsert({
     *   create: {
     *     // ... data to create a Team
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Team we want to update
     *   }
     * })
     */
    upsert<T extends TeamUpsertArgs>(args: SelectSubset<T, TeamUpsertArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCountArgs} args - Arguments to filter Teams to count.
     * @example
     * // Count the number of Teams
     * const count = await prisma.team.count({
     *   where: {
     *     // ... the filter for the Teams we want to count
     *   }
     * })
    **/
    count<T extends TeamCountArgs>(
      args?: Subset<T, TeamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamAggregateArgs>(args: Subset<T, TeamAggregateArgs>): Prisma.PrismaPromise<GetTeamAggregateType<T>>

    /**
     * Group by Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamGroupByArgs['orderBy'] }
        : { orderBy?: TeamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Team model
   */
  readonly fields: TeamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Team.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    leadName<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    teamMembers<T extends Team$teamMembersArgs<ExtArgs> = {}>(args?: Subset<T, Team$teamMembersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Team model
   */
  interface TeamFieldRefs {
    readonly id: FieldRef<"Team", 'String'>
    readonly teamName: FieldRef<"Team", 'String'>
    readonly leadId: FieldRef<"Team", 'String'>
    readonly createdAt: FieldRef<"Team", 'DateTime'>
    readonly updatedAt: FieldRef<"Team", 'DateTime'>
    readonly isActive: FieldRef<"Team", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Team findUnique
   */
  export type TeamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findUniqueOrThrow
   */
  export type TeamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findFirst
   */
  export type TeamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findFirstOrThrow
   */
  export type TeamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findMany
   */
  export type TeamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team create
   */
  export type TeamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to create a Team.
     */
    data: XOR<TeamCreateInput, TeamUncheckedCreateInput>
  }

  /**
   * Team createMany
   */
  export type TeamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Team createManyAndReturn
   */
  export type TeamCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Team update
   */
  export type TeamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to update a Team.
     */
    data: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
    /**
     * Choose, which Team to update.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team updateMany
   */
  export type TeamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamWhereInput
    /**
     * Limit how many Teams to update.
     */
    limit?: number
  }

  /**
   * Team updateManyAndReturn
   */
  export type TeamUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamWhereInput
    /**
     * Limit how many Teams to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Team upsert
   */
  export type TeamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The filter to search for the Team to update in case it exists.
     */
    where: TeamWhereUniqueInput
    /**
     * In case the Team found by the `where` argument doesn't exist, create a new Team with this data.
     */
    create: XOR<TeamCreateInput, TeamUncheckedCreateInput>
    /**
     * In case the Team was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
  }

  /**
   * Team delete
   */
  export type TeamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter which Team to delete.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team deleteMany
   */
  export type TeamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teams to delete
     */
    where?: TeamWhereInput
    /**
     * Limit how many Teams to delete.
     */
    limit?: number
  }

  /**
   * Team.teamMembers
   */
  export type Team$teamMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    cursor?: EmployeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Team without action
   */
  export type TeamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
  }


  /**
   * Model Territory
   */

  export type AggregateTerritory = {
    _count: TerritoryCountAggregateOutputType | null
    _min: TerritoryMinAggregateOutputType | null
    _max: TerritoryMaxAggregateOutputType | null
  }

  export type TerritoryMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    name: string | null
    type: string | null
    parentTerritoryId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TerritoryMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    name: string | null
    type: string | null
    parentTerritoryId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TerritoryCountAggregateOutputType = {
    id: number
    organizationId: number
    name: number
    type: number
    parentTerritoryId: number
    boundaries: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TerritoryMinAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    type?: true
    parentTerritoryId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TerritoryMaxAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    type?: true
    parentTerritoryId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TerritoryCountAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    type?: true
    parentTerritoryId?: true
    boundaries?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TerritoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Territory to aggregate.
     */
    where?: TerritoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Territories to fetch.
     */
    orderBy?: TerritoryOrderByWithRelationInput | TerritoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TerritoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Territories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Territories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Territories
    **/
    _count?: true | TerritoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TerritoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TerritoryMaxAggregateInputType
  }

  export type GetTerritoryAggregateType<T extends TerritoryAggregateArgs> = {
        [P in keyof T & keyof AggregateTerritory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTerritory[P]>
      : GetScalarType<T[P], AggregateTerritory[P]>
  }




  export type TerritoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TerritoryWhereInput
    orderBy?: TerritoryOrderByWithAggregationInput | TerritoryOrderByWithAggregationInput[]
    by: TerritoryScalarFieldEnum[] | TerritoryScalarFieldEnum
    having?: TerritoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TerritoryCountAggregateInputType | true
    _min?: TerritoryMinAggregateInputType
    _max?: TerritoryMaxAggregateInputType
  }

  export type TerritoryGroupByOutputType = {
    id: string
    organizationId: string
    name: string
    type: string
    parentTerritoryId: string | null
    boundaries: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: TerritoryCountAggregateOutputType | null
    _min: TerritoryMinAggregateOutputType | null
    _max: TerritoryMaxAggregateOutputType | null
  }

  type GetTerritoryGroupByPayload<T extends TerritoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TerritoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TerritoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TerritoryGroupByOutputType[P]>
            : GetScalarType<T[P], TerritoryGroupByOutputType[P]>
        }
      >
    >


  export type TerritorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    type?: boolean
    parentTerritoryId?: boolean
    boundaries?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parentTerritory?: boolean | Territory$parentTerritoryArgs<ExtArgs>
    childTerritories?: boolean | Territory$childTerritoriesArgs<ExtArgs>
    employees?: boolean | Territory$employeesArgs<ExtArgs>
    hospitals?: boolean | Territory$hospitalsArgs<ExtArgs>
    chemists?: boolean | Territory$chemistsArgs<ExtArgs>
    _count?: boolean | TerritoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["territory"]>

  export type TerritorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    type?: boolean
    parentTerritoryId?: boolean
    boundaries?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parentTerritory?: boolean | Territory$parentTerritoryArgs<ExtArgs>
  }, ExtArgs["result"]["territory"]>

  export type TerritorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    type?: boolean
    parentTerritoryId?: boolean
    boundaries?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parentTerritory?: boolean | Territory$parentTerritoryArgs<ExtArgs>
  }, ExtArgs["result"]["territory"]>

  export type TerritorySelectScalar = {
    id?: boolean
    organizationId?: boolean
    name?: boolean
    type?: boolean
    parentTerritoryId?: boolean
    boundaries?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TerritoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "name" | "type" | "parentTerritoryId" | "boundaries" | "createdAt" | "updatedAt", ExtArgs["result"]["territory"]>
  export type TerritoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parentTerritory?: boolean | Territory$parentTerritoryArgs<ExtArgs>
    childTerritories?: boolean | Territory$childTerritoriesArgs<ExtArgs>
    employees?: boolean | Territory$employeesArgs<ExtArgs>
    hospitals?: boolean | Territory$hospitalsArgs<ExtArgs>
    chemists?: boolean | Territory$chemistsArgs<ExtArgs>
    _count?: boolean | TerritoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TerritoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parentTerritory?: boolean | Territory$parentTerritoryArgs<ExtArgs>
  }
  export type TerritoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parentTerritory?: boolean | Territory$parentTerritoryArgs<ExtArgs>
  }

  export type $TerritoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Territory"
    objects: {
      parentTerritory: Prisma.$TerritoryPayload<ExtArgs> | null
      childTerritories: Prisma.$TerritoryPayload<ExtArgs>[]
      employees: Prisma.$EmployeeTerritoryPayload<ExtArgs>[]
      hospitals: Prisma.$HospitalPayload<ExtArgs>[]
      chemists: Prisma.$ChemistPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      name: string
      type: string
      parentTerritoryId: string | null
      boundaries: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["territory"]>
    composites: {}
  }

  type TerritoryGetPayload<S extends boolean | null | undefined | TerritoryDefaultArgs> = $Result.GetResult<Prisma.$TerritoryPayload, S>

  type TerritoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TerritoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TerritoryCountAggregateInputType | true
    }

  export interface TerritoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Territory'], meta: { name: 'Territory' } }
    /**
     * Find zero or one Territory that matches the filter.
     * @param {TerritoryFindUniqueArgs} args - Arguments to find a Territory
     * @example
     * // Get one Territory
     * const territory = await prisma.territory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TerritoryFindUniqueArgs>(args: SelectSubset<T, TerritoryFindUniqueArgs<ExtArgs>>): Prisma__TerritoryClient<$Result.GetResult<Prisma.$TerritoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Territory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TerritoryFindUniqueOrThrowArgs} args - Arguments to find a Territory
     * @example
     * // Get one Territory
     * const territory = await prisma.territory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TerritoryFindUniqueOrThrowArgs>(args: SelectSubset<T, TerritoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TerritoryClient<$Result.GetResult<Prisma.$TerritoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Territory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerritoryFindFirstArgs} args - Arguments to find a Territory
     * @example
     * // Get one Territory
     * const territory = await prisma.territory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TerritoryFindFirstArgs>(args?: SelectSubset<T, TerritoryFindFirstArgs<ExtArgs>>): Prisma__TerritoryClient<$Result.GetResult<Prisma.$TerritoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Territory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerritoryFindFirstOrThrowArgs} args - Arguments to find a Territory
     * @example
     * // Get one Territory
     * const territory = await prisma.territory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TerritoryFindFirstOrThrowArgs>(args?: SelectSubset<T, TerritoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__TerritoryClient<$Result.GetResult<Prisma.$TerritoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Territories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerritoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Territories
     * const territories = await prisma.territory.findMany()
     * 
     * // Get first 10 Territories
     * const territories = await prisma.territory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const territoryWithIdOnly = await prisma.territory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TerritoryFindManyArgs>(args?: SelectSubset<T, TerritoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TerritoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Territory.
     * @param {TerritoryCreateArgs} args - Arguments to create a Territory.
     * @example
     * // Create one Territory
     * const Territory = await prisma.territory.create({
     *   data: {
     *     // ... data to create a Territory
     *   }
     * })
     * 
     */
    create<T extends TerritoryCreateArgs>(args: SelectSubset<T, TerritoryCreateArgs<ExtArgs>>): Prisma__TerritoryClient<$Result.GetResult<Prisma.$TerritoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Territories.
     * @param {TerritoryCreateManyArgs} args - Arguments to create many Territories.
     * @example
     * // Create many Territories
     * const territory = await prisma.territory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TerritoryCreateManyArgs>(args?: SelectSubset<T, TerritoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Territories and returns the data saved in the database.
     * @param {TerritoryCreateManyAndReturnArgs} args - Arguments to create many Territories.
     * @example
     * // Create many Territories
     * const territory = await prisma.territory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Territories and only return the `id`
     * const territoryWithIdOnly = await prisma.territory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TerritoryCreateManyAndReturnArgs>(args?: SelectSubset<T, TerritoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TerritoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Territory.
     * @param {TerritoryDeleteArgs} args - Arguments to delete one Territory.
     * @example
     * // Delete one Territory
     * const Territory = await prisma.territory.delete({
     *   where: {
     *     // ... filter to delete one Territory
     *   }
     * })
     * 
     */
    delete<T extends TerritoryDeleteArgs>(args: SelectSubset<T, TerritoryDeleteArgs<ExtArgs>>): Prisma__TerritoryClient<$Result.GetResult<Prisma.$TerritoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Territory.
     * @param {TerritoryUpdateArgs} args - Arguments to update one Territory.
     * @example
     * // Update one Territory
     * const territory = await prisma.territory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TerritoryUpdateArgs>(args: SelectSubset<T, TerritoryUpdateArgs<ExtArgs>>): Prisma__TerritoryClient<$Result.GetResult<Prisma.$TerritoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Territories.
     * @param {TerritoryDeleteManyArgs} args - Arguments to filter Territories to delete.
     * @example
     * // Delete a few Territories
     * const { count } = await prisma.territory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TerritoryDeleteManyArgs>(args?: SelectSubset<T, TerritoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Territories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerritoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Territories
     * const territory = await prisma.territory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TerritoryUpdateManyArgs>(args: SelectSubset<T, TerritoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Territories and returns the data updated in the database.
     * @param {TerritoryUpdateManyAndReturnArgs} args - Arguments to update many Territories.
     * @example
     * // Update many Territories
     * const territory = await prisma.territory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Territories and only return the `id`
     * const territoryWithIdOnly = await prisma.territory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TerritoryUpdateManyAndReturnArgs>(args: SelectSubset<T, TerritoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TerritoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Territory.
     * @param {TerritoryUpsertArgs} args - Arguments to update or create a Territory.
     * @example
     * // Update or create a Territory
     * const territory = await prisma.territory.upsert({
     *   create: {
     *     // ... data to create a Territory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Territory we want to update
     *   }
     * })
     */
    upsert<T extends TerritoryUpsertArgs>(args: SelectSubset<T, TerritoryUpsertArgs<ExtArgs>>): Prisma__TerritoryClient<$Result.GetResult<Prisma.$TerritoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Territories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerritoryCountArgs} args - Arguments to filter Territories to count.
     * @example
     * // Count the number of Territories
     * const count = await prisma.territory.count({
     *   where: {
     *     // ... the filter for the Territories we want to count
     *   }
     * })
    **/
    count<T extends TerritoryCountArgs>(
      args?: Subset<T, TerritoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TerritoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Territory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerritoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TerritoryAggregateArgs>(args: Subset<T, TerritoryAggregateArgs>): Prisma.PrismaPromise<GetTerritoryAggregateType<T>>

    /**
     * Group by Territory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerritoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TerritoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TerritoryGroupByArgs['orderBy'] }
        : { orderBy?: TerritoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TerritoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTerritoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Territory model
   */
  readonly fields: TerritoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Territory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TerritoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parentTerritory<T extends Territory$parentTerritoryArgs<ExtArgs> = {}>(args?: Subset<T, Territory$parentTerritoryArgs<ExtArgs>>): Prisma__TerritoryClient<$Result.GetResult<Prisma.$TerritoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    childTerritories<T extends Territory$childTerritoriesArgs<ExtArgs> = {}>(args?: Subset<T, Territory$childTerritoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TerritoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    employees<T extends Territory$employeesArgs<ExtArgs> = {}>(args?: Subset<T, Territory$employeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeeTerritoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    hospitals<T extends Territory$hospitalsArgs<ExtArgs> = {}>(args?: Subset<T, Territory$hospitalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    chemists<T extends Territory$chemistsArgs<ExtArgs> = {}>(args?: Subset<T, Territory$chemistsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChemistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Territory model
   */
  interface TerritoryFieldRefs {
    readonly id: FieldRef<"Territory", 'String'>
    readonly organizationId: FieldRef<"Territory", 'String'>
    readonly name: FieldRef<"Territory", 'String'>
    readonly type: FieldRef<"Territory", 'String'>
    readonly parentTerritoryId: FieldRef<"Territory", 'String'>
    readonly boundaries: FieldRef<"Territory", 'Json'>
    readonly createdAt: FieldRef<"Territory", 'DateTime'>
    readonly updatedAt: FieldRef<"Territory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Territory findUnique
   */
  export type TerritoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Territory
     */
    select?: TerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Territory
     */
    omit?: TerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerritoryInclude<ExtArgs> | null
    /**
     * Filter, which Territory to fetch.
     */
    where: TerritoryWhereUniqueInput
  }

  /**
   * Territory findUniqueOrThrow
   */
  export type TerritoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Territory
     */
    select?: TerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Territory
     */
    omit?: TerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerritoryInclude<ExtArgs> | null
    /**
     * Filter, which Territory to fetch.
     */
    where: TerritoryWhereUniqueInput
  }

  /**
   * Territory findFirst
   */
  export type TerritoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Territory
     */
    select?: TerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Territory
     */
    omit?: TerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerritoryInclude<ExtArgs> | null
    /**
     * Filter, which Territory to fetch.
     */
    where?: TerritoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Territories to fetch.
     */
    orderBy?: TerritoryOrderByWithRelationInput | TerritoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Territories.
     */
    cursor?: TerritoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Territories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Territories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Territories.
     */
    distinct?: TerritoryScalarFieldEnum | TerritoryScalarFieldEnum[]
  }

  /**
   * Territory findFirstOrThrow
   */
  export type TerritoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Territory
     */
    select?: TerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Territory
     */
    omit?: TerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerritoryInclude<ExtArgs> | null
    /**
     * Filter, which Territory to fetch.
     */
    where?: TerritoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Territories to fetch.
     */
    orderBy?: TerritoryOrderByWithRelationInput | TerritoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Territories.
     */
    cursor?: TerritoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Territories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Territories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Territories.
     */
    distinct?: TerritoryScalarFieldEnum | TerritoryScalarFieldEnum[]
  }

  /**
   * Territory findMany
   */
  export type TerritoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Territory
     */
    select?: TerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Territory
     */
    omit?: TerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerritoryInclude<ExtArgs> | null
    /**
     * Filter, which Territories to fetch.
     */
    where?: TerritoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Territories to fetch.
     */
    orderBy?: TerritoryOrderByWithRelationInput | TerritoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Territories.
     */
    cursor?: TerritoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Territories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Territories.
     */
    skip?: number
    distinct?: TerritoryScalarFieldEnum | TerritoryScalarFieldEnum[]
  }

  /**
   * Territory create
   */
  export type TerritoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Territory
     */
    select?: TerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Territory
     */
    omit?: TerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerritoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Territory.
     */
    data: XOR<TerritoryCreateInput, TerritoryUncheckedCreateInput>
  }

  /**
   * Territory createMany
   */
  export type TerritoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Territories.
     */
    data: TerritoryCreateManyInput | TerritoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Territory createManyAndReturn
   */
  export type TerritoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Territory
     */
    select?: TerritorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Territory
     */
    omit?: TerritoryOmit<ExtArgs> | null
    /**
     * The data used to create many Territories.
     */
    data: TerritoryCreateManyInput | TerritoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerritoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Territory update
   */
  export type TerritoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Territory
     */
    select?: TerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Territory
     */
    omit?: TerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerritoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Territory.
     */
    data: XOR<TerritoryUpdateInput, TerritoryUncheckedUpdateInput>
    /**
     * Choose, which Territory to update.
     */
    where: TerritoryWhereUniqueInput
  }

  /**
   * Territory updateMany
   */
  export type TerritoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Territories.
     */
    data: XOR<TerritoryUpdateManyMutationInput, TerritoryUncheckedUpdateManyInput>
    /**
     * Filter which Territories to update
     */
    where?: TerritoryWhereInput
    /**
     * Limit how many Territories to update.
     */
    limit?: number
  }

  /**
   * Territory updateManyAndReturn
   */
  export type TerritoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Territory
     */
    select?: TerritorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Territory
     */
    omit?: TerritoryOmit<ExtArgs> | null
    /**
     * The data used to update Territories.
     */
    data: XOR<TerritoryUpdateManyMutationInput, TerritoryUncheckedUpdateManyInput>
    /**
     * Filter which Territories to update
     */
    where?: TerritoryWhereInput
    /**
     * Limit how many Territories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerritoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Territory upsert
   */
  export type TerritoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Territory
     */
    select?: TerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Territory
     */
    omit?: TerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerritoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Territory to update in case it exists.
     */
    where: TerritoryWhereUniqueInput
    /**
     * In case the Territory found by the `where` argument doesn't exist, create a new Territory with this data.
     */
    create: XOR<TerritoryCreateInput, TerritoryUncheckedCreateInput>
    /**
     * In case the Territory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TerritoryUpdateInput, TerritoryUncheckedUpdateInput>
  }

  /**
   * Territory delete
   */
  export type TerritoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Territory
     */
    select?: TerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Territory
     */
    omit?: TerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerritoryInclude<ExtArgs> | null
    /**
     * Filter which Territory to delete.
     */
    where: TerritoryWhereUniqueInput
  }

  /**
   * Territory deleteMany
   */
  export type TerritoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Territories to delete
     */
    where?: TerritoryWhereInput
    /**
     * Limit how many Territories to delete.
     */
    limit?: number
  }

  /**
   * Territory.parentTerritory
   */
  export type Territory$parentTerritoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Territory
     */
    select?: TerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Territory
     */
    omit?: TerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerritoryInclude<ExtArgs> | null
    where?: TerritoryWhereInput
  }

  /**
   * Territory.childTerritories
   */
  export type Territory$childTerritoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Territory
     */
    select?: TerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Territory
     */
    omit?: TerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerritoryInclude<ExtArgs> | null
    where?: TerritoryWhereInput
    orderBy?: TerritoryOrderByWithRelationInput | TerritoryOrderByWithRelationInput[]
    cursor?: TerritoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TerritoryScalarFieldEnum | TerritoryScalarFieldEnum[]
  }

  /**
   * Territory.employees
   */
  export type Territory$employeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTerritory
     */
    select?: EmployeeTerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTerritory
     */
    omit?: EmployeeTerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTerritoryInclude<ExtArgs> | null
    where?: EmployeeTerritoryWhereInput
    orderBy?: EmployeeTerritoryOrderByWithRelationInput | EmployeeTerritoryOrderByWithRelationInput[]
    cursor?: EmployeeTerritoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployeeTerritoryScalarFieldEnum | EmployeeTerritoryScalarFieldEnum[]
  }

  /**
   * Territory.hospitals
   */
  export type Territory$hospitalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hospital
     */
    omit?: HospitalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalInclude<ExtArgs> | null
    where?: HospitalWhereInput
    orderBy?: HospitalOrderByWithRelationInput | HospitalOrderByWithRelationInput[]
    cursor?: HospitalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HospitalScalarFieldEnum | HospitalScalarFieldEnum[]
  }

  /**
   * Territory.chemists
   */
  export type Territory$chemistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chemist
     */
    select?: ChemistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chemist
     */
    omit?: ChemistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistInclude<ExtArgs> | null
    where?: ChemistWhereInput
    orderBy?: ChemistOrderByWithRelationInput | ChemistOrderByWithRelationInput[]
    cursor?: ChemistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChemistScalarFieldEnum | ChemistScalarFieldEnum[]
  }

  /**
   * Territory without action
   */
  export type TerritoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Territory
     */
    select?: TerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Territory
     */
    omit?: TerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerritoryInclude<ExtArgs> | null
  }


  /**
   * Model EmployeeTerritory
   */

  export type AggregateEmployeeTerritory = {
    _count: EmployeeTerritoryCountAggregateOutputType | null
    _min: EmployeeTerritoryMinAggregateOutputType | null
    _max: EmployeeTerritoryMaxAggregateOutputType | null
  }

  export type EmployeeTerritoryMinAggregateOutputType = {
    id: string | null
    employeeId: string | null
    territoryId: string | null
    assignedAt: Date | null
    unassignedAt: Date | null
    isPrimary: boolean | null
  }

  export type EmployeeTerritoryMaxAggregateOutputType = {
    id: string | null
    employeeId: string | null
    territoryId: string | null
    assignedAt: Date | null
    unassignedAt: Date | null
    isPrimary: boolean | null
  }

  export type EmployeeTerritoryCountAggregateOutputType = {
    id: number
    employeeId: number
    territoryId: number
    assignedAt: number
    unassignedAt: number
    isPrimary: number
    _all: number
  }


  export type EmployeeTerritoryMinAggregateInputType = {
    id?: true
    employeeId?: true
    territoryId?: true
    assignedAt?: true
    unassignedAt?: true
    isPrimary?: true
  }

  export type EmployeeTerritoryMaxAggregateInputType = {
    id?: true
    employeeId?: true
    territoryId?: true
    assignedAt?: true
    unassignedAt?: true
    isPrimary?: true
  }

  export type EmployeeTerritoryCountAggregateInputType = {
    id?: true
    employeeId?: true
    territoryId?: true
    assignedAt?: true
    unassignedAt?: true
    isPrimary?: true
    _all?: true
  }

  export type EmployeeTerritoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmployeeTerritory to aggregate.
     */
    where?: EmployeeTerritoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeTerritories to fetch.
     */
    orderBy?: EmployeeTerritoryOrderByWithRelationInput | EmployeeTerritoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmployeeTerritoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeTerritories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeTerritories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmployeeTerritories
    **/
    _count?: true | EmployeeTerritoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeeTerritoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeeTerritoryMaxAggregateInputType
  }

  export type GetEmployeeTerritoryAggregateType<T extends EmployeeTerritoryAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployeeTerritory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployeeTerritory[P]>
      : GetScalarType<T[P], AggregateEmployeeTerritory[P]>
  }




  export type EmployeeTerritoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeTerritoryWhereInput
    orderBy?: EmployeeTerritoryOrderByWithAggregationInput | EmployeeTerritoryOrderByWithAggregationInput[]
    by: EmployeeTerritoryScalarFieldEnum[] | EmployeeTerritoryScalarFieldEnum
    having?: EmployeeTerritoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeeTerritoryCountAggregateInputType | true
    _min?: EmployeeTerritoryMinAggregateInputType
    _max?: EmployeeTerritoryMaxAggregateInputType
  }

  export type EmployeeTerritoryGroupByOutputType = {
    id: string
    employeeId: string
    territoryId: string
    assignedAt: Date
    unassignedAt: Date | null
    isPrimary: boolean
    _count: EmployeeTerritoryCountAggregateOutputType | null
    _min: EmployeeTerritoryMinAggregateOutputType | null
    _max: EmployeeTerritoryMaxAggregateOutputType | null
  }

  type GetEmployeeTerritoryGroupByPayload<T extends EmployeeTerritoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployeeTerritoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeeTerritoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeeTerritoryGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeeTerritoryGroupByOutputType[P]>
        }
      >
    >


  export type EmployeeTerritorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    territoryId?: boolean
    assignedAt?: boolean
    unassignedAt?: boolean
    isPrimary?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    territory?: boolean | TerritoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employeeTerritory"]>

  export type EmployeeTerritorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    territoryId?: boolean
    assignedAt?: boolean
    unassignedAt?: boolean
    isPrimary?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    territory?: boolean | TerritoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employeeTerritory"]>

  export type EmployeeTerritorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    territoryId?: boolean
    assignedAt?: boolean
    unassignedAt?: boolean
    isPrimary?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    territory?: boolean | TerritoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employeeTerritory"]>

  export type EmployeeTerritorySelectScalar = {
    id?: boolean
    employeeId?: boolean
    territoryId?: boolean
    assignedAt?: boolean
    unassignedAt?: boolean
    isPrimary?: boolean
  }

  export type EmployeeTerritoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "employeeId" | "territoryId" | "assignedAt" | "unassignedAt" | "isPrimary", ExtArgs["result"]["employeeTerritory"]>
  export type EmployeeTerritoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    territory?: boolean | TerritoryDefaultArgs<ExtArgs>
  }
  export type EmployeeTerritoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    territory?: boolean | TerritoryDefaultArgs<ExtArgs>
  }
  export type EmployeeTerritoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    territory?: boolean | TerritoryDefaultArgs<ExtArgs>
  }

  export type $EmployeeTerritoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmployeeTerritory"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
      territory: Prisma.$TerritoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      employeeId: string
      territoryId: string
      assignedAt: Date
      unassignedAt: Date | null
      isPrimary: boolean
    }, ExtArgs["result"]["employeeTerritory"]>
    composites: {}
  }

  type EmployeeTerritoryGetPayload<S extends boolean | null | undefined | EmployeeTerritoryDefaultArgs> = $Result.GetResult<Prisma.$EmployeeTerritoryPayload, S>

  type EmployeeTerritoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmployeeTerritoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmployeeTerritoryCountAggregateInputType | true
    }

  export interface EmployeeTerritoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmployeeTerritory'], meta: { name: 'EmployeeTerritory' } }
    /**
     * Find zero or one EmployeeTerritory that matches the filter.
     * @param {EmployeeTerritoryFindUniqueArgs} args - Arguments to find a EmployeeTerritory
     * @example
     * // Get one EmployeeTerritory
     * const employeeTerritory = await prisma.employeeTerritory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmployeeTerritoryFindUniqueArgs>(args: SelectSubset<T, EmployeeTerritoryFindUniqueArgs<ExtArgs>>): Prisma__EmployeeTerritoryClient<$Result.GetResult<Prisma.$EmployeeTerritoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EmployeeTerritory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmployeeTerritoryFindUniqueOrThrowArgs} args - Arguments to find a EmployeeTerritory
     * @example
     * // Get one EmployeeTerritory
     * const employeeTerritory = await prisma.employeeTerritory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmployeeTerritoryFindUniqueOrThrowArgs>(args: SelectSubset<T, EmployeeTerritoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmployeeTerritoryClient<$Result.GetResult<Prisma.$EmployeeTerritoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmployeeTerritory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeTerritoryFindFirstArgs} args - Arguments to find a EmployeeTerritory
     * @example
     * // Get one EmployeeTerritory
     * const employeeTerritory = await prisma.employeeTerritory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmployeeTerritoryFindFirstArgs>(args?: SelectSubset<T, EmployeeTerritoryFindFirstArgs<ExtArgs>>): Prisma__EmployeeTerritoryClient<$Result.GetResult<Prisma.$EmployeeTerritoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmployeeTerritory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeTerritoryFindFirstOrThrowArgs} args - Arguments to find a EmployeeTerritory
     * @example
     * // Get one EmployeeTerritory
     * const employeeTerritory = await prisma.employeeTerritory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmployeeTerritoryFindFirstOrThrowArgs>(args?: SelectSubset<T, EmployeeTerritoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmployeeTerritoryClient<$Result.GetResult<Prisma.$EmployeeTerritoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EmployeeTerritories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeTerritoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmployeeTerritories
     * const employeeTerritories = await prisma.employeeTerritory.findMany()
     * 
     * // Get first 10 EmployeeTerritories
     * const employeeTerritories = await prisma.employeeTerritory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeeTerritoryWithIdOnly = await prisma.employeeTerritory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmployeeTerritoryFindManyArgs>(args?: SelectSubset<T, EmployeeTerritoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeeTerritoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EmployeeTerritory.
     * @param {EmployeeTerritoryCreateArgs} args - Arguments to create a EmployeeTerritory.
     * @example
     * // Create one EmployeeTerritory
     * const EmployeeTerritory = await prisma.employeeTerritory.create({
     *   data: {
     *     // ... data to create a EmployeeTerritory
     *   }
     * })
     * 
     */
    create<T extends EmployeeTerritoryCreateArgs>(args: SelectSubset<T, EmployeeTerritoryCreateArgs<ExtArgs>>): Prisma__EmployeeTerritoryClient<$Result.GetResult<Prisma.$EmployeeTerritoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EmployeeTerritories.
     * @param {EmployeeTerritoryCreateManyArgs} args - Arguments to create many EmployeeTerritories.
     * @example
     * // Create many EmployeeTerritories
     * const employeeTerritory = await prisma.employeeTerritory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmployeeTerritoryCreateManyArgs>(args?: SelectSubset<T, EmployeeTerritoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmployeeTerritories and returns the data saved in the database.
     * @param {EmployeeTerritoryCreateManyAndReturnArgs} args - Arguments to create many EmployeeTerritories.
     * @example
     * // Create many EmployeeTerritories
     * const employeeTerritory = await prisma.employeeTerritory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmployeeTerritories and only return the `id`
     * const employeeTerritoryWithIdOnly = await prisma.employeeTerritory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmployeeTerritoryCreateManyAndReturnArgs>(args?: SelectSubset<T, EmployeeTerritoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeeTerritoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EmployeeTerritory.
     * @param {EmployeeTerritoryDeleteArgs} args - Arguments to delete one EmployeeTerritory.
     * @example
     * // Delete one EmployeeTerritory
     * const EmployeeTerritory = await prisma.employeeTerritory.delete({
     *   where: {
     *     // ... filter to delete one EmployeeTerritory
     *   }
     * })
     * 
     */
    delete<T extends EmployeeTerritoryDeleteArgs>(args: SelectSubset<T, EmployeeTerritoryDeleteArgs<ExtArgs>>): Prisma__EmployeeTerritoryClient<$Result.GetResult<Prisma.$EmployeeTerritoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EmployeeTerritory.
     * @param {EmployeeTerritoryUpdateArgs} args - Arguments to update one EmployeeTerritory.
     * @example
     * // Update one EmployeeTerritory
     * const employeeTerritory = await prisma.employeeTerritory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmployeeTerritoryUpdateArgs>(args: SelectSubset<T, EmployeeTerritoryUpdateArgs<ExtArgs>>): Prisma__EmployeeTerritoryClient<$Result.GetResult<Prisma.$EmployeeTerritoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EmployeeTerritories.
     * @param {EmployeeTerritoryDeleteManyArgs} args - Arguments to filter EmployeeTerritories to delete.
     * @example
     * // Delete a few EmployeeTerritories
     * const { count } = await prisma.employeeTerritory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmployeeTerritoryDeleteManyArgs>(args?: SelectSubset<T, EmployeeTerritoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmployeeTerritories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeTerritoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmployeeTerritories
     * const employeeTerritory = await prisma.employeeTerritory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmployeeTerritoryUpdateManyArgs>(args: SelectSubset<T, EmployeeTerritoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmployeeTerritories and returns the data updated in the database.
     * @param {EmployeeTerritoryUpdateManyAndReturnArgs} args - Arguments to update many EmployeeTerritories.
     * @example
     * // Update many EmployeeTerritories
     * const employeeTerritory = await prisma.employeeTerritory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EmployeeTerritories and only return the `id`
     * const employeeTerritoryWithIdOnly = await prisma.employeeTerritory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmployeeTerritoryUpdateManyAndReturnArgs>(args: SelectSubset<T, EmployeeTerritoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeeTerritoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EmployeeTerritory.
     * @param {EmployeeTerritoryUpsertArgs} args - Arguments to update or create a EmployeeTerritory.
     * @example
     * // Update or create a EmployeeTerritory
     * const employeeTerritory = await prisma.employeeTerritory.upsert({
     *   create: {
     *     // ... data to create a EmployeeTerritory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmployeeTerritory we want to update
     *   }
     * })
     */
    upsert<T extends EmployeeTerritoryUpsertArgs>(args: SelectSubset<T, EmployeeTerritoryUpsertArgs<ExtArgs>>): Prisma__EmployeeTerritoryClient<$Result.GetResult<Prisma.$EmployeeTerritoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EmployeeTerritories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeTerritoryCountArgs} args - Arguments to filter EmployeeTerritories to count.
     * @example
     * // Count the number of EmployeeTerritories
     * const count = await prisma.employeeTerritory.count({
     *   where: {
     *     // ... the filter for the EmployeeTerritories we want to count
     *   }
     * })
    **/
    count<T extends EmployeeTerritoryCountArgs>(
      args?: Subset<T, EmployeeTerritoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeTerritoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmployeeTerritory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeTerritoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeTerritoryAggregateArgs>(args: Subset<T, EmployeeTerritoryAggregateArgs>): Prisma.PrismaPromise<GetEmployeeTerritoryAggregateType<T>>

    /**
     * Group by EmployeeTerritory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeTerritoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployeeTerritoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployeeTerritoryGroupByArgs['orderBy'] }
        : { orderBy?: EmployeeTerritoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployeeTerritoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeTerritoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmployeeTerritory model
   */
  readonly fields: EmployeeTerritoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmployeeTerritory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmployeeTerritoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    territory<T extends TerritoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TerritoryDefaultArgs<ExtArgs>>): Prisma__TerritoryClient<$Result.GetResult<Prisma.$TerritoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmployeeTerritory model
   */
  interface EmployeeTerritoryFieldRefs {
    readonly id: FieldRef<"EmployeeTerritory", 'String'>
    readonly employeeId: FieldRef<"EmployeeTerritory", 'String'>
    readonly territoryId: FieldRef<"EmployeeTerritory", 'String'>
    readonly assignedAt: FieldRef<"EmployeeTerritory", 'DateTime'>
    readonly unassignedAt: FieldRef<"EmployeeTerritory", 'DateTime'>
    readonly isPrimary: FieldRef<"EmployeeTerritory", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * EmployeeTerritory findUnique
   */
  export type EmployeeTerritoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTerritory
     */
    select?: EmployeeTerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTerritory
     */
    omit?: EmployeeTerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTerritoryInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeTerritory to fetch.
     */
    where: EmployeeTerritoryWhereUniqueInput
  }

  /**
   * EmployeeTerritory findUniqueOrThrow
   */
  export type EmployeeTerritoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTerritory
     */
    select?: EmployeeTerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTerritory
     */
    omit?: EmployeeTerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTerritoryInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeTerritory to fetch.
     */
    where: EmployeeTerritoryWhereUniqueInput
  }

  /**
   * EmployeeTerritory findFirst
   */
  export type EmployeeTerritoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTerritory
     */
    select?: EmployeeTerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTerritory
     */
    omit?: EmployeeTerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTerritoryInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeTerritory to fetch.
     */
    where?: EmployeeTerritoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeTerritories to fetch.
     */
    orderBy?: EmployeeTerritoryOrderByWithRelationInput | EmployeeTerritoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmployeeTerritories.
     */
    cursor?: EmployeeTerritoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeTerritories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeTerritories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmployeeTerritories.
     */
    distinct?: EmployeeTerritoryScalarFieldEnum | EmployeeTerritoryScalarFieldEnum[]
  }

  /**
   * EmployeeTerritory findFirstOrThrow
   */
  export type EmployeeTerritoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTerritory
     */
    select?: EmployeeTerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTerritory
     */
    omit?: EmployeeTerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTerritoryInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeTerritory to fetch.
     */
    where?: EmployeeTerritoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeTerritories to fetch.
     */
    orderBy?: EmployeeTerritoryOrderByWithRelationInput | EmployeeTerritoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmployeeTerritories.
     */
    cursor?: EmployeeTerritoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeTerritories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeTerritories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmployeeTerritories.
     */
    distinct?: EmployeeTerritoryScalarFieldEnum | EmployeeTerritoryScalarFieldEnum[]
  }

  /**
   * EmployeeTerritory findMany
   */
  export type EmployeeTerritoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTerritory
     */
    select?: EmployeeTerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTerritory
     */
    omit?: EmployeeTerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTerritoryInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeTerritories to fetch.
     */
    where?: EmployeeTerritoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeTerritories to fetch.
     */
    orderBy?: EmployeeTerritoryOrderByWithRelationInput | EmployeeTerritoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmployeeTerritories.
     */
    cursor?: EmployeeTerritoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeTerritories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeTerritories.
     */
    skip?: number
    distinct?: EmployeeTerritoryScalarFieldEnum | EmployeeTerritoryScalarFieldEnum[]
  }

  /**
   * EmployeeTerritory create
   */
  export type EmployeeTerritoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTerritory
     */
    select?: EmployeeTerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTerritory
     */
    omit?: EmployeeTerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTerritoryInclude<ExtArgs> | null
    /**
     * The data needed to create a EmployeeTerritory.
     */
    data: XOR<EmployeeTerritoryCreateInput, EmployeeTerritoryUncheckedCreateInput>
  }

  /**
   * EmployeeTerritory createMany
   */
  export type EmployeeTerritoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmployeeTerritories.
     */
    data: EmployeeTerritoryCreateManyInput | EmployeeTerritoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmployeeTerritory createManyAndReturn
   */
  export type EmployeeTerritoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTerritory
     */
    select?: EmployeeTerritorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTerritory
     */
    omit?: EmployeeTerritoryOmit<ExtArgs> | null
    /**
     * The data used to create many EmployeeTerritories.
     */
    data: EmployeeTerritoryCreateManyInput | EmployeeTerritoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTerritoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmployeeTerritory update
   */
  export type EmployeeTerritoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTerritory
     */
    select?: EmployeeTerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTerritory
     */
    omit?: EmployeeTerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTerritoryInclude<ExtArgs> | null
    /**
     * The data needed to update a EmployeeTerritory.
     */
    data: XOR<EmployeeTerritoryUpdateInput, EmployeeTerritoryUncheckedUpdateInput>
    /**
     * Choose, which EmployeeTerritory to update.
     */
    where: EmployeeTerritoryWhereUniqueInput
  }

  /**
   * EmployeeTerritory updateMany
   */
  export type EmployeeTerritoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmployeeTerritories.
     */
    data: XOR<EmployeeTerritoryUpdateManyMutationInput, EmployeeTerritoryUncheckedUpdateManyInput>
    /**
     * Filter which EmployeeTerritories to update
     */
    where?: EmployeeTerritoryWhereInput
    /**
     * Limit how many EmployeeTerritories to update.
     */
    limit?: number
  }

  /**
   * EmployeeTerritory updateManyAndReturn
   */
  export type EmployeeTerritoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTerritory
     */
    select?: EmployeeTerritorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTerritory
     */
    omit?: EmployeeTerritoryOmit<ExtArgs> | null
    /**
     * The data used to update EmployeeTerritories.
     */
    data: XOR<EmployeeTerritoryUpdateManyMutationInput, EmployeeTerritoryUncheckedUpdateManyInput>
    /**
     * Filter which EmployeeTerritories to update
     */
    where?: EmployeeTerritoryWhereInput
    /**
     * Limit how many EmployeeTerritories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTerritoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmployeeTerritory upsert
   */
  export type EmployeeTerritoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTerritory
     */
    select?: EmployeeTerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTerritory
     */
    omit?: EmployeeTerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTerritoryInclude<ExtArgs> | null
    /**
     * The filter to search for the EmployeeTerritory to update in case it exists.
     */
    where: EmployeeTerritoryWhereUniqueInput
    /**
     * In case the EmployeeTerritory found by the `where` argument doesn't exist, create a new EmployeeTerritory with this data.
     */
    create: XOR<EmployeeTerritoryCreateInput, EmployeeTerritoryUncheckedCreateInput>
    /**
     * In case the EmployeeTerritory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmployeeTerritoryUpdateInput, EmployeeTerritoryUncheckedUpdateInput>
  }

  /**
   * EmployeeTerritory delete
   */
  export type EmployeeTerritoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTerritory
     */
    select?: EmployeeTerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTerritory
     */
    omit?: EmployeeTerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTerritoryInclude<ExtArgs> | null
    /**
     * Filter which EmployeeTerritory to delete.
     */
    where: EmployeeTerritoryWhereUniqueInput
  }

  /**
   * EmployeeTerritory deleteMany
   */
  export type EmployeeTerritoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmployeeTerritories to delete
     */
    where?: EmployeeTerritoryWhereInput
    /**
     * Limit how many EmployeeTerritories to delete.
     */
    limit?: number
  }

  /**
   * EmployeeTerritory without action
   */
  export type EmployeeTerritoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTerritory
     */
    select?: EmployeeTerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTerritory
     */
    omit?: EmployeeTerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTerritoryInclude<ExtArgs> | null
  }


  /**
   * Model EmployeeTrainingRecord
   */

  export type AggregateEmployeeTrainingRecord = {
    _count: EmployeeTrainingRecordCountAggregateOutputType | null
    _min: EmployeeTrainingRecordMinAggregateOutputType | null
    _max: EmployeeTrainingRecordMaxAggregateOutputType | null
  }

  export type EmployeeTrainingRecordMinAggregateOutputType = {
    id: string | null
    employeeId: string | null
    trainingName: string | null
    description: string | null
    completionDate: Date | null
    createdAt: Date | null
  }

  export type EmployeeTrainingRecordMaxAggregateOutputType = {
    id: string | null
    employeeId: string | null
    trainingName: string | null
    description: string | null
    completionDate: Date | null
    createdAt: Date | null
  }

  export type EmployeeTrainingRecordCountAggregateOutputType = {
    id: number
    employeeId: number
    trainingName: number
    description: number
    completionDate: number
    createdAt: number
    _all: number
  }


  export type EmployeeTrainingRecordMinAggregateInputType = {
    id?: true
    employeeId?: true
    trainingName?: true
    description?: true
    completionDate?: true
    createdAt?: true
  }

  export type EmployeeTrainingRecordMaxAggregateInputType = {
    id?: true
    employeeId?: true
    trainingName?: true
    description?: true
    completionDate?: true
    createdAt?: true
  }

  export type EmployeeTrainingRecordCountAggregateInputType = {
    id?: true
    employeeId?: true
    trainingName?: true
    description?: true
    completionDate?: true
    createdAt?: true
    _all?: true
  }

  export type EmployeeTrainingRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmployeeTrainingRecord to aggregate.
     */
    where?: EmployeeTrainingRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeTrainingRecords to fetch.
     */
    orderBy?: EmployeeTrainingRecordOrderByWithRelationInput | EmployeeTrainingRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmployeeTrainingRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeTrainingRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeTrainingRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmployeeTrainingRecords
    **/
    _count?: true | EmployeeTrainingRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeeTrainingRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeeTrainingRecordMaxAggregateInputType
  }

  export type GetEmployeeTrainingRecordAggregateType<T extends EmployeeTrainingRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployeeTrainingRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployeeTrainingRecord[P]>
      : GetScalarType<T[P], AggregateEmployeeTrainingRecord[P]>
  }




  export type EmployeeTrainingRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeTrainingRecordWhereInput
    orderBy?: EmployeeTrainingRecordOrderByWithAggregationInput | EmployeeTrainingRecordOrderByWithAggregationInput[]
    by: EmployeeTrainingRecordScalarFieldEnum[] | EmployeeTrainingRecordScalarFieldEnum
    having?: EmployeeTrainingRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeeTrainingRecordCountAggregateInputType | true
    _min?: EmployeeTrainingRecordMinAggregateInputType
    _max?: EmployeeTrainingRecordMaxAggregateInputType
  }

  export type EmployeeTrainingRecordGroupByOutputType = {
    id: string
    employeeId: string
    trainingName: string
    description: string | null
    completionDate: Date
    createdAt: Date
    _count: EmployeeTrainingRecordCountAggregateOutputType | null
    _min: EmployeeTrainingRecordMinAggregateOutputType | null
    _max: EmployeeTrainingRecordMaxAggregateOutputType | null
  }

  type GetEmployeeTrainingRecordGroupByPayload<T extends EmployeeTrainingRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployeeTrainingRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeeTrainingRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeeTrainingRecordGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeeTrainingRecordGroupByOutputType[P]>
        }
      >
    >


  export type EmployeeTrainingRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    trainingName?: boolean
    description?: boolean
    completionDate?: boolean
    createdAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employeeTrainingRecord"]>

  export type EmployeeTrainingRecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    trainingName?: boolean
    description?: boolean
    completionDate?: boolean
    createdAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employeeTrainingRecord"]>

  export type EmployeeTrainingRecordSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    trainingName?: boolean
    description?: boolean
    completionDate?: boolean
    createdAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employeeTrainingRecord"]>

  export type EmployeeTrainingRecordSelectScalar = {
    id?: boolean
    employeeId?: boolean
    trainingName?: boolean
    description?: boolean
    completionDate?: boolean
    createdAt?: boolean
  }

  export type EmployeeTrainingRecordOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "employeeId" | "trainingName" | "description" | "completionDate" | "createdAt", ExtArgs["result"]["employeeTrainingRecord"]>
  export type EmployeeTrainingRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type EmployeeTrainingRecordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type EmployeeTrainingRecordIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $EmployeeTrainingRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmployeeTrainingRecord"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      employeeId: string
      trainingName: string
      description: string | null
      completionDate: Date
      createdAt: Date
    }, ExtArgs["result"]["employeeTrainingRecord"]>
    composites: {}
  }

  type EmployeeTrainingRecordGetPayload<S extends boolean | null | undefined | EmployeeTrainingRecordDefaultArgs> = $Result.GetResult<Prisma.$EmployeeTrainingRecordPayload, S>

  type EmployeeTrainingRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmployeeTrainingRecordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmployeeTrainingRecordCountAggregateInputType | true
    }

  export interface EmployeeTrainingRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmployeeTrainingRecord'], meta: { name: 'EmployeeTrainingRecord' } }
    /**
     * Find zero or one EmployeeTrainingRecord that matches the filter.
     * @param {EmployeeTrainingRecordFindUniqueArgs} args - Arguments to find a EmployeeTrainingRecord
     * @example
     * // Get one EmployeeTrainingRecord
     * const employeeTrainingRecord = await prisma.employeeTrainingRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmployeeTrainingRecordFindUniqueArgs>(args: SelectSubset<T, EmployeeTrainingRecordFindUniqueArgs<ExtArgs>>): Prisma__EmployeeTrainingRecordClient<$Result.GetResult<Prisma.$EmployeeTrainingRecordPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EmployeeTrainingRecord that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmployeeTrainingRecordFindUniqueOrThrowArgs} args - Arguments to find a EmployeeTrainingRecord
     * @example
     * // Get one EmployeeTrainingRecord
     * const employeeTrainingRecord = await prisma.employeeTrainingRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmployeeTrainingRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, EmployeeTrainingRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmployeeTrainingRecordClient<$Result.GetResult<Prisma.$EmployeeTrainingRecordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmployeeTrainingRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeTrainingRecordFindFirstArgs} args - Arguments to find a EmployeeTrainingRecord
     * @example
     * // Get one EmployeeTrainingRecord
     * const employeeTrainingRecord = await prisma.employeeTrainingRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmployeeTrainingRecordFindFirstArgs>(args?: SelectSubset<T, EmployeeTrainingRecordFindFirstArgs<ExtArgs>>): Prisma__EmployeeTrainingRecordClient<$Result.GetResult<Prisma.$EmployeeTrainingRecordPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmployeeTrainingRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeTrainingRecordFindFirstOrThrowArgs} args - Arguments to find a EmployeeTrainingRecord
     * @example
     * // Get one EmployeeTrainingRecord
     * const employeeTrainingRecord = await prisma.employeeTrainingRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmployeeTrainingRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, EmployeeTrainingRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmployeeTrainingRecordClient<$Result.GetResult<Prisma.$EmployeeTrainingRecordPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EmployeeTrainingRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeTrainingRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmployeeTrainingRecords
     * const employeeTrainingRecords = await prisma.employeeTrainingRecord.findMany()
     * 
     * // Get first 10 EmployeeTrainingRecords
     * const employeeTrainingRecords = await prisma.employeeTrainingRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeeTrainingRecordWithIdOnly = await prisma.employeeTrainingRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmployeeTrainingRecordFindManyArgs>(args?: SelectSubset<T, EmployeeTrainingRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeeTrainingRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EmployeeTrainingRecord.
     * @param {EmployeeTrainingRecordCreateArgs} args - Arguments to create a EmployeeTrainingRecord.
     * @example
     * // Create one EmployeeTrainingRecord
     * const EmployeeTrainingRecord = await prisma.employeeTrainingRecord.create({
     *   data: {
     *     // ... data to create a EmployeeTrainingRecord
     *   }
     * })
     * 
     */
    create<T extends EmployeeTrainingRecordCreateArgs>(args: SelectSubset<T, EmployeeTrainingRecordCreateArgs<ExtArgs>>): Prisma__EmployeeTrainingRecordClient<$Result.GetResult<Prisma.$EmployeeTrainingRecordPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EmployeeTrainingRecords.
     * @param {EmployeeTrainingRecordCreateManyArgs} args - Arguments to create many EmployeeTrainingRecords.
     * @example
     * // Create many EmployeeTrainingRecords
     * const employeeTrainingRecord = await prisma.employeeTrainingRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmployeeTrainingRecordCreateManyArgs>(args?: SelectSubset<T, EmployeeTrainingRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmployeeTrainingRecords and returns the data saved in the database.
     * @param {EmployeeTrainingRecordCreateManyAndReturnArgs} args - Arguments to create many EmployeeTrainingRecords.
     * @example
     * // Create many EmployeeTrainingRecords
     * const employeeTrainingRecord = await prisma.employeeTrainingRecord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmployeeTrainingRecords and only return the `id`
     * const employeeTrainingRecordWithIdOnly = await prisma.employeeTrainingRecord.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmployeeTrainingRecordCreateManyAndReturnArgs>(args?: SelectSubset<T, EmployeeTrainingRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeeTrainingRecordPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EmployeeTrainingRecord.
     * @param {EmployeeTrainingRecordDeleteArgs} args - Arguments to delete one EmployeeTrainingRecord.
     * @example
     * // Delete one EmployeeTrainingRecord
     * const EmployeeTrainingRecord = await prisma.employeeTrainingRecord.delete({
     *   where: {
     *     // ... filter to delete one EmployeeTrainingRecord
     *   }
     * })
     * 
     */
    delete<T extends EmployeeTrainingRecordDeleteArgs>(args: SelectSubset<T, EmployeeTrainingRecordDeleteArgs<ExtArgs>>): Prisma__EmployeeTrainingRecordClient<$Result.GetResult<Prisma.$EmployeeTrainingRecordPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EmployeeTrainingRecord.
     * @param {EmployeeTrainingRecordUpdateArgs} args - Arguments to update one EmployeeTrainingRecord.
     * @example
     * // Update one EmployeeTrainingRecord
     * const employeeTrainingRecord = await prisma.employeeTrainingRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmployeeTrainingRecordUpdateArgs>(args: SelectSubset<T, EmployeeTrainingRecordUpdateArgs<ExtArgs>>): Prisma__EmployeeTrainingRecordClient<$Result.GetResult<Prisma.$EmployeeTrainingRecordPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EmployeeTrainingRecords.
     * @param {EmployeeTrainingRecordDeleteManyArgs} args - Arguments to filter EmployeeTrainingRecords to delete.
     * @example
     * // Delete a few EmployeeTrainingRecords
     * const { count } = await prisma.employeeTrainingRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmployeeTrainingRecordDeleteManyArgs>(args?: SelectSubset<T, EmployeeTrainingRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmployeeTrainingRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeTrainingRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmployeeTrainingRecords
     * const employeeTrainingRecord = await prisma.employeeTrainingRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmployeeTrainingRecordUpdateManyArgs>(args: SelectSubset<T, EmployeeTrainingRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmployeeTrainingRecords and returns the data updated in the database.
     * @param {EmployeeTrainingRecordUpdateManyAndReturnArgs} args - Arguments to update many EmployeeTrainingRecords.
     * @example
     * // Update many EmployeeTrainingRecords
     * const employeeTrainingRecord = await prisma.employeeTrainingRecord.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EmployeeTrainingRecords and only return the `id`
     * const employeeTrainingRecordWithIdOnly = await prisma.employeeTrainingRecord.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmployeeTrainingRecordUpdateManyAndReturnArgs>(args: SelectSubset<T, EmployeeTrainingRecordUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeeTrainingRecordPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EmployeeTrainingRecord.
     * @param {EmployeeTrainingRecordUpsertArgs} args - Arguments to update or create a EmployeeTrainingRecord.
     * @example
     * // Update or create a EmployeeTrainingRecord
     * const employeeTrainingRecord = await prisma.employeeTrainingRecord.upsert({
     *   create: {
     *     // ... data to create a EmployeeTrainingRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmployeeTrainingRecord we want to update
     *   }
     * })
     */
    upsert<T extends EmployeeTrainingRecordUpsertArgs>(args: SelectSubset<T, EmployeeTrainingRecordUpsertArgs<ExtArgs>>): Prisma__EmployeeTrainingRecordClient<$Result.GetResult<Prisma.$EmployeeTrainingRecordPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EmployeeTrainingRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeTrainingRecordCountArgs} args - Arguments to filter EmployeeTrainingRecords to count.
     * @example
     * // Count the number of EmployeeTrainingRecords
     * const count = await prisma.employeeTrainingRecord.count({
     *   where: {
     *     // ... the filter for the EmployeeTrainingRecords we want to count
     *   }
     * })
    **/
    count<T extends EmployeeTrainingRecordCountArgs>(
      args?: Subset<T, EmployeeTrainingRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeTrainingRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmployeeTrainingRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeTrainingRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeTrainingRecordAggregateArgs>(args: Subset<T, EmployeeTrainingRecordAggregateArgs>): Prisma.PrismaPromise<GetEmployeeTrainingRecordAggregateType<T>>

    /**
     * Group by EmployeeTrainingRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeTrainingRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployeeTrainingRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployeeTrainingRecordGroupByArgs['orderBy'] }
        : { orderBy?: EmployeeTrainingRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployeeTrainingRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeTrainingRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmployeeTrainingRecord model
   */
  readonly fields: EmployeeTrainingRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmployeeTrainingRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmployeeTrainingRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmployeeTrainingRecord model
   */
  interface EmployeeTrainingRecordFieldRefs {
    readonly id: FieldRef<"EmployeeTrainingRecord", 'String'>
    readonly employeeId: FieldRef<"EmployeeTrainingRecord", 'String'>
    readonly trainingName: FieldRef<"EmployeeTrainingRecord", 'String'>
    readonly description: FieldRef<"EmployeeTrainingRecord", 'String'>
    readonly completionDate: FieldRef<"EmployeeTrainingRecord", 'DateTime'>
    readonly createdAt: FieldRef<"EmployeeTrainingRecord", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EmployeeTrainingRecord findUnique
   */
  export type EmployeeTrainingRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTrainingRecord
     */
    select?: EmployeeTrainingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTrainingRecord
     */
    omit?: EmployeeTrainingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTrainingRecordInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeTrainingRecord to fetch.
     */
    where: EmployeeTrainingRecordWhereUniqueInput
  }

  /**
   * EmployeeTrainingRecord findUniqueOrThrow
   */
  export type EmployeeTrainingRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTrainingRecord
     */
    select?: EmployeeTrainingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTrainingRecord
     */
    omit?: EmployeeTrainingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTrainingRecordInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeTrainingRecord to fetch.
     */
    where: EmployeeTrainingRecordWhereUniqueInput
  }

  /**
   * EmployeeTrainingRecord findFirst
   */
  export type EmployeeTrainingRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTrainingRecord
     */
    select?: EmployeeTrainingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTrainingRecord
     */
    omit?: EmployeeTrainingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTrainingRecordInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeTrainingRecord to fetch.
     */
    where?: EmployeeTrainingRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeTrainingRecords to fetch.
     */
    orderBy?: EmployeeTrainingRecordOrderByWithRelationInput | EmployeeTrainingRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmployeeTrainingRecords.
     */
    cursor?: EmployeeTrainingRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeTrainingRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeTrainingRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmployeeTrainingRecords.
     */
    distinct?: EmployeeTrainingRecordScalarFieldEnum | EmployeeTrainingRecordScalarFieldEnum[]
  }

  /**
   * EmployeeTrainingRecord findFirstOrThrow
   */
  export type EmployeeTrainingRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTrainingRecord
     */
    select?: EmployeeTrainingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTrainingRecord
     */
    omit?: EmployeeTrainingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTrainingRecordInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeTrainingRecord to fetch.
     */
    where?: EmployeeTrainingRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeTrainingRecords to fetch.
     */
    orderBy?: EmployeeTrainingRecordOrderByWithRelationInput | EmployeeTrainingRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmployeeTrainingRecords.
     */
    cursor?: EmployeeTrainingRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeTrainingRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeTrainingRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmployeeTrainingRecords.
     */
    distinct?: EmployeeTrainingRecordScalarFieldEnum | EmployeeTrainingRecordScalarFieldEnum[]
  }

  /**
   * EmployeeTrainingRecord findMany
   */
  export type EmployeeTrainingRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTrainingRecord
     */
    select?: EmployeeTrainingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTrainingRecord
     */
    omit?: EmployeeTrainingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTrainingRecordInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeTrainingRecords to fetch.
     */
    where?: EmployeeTrainingRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeTrainingRecords to fetch.
     */
    orderBy?: EmployeeTrainingRecordOrderByWithRelationInput | EmployeeTrainingRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmployeeTrainingRecords.
     */
    cursor?: EmployeeTrainingRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeTrainingRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeTrainingRecords.
     */
    skip?: number
    distinct?: EmployeeTrainingRecordScalarFieldEnum | EmployeeTrainingRecordScalarFieldEnum[]
  }

  /**
   * EmployeeTrainingRecord create
   */
  export type EmployeeTrainingRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTrainingRecord
     */
    select?: EmployeeTrainingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTrainingRecord
     */
    omit?: EmployeeTrainingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTrainingRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a EmployeeTrainingRecord.
     */
    data: XOR<EmployeeTrainingRecordCreateInput, EmployeeTrainingRecordUncheckedCreateInput>
  }

  /**
   * EmployeeTrainingRecord createMany
   */
  export type EmployeeTrainingRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmployeeTrainingRecords.
     */
    data: EmployeeTrainingRecordCreateManyInput | EmployeeTrainingRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmployeeTrainingRecord createManyAndReturn
   */
  export type EmployeeTrainingRecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTrainingRecord
     */
    select?: EmployeeTrainingRecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTrainingRecord
     */
    omit?: EmployeeTrainingRecordOmit<ExtArgs> | null
    /**
     * The data used to create many EmployeeTrainingRecords.
     */
    data: EmployeeTrainingRecordCreateManyInput | EmployeeTrainingRecordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTrainingRecordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmployeeTrainingRecord update
   */
  export type EmployeeTrainingRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTrainingRecord
     */
    select?: EmployeeTrainingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTrainingRecord
     */
    omit?: EmployeeTrainingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTrainingRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a EmployeeTrainingRecord.
     */
    data: XOR<EmployeeTrainingRecordUpdateInput, EmployeeTrainingRecordUncheckedUpdateInput>
    /**
     * Choose, which EmployeeTrainingRecord to update.
     */
    where: EmployeeTrainingRecordWhereUniqueInput
  }

  /**
   * EmployeeTrainingRecord updateMany
   */
  export type EmployeeTrainingRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmployeeTrainingRecords.
     */
    data: XOR<EmployeeTrainingRecordUpdateManyMutationInput, EmployeeTrainingRecordUncheckedUpdateManyInput>
    /**
     * Filter which EmployeeTrainingRecords to update
     */
    where?: EmployeeTrainingRecordWhereInput
    /**
     * Limit how many EmployeeTrainingRecords to update.
     */
    limit?: number
  }

  /**
   * EmployeeTrainingRecord updateManyAndReturn
   */
  export type EmployeeTrainingRecordUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTrainingRecord
     */
    select?: EmployeeTrainingRecordSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTrainingRecord
     */
    omit?: EmployeeTrainingRecordOmit<ExtArgs> | null
    /**
     * The data used to update EmployeeTrainingRecords.
     */
    data: XOR<EmployeeTrainingRecordUpdateManyMutationInput, EmployeeTrainingRecordUncheckedUpdateManyInput>
    /**
     * Filter which EmployeeTrainingRecords to update
     */
    where?: EmployeeTrainingRecordWhereInput
    /**
     * Limit how many EmployeeTrainingRecords to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTrainingRecordIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmployeeTrainingRecord upsert
   */
  export type EmployeeTrainingRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTrainingRecord
     */
    select?: EmployeeTrainingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTrainingRecord
     */
    omit?: EmployeeTrainingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTrainingRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the EmployeeTrainingRecord to update in case it exists.
     */
    where: EmployeeTrainingRecordWhereUniqueInput
    /**
     * In case the EmployeeTrainingRecord found by the `where` argument doesn't exist, create a new EmployeeTrainingRecord with this data.
     */
    create: XOR<EmployeeTrainingRecordCreateInput, EmployeeTrainingRecordUncheckedCreateInput>
    /**
     * In case the EmployeeTrainingRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmployeeTrainingRecordUpdateInput, EmployeeTrainingRecordUncheckedUpdateInput>
  }

  /**
   * EmployeeTrainingRecord delete
   */
  export type EmployeeTrainingRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTrainingRecord
     */
    select?: EmployeeTrainingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTrainingRecord
     */
    omit?: EmployeeTrainingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTrainingRecordInclude<ExtArgs> | null
    /**
     * Filter which EmployeeTrainingRecord to delete.
     */
    where: EmployeeTrainingRecordWhereUniqueInput
  }

  /**
   * EmployeeTrainingRecord deleteMany
   */
  export type EmployeeTrainingRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmployeeTrainingRecords to delete
     */
    where?: EmployeeTrainingRecordWhereInput
    /**
     * Limit how many EmployeeTrainingRecords to delete.
     */
    limit?: number
  }

  /**
   * EmployeeTrainingRecord without action
   */
  export type EmployeeTrainingRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTrainingRecord
     */
    select?: EmployeeTrainingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTrainingRecord
     */
    omit?: EmployeeTrainingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTrainingRecordInclude<ExtArgs> | null
  }


  /**
   * Model HospitalChain
   */

  export type AggregateHospitalChain = {
    _count: HospitalChainCountAggregateOutputType | null
    _min: HospitalChainMinAggregateOutputType | null
    _max: HospitalChainMaxAggregateOutputType | null
  }

  export type HospitalChainMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    name: string | null
    headquartersAddress: string | null
    contactEmail: string | null
    contactPhone: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isActive: boolean | null
  }

  export type HospitalChainMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    name: string | null
    headquartersAddress: string | null
    contactEmail: string | null
    contactPhone: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isActive: boolean | null
  }

  export type HospitalChainCountAggregateOutputType = {
    id: number
    organizationId: number
    name: number
    headquartersAddress: number
    contactEmail: number
    contactPhone: number
    createdAt: number
    updatedAt: number
    isActive: number
    _all: number
  }


  export type HospitalChainMinAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    headquartersAddress?: true
    contactEmail?: true
    contactPhone?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
  }

  export type HospitalChainMaxAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    headquartersAddress?: true
    contactEmail?: true
    contactPhone?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
  }

  export type HospitalChainCountAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    headquartersAddress?: true
    contactEmail?: true
    contactPhone?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
    _all?: true
  }

  export type HospitalChainAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HospitalChain to aggregate.
     */
    where?: HospitalChainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HospitalChains to fetch.
     */
    orderBy?: HospitalChainOrderByWithRelationInput | HospitalChainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HospitalChainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HospitalChains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HospitalChains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HospitalChains
    **/
    _count?: true | HospitalChainCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HospitalChainMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HospitalChainMaxAggregateInputType
  }

  export type GetHospitalChainAggregateType<T extends HospitalChainAggregateArgs> = {
        [P in keyof T & keyof AggregateHospitalChain]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHospitalChain[P]>
      : GetScalarType<T[P], AggregateHospitalChain[P]>
  }




  export type HospitalChainGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HospitalChainWhereInput
    orderBy?: HospitalChainOrderByWithAggregationInput | HospitalChainOrderByWithAggregationInput[]
    by: HospitalChainScalarFieldEnum[] | HospitalChainScalarFieldEnum
    having?: HospitalChainScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HospitalChainCountAggregateInputType | true
    _min?: HospitalChainMinAggregateInputType
    _max?: HospitalChainMaxAggregateInputType
  }

  export type HospitalChainGroupByOutputType = {
    id: string
    organizationId: string
    name: string
    headquartersAddress: string | null
    contactEmail: string | null
    contactPhone: string | null
    createdAt: Date
    updatedAt: Date
    isActive: boolean
    _count: HospitalChainCountAggregateOutputType | null
    _min: HospitalChainMinAggregateOutputType | null
    _max: HospitalChainMaxAggregateOutputType | null
  }

  type GetHospitalChainGroupByPayload<T extends HospitalChainGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HospitalChainGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HospitalChainGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HospitalChainGroupByOutputType[P]>
            : GetScalarType<T[P], HospitalChainGroupByOutputType[P]>
        }
      >
    >


  export type HospitalChainSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    headquartersAddress?: boolean
    contactEmail?: boolean
    contactPhone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    hospitals?: boolean | HospitalChain$hospitalsArgs<ExtArgs>
    _count?: boolean | HospitalChainCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["hospitalChain"]>

  export type HospitalChainSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    headquartersAddress?: boolean
    contactEmail?: boolean
    contactPhone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["hospitalChain"]>

  export type HospitalChainSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    headquartersAddress?: boolean
    contactEmail?: boolean
    contactPhone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["hospitalChain"]>

  export type HospitalChainSelectScalar = {
    id?: boolean
    organizationId?: boolean
    name?: boolean
    headquartersAddress?: boolean
    contactEmail?: boolean
    contactPhone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
  }

  export type HospitalChainOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "name" | "headquartersAddress" | "contactEmail" | "contactPhone" | "createdAt" | "updatedAt" | "isActive", ExtArgs["result"]["hospitalChain"]>
  export type HospitalChainInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hospitals?: boolean | HospitalChain$hospitalsArgs<ExtArgs>
    _count?: boolean | HospitalChainCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type HospitalChainIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type HospitalChainIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $HospitalChainPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HospitalChain"
    objects: {
      hospitals: Prisma.$HospitalPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      name: string
      headquartersAddress: string | null
      contactEmail: string | null
      contactPhone: string | null
      createdAt: Date
      updatedAt: Date
      isActive: boolean
    }, ExtArgs["result"]["hospitalChain"]>
    composites: {}
  }

  type HospitalChainGetPayload<S extends boolean | null | undefined | HospitalChainDefaultArgs> = $Result.GetResult<Prisma.$HospitalChainPayload, S>

  type HospitalChainCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HospitalChainFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HospitalChainCountAggregateInputType | true
    }

  export interface HospitalChainDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HospitalChain'], meta: { name: 'HospitalChain' } }
    /**
     * Find zero or one HospitalChain that matches the filter.
     * @param {HospitalChainFindUniqueArgs} args - Arguments to find a HospitalChain
     * @example
     * // Get one HospitalChain
     * const hospitalChain = await prisma.hospitalChain.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HospitalChainFindUniqueArgs>(args: SelectSubset<T, HospitalChainFindUniqueArgs<ExtArgs>>): Prisma__HospitalChainClient<$Result.GetResult<Prisma.$HospitalChainPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one HospitalChain that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HospitalChainFindUniqueOrThrowArgs} args - Arguments to find a HospitalChain
     * @example
     * // Get one HospitalChain
     * const hospitalChain = await prisma.hospitalChain.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HospitalChainFindUniqueOrThrowArgs>(args: SelectSubset<T, HospitalChainFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HospitalChainClient<$Result.GetResult<Prisma.$HospitalChainPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HospitalChain that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalChainFindFirstArgs} args - Arguments to find a HospitalChain
     * @example
     * // Get one HospitalChain
     * const hospitalChain = await prisma.hospitalChain.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HospitalChainFindFirstArgs>(args?: SelectSubset<T, HospitalChainFindFirstArgs<ExtArgs>>): Prisma__HospitalChainClient<$Result.GetResult<Prisma.$HospitalChainPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HospitalChain that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalChainFindFirstOrThrowArgs} args - Arguments to find a HospitalChain
     * @example
     * // Get one HospitalChain
     * const hospitalChain = await prisma.hospitalChain.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HospitalChainFindFirstOrThrowArgs>(args?: SelectSubset<T, HospitalChainFindFirstOrThrowArgs<ExtArgs>>): Prisma__HospitalChainClient<$Result.GetResult<Prisma.$HospitalChainPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more HospitalChains that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalChainFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HospitalChains
     * const hospitalChains = await prisma.hospitalChain.findMany()
     * 
     * // Get first 10 HospitalChains
     * const hospitalChains = await prisma.hospitalChain.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hospitalChainWithIdOnly = await prisma.hospitalChain.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HospitalChainFindManyArgs>(args?: SelectSubset<T, HospitalChainFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HospitalChainPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a HospitalChain.
     * @param {HospitalChainCreateArgs} args - Arguments to create a HospitalChain.
     * @example
     * // Create one HospitalChain
     * const HospitalChain = await prisma.hospitalChain.create({
     *   data: {
     *     // ... data to create a HospitalChain
     *   }
     * })
     * 
     */
    create<T extends HospitalChainCreateArgs>(args: SelectSubset<T, HospitalChainCreateArgs<ExtArgs>>): Prisma__HospitalChainClient<$Result.GetResult<Prisma.$HospitalChainPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many HospitalChains.
     * @param {HospitalChainCreateManyArgs} args - Arguments to create many HospitalChains.
     * @example
     * // Create many HospitalChains
     * const hospitalChain = await prisma.hospitalChain.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HospitalChainCreateManyArgs>(args?: SelectSubset<T, HospitalChainCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HospitalChains and returns the data saved in the database.
     * @param {HospitalChainCreateManyAndReturnArgs} args - Arguments to create many HospitalChains.
     * @example
     * // Create many HospitalChains
     * const hospitalChain = await prisma.hospitalChain.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HospitalChains and only return the `id`
     * const hospitalChainWithIdOnly = await prisma.hospitalChain.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HospitalChainCreateManyAndReturnArgs>(args?: SelectSubset<T, HospitalChainCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HospitalChainPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a HospitalChain.
     * @param {HospitalChainDeleteArgs} args - Arguments to delete one HospitalChain.
     * @example
     * // Delete one HospitalChain
     * const HospitalChain = await prisma.hospitalChain.delete({
     *   where: {
     *     // ... filter to delete one HospitalChain
     *   }
     * })
     * 
     */
    delete<T extends HospitalChainDeleteArgs>(args: SelectSubset<T, HospitalChainDeleteArgs<ExtArgs>>): Prisma__HospitalChainClient<$Result.GetResult<Prisma.$HospitalChainPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one HospitalChain.
     * @param {HospitalChainUpdateArgs} args - Arguments to update one HospitalChain.
     * @example
     * // Update one HospitalChain
     * const hospitalChain = await prisma.hospitalChain.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HospitalChainUpdateArgs>(args: SelectSubset<T, HospitalChainUpdateArgs<ExtArgs>>): Prisma__HospitalChainClient<$Result.GetResult<Prisma.$HospitalChainPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more HospitalChains.
     * @param {HospitalChainDeleteManyArgs} args - Arguments to filter HospitalChains to delete.
     * @example
     * // Delete a few HospitalChains
     * const { count } = await prisma.hospitalChain.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HospitalChainDeleteManyArgs>(args?: SelectSubset<T, HospitalChainDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HospitalChains.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalChainUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HospitalChains
     * const hospitalChain = await prisma.hospitalChain.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HospitalChainUpdateManyArgs>(args: SelectSubset<T, HospitalChainUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HospitalChains and returns the data updated in the database.
     * @param {HospitalChainUpdateManyAndReturnArgs} args - Arguments to update many HospitalChains.
     * @example
     * // Update many HospitalChains
     * const hospitalChain = await prisma.hospitalChain.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more HospitalChains and only return the `id`
     * const hospitalChainWithIdOnly = await prisma.hospitalChain.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HospitalChainUpdateManyAndReturnArgs>(args: SelectSubset<T, HospitalChainUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HospitalChainPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one HospitalChain.
     * @param {HospitalChainUpsertArgs} args - Arguments to update or create a HospitalChain.
     * @example
     * // Update or create a HospitalChain
     * const hospitalChain = await prisma.hospitalChain.upsert({
     *   create: {
     *     // ... data to create a HospitalChain
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HospitalChain we want to update
     *   }
     * })
     */
    upsert<T extends HospitalChainUpsertArgs>(args: SelectSubset<T, HospitalChainUpsertArgs<ExtArgs>>): Prisma__HospitalChainClient<$Result.GetResult<Prisma.$HospitalChainPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of HospitalChains.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalChainCountArgs} args - Arguments to filter HospitalChains to count.
     * @example
     * // Count the number of HospitalChains
     * const count = await prisma.hospitalChain.count({
     *   where: {
     *     // ... the filter for the HospitalChains we want to count
     *   }
     * })
    **/
    count<T extends HospitalChainCountArgs>(
      args?: Subset<T, HospitalChainCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HospitalChainCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HospitalChain.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalChainAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HospitalChainAggregateArgs>(args: Subset<T, HospitalChainAggregateArgs>): Prisma.PrismaPromise<GetHospitalChainAggregateType<T>>

    /**
     * Group by HospitalChain.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalChainGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HospitalChainGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HospitalChainGroupByArgs['orderBy'] }
        : { orderBy?: HospitalChainGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HospitalChainGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHospitalChainGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HospitalChain model
   */
  readonly fields: HospitalChainFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HospitalChain.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HospitalChainClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    hospitals<T extends HospitalChain$hospitalsArgs<ExtArgs> = {}>(args?: Subset<T, HospitalChain$hospitalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HospitalChain model
   */
  interface HospitalChainFieldRefs {
    readonly id: FieldRef<"HospitalChain", 'String'>
    readonly organizationId: FieldRef<"HospitalChain", 'String'>
    readonly name: FieldRef<"HospitalChain", 'String'>
    readonly headquartersAddress: FieldRef<"HospitalChain", 'String'>
    readonly contactEmail: FieldRef<"HospitalChain", 'String'>
    readonly contactPhone: FieldRef<"HospitalChain", 'String'>
    readonly createdAt: FieldRef<"HospitalChain", 'DateTime'>
    readonly updatedAt: FieldRef<"HospitalChain", 'DateTime'>
    readonly isActive: FieldRef<"HospitalChain", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * HospitalChain findUnique
   */
  export type HospitalChainFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HospitalChain
     */
    select?: HospitalChainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HospitalChain
     */
    omit?: HospitalChainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalChainInclude<ExtArgs> | null
    /**
     * Filter, which HospitalChain to fetch.
     */
    where: HospitalChainWhereUniqueInput
  }

  /**
   * HospitalChain findUniqueOrThrow
   */
  export type HospitalChainFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HospitalChain
     */
    select?: HospitalChainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HospitalChain
     */
    omit?: HospitalChainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalChainInclude<ExtArgs> | null
    /**
     * Filter, which HospitalChain to fetch.
     */
    where: HospitalChainWhereUniqueInput
  }

  /**
   * HospitalChain findFirst
   */
  export type HospitalChainFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HospitalChain
     */
    select?: HospitalChainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HospitalChain
     */
    omit?: HospitalChainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalChainInclude<ExtArgs> | null
    /**
     * Filter, which HospitalChain to fetch.
     */
    where?: HospitalChainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HospitalChains to fetch.
     */
    orderBy?: HospitalChainOrderByWithRelationInput | HospitalChainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HospitalChains.
     */
    cursor?: HospitalChainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HospitalChains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HospitalChains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HospitalChains.
     */
    distinct?: HospitalChainScalarFieldEnum | HospitalChainScalarFieldEnum[]
  }

  /**
   * HospitalChain findFirstOrThrow
   */
  export type HospitalChainFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HospitalChain
     */
    select?: HospitalChainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HospitalChain
     */
    omit?: HospitalChainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalChainInclude<ExtArgs> | null
    /**
     * Filter, which HospitalChain to fetch.
     */
    where?: HospitalChainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HospitalChains to fetch.
     */
    orderBy?: HospitalChainOrderByWithRelationInput | HospitalChainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HospitalChains.
     */
    cursor?: HospitalChainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HospitalChains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HospitalChains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HospitalChains.
     */
    distinct?: HospitalChainScalarFieldEnum | HospitalChainScalarFieldEnum[]
  }

  /**
   * HospitalChain findMany
   */
  export type HospitalChainFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HospitalChain
     */
    select?: HospitalChainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HospitalChain
     */
    omit?: HospitalChainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalChainInclude<ExtArgs> | null
    /**
     * Filter, which HospitalChains to fetch.
     */
    where?: HospitalChainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HospitalChains to fetch.
     */
    orderBy?: HospitalChainOrderByWithRelationInput | HospitalChainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HospitalChains.
     */
    cursor?: HospitalChainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HospitalChains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HospitalChains.
     */
    skip?: number
    distinct?: HospitalChainScalarFieldEnum | HospitalChainScalarFieldEnum[]
  }

  /**
   * HospitalChain create
   */
  export type HospitalChainCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HospitalChain
     */
    select?: HospitalChainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HospitalChain
     */
    omit?: HospitalChainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalChainInclude<ExtArgs> | null
    /**
     * The data needed to create a HospitalChain.
     */
    data: XOR<HospitalChainCreateInput, HospitalChainUncheckedCreateInput>
  }

  /**
   * HospitalChain createMany
   */
  export type HospitalChainCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HospitalChains.
     */
    data: HospitalChainCreateManyInput | HospitalChainCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HospitalChain createManyAndReturn
   */
  export type HospitalChainCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HospitalChain
     */
    select?: HospitalChainSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HospitalChain
     */
    omit?: HospitalChainOmit<ExtArgs> | null
    /**
     * The data used to create many HospitalChains.
     */
    data: HospitalChainCreateManyInput | HospitalChainCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HospitalChain update
   */
  export type HospitalChainUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HospitalChain
     */
    select?: HospitalChainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HospitalChain
     */
    omit?: HospitalChainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalChainInclude<ExtArgs> | null
    /**
     * The data needed to update a HospitalChain.
     */
    data: XOR<HospitalChainUpdateInput, HospitalChainUncheckedUpdateInput>
    /**
     * Choose, which HospitalChain to update.
     */
    where: HospitalChainWhereUniqueInput
  }

  /**
   * HospitalChain updateMany
   */
  export type HospitalChainUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HospitalChains.
     */
    data: XOR<HospitalChainUpdateManyMutationInput, HospitalChainUncheckedUpdateManyInput>
    /**
     * Filter which HospitalChains to update
     */
    where?: HospitalChainWhereInput
    /**
     * Limit how many HospitalChains to update.
     */
    limit?: number
  }

  /**
   * HospitalChain updateManyAndReturn
   */
  export type HospitalChainUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HospitalChain
     */
    select?: HospitalChainSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HospitalChain
     */
    omit?: HospitalChainOmit<ExtArgs> | null
    /**
     * The data used to update HospitalChains.
     */
    data: XOR<HospitalChainUpdateManyMutationInput, HospitalChainUncheckedUpdateManyInput>
    /**
     * Filter which HospitalChains to update
     */
    where?: HospitalChainWhereInput
    /**
     * Limit how many HospitalChains to update.
     */
    limit?: number
  }

  /**
   * HospitalChain upsert
   */
  export type HospitalChainUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HospitalChain
     */
    select?: HospitalChainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HospitalChain
     */
    omit?: HospitalChainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalChainInclude<ExtArgs> | null
    /**
     * The filter to search for the HospitalChain to update in case it exists.
     */
    where: HospitalChainWhereUniqueInput
    /**
     * In case the HospitalChain found by the `where` argument doesn't exist, create a new HospitalChain with this data.
     */
    create: XOR<HospitalChainCreateInput, HospitalChainUncheckedCreateInput>
    /**
     * In case the HospitalChain was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HospitalChainUpdateInput, HospitalChainUncheckedUpdateInput>
  }

  /**
   * HospitalChain delete
   */
  export type HospitalChainDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HospitalChain
     */
    select?: HospitalChainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HospitalChain
     */
    omit?: HospitalChainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalChainInclude<ExtArgs> | null
    /**
     * Filter which HospitalChain to delete.
     */
    where: HospitalChainWhereUniqueInput
  }

  /**
   * HospitalChain deleteMany
   */
  export type HospitalChainDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HospitalChains to delete
     */
    where?: HospitalChainWhereInput
    /**
     * Limit how many HospitalChains to delete.
     */
    limit?: number
  }

  /**
   * HospitalChain.hospitals
   */
  export type HospitalChain$hospitalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hospital
     */
    omit?: HospitalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalInclude<ExtArgs> | null
    where?: HospitalWhereInput
    orderBy?: HospitalOrderByWithRelationInput | HospitalOrderByWithRelationInput[]
    cursor?: HospitalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HospitalScalarFieldEnum | HospitalScalarFieldEnum[]
  }

  /**
   * HospitalChain without action
   */
  export type HospitalChainDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HospitalChain
     */
    select?: HospitalChainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HospitalChain
     */
    omit?: HospitalChainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalChainInclude<ExtArgs> | null
  }


  /**
   * Model ChemistChain
   */

  export type AggregateChemistChain = {
    _count: ChemistChainCountAggregateOutputType | null
    _min: ChemistChainMinAggregateOutputType | null
    _max: ChemistChainMaxAggregateOutputType | null
  }

  export type ChemistChainMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    name: string | null
    headquartersAddress: string | null
    contactEmail: string | null
    contactPhone: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isActive: boolean | null
  }

  export type ChemistChainMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    name: string | null
    headquartersAddress: string | null
    contactEmail: string | null
    contactPhone: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isActive: boolean | null
  }

  export type ChemistChainCountAggregateOutputType = {
    id: number
    organizationId: number
    name: number
    headquartersAddress: number
    contactEmail: number
    contactPhone: number
    createdAt: number
    updatedAt: number
    isActive: number
    _all: number
  }


  export type ChemistChainMinAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    headquartersAddress?: true
    contactEmail?: true
    contactPhone?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
  }

  export type ChemistChainMaxAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    headquartersAddress?: true
    contactEmail?: true
    contactPhone?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
  }

  export type ChemistChainCountAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    headquartersAddress?: true
    contactEmail?: true
    contactPhone?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
    _all?: true
  }

  export type ChemistChainAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChemistChain to aggregate.
     */
    where?: ChemistChainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChemistChains to fetch.
     */
    orderBy?: ChemistChainOrderByWithRelationInput | ChemistChainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChemistChainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChemistChains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChemistChains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChemistChains
    **/
    _count?: true | ChemistChainCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChemistChainMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChemistChainMaxAggregateInputType
  }

  export type GetChemistChainAggregateType<T extends ChemistChainAggregateArgs> = {
        [P in keyof T & keyof AggregateChemistChain]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChemistChain[P]>
      : GetScalarType<T[P], AggregateChemistChain[P]>
  }




  export type ChemistChainGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChemistChainWhereInput
    orderBy?: ChemistChainOrderByWithAggregationInput | ChemistChainOrderByWithAggregationInput[]
    by: ChemistChainScalarFieldEnum[] | ChemistChainScalarFieldEnum
    having?: ChemistChainScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChemistChainCountAggregateInputType | true
    _min?: ChemistChainMinAggregateInputType
    _max?: ChemistChainMaxAggregateInputType
  }

  export type ChemistChainGroupByOutputType = {
    id: string
    organizationId: string
    name: string
    headquartersAddress: string | null
    contactEmail: string | null
    contactPhone: string | null
    createdAt: Date
    updatedAt: Date
    isActive: boolean
    _count: ChemistChainCountAggregateOutputType | null
    _min: ChemistChainMinAggregateOutputType | null
    _max: ChemistChainMaxAggregateOutputType | null
  }

  type GetChemistChainGroupByPayload<T extends ChemistChainGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChemistChainGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChemistChainGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChemistChainGroupByOutputType[P]>
            : GetScalarType<T[P], ChemistChainGroupByOutputType[P]>
        }
      >
    >


  export type ChemistChainSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    headquartersAddress?: boolean
    contactEmail?: boolean
    contactPhone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    chemists?: boolean | ChemistChain$chemistsArgs<ExtArgs>
    _count?: boolean | ChemistChainCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chemistChain"]>

  export type ChemistChainSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    headquartersAddress?: boolean
    contactEmail?: boolean
    contactPhone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["chemistChain"]>

  export type ChemistChainSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    headquartersAddress?: boolean
    contactEmail?: boolean
    contactPhone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["chemistChain"]>

  export type ChemistChainSelectScalar = {
    id?: boolean
    organizationId?: boolean
    name?: boolean
    headquartersAddress?: boolean
    contactEmail?: boolean
    contactPhone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
  }

  export type ChemistChainOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "name" | "headquartersAddress" | "contactEmail" | "contactPhone" | "createdAt" | "updatedAt" | "isActive", ExtArgs["result"]["chemistChain"]>
  export type ChemistChainInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chemists?: boolean | ChemistChain$chemistsArgs<ExtArgs>
    _count?: boolean | ChemistChainCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChemistChainIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ChemistChainIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ChemistChainPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChemistChain"
    objects: {
      chemists: Prisma.$ChemistPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      name: string
      headquartersAddress: string | null
      contactEmail: string | null
      contactPhone: string | null
      createdAt: Date
      updatedAt: Date
      isActive: boolean
    }, ExtArgs["result"]["chemistChain"]>
    composites: {}
  }

  type ChemistChainGetPayload<S extends boolean | null | undefined | ChemistChainDefaultArgs> = $Result.GetResult<Prisma.$ChemistChainPayload, S>

  type ChemistChainCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChemistChainFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChemistChainCountAggregateInputType | true
    }

  export interface ChemistChainDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChemistChain'], meta: { name: 'ChemistChain' } }
    /**
     * Find zero or one ChemistChain that matches the filter.
     * @param {ChemistChainFindUniqueArgs} args - Arguments to find a ChemistChain
     * @example
     * // Get one ChemistChain
     * const chemistChain = await prisma.chemistChain.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChemistChainFindUniqueArgs>(args: SelectSubset<T, ChemistChainFindUniqueArgs<ExtArgs>>): Prisma__ChemistChainClient<$Result.GetResult<Prisma.$ChemistChainPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChemistChain that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChemistChainFindUniqueOrThrowArgs} args - Arguments to find a ChemistChain
     * @example
     * // Get one ChemistChain
     * const chemistChain = await prisma.chemistChain.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChemistChainFindUniqueOrThrowArgs>(args: SelectSubset<T, ChemistChainFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChemistChainClient<$Result.GetResult<Prisma.$ChemistChainPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChemistChain that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistChainFindFirstArgs} args - Arguments to find a ChemistChain
     * @example
     * // Get one ChemistChain
     * const chemistChain = await prisma.chemistChain.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChemistChainFindFirstArgs>(args?: SelectSubset<T, ChemistChainFindFirstArgs<ExtArgs>>): Prisma__ChemistChainClient<$Result.GetResult<Prisma.$ChemistChainPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChemistChain that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistChainFindFirstOrThrowArgs} args - Arguments to find a ChemistChain
     * @example
     * // Get one ChemistChain
     * const chemistChain = await prisma.chemistChain.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChemistChainFindFirstOrThrowArgs>(args?: SelectSubset<T, ChemistChainFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChemistChainClient<$Result.GetResult<Prisma.$ChemistChainPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChemistChains that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistChainFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChemistChains
     * const chemistChains = await prisma.chemistChain.findMany()
     * 
     * // Get first 10 ChemistChains
     * const chemistChains = await prisma.chemistChain.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chemistChainWithIdOnly = await prisma.chemistChain.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChemistChainFindManyArgs>(args?: SelectSubset<T, ChemistChainFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChemistChainPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChemistChain.
     * @param {ChemistChainCreateArgs} args - Arguments to create a ChemistChain.
     * @example
     * // Create one ChemistChain
     * const ChemistChain = await prisma.chemistChain.create({
     *   data: {
     *     // ... data to create a ChemistChain
     *   }
     * })
     * 
     */
    create<T extends ChemistChainCreateArgs>(args: SelectSubset<T, ChemistChainCreateArgs<ExtArgs>>): Prisma__ChemistChainClient<$Result.GetResult<Prisma.$ChemistChainPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChemistChains.
     * @param {ChemistChainCreateManyArgs} args - Arguments to create many ChemistChains.
     * @example
     * // Create many ChemistChains
     * const chemistChain = await prisma.chemistChain.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChemistChainCreateManyArgs>(args?: SelectSubset<T, ChemistChainCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChemistChains and returns the data saved in the database.
     * @param {ChemistChainCreateManyAndReturnArgs} args - Arguments to create many ChemistChains.
     * @example
     * // Create many ChemistChains
     * const chemistChain = await prisma.chemistChain.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChemistChains and only return the `id`
     * const chemistChainWithIdOnly = await prisma.chemistChain.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChemistChainCreateManyAndReturnArgs>(args?: SelectSubset<T, ChemistChainCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChemistChainPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ChemistChain.
     * @param {ChemistChainDeleteArgs} args - Arguments to delete one ChemistChain.
     * @example
     * // Delete one ChemistChain
     * const ChemistChain = await prisma.chemistChain.delete({
     *   where: {
     *     // ... filter to delete one ChemistChain
     *   }
     * })
     * 
     */
    delete<T extends ChemistChainDeleteArgs>(args: SelectSubset<T, ChemistChainDeleteArgs<ExtArgs>>): Prisma__ChemistChainClient<$Result.GetResult<Prisma.$ChemistChainPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChemistChain.
     * @param {ChemistChainUpdateArgs} args - Arguments to update one ChemistChain.
     * @example
     * // Update one ChemistChain
     * const chemistChain = await prisma.chemistChain.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChemistChainUpdateArgs>(args: SelectSubset<T, ChemistChainUpdateArgs<ExtArgs>>): Prisma__ChemistChainClient<$Result.GetResult<Prisma.$ChemistChainPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChemistChains.
     * @param {ChemistChainDeleteManyArgs} args - Arguments to filter ChemistChains to delete.
     * @example
     * // Delete a few ChemistChains
     * const { count } = await prisma.chemistChain.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChemistChainDeleteManyArgs>(args?: SelectSubset<T, ChemistChainDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChemistChains.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistChainUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChemistChains
     * const chemistChain = await prisma.chemistChain.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChemistChainUpdateManyArgs>(args: SelectSubset<T, ChemistChainUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChemistChains and returns the data updated in the database.
     * @param {ChemistChainUpdateManyAndReturnArgs} args - Arguments to update many ChemistChains.
     * @example
     * // Update many ChemistChains
     * const chemistChain = await prisma.chemistChain.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChemistChains and only return the `id`
     * const chemistChainWithIdOnly = await prisma.chemistChain.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChemistChainUpdateManyAndReturnArgs>(args: SelectSubset<T, ChemistChainUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChemistChainPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ChemistChain.
     * @param {ChemistChainUpsertArgs} args - Arguments to update or create a ChemistChain.
     * @example
     * // Update or create a ChemistChain
     * const chemistChain = await prisma.chemistChain.upsert({
     *   create: {
     *     // ... data to create a ChemistChain
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChemistChain we want to update
     *   }
     * })
     */
    upsert<T extends ChemistChainUpsertArgs>(args: SelectSubset<T, ChemistChainUpsertArgs<ExtArgs>>): Prisma__ChemistChainClient<$Result.GetResult<Prisma.$ChemistChainPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChemistChains.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistChainCountArgs} args - Arguments to filter ChemistChains to count.
     * @example
     * // Count the number of ChemistChains
     * const count = await prisma.chemistChain.count({
     *   where: {
     *     // ... the filter for the ChemistChains we want to count
     *   }
     * })
    **/
    count<T extends ChemistChainCountArgs>(
      args?: Subset<T, ChemistChainCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChemistChainCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChemistChain.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistChainAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChemistChainAggregateArgs>(args: Subset<T, ChemistChainAggregateArgs>): Prisma.PrismaPromise<GetChemistChainAggregateType<T>>

    /**
     * Group by ChemistChain.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistChainGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChemistChainGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChemistChainGroupByArgs['orderBy'] }
        : { orderBy?: ChemistChainGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChemistChainGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChemistChainGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChemistChain model
   */
  readonly fields: ChemistChainFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChemistChain.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChemistChainClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chemists<T extends ChemistChain$chemistsArgs<ExtArgs> = {}>(args?: Subset<T, ChemistChain$chemistsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChemistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChemistChain model
   */
  interface ChemistChainFieldRefs {
    readonly id: FieldRef<"ChemistChain", 'String'>
    readonly organizationId: FieldRef<"ChemistChain", 'String'>
    readonly name: FieldRef<"ChemistChain", 'String'>
    readonly headquartersAddress: FieldRef<"ChemistChain", 'String'>
    readonly contactEmail: FieldRef<"ChemistChain", 'String'>
    readonly contactPhone: FieldRef<"ChemistChain", 'String'>
    readonly createdAt: FieldRef<"ChemistChain", 'DateTime'>
    readonly updatedAt: FieldRef<"ChemistChain", 'DateTime'>
    readonly isActive: FieldRef<"ChemistChain", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * ChemistChain findUnique
   */
  export type ChemistChainFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistChain
     */
    select?: ChemistChainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistChain
     */
    omit?: ChemistChainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistChainInclude<ExtArgs> | null
    /**
     * Filter, which ChemistChain to fetch.
     */
    where: ChemistChainWhereUniqueInput
  }

  /**
   * ChemistChain findUniqueOrThrow
   */
  export type ChemistChainFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistChain
     */
    select?: ChemistChainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistChain
     */
    omit?: ChemistChainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistChainInclude<ExtArgs> | null
    /**
     * Filter, which ChemistChain to fetch.
     */
    where: ChemistChainWhereUniqueInput
  }

  /**
   * ChemistChain findFirst
   */
  export type ChemistChainFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistChain
     */
    select?: ChemistChainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistChain
     */
    omit?: ChemistChainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistChainInclude<ExtArgs> | null
    /**
     * Filter, which ChemistChain to fetch.
     */
    where?: ChemistChainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChemistChains to fetch.
     */
    orderBy?: ChemistChainOrderByWithRelationInput | ChemistChainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChemistChains.
     */
    cursor?: ChemistChainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChemistChains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChemistChains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChemistChains.
     */
    distinct?: ChemistChainScalarFieldEnum | ChemistChainScalarFieldEnum[]
  }

  /**
   * ChemistChain findFirstOrThrow
   */
  export type ChemistChainFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistChain
     */
    select?: ChemistChainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistChain
     */
    omit?: ChemistChainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistChainInclude<ExtArgs> | null
    /**
     * Filter, which ChemistChain to fetch.
     */
    where?: ChemistChainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChemistChains to fetch.
     */
    orderBy?: ChemistChainOrderByWithRelationInput | ChemistChainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChemistChains.
     */
    cursor?: ChemistChainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChemistChains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChemistChains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChemistChains.
     */
    distinct?: ChemistChainScalarFieldEnum | ChemistChainScalarFieldEnum[]
  }

  /**
   * ChemistChain findMany
   */
  export type ChemistChainFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistChain
     */
    select?: ChemistChainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistChain
     */
    omit?: ChemistChainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistChainInclude<ExtArgs> | null
    /**
     * Filter, which ChemistChains to fetch.
     */
    where?: ChemistChainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChemistChains to fetch.
     */
    orderBy?: ChemistChainOrderByWithRelationInput | ChemistChainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChemistChains.
     */
    cursor?: ChemistChainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChemistChains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChemistChains.
     */
    skip?: number
    distinct?: ChemistChainScalarFieldEnum | ChemistChainScalarFieldEnum[]
  }

  /**
   * ChemistChain create
   */
  export type ChemistChainCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistChain
     */
    select?: ChemistChainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistChain
     */
    omit?: ChemistChainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistChainInclude<ExtArgs> | null
    /**
     * The data needed to create a ChemistChain.
     */
    data: XOR<ChemistChainCreateInput, ChemistChainUncheckedCreateInput>
  }

  /**
   * ChemistChain createMany
   */
  export type ChemistChainCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChemistChains.
     */
    data: ChemistChainCreateManyInput | ChemistChainCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChemistChain createManyAndReturn
   */
  export type ChemistChainCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistChain
     */
    select?: ChemistChainSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistChain
     */
    omit?: ChemistChainOmit<ExtArgs> | null
    /**
     * The data used to create many ChemistChains.
     */
    data: ChemistChainCreateManyInput | ChemistChainCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChemistChain update
   */
  export type ChemistChainUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistChain
     */
    select?: ChemistChainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistChain
     */
    omit?: ChemistChainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistChainInclude<ExtArgs> | null
    /**
     * The data needed to update a ChemistChain.
     */
    data: XOR<ChemistChainUpdateInput, ChemistChainUncheckedUpdateInput>
    /**
     * Choose, which ChemistChain to update.
     */
    where: ChemistChainWhereUniqueInput
  }

  /**
   * ChemistChain updateMany
   */
  export type ChemistChainUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChemistChains.
     */
    data: XOR<ChemistChainUpdateManyMutationInput, ChemistChainUncheckedUpdateManyInput>
    /**
     * Filter which ChemistChains to update
     */
    where?: ChemistChainWhereInput
    /**
     * Limit how many ChemistChains to update.
     */
    limit?: number
  }

  /**
   * ChemistChain updateManyAndReturn
   */
  export type ChemistChainUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistChain
     */
    select?: ChemistChainSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistChain
     */
    omit?: ChemistChainOmit<ExtArgs> | null
    /**
     * The data used to update ChemistChains.
     */
    data: XOR<ChemistChainUpdateManyMutationInput, ChemistChainUncheckedUpdateManyInput>
    /**
     * Filter which ChemistChains to update
     */
    where?: ChemistChainWhereInput
    /**
     * Limit how many ChemistChains to update.
     */
    limit?: number
  }

  /**
   * ChemistChain upsert
   */
  export type ChemistChainUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistChain
     */
    select?: ChemistChainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistChain
     */
    omit?: ChemistChainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistChainInclude<ExtArgs> | null
    /**
     * The filter to search for the ChemistChain to update in case it exists.
     */
    where: ChemistChainWhereUniqueInput
    /**
     * In case the ChemistChain found by the `where` argument doesn't exist, create a new ChemistChain with this data.
     */
    create: XOR<ChemistChainCreateInput, ChemistChainUncheckedCreateInput>
    /**
     * In case the ChemistChain was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChemistChainUpdateInput, ChemistChainUncheckedUpdateInput>
  }

  /**
   * ChemistChain delete
   */
  export type ChemistChainDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistChain
     */
    select?: ChemistChainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistChain
     */
    omit?: ChemistChainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistChainInclude<ExtArgs> | null
    /**
     * Filter which ChemistChain to delete.
     */
    where: ChemistChainWhereUniqueInput
  }

  /**
   * ChemistChain deleteMany
   */
  export type ChemistChainDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChemistChains to delete
     */
    where?: ChemistChainWhereInput
    /**
     * Limit how many ChemistChains to delete.
     */
    limit?: number
  }

  /**
   * ChemistChain.chemists
   */
  export type ChemistChain$chemistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chemist
     */
    select?: ChemistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chemist
     */
    omit?: ChemistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistInclude<ExtArgs> | null
    where?: ChemistWhereInput
    orderBy?: ChemistOrderByWithRelationInput | ChemistOrderByWithRelationInput[]
    cursor?: ChemistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChemistScalarFieldEnum | ChemistScalarFieldEnum[]
  }

  /**
   * ChemistChain without action
   */
  export type ChemistChainDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistChain
     */
    select?: ChemistChainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistChain
     */
    omit?: ChemistChainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistChainInclude<ExtArgs> | null
  }


  /**
   * Model Hospital
   */

  export type AggregateHospital = {
    _count: HospitalCountAggregateOutputType | null
    _avg: HospitalAvgAggregateOutputType | null
    _sum: HospitalSumAggregateOutputType | null
    _min: HospitalMinAggregateOutputType | null
    _max: HospitalMaxAggregateOutputType | null
  }

  export type HospitalAvgAggregateOutputType = {
    latitude: Decimal | null
    longitude: Decimal | null
  }

  export type HospitalSumAggregateOutputType = {
    latitude: Decimal | null
    longitude: Decimal | null
  }

  export type HospitalMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    hospitalChainId: string | null
    territoryId: string | null
    name: string | null
    type: string | null
    address: string | null
    city: string | null
    state: string | null
    pincode: string | null
    latitude: Decimal | null
    longitude: Decimal | null
    phone: string | null
    email: string | null
    website: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isActive: boolean | null
  }

  export type HospitalMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    hospitalChainId: string | null
    territoryId: string | null
    name: string | null
    type: string | null
    address: string | null
    city: string | null
    state: string | null
    pincode: string | null
    latitude: Decimal | null
    longitude: Decimal | null
    phone: string | null
    email: string | null
    website: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isActive: boolean | null
  }

  export type HospitalCountAggregateOutputType = {
    id: number
    organizationId: number
    hospitalChainId: number
    territoryId: number
    name: number
    type: number
    address: number
    city: number
    state: number
    pincode: number
    latitude: number
    longitude: number
    phone: number
    email: number
    website: number
    description: number
    createdAt: number
    updatedAt: number
    isActive: number
    _all: number
  }


  export type HospitalAvgAggregateInputType = {
    latitude?: true
    longitude?: true
  }

  export type HospitalSumAggregateInputType = {
    latitude?: true
    longitude?: true
  }

  export type HospitalMinAggregateInputType = {
    id?: true
    organizationId?: true
    hospitalChainId?: true
    territoryId?: true
    name?: true
    type?: true
    address?: true
    city?: true
    state?: true
    pincode?: true
    latitude?: true
    longitude?: true
    phone?: true
    email?: true
    website?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
  }

  export type HospitalMaxAggregateInputType = {
    id?: true
    organizationId?: true
    hospitalChainId?: true
    territoryId?: true
    name?: true
    type?: true
    address?: true
    city?: true
    state?: true
    pincode?: true
    latitude?: true
    longitude?: true
    phone?: true
    email?: true
    website?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
  }

  export type HospitalCountAggregateInputType = {
    id?: true
    organizationId?: true
    hospitalChainId?: true
    territoryId?: true
    name?: true
    type?: true
    address?: true
    city?: true
    state?: true
    pincode?: true
    latitude?: true
    longitude?: true
    phone?: true
    email?: true
    website?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
    _all?: true
  }

  export type HospitalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Hospital to aggregate.
     */
    where?: HospitalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hospitals to fetch.
     */
    orderBy?: HospitalOrderByWithRelationInput | HospitalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HospitalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hospitals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hospitals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Hospitals
    **/
    _count?: true | HospitalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HospitalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HospitalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HospitalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HospitalMaxAggregateInputType
  }

  export type GetHospitalAggregateType<T extends HospitalAggregateArgs> = {
        [P in keyof T & keyof AggregateHospital]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHospital[P]>
      : GetScalarType<T[P], AggregateHospital[P]>
  }




  export type HospitalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HospitalWhereInput
    orderBy?: HospitalOrderByWithAggregationInput | HospitalOrderByWithAggregationInput[]
    by: HospitalScalarFieldEnum[] | HospitalScalarFieldEnum
    having?: HospitalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HospitalCountAggregateInputType | true
    _avg?: HospitalAvgAggregateInputType
    _sum?: HospitalSumAggregateInputType
    _min?: HospitalMinAggregateInputType
    _max?: HospitalMaxAggregateInputType
  }

  export type HospitalGroupByOutputType = {
    id: string
    organizationId: string
    hospitalChainId: string | null
    territoryId: string
    name: string
    type: string
    address: string
    city: string | null
    state: string | null
    pincode: string | null
    latitude: Decimal | null
    longitude: Decimal | null
    phone: string | null
    email: string | null
    website: string | null
    description: string | null
    createdAt: Date
    updatedAt: Date
    isActive: boolean
    _count: HospitalCountAggregateOutputType | null
    _avg: HospitalAvgAggregateOutputType | null
    _sum: HospitalSumAggregateOutputType | null
    _min: HospitalMinAggregateOutputType | null
    _max: HospitalMaxAggregateOutputType | null
  }

  type GetHospitalGroupByPayload<T extends HospitalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HospitalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HospitalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HospitalGroupByOutputType[P]>
            : GetScalarType<T[P], HospitalGroupByOutputType[P]>
        }
      >
    >


  export type HospitalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    hospitalChainId?: boolean
    territoryId?: boolean
    name?: boolean
    type?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    pincode?: boolean
    latitude?: boolean
    longitude?: boolean
    phone?: boolean
    email?: boolean
    website?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    hospitalChain?: boolean | Hospital$hospitalChainArgs<ExtArgs>
    territory?: boolean | TerritoryDefaultArgs<ExtArgs>
    doctorAssociations?: boolean | Hospital$doctorAssociationsArgs<ExtArgs>
    consultationSchedules?: boolean | Hospital$consultationSchedulesArgs<ExtArgs>
    doctorInteractions?: boolean | Hospital$doctorInteractionsArgs<ExtArgs>
    _count?: boolean | HospitalCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["hospital"]>

  export type HospitalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    hospitalChainId?: boolean
    territoryId?: boolean
    name?: boolean
    type?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    pincode?: boolean
    latitude?: boolean
    longitude?: boolean
    phone?: boolean
    email?: boolean
    website?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    hospitalChain?: boolean | Hospital$hospitalChainArgs<ExtArgs>
    territory?: boolean | TerritoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["hospital"]>

  export type HospitalSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    hospitalChainId?: boolean
    territoryId?: boolean
    name?: boolean
    type?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    pincode?: boolean
    latitude?: boolean
    longitude?: boolean
    phone?: boolean
    email?: boolean
    website?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    hospitalChain?: boolean | Hospital$hospitalChainArgs<ExtArgs>
    territory?: boolean | TerritoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["hospital"]>

  export type HospitalSelectScalar = {
    id?: boolean
    organizationId?: boolean
    hospitalChainId?: boolean
    territoryId?: boolean
    name?: boolean
    type?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    pincode?: boolean
    latitude?: boolean
    longitude?: boolean
    phone?: boolean
    email?: boolean
    website?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
  }

  export type HospitalOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "hospitalChainId" | "territoryId" | "name" | "type" | "address" | "city" | "state" | "pincode" | "latitude" | "longitude" | "phone" | "email" | "website" | "description" | "createdAt" | "updatedAt" | "isActive", ExtArgs["result"]["hospital"]>
  export type HospitalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hospitalChain?: boolean | Hospital$hospitalChainArgs<ExtArgs>
    territory?: boolean | TerritoryDefaultArgs<ExtArgs>
    doctorAssociations?: boolean | Hospital$doctorAssociationsArgs<ExtArgs>
    consultationSchedules?: boolean | Hospital$consultationSchedulesArgs<ExtArgs>
    doctorInteractions?: boolean | Hospital$doctorInteractionsArgs<ExtArgs>
    _count?: boolean | HospitalCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type HospitalIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hospitalChain?: boolean | Hospital$hospitalChainArgs<ExtArgs>
    territory?: boolean | TerritoryDefaultArgs<ExtArgs>
  }
  export type HospitalIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hospitalChain?: boolean | Hospital$hospitalChainArgs<ExtArgs>
    territory?: boolean | TerritoryDefaultArgs<ExtArgs>
  }

  export type $HospitalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Hospital"
    objects: {
      hospitalChain: Prisma.$HospitalChainPayload<ExtArgs> | null
      territory: Prisma.$TerritoryPayload<ExtArgs>
      doctorAssociations: Prisma.$DoctorHospitalAssociationPayload<ExtArgs>[]
      consultationSchedules: Prisma.$DoctorConsultationSchedulePayload<ExtArgs>[]
      doctorInteractions: Prisma.$DoctorInteractionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      hospitalChainId: string | null
      territoryId: string
      name: string
      type: string
      address: string
      city: string | null
      state: string | null
      pincode: string | null
      latitude: Prisma.Decimal | null
      longitude: Prisma.Decimal | null
      phone: string | null
      email: string | null
      website: string | null
      description: string | null
      createdAt: Date
      updatedAt: Date
      isActive: boolean
    }, ExtArgs["result"]["hospital"]>
    composites: {}
  }

  type HospitalGetPayload<S extends boolean | null | undefined | HospitalDefaultArgs> = $Result.GetResult<Prisma.$HospitalPayload, S>

  type HospitalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HospitalFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HospitalCountAggregateInputType | true
    }

  export interface HospitalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Hospital'], meta: { name: 'Hospital' } }
    /**
     * Find zero or one Hospital that matches the filter.
     * @param {HospitalFindUniqueArgs} args - Arguments to find a Hospital
     * @example
     * // Get one Hospital
     * const hospital = await prisma.hospital.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HospitalFindUniqueArgs>(args: SelectSubset<T, HospitalFindUniqueArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Hospital that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HospitalFindUniqueOrThrowArgs} args - Arguments to find a Hospital
     * @example
     * // Get one Hospital
     * const hospital = await prisma.hospital.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HospitalFindUniqueOrThrowArgs>(args: SelectSubset<T, HospitalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Hospital that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalFindFirstArgs} args - Arguments to find a Hospital
     * @example
     * // Get one Hospital
     * const hospital = await prisma.hospital.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HospitalFindFirstArgs>(args?: SelectSubset<T, HospitalFindFirstArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Hospital that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalFindFirstOrThrowArgs} args - Arguments to find a Hospital
     * @example
     * // Get one Hospital
     * const hospital = await prisma.hospital.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HospitalFindFirstOrThrowArgs>(args?: SelectSubset<T, HospitalFindFirstOrThrowArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Hospitals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Hospitals
     * const hospitals = await prisma.hospital.findMany()
     * 
     * // Get first 10 Hospitals
     * const hospitals = await prisma.hospital.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hospitalWithIdOnly = await prisma.hospital.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HospitalFindManyArgs>(args?: SelectSubset<T, HospitalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Hospital.
     * @param {HospitalCreateArgs} args - Arguments to create a Hospital.
     * @example
     * // Create one Hospital
     * const Hospital = await prisma.hospital.create({
     *   data: {
     *     // ... data to create a Hospital
     *   }
     * })
     * 
     */
    create<T extends HospitalCreateArgs>(args: SelectSubset<T, HospitalCreateArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Hospitals.
     * @param {HospitalCreateManyArgs} args - Arguments to create many Hospitals.
     * @example
     * // Create many Hospitals
     * const hospital = await prisma.hospital.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HospitalCreateManyArgs>(args?: SelectSubset<T, HospitalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Hospitals and returns the data saved in the database.
     * @param {HospitalCreateManyAndReturnArgs} args - Arguments to create many Hospitals.
     * @example
     * // Create many Hospitals
     * const hospital = await prisma.hospital.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Hospitals and only return the `id`
     * const hospitalWithIdOnly = await prisma.hospital.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HospitalCreateManyAndReturnArgs>(args?: SelectSubset<T, HospitalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Hospital.
     * @param {HospitalDeleteArgs} args - Arguments to delete one Hospital.
     * @example
     * // Delete one Hospital
     * const Hospital = await prisma.hospital.delete({
     *   where: {
     *     // ... filter to delete one Hospital
     *   }
     * })
     * 
     */
    delete<T extends HospitalDeleteArgs>(args: SelectSubset<T, HospitalDeleteArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Hospital.
     * @param {HospitalUpdateArgs} args - Arguments to update one Hospital.
     * @example
     * // Update one Hospital
     * const hospital = await prisma.hospital.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HospitalUpdateArgs>(args: SelectSubset<T, HospitalUpdateArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Hospitals.
     * @param {HospitalDeleteManyArgs} args - Arguments to filter Hospitals to delete.
     * @example
     * // Delete a few Hospitals
     * const { count } = await prisma.hospital.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HospitalDeleteManyArgs>(args?: SelectSubset<T, HospitalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Hospitals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Hospitals
     * const hospital = await prisma.hospital.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HospitalUpdateManyArgs>(args: SelectSubset<T, HospitalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Hospitals and returns the data updated in the database.
     * @param {HospitalUpdateManyAndReturnArgs} args - Arguments to update many Hospitals.
     * @example
     * // Update many Hospitals
     * const hospital = await prisma.hospital.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Hospitals and only return the `id`
     * const hospitalWithIdOnly = await prisma.hospital.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HospitalUpdateManyAndReturnArgs>(args: SelectSubset<T, HospitalUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Hospital.
     * @param {HospitalUpsertArgs} args - Arguments to update or create a Hospital.
     * @example
     * // Update or create a Hospital
     * const hospital = await prisma.hospital.upsert({
     *   create: {
     *     // ... data to create a Hospital
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Hospital we want to update
     *   }
     * })
     */
    upsert<T extends HospitalUpsertArgs>(args: SelectSubset<T, HospitalUpsertArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Hospitals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalCountArgs} args - Arguments to filter Hospitals to count.
     * @example
     * // Count the number of Hospitals
     * const count = await prisma.hospital.count({
     *   where: {
     *     // ... the filter for the Hospitals we want to count
     *   }
     * })
    **/
    count<T extends HospitalCountArgs>(
      args?: Subset<T, HospitalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HospitalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Hospital.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HospitalAggregateArgs>(args: Subset<T, HospitalAggregateArgs>): Prisma.PrismaPromise<GetHospitalAggregateType<T>>

    /**
     * Group by Hospital.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HospitalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HospitalGroupByArgs['orderBy'] }
        : { orderBy?: HospitalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HospitalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHospitalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Hospital model
   */
  readonly fields: HospitalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Hospital.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HospitalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    hospitalChain<T extends Hospital$hospitalChainArgs<ExtArgs> = {}>(args?: Subset<T, Hospital$hospitalChainArgs<ExtArgs>>): Prisma__HospitalChainClient<$Result.GetResult<Prisma.$HospitalChainPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    territory<T extends TerritoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TerritoryDefaultArgs<ExtArgs>>): Prisma__TerritoryClient<$Result.GetResult<Prisma.$TerritoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    doctorAssociations<T extends Hospital$doctorAssociationsArgs<ExtArgs> = {}>(args?: Subset<T, Hospital$doctorAssociationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorHospitalAssociationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    consultationSchedules<T extends Hospital$consultationSchedulesArgs<ExtArgs> = {}>(args?: Subset<T, Hospital$consultationSchedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorConsultationSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    doctorInteractions<T extends Hospital$doctorInteractionsArgs<ExtArgs> = {}>(args?: Subset<T, Hospital$doctorInteractionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorInteractionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Hospital model
   */
  interface HospitalFieldRefs {
    readonly id: FieldRef<"Hospital", 'String'>
    readonly organizationId: FieldRef<"Hospital", 'String'>
    readonly hospitalChainId: FieldRef<"Hospital", 'String'>
    readonly territoryId: FieldRef<"Hospital", 'String'>
    readonly name: FieldRef<"Hospital", 'String'>
    readonly type: FieldRef<"Hospital", 'String'>
    readonly address: FieldRef<"Hospital", 'String'>
    readonly city: FieldRef<"Hospital", 'String'>
    readonly state: FieldRef<"Hospital", 'String'>
    readonly pincode: FieldRef<"Hospital", 'String'>
    readonly latitude: FieldRef<"Hospital", 'Decimal'>
    readonly longitude: FieldRef<"Hospital", 'Decimal'>
    readonly phone: FieldRef<"Hospital", 'String'>
    readonly email: FieldRef<"Hospital", 'String'>
    readonly website: FieldRef<"Hospital", 'String'>
    readonly description: FieldRef<"Hospital", 'String'>
    readonly createdAt: FieldRef<"Hospital", 'DateTime'>
    readonly updatedAt: FieldRef<"Hospital", 'DateTime'>
    readonly isActive: FieldRef<"Hospital", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Hospital findUnique
   */
  export type HospitalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hospital
     */
    omit?: HospitalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalInclude<ExtArgs> | null
    /**
     * Filter, which Hospital to fetch.
     */
    where: HospitalWhereUniqueInput
  }

  /**
   * Hospital findUniqueOrThrow
   */
  export type HospitalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hospital
     */
    omit?: HospitalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalInclude<ExtArgs> | null
    /**
     * Filter, which Hospital to fetch.
     */
    where: HospitalWhereUniqueInput
  }

  /**
   * Hospital findFirst
   */
  export type HospitalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hospital
     */
    omit?: HospitalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalInclude<ExtArgs> | null
    /**
     * Filter, which Hospital to fetch.
     */
    where?: HospitalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hospitals to fetch.
     */
    orderBy?: HospitalOrderByWithRelationInput | HospitalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Hospitals.
     */
    cursor?: HospitalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hospitals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hospitals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Hospitals.
     */
    distinct?: HospitalScalarFieldEnum | HospitalScalarFieldEnum[]
  }

  /**
   * Hospital findFirstOrThrow
   */
  export type HospitalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hospital
     */
    omit?: HospitalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalInclude<ExtArgs> | null
    /**
     * Filter, which Hospital to fetch.
     */
    where?: HospitalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hospitals to fetch.
     */
    orderBy?: HospitalOrderByWithRelationInput | HospitalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Hospitals.
     */
    cursor?: HospitalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hospitals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hospitals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Hospitals.
     */
    distinct?: HospitalScalarFieldEnum | HospitalScalarFieldEnum[]
  }

  /**
   * Hospital findMany
   */
  export type HospitalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hospital
     */
    omit?: HospitalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalInclude<ExtArgs> | null
    /**
     * Filter, which Hospitals to fetch.
     */
    where?: HospitalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hospitals to fetch.
     */
    orderBy?: HospitalOrderByWithRelationInput | HospitalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Hospitals.
     */
    cursor?: HospitalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hospitals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hospitals.
     */
    skip?: number
    distinct?: HospitalScalarFieldEnum | HospitalScalarFieldEnum[]
  }

  /**
   * Hospital create
   */
  export type HospitalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hospital
     */
    omit?: HospitalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalInclude<ExtArgs> | null
    /**
     * The data needed to create a Hospital.
     */
    data: XOR<HospitalCreateInput, HospitalUncheckedCreateInput>
  }

  /**
   * Hospital createMany
   */
  export type HospitalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Hospitals.
     */
    data: HospitalCreateManyInput | HospitalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Hospital createManyAndReturn
   */
  export type HospitalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Hospital
     */
    omit?: HospitalOmit<ExtArgs> | null
    /**
     * The data used to create many Hospitals.
     */
    data: HospitalCreateManyInput | HospitalCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Hospital update
   */
  export type HospitalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hospital
     */
    omit?: HospitalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalInclude<ExtArgs> | null
    /**
     * The data needed to update a Hospital.
     */
    data: XOR<HospitalUpdateInput, HospitalUncheckedUpdateInput>
    /**
     * Choose, which Hospital to update.
     */
    where: HospitalWhereUniqueInput
  }

  /**
   * Hospital updateMany
   */
  export type HospitalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Hospitals.
     */
    data: XOR<HospitalUpdateManyMutationInput, HospitalUncheckedUpdateManyInput>
    /**
     * Filter which Hospitals to update
     */
    where?: HospitalWhereInput
    /**
     * Limit how many Hospitals to update.
     */
    limit?: number
  }

  /**
   * Hospital updateManyAndReturn
   */
  export type HospitalUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Hospital
     */
    omit?: HospitalOmit<ExtArgs> | null
    /**
     * The data used to update Hospitals.
     */
    data: XOR<HospitalUpdateManyMutationInput, HospitalUncheckedUpdateManyInput>
    /**
     * Filter which Hospitals to update
     */
    where?: HospitalWhereInput
    /**
     * Limit how many Hospitals to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Hospital upsert
   */
  export type HospitalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hospital
     */
    omit?: HospitalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalInclude<ExtArgs> | null
    /**
     * The filter to search for the Hospital to update in case it exists.
     */
    where: HospitalWhereUniqueInput
    /**
     * In case the Hospital found by the `where` argument doesn't exist, create a new Hospital with this data.
     */
    create: XOR<HospitalCreateInput, HospitalUncheckedCreateInput>
    /**
     * In case the Hospital was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HospitalUpdateInput, HospitalUncheckedUpdateInput>
  }

  /**
   * Hospital delete
   */
  export type HospitalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hospital
     */
    omit?: HospitalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalInclude<ExtArgs> | null
    /**
     * Filter which Hospital to delete.
     */
    where: HospitalWhereUniqueInput
  }

  /**
   * Hospital deleteMany
   */
  export type HospitalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Hospitals to delete
     */
    where?: HospitalWhereInput
    /**
     * Limit how many Hospitals to delete.
     */
    limit?: number
  }

  /**
   * Hospital.hospitalChain
   */
  export type Hospital$hospitalChainArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HospitalChain
     */
    select?: HospitalChainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HospitalChain
     */
    omit?: HospitalChainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalChainInclude<ExtArgs> | null
    where?: HospitalChainWhereInput
  }

  /**
   * Hospital.doctorAssociations
   */
  export type Hospital$doctorAssociationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorHospitalAssociation
     */
    select?: DoctorHospitalAssociationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorHospitalAssociation
     */
    omit?: DoctorHospitalAssociationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorHospitalAssociationInclude<ExtArgs> | null
    where?: DoctorHospitalAssociationWhereInput
    orderBy?: DoctorHospitalAssociationOrderByWithRelationInput | DoctorHospitalAssociationOrderByWithRelationInput[]
    cursor?: DoctorHospitalAssociationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorHospitalAssociationScalarFieldEnum | DoctorHospitalAssociationScalarFieldEnum[]
  }

  /**
   * Hospital.consultationSchedules
   */
  export type Hospital$consultationSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorConsultationSchedule
     */
    select?: DoctorConsultationScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorConsultationSchedule
     */
    omit?: DoctorConsultationScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorConsultationScheduleInclude<ExtArgs> | null
    where?: DoctorConsultationScheduleWhereInput
    orderBy?: DoctorConsultationScheduleOrderByWithRelationInput | DoctorConsultationScheduleOrderByWithRelationInput[]
    cursor?: DoctorConsultationScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorConsultationScheduleScalarFieldEnum | DoctorConsultationScheduleScalarFieldEnum[]
  }

  /**
   * Hospital.doctorInteractions
   */
  export type Hospital$doctorInteractionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorInteraction
     */
    select?: DoctorInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorInteraction
     */
    omit?: DoctorInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInteractionInclude<ExtArgs> | null
    where?: DoctorInteractionWhereInput
    orderBy?: DoctorInteractionOrderByWithRelationInput | DoctorInteractionOrderByWithRelationInput[]
    cursor?: DoctorInteractionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorInteractionScalarFieldEnum | DoctorInteractionScalarFieldEnum[]
  }

  /**
   * Hospital without action
   */
  export type HospitalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hospital
     */
    omit?: HospitalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalInclude<ExtArgs> | null
  }


  /**
   * Model Doctor
   */

  export type AggregateDoctor = {
    _count: DoctorCountAggregateOutputType | null
    _avg: DoctorAvgAggregateOutputType | null
    _sum: DoctorSumAggregateOutputType | null
    _min: DoctorMinAggregateOutputType | null
    _max: DoctorMaxAggregateOutputType | null
  }

  export type DoctorAvgAggregateOutputType = {
    experienceYears: number | null
  }

  export type DoctorSumAggregateOutputType = {
    experienceYears: number | null
  }

  export type DoctorMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    name: string | null
    designation: string | null
    specialization: string | null
    email: string | null
    phone: string | null
    description: string | null
    profilePictureUrl: string | null
    qualification: string | null
    experienceYears: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    isActive: boolean | null
  }

  export type DoctorMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    name: string | null
    designation: string | null
    specialization: string | null
    email: string | null
    phone: string | null
    description: string | null
    profilePictureUrl: string | null
    qualification: string | null
    experienceYears: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    isActive: boolean | null
  }

  export type DoctorCountAggregateOutputType = {
    id: number
    organizationId: number
    name: number
    designation: number
    specialization: number
    email: number
    phone: number
    description: number
    profilePictureUrl: number
    qualification: number
    experienceYears: number
    createdAt: number
    updatedAt: number
    createdById: number
    isActive: number
    _all: number
  }


  export type DoctorAvgAggregateInputType = {
    experienceYears?: true
  }

  export type DoctorSumAggregateInputType = {
    experienceYears?: true
  }

  export type DoctorMinAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    designation?: true
    specialization?: true
    email?: true
    phone?: true
    description?: true
    profilePictureUrl?: true
    qualification?: true
    experienceYears?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    isActive?: true
  }

  export type DoctorMaxAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    designation?: true
    specialization?: true
    email?: true
    phone?: true
    description?: true
    profilePictureUrl?: true
    qualification?: true
    experienceYears?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    isActive?: true
  }

  export type DoctorCountAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    designation?: true
    specialization?: true
    email?: true
    phone?: true
    description?: true
    profilePictureUrl?: true
    qualification?: true
    experienceYears?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    isActive?: true
    _all?: true
  }

  export type DoctorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Doctor to aggregate.
     */
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorOrderByWithRelationInput | DoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Doctors
    **/
    _count?: true | DoctorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DoctorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DoctorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoctorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoctorMaxAggregateInputType
  }

  export type GetDoctorAggregateType<T extends DoctorAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctor[P]>
      : GetScalarType<T[P], AggregateDoctor[P]>
  }




  export type DoctorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorWhereInput
    orderBy?: DoctorOrderByWithAggregationInput | DoctorOrderByWithAggregationInput[]
    by: DoctorScalarFieldEnum[] | DoctorScalarFieldEnum
    having?: DoctorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoctorCountAggregateInputType | true
    _avg?: DoctorAvgAggregateInputType
    _sum?: DoctorSumAggregateInputType
    _min?: DoctorMinAggregateInputType
    _max?: DoctorMaxAggregateInputType
  }

  export type DoctorGroupByOutputType = {
    id: string
    organizationId: string
    name: string
    designation: string | null
    specialization: string | null
    email: string | null
    phone: string | null
    description: string | null
    profilePictureUrl: string | null
    qualification: string | null
    experienceYears: number | null
    createdAt: Date
    updatedAt: Date
    createdById: string
    isActive: boolean
    _count: DoctorCountAggregateOutputType | null
    _avg: DoctorAvgAggregateOutputType | null
    _sum: DoctorSumAggregateOutputType | null
    _min: DoctorMinAggregateOutputType | null
    _max: DoctorMaxAggregateOutputType | null
  }

  type GetDoctorGroupByPayload<T extends DoctorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DoctorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoctorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoctorGroupByOutputType[P]>
            : GetScalarType<T[P], DoctorGroupByOutputType[P]>
        }
      >
    >


  export type DoctorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    designation?: boolean
    specialization?: boolean
    email?: boolean
    phone?: boolean
    description?: boolean
    profilePictureUrl?: boolean
    qualification?: boolean
    experienceYears?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    isActive?: boolean
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    hospitalAssociations?: boolean | Doctor$hospitalAssociationsArgs<ExtArgs>
    consultationSchedules?: boolean | Doctor$consultationSchedulesArgs<ExtArgs>
    interactions?: boolean | Doctor$interactionsArgs<ExtArgs>
    notes?: boolean | Doctor$notesArgs<ExtArgs>
    chemistRelations?: boolean | Doctor$chemistRelationsArgs<ExtArgs>
    DoctorTask?: boolean | Doctor$DoctorTaskArgs<ExtArgs>
    _count?: boolean | DoctorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctor"]>

  export type DoctorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    designation?: boolean
    specialization?: boolean
    email?: boolean
    phone?: boolean
    description?: boolean
    profilePictureUrl?: boolean
    qualification?: boolean
    experienceYears?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    isActive?: boolean
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctor"]>

  export type DoctorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    designation?: boolean
    specialization?: boolean
    email?: boolean
    phone?: boolean
    description?: boolean
    profilePictureUrl?: boolean
    qualification?: boolean
    experienceYears?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    isActive?: boolean
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctor"]>

  export type DoctorSelectScalar = {
    id?: boolean
    organizationId?: boolean
    name?: boolean
    designation?: boolean
    specialization?: boolean
    email?: boolean
    phone?: boolean
    description?: boolean
    profilePictureUrl?: boolean
    qualification?: boolean
    experienceYears?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    isActive?: boolean
  }

  export type DoctorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "name" | "designation" | "specialization" | "email" | "phone" | "description" | "profilePictureUrl" | "qualification" | "experienceYears" | "createdAt" | "updatedAt" | "createdById" | "isActive", ExtArgs["result"]["doctor"]>
  export type DoctorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    hospitalAssociations?: boolean | Doctor$hospitalAssociationsArgs<ExtArgs>
    consultationSchedules?: boolean | Doctor$consultationSchedulesArgs<ExtArgs>
    interactions?: boolean | Doctor$interactionsArgs<ExtArgs>
    notes?: boolean | Doctor$notesArgs<ExtArgs>
    chemistRelations?: boolean | Doctor$chemistRelationsArgs<ExtArgs>
    DoctorTask?: boolean | Doctor$DoctorTaskArgs<ExtArgs>
    _count?: boolean | DoctorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DoctorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type DoctorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $DoctorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Doctor"
    objects: {
      createdBy: Prisma.$EmployeePayload<ExtArgs>
      hospitalAssociations: Prisma.$DoctorHospitalAssociationPayload<ExtArgs>[]
      consultationSchedules: Prisma.$DoctorConsultationSchedulePayload<ExtArgs>[]
      interactions: Prisma.$DoctorInteractionPayload<ExtArgs>[]
      notes: Prisma.$DoctorNotePayload<ExtArgs>[]
      chemistRelations: Prisma.$DoctorChemistRelationPayload<ExtArgs>[]
      DoctorTask: Prisma.$DoctorTaskPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      name: string
      designation: string | null
      specialization: string | null
      email: string | null
      phone: string | null
      description: string | null
      profilePictureUrl: string | null
      qualification: string | null
      experienceYears: number | null
      createdAt: Date
      updatedAt: Date
      createdById: string
      isActive: boolean
    }, ExtArgs["result"]["doctor"]>
    composites: {}
  }

  type DoctorGetPayload<S extends boolean | null | undefined | DoctorDefaultArgs> = $Result.GetResult<Prisma.$DoctorPayload, S>

  type DoctorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DoctorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DoctorCountAggregateInputType | true
    }

  export interface DoctorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Doctor'], meta: { name: 'Doctor' } }
    /**
     * Find zero or one Doctor that matches the filter.
     * @param {DoctorFindUniqueArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DoctorFindUniqueArgs>(args: SelectSubset<T, DoctorFindUniqueArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Doctor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DoctorFindUniqueOrThrowArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DoctorFindUniqueOrThrowArgs>(args: SelectSubset<T, DoctorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Doctor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorFindFirstArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DoctorFindFirstArgs>(args?: SelectSubset<T, DoctorFindFirstArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Doctor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorFindFirstOrThrowArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DoctorFindFirstOrThrowArgs>(args?: SelectSubset<T, DoctorFindFirstOrThrowArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Doctors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Doctors
     * const doctors = await prisma.doctor.findMany()
     * 
     * // Get first 10 Doctors
     * const doctors = await prisma.doctor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doctorWithIdOnly = await prisma.doctor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DoctorFindManyArgs>(args?: SelectSubset<T, DoctorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Doctor.
     * @param {DoctorCreateArgs} args - Arguments to create a Doctor.
     * @example
     * // Create one Doctor
     * const Doctor = await prisma.doctor.create({
     *   data: {
     *     // ... data to create a Doctor
     *   }
     * })
     * 
     */
    create<T extends DoctorCreateArgs>(args: SelectSubset<T, DoctorCreateArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Doctors.
     * @param {DoctorCreateManyArgs} args - Arguments to create many Doctors.
     * @example
     * // Create many Doctors
     * const doctor = await prisma.doctor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DoctorCreateManyArgs>(args?: SelectSubset<T, DoctorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Doctors and returns the data saved in the database.
     * @param {DoctorCreateManyAndReturnArgs} args - Arguments to create many Doctors.
     * @example
     * // Create many Doctors
     * const doctor = await prisma.doctor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Doctors and only return the `id`
     * const doctorWithIdOnly = await prisma.doctor.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DoctorCreateManyAndReturnArgs>(args?: SelectSubset<T, DoctorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Doctor.
     * @param {DoctorDeleteArgs} args - Arguments to delete one Doctor.
     * @example
     * // Delete one Doctor
     * const Doctor = await prisma.doctor.delete({
     *   where: {
     *     // ... filter to delete one Doctor
     *   }
     * })
     * 
     */
    delete<T extends DoctorDeleteArgs>(args: SelectSubset<T, DoctorDeleteArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Doctor.
     * @param {DoctorUpdateArgs} args - Arguments to update one Doctor.
     * @example
     * // Update one Doctor
     * const doctor = await prisma.doctor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DoctorUpdateArgs>(args: SelectSubset<T, DoctorUpdateArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Doctors.
     * @param {DoctorDeleteManyArgs} args - Arguments to filter Doctors to delete.
     * @example
     * // Delete a few Doctors
     * const { count } = await prisma.doctor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DoctorDeleteManyArgs>(args?: SelectSubset<T, DoctorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Doctors
     * const doctor = await prisma.doctor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DoctorUpdateManyArgs>(args: SelectSubset<T, DoctorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Doctors and returns the data updated in the database.
     * @param {DoctorUpdateManyAndReturnArgs} args - Arguments to update many Doctors.
     * @example
     * // Update many Doctors
     * const doctor = await prisma.doctor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Doctors and only return the `id`
     * const doctorWithIdOnly = await prisma.doctor.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DoctorUpdateManyAndReturnArgs>(args: SelectSubset<T, DoctorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Doctor.
     * @param {DoctorUpsertArgs} args - Arguments to update or create a Doctor.
     * @example
     * // Update or create a Doctor
     * const doctor = await prisma.doctor.upsert({
     *   create: {
     *     // ... data to create a Doctor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Doctor we want to update
     *   }
     * })
     */
    upsert<T extends DoctorUpsertArgs>(args: SelectSubset<T, DoctorUpsertArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorCountArgs} args - Arguments to filter Doctors to count.
     * @example
     * // Count the number of Doctors
     * const count = await prisma.doctor.count({
     *   where: {
     *     // ... the filter for the Doctors we want to count
     *   }
     * })
    **/
    count<T extends DoctorCountArgs>(
      args?: Subset<T, DoctorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoctorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Doctor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoctorAggregateArgs>(args: Subset<T, DoctorAggregateArgs>): Prisma.PrismaPromise<GetDoctorAggregateType<T>>

    /**
     * Group by Doctor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DoctorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DoctorGroupByArgs['orderBy'] }
        : { orderBy?: DoctorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DoctorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Doctor model
   */
  readonly fields: DoctorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Doctor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DoctorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    hospitalAssociations<T extends Doctor$hospitalAssociationsArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$hospitalAssociationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorHospitalAssociationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    consultationSchedules<T extends Doctor$consultationSchedulesArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$consultationSchedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorConsultationSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    interactions<T extends Doctor$interactionsArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$interactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorInteractionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notes<T extends Doctor$notesArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$notesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorNotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    chemistRelations<T extends Doctor$chemistRelationsArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$chemistRelationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorChemistRelationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    DoctorTask<T extends Doctor$DoctorTaskArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$DoctorTaskArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorTaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Doctor model
   */
  interface DoctorFieldRefs {
    readonly id: FieldRef<"Doctor", 'String'>
    readonly organizationId: FieldRef<"Doctor", 'String'>
    readonly name: FieldRef<"Doctor", 'String'>
    readonly designation: FieldRef<"Doctor", 'String'>
    readonly specialization: FieldRef<"Doctor", 'String'>
    readonly email: FieldRef<"Doctor", 'String'>
    readonly phone: FieldRef<"Doctor", 'String'>
    readonly description: FieldRef<"Doctor", 'String'>
    readonly profilePictureUrl: FieldRef<"Doctor", 'String'>
    readonly qualification: FieldRef<"Doctor", 'String'>
    readonly experienceYears: FieldRef<"Doctor", 'Int'>
    readonly createdAt: FieldRef<"Doctor", 'DateTime'>
    readonly updatedAt: FieldRef<"Doctor", 'DateTime'>
    readonly createdById: FieldRef<"Doctor", 'String'>
    readonly isActive: FieldRef<"Doctor", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Doctor findUnique
   */
  export type DoctorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctor to fetch.
     */
    where: DoctorWhereUniqueInput
  }

  /**
   * Doctor findUniqueOrThrow
   */
  export type DoctorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctor to fetch.
     */
    where: DoctorWhereUniqueInput
  }

  /**
   * Doctor findFirst
   */
  export type DoctorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctor to fetch.
     */
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorOrderByWithRelationInput | DoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Doctors.
     */
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Doctors.
     */
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }

  /**
   * Doctor findFirstOrThrow
   */
  export type DoctorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctor to fetch.
     */
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorOrderByWithRelationInput | DoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Doctors.
     */
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Doctors.
     */
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }

  /**
   * Doctor findMany
   */
  export type DoctorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctors to fetch.
     */
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorOrderByWithRelationInput | DoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Doctors.
     */
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }

  /**
   * Doctor create
   */
  export type DoctorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * The data needed to create a Doctor.
     */
    data: XOR<DoctorCreateInput, DoctorUncheckedCreateInput>
  }

  /**
   * Doctor createMany
   */
  export type DoctorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Doctors.
     */
    data: DoctorCreateManyInput | DoctorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Doctor createManyAndReturn
   */
  export type DoctorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * The data used to create many Doctors.
     */
    data: DoctorCreateManyInput | DoctorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Doctor update
   */
  export type DoctorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * The data needed to update a Doctor.
     */
    data: XOR<DoctorUpdateInput, DoctorUncheckedUpdateInput>
    /**
     * Choose, which Doctor to update.
     */
    where: DoctorWhereUniqueInput
  }

  /**
   * Doctor updateMany
   */
  export type DoctorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Doctors.
     */
    data: XOR<DoctorUpdateManyMutationInput, DoctorUncheckedUpdateManyInput>
    /**
     * Filter which Doctors to update
     */
    where?: DoctorWhereInput
    /**
     * Limit how many Doctors to update.
     */
    limit?: number
  }

  /**
   * Doctor updateManyAndReturn
   */
  export type DoctorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * The data used to update Doctors.
     */
    data: XOR<DoctorUpdateManyMutationInput, DoctorUncheckedUpdateManyInput>
    /**
     * Filter which Doctors to update
     */
    where?: DoctorWhereInput
    /**
     * Limit how many Doctors to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Doctor upsert
   */
  export type DoctorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * The filter to search for the Doctor to update in case it exists.
     */
    where: DoctorWhereUniqueInput
    /**
     * In case the Doctor found by the `where` argument doesn't exist, create a new Doctor with this data.
     */
    create: XOR<DoctorCreateInput, DoctorUncheckedCreateInput>
    /**
     * In case the Doctor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DoctorUpdateInput, DoctorUncheckedUpdateInput>
  }

  /**
   * Doctor delete
   */
  export type DoctorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter which Doctor to delete.
     */
    where: DoctorWhereUniqueInput
  }

  /**
   * Doctor deleteMany
   */
  export type DoctorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Doctors to delete
     */
    where?: DoctorWhereInput
    /**
     * Limit how many Doctors to delete.
     */
    limit?: number
  }

  /**
   * Doctor.hospitalAssociations
   */
  export type Doctor$hospitalAssociationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorHospitalAssociation
     */
    select?: DoctorHospitalAssociationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorHospitalAssociation
     */
    omit?: DoctorHospitalAssociationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorHospitalAssociationInclude<ExtArgs> | null
    where?: DoctorHospitalAssociationWhereInput
    orderBy?: DoctorHospitalAssociationOrderByWithRelationInput | DoctorHospitalAssociationOrderByWithRelationInput[]
    cursor?: DoctorHospitalAssociationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorHospitalAssociationScalarFieldEnum | DoctorHospitalAssociationScalarFieldEnum[]
  }

  /**
   * Doctor.consultationSchedules
   */
  export type Doctor$consultationSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorConsultationSchedule
     */
    select?: DoctorConsultationScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorConsultationSchedule
     */
    omit?: DoctorConsultationScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorConsultationScheduleInclude<ExtArgs> | null
    where?: DoctorConsultationScheduleWhereInput
    orderBy?: DoctorConsultationScheduleOrderByWithRelationInput | DoctorConsultationScheduleOrderByWithRelationInput[]
    cursor?: DoctorConsultationScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorConsultationScheduleScalarFieldEnum | DoctorConsultationScheduleScalarFieldEnum[]
  }

  /**
   * Doctor.interactions
   */
  export type Doctor$interactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorInteraction
     */
    select?: DoctorInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorInteraction
     */
    omit?: DoctorInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInteractionInclude<ExtArgs> | null
    where?: DoctorInteractionWhereInput
    orderBy?: DoctorInteractionOrderByWithRelationInput | DoctorInteractionOrderByWithRelationInput[]
    cursor?: DoctorInteractionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorInteractionScalarFieldEnum | DoctorInteractionScalarFieldEnum[]
  }

  /**
   * Doctor.notes
   */
  export type Doctor$notesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorNote
     */
    select?: DoctorNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorNote
     */
    omit?: DoctorNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorNoteInclude<ExtArgs> | null
    where?: DoctorNoteWhereInput
    orderBy?: DoctorNoteOrderByWithRelationInput | DoctorNoteOrderByWithRelationInput[]
    cursor?: DoctorNoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorNoteScalarFieldEnum | DoctorNoteScalarFieldEnum[]
  }

  /**
   * Doctor.chemistRelations
   */
  export type Doctor$chemistRelationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorChemistRelation
     */
    select?: DoctorChemistRelationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorChemistRelation
     */
    omit?: DoctorChemistRelationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorChemistRelationInclude<ExtArgs> | null
    where?: DoctorChemistRelationWhereInput
    orderBy?: DoctorChemistRelationOrderByWithRelationInput | DoctorChemistRelationOrderByWithRelationInput[]
    cursor?: DoctorChemistRelationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorChemistRelationScalarFieldEnum | DoctorChemistRelationScalarFieldEnum[]
  }

  /**
   * Doctor.DoctorTask
   */
  export type Doctor$DoctorTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorTask
     */
    select?: DoctorTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorTask
     */
    omit?: DoctorTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorTaskInclude<ExtArgs> | null
    where?: DoctorTaskWhereInput
    orderBy?: DoctorTaskOrderByWithRelationInput | DoctorTaskOrderByWithRelationInput[]
    cursor?: DoctorTaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorTaskScalarFieldEnum | DoctorTaskScalarFieldEnum[]
  }

  /**
   * Doctor without action
   */
  export type DoctorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
  }


  /**
   * Model DoctorHospitalAssociation
   */

  export type AggregateDoctorHospitalAssociation = {
    _count: DoctorHospitalAssociationCountAggregateOutputType | null
    _min: DoctorHospitalAssociationMinAggregateOutputType | null
    _max: DoctorHospitalAssociationMaxAggregateOutputType | null
  }

  export type DoctorHospitalAssociationMinAggregateOutputType = {
    id: string | null
    doctorId: string | null
    hospitalId: string | null
    department: string | null
    position: string | null
    isPrimary: boolean | null
    associationStartDate: Date | null
    associationEndDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DoctorHospitalAssociationMaxAggregateOutputType = {
    id: string | null
    doctorId: string | null
    hospitalId: string | null
    department: string | null
    position: string | null
    isPrimary: boolean | null
    associationStartDate: Date | null
    associationEndDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DoctorHospitalAssociationCountAggregateOutputType = {
    id: number
    doctorId: number
    hospitalId: number
    department: number
    position: number
    isPrimary: number
    associationStartDate: number
    associationEndDate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DoctorHospitalAssociationMinAggregateInputType = {
    id?: true
    doctorId?: true
    hospitalId?: true
    department?: true
    position?: true
    isPrimary?: true
    associationStartDate?: true
    associationEndDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DoctorHospitalAssociationMaxAggregateInputType = {
    id?: true
    doctorId?: true
    hospitalId?: true
    department?: true
    position?: true
    isPrimary?: true
    associationStartDate?: true
    associationEndDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DoctorHospitalAssociationCountAggregateInputType = {
    id?: true
    doctorId?: true
    hospitalId?: true
    department?: true
    position?: true
    isPrimary?: true
    associationStartDate?: true
    associationEndDate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DoctorHospitalAssociationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DoctorHospitalAssociation to aggregate.
     */
    where?: DoctorHospitalAssociationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorHospitalAssociations to fetch.
     */
    orderBy?: DoctorHospitalAssociationOrderByWithRelationInput | DoctorHospitalAssociationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DoctorHospitalAssociationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorHospitalAssociations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorHospitalAssociations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DoctorHospitalAssociations
    **/
    _count?: true | DoctorHospitalAssociationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoctorHospitalAssociationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoctorHospitalAssociationMaxAggregateInputType
  }

  export type GetDoctorHospitalAssociationAggregateType<T extends DoctorHospitalAssociationAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctorHospitalAssociation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctorHospitalAssociation[P]>
      : GetScalarType<T[P], AggregateDoctorHospitalAssociation[P]>
  }




  export type DoctorHospitalAssociationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorHospitalAssociationWhereInput
    orderBy?: DoctorHospitalAssociationOrderByWithAggregationInput | DoctorHospitalAssociationOrderByWithAggregationInput[]
    by: DoctorHospitalAssociationScalarFieldEnum[] | DoctorHospitalAssociationScalarFieldEnum
    having?: DoctorHospitalAssociationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoctorHospitalAssociationCountAggregateInputType | true
    _min?: DoctorHospitalAssociationMinAggregateInputType
    _max?: DoctorHospitalAssociationMaxAggregateInputType
  }

  export type DoctorHospitalAssociationGroupByOutputType = {
    id: string
    doctorId: string
    hospitalId: string
    department: string | null
    position: string | null
    isPrimary: boolean
    associationStartDate: Date | null
    associationEndDate: Date | null
    createdAt: Date
    updatedAt: Date
    _count: DoctorHospitalAssociationCountAggregateOutputType | null
    _min: DoctorHospitalAssociationMinAggregateOutputType | null
    _max: DoctorHospitalAssociationMaxAggregateOutputType | null
  }

  type GetDoctorHospitalAssociationGroupByPayload<T extends DoctorHospitalAssociationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DoctorHospitalAssociationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoctorHospitalAssociationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoctorHospitalAssociationGroupByOutputType[P]>
            : GetScalarType<T[P], DoctorHospitalAssociationGroupByOutputType[P]>
        }
      >
    >


  export type DoctorHospitalAssociationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    hospitalId?: boolean
    department?: boolean
    position?: boolean
    isPrimary?: boolean
    associationStartDate?: boolean
    associationEndDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorHospitalAssociation"]>

  export type DoctorHospitalAssociationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    hospitalId?: boolean
    department?: boolean
    position?: boolean
    isPrimary?: boolean
    associationStartDate?: boolean
    associationEndDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorHospitalAssociation"]>

  export type DoctorHospitalAssociationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    hospitalId?: boolean
    department?: boolean
    position?: boolean
    isPrimary?: boolean
    associationStartDate?: boolean
    associationEndDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorHospitalAssociation"]>

  export type DoctorHospitalAssociationSelectScalar = {
    id?: boolean
    doctorId?: boolean
    hospitalId?: boolean
    department?: boolean
    position?: boolean
    isPrimary?: boolean
    associationStartDate?: boolean
    associationEndDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DoctorHospitalAssociationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "doctorId" | "hospitalId" | "department" | "position" | "isPrimary" | "associationStartDate" | "associationEndDate" | "createdAt" | "updatedAt", ExtArgs["result"]["doctorHospitalAssociation"]>
  export type DoctorHospitalAssociationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }
  export type DoctorHospitalAssociationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }
  export type DoctorHospitalAssociationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }

  export type $DoctorHospitalAssociationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DoctorHospitalAssociation"
    objects: {
      doctor: Prisma.$DoctorPayload<ExtArgs>
      hospital: Prisma.$HospitalPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      doctorId: string
      hospitalId: string
      department: string | null
      position: string | null
      isPrimary: boolean
      associationStartDate: Date | null
      associationEndDate: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["doctorHospitalAssociation"]>
    composites: {}
  }

  type DoctorHospitalAssociationGetPayload<S extends boolean | null | undefined | DoctorHospitalAssociationDefaultArgs> = $Result.GetResult<Prisma.$DoctorHospitalAssociationPayload, S>

  type DoctorHospitalAssociationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DoctorHospitalAssociationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DoctorHospitalAssociationCountAggregateInputType | true
    }

  export interface DoctorHospitalAssociationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DoctorHospitalAssociation'], meta: { name: 'DoctorHospitalAssociation' } }
    /**
     * Find zero or one DoctorHospitalAssociation that matches the filter.
     * @param {DoctorHospitalAssociationFindUniqueArgs} args - Arguments to find a DoctorHospitalAssociation
     * @example
     * // Get one DoctorHospitalAssociation
     * const doctorHospitalAssociation = await prisma.doctorHospitalAssociation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DoctorHospitalAssociationFindUniqueArgs>(args: SelectSubset<T, DoctorHospitalAssociationFindUniqueArgs<ExtArgs>>): Prisma__DoctorHospitalAssociationClient<$Result.GetResult<Prisma.$DoctorHospitalAssociationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DoctorHospitalAssociation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DoctorHospitalAssociationFindUniqueOrThrowArgs} args - Arguments to find a DoctorHospitalAssociation
     * @example
     * // Get one DoctorHospitalAssociation
     * const doctorHospitalAssociation = await prisma.doctorHospitalAssociation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DoctorHospitalAssociationFindUniqueOrThrowArgs>(args: SelectSubset<T, DoctorHospitalAssociationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DoctorHospitalAssociationClient<$Result.GetResult<Prisma.$DoctorHospitalAssociationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DoctorHospitalAssociation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorHospitalAssociationFindFirstArgs} args - Arguments to find a DoctorHospitalAssociation
     * @example
     * // Get one DoctorHospitalAssociation
     * const doctorHospitalAssociation = await prisma.doctorHospitalAssociation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DoctorHospitalAssociationFindFirstArgs>(args?: SelectSubset<T, DoctorHospitalAssociationFindFirstArgs<ExtArgs>>): Prisma__DoctorHospitalAssociationClient<$Result.GetResult<Prisma.$DoctorHospitalAssociationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DoctorHospitalAssociation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorHospitalAssociationFindFirstOrThrowArgs} args - Arguments to find a DoctorHospitalAssociation
     * @example
     * // Get one DoctorHospitalAssociation
     * const doctorHospitalAssociation = await prisma.doctorHospitalAssociation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DoctorHospitalAssociationFindFirstOrThrowArgs>(args?: SelectSubset<T, DoctorHospitalAssociationFindFirstOrThrowArgs<ExtArgs>>): Prisma__DoctorHospitalAssociationClient<$Result.GetResult<Prisma.$DoctorHospitalAssociationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DoctorHospitalAssociations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorHospitalAssociationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DoctorHospitalAssociations
     * const doctorHospitalAssociations = await prisma.doctorHospitalAssociation.findMany()
     * 
     * // Get first 10 DoctorHospitalAssociations
     * const doctorHospitalAssociations = await prisma.doctorHospitalAssociation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doctorHospitalAssociationWithIdOnly = await prisma.doctorHospitalAssociation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DoctorHospitalAssociationFindManyArgs>(args?: SelectSubset<T, DoctorHospitalAssociationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorHospitalAssociationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DoctorHospitalAssociation.
     * @param {DoctorHospitalAssociationCreateArgs} args - Arguments to create a DoctorHospitalAssociation.
     * @example
     * // Create one DoctorHospitalAssociation
     * const DoctorHospitalAssociation = await prisma.doctorHospitalAssociation.create({
     *   data: {
     *     // ... data to create a DoctorHospitalAssociation
     *   }
     * })
     * 
     */
    create<T extends DoctorHospitalAssociationCreateArgs>(args: SelectSubset<T, DoctorHospitalAssociationCreateArgs<ExtArgs>>): Prisma__DoctorHospitalAssociationClient<$Result.GetResult<Prisma.$DoctorHospitalAssociationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DoctorHospitalAssociations.
     * @param {DoctorHospitalAssociationCreateManyArgs} args - Arguments to create many DoctorHospitalAssociations.
     * @example
     * // Create many DoctorHospitalAssociations
     * const doctorHospitalAssociation = await prisma.doctorHospitalAssociation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DoctorHospitalAssociationCreateManyArgs>(args?: SelectSubset<T, DoctorHospitalAssociationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DoctorHospitalAssociations and returns the data saved in the database.
     * @param {DoctorHospitalAssociationCreateManyAndReturnArgs} args - Arguments to create many DoctorHospitalAssociations.
     * @example
     * // Create many DoctorHospitalAssociations
     * const doctorHospitalAssociation = await prisma.doctorHospitalAssociation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DoctorHospitalAssociations and only return the `id`
     * const doctorHospitalAssociationWithIdOnly = await prisma.doctorHospitalAssociation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DoctorHospitalAssociationCreateManyAndReturnArgs>(args?: SelectSubset<T, DoctorHospitalAssociationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorHospitalAssociationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DoctorHospitalAssociation.
     * @param {DoctorHospitalAssociationDeleteArgs} args - Arguments to delete one DoctorHospitalAssociation.
     * @example
     * // Delete one DoctorHospitalAssociation
     * const DoctorHospitalAssociation = await prisma.doctorHospitalAssociation.delete({
     *   where: {
     *     // ... filter to delete one DoctorHospitalAssociation
     *   }
     * })
     * 
     */
    delete<T extends DoctorHospitalAssociationDeleteArgs>(args: SelectSubset<T, DoctorHospitalAssociationDeleteArgs<ExtArgs>>): Prisma__DoctorHospitalAssociationClient<$Result.GetResult<Prisma.$DoctorHospitalAssociationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DoctorHospitalAssociation.
     * @param {DoctorHospitalAssociationUpdateArgs} args - Arguments to update one DoctorHospitalAssociation.
     * @example
     * // Update one DoctorHospitalAssociation
     * const doctorHospitalAssociation = await prisma.doctorHospitalAssociation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DoctorHospitalAssociationUpdateArgs>(args: SelectSubset<T, DoctorHospitalAssociationUpdateArgs<ExtArgs>>): Prisma__DoctorHospitalAssociationClient<$Result.GetResult<Prisma.$DoctorHospitalAssociationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DoctorHospitalAssociations.
     * @param {DoctorHospitalAssociationDeleteManyArgs} args - Arguments to filter DoctorHospitalAssociations to delete.
     * @example
     * // Delete a few DoctorHospitalAssociations
     * const { count } = await prisma.doctorHospitalAssociation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DoctorHospitalAssociationDeleteManyArgs>(args?: SelectSubset<T, DoctorHospitalAssociationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DoctorHospitalAssociations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorHospitalAssociationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DoctorHospitalAssociations
     * const doctorHospitalAssociation = await prisma.doctorHospitalAssociation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DoctorHospitalAssociationUpdateManyArgs>(args: SelectSubset<T, DoctorHospitalAssociationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DoctorHospitalAssociations and returns the data updated in the database.
     * @param {DoctorHospitalAssociationUpdateManyAndReturnArgs} args - Arguments to update many DoctorHospitalAssociations.
     * @example
     * // Update many DoctorHospitalAssociations
     * const doctorHospitalAssociation = await prisma.doctorHospitalAssociation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DoctorHospitalAssociations and only return the `id`
     * const doctorHospitalAssociationWithIdOnly = await prisma.doctorHospitalAssociation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DoctorHospitalAssociationUpdateManyAndReturnArgs>(args: SelectSubset<T, DoctorHospitalAssociationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorHospitalAssociationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DoctorHospitalAssociation.
     * @param {DoctorHospitalAssociationUpsertArgs} args - Arguments to update or create a DoctorHospitalAssociation.
     * @example
     * // Update or create a DoctorHospitalAssociation
     * const doctorHospitalAssociation = await prisma.doctorHospitalAssociation.upsert({
     *   create: {
     *     // ... data to create a DoctorHospitalAssociation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DoctorHospitalAssociation we want to update
     *   }
     * })
     */
    upsert<T extends DoctorHospitalAssociationUpsertArgs>(args: SelectSubset<T, DoctorHospitalAssociationUpsertArgs<ExtArgs>>): Prisma__DoctorHospitalAssociationClient<$Result.GetResult<Prisma.$DoctorHospitalAssociationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DoctorHospitalAssociations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorHospitalAssociationCountArgs} args - Arguments to filter DoctorHospitalAssociations to count.
     * @example
     * // Count the number of DoctorHospitalAssociations
     * const count = await prisma.doctorHospitalAssociation.count({
     *   where: {
     *     // ... the filter for the DoctorHospitalAssociations we want to count
     *   }
     * })
    **/
    count<T extends DoctorHospitalAssociationCountArgs>(
      args?: Subset<T, DoctorHospitalAssociationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoctorHospitalAssociationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DoctorHospitalAssociation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorHospitalAssociationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoctorHospitalAssociationAggregateArgs>(args: Subset<T, DoctorHospitalAssociationAggregateArgs>): Prisma.PrismaPromise<GetDoctorHospitalAssociationAggregateType<T>>

    /**
     * Group by DoctorHospitalAssociation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorHospitalAssociationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DoctorHospitalAssociationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DoctorHospitalAssociationGroupByArgs['orderBy'] }
        : { orderBy?: DoctorHospitalAssociationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DoctorHospitalAssociationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctorHospitalAssociationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DoctorHospitalAssociation model
   */
  readonly fields: DoctorHospitalAssociationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DoctorHospitalAssociation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DoctorHospitalAssociationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    doctor<T extends DoctorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DoctorDefaultArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    hospital<T extends HospitalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HospitalDefaultArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DoctorHospitalAssociation model
   */
  interface DoctorHospitalAssociationFieldRefs {
    readonly id: FieldRef<"DoctorHospitalAssociation", 'String'>
    readonly doctorId: FieldRef<"DoctorHospitalAssociation", 'String'>
    readonly hospitalId: FieldRef<"DoctorHospitalAssociation", 'String'>
    readonly department: FieldRef<"DoctorHospitalAssociation", 'String'>
    readonly position: FieldRef<"DoctorHospitalAssociation", 'String'>
    readonly isPrimary: FieldRef<"DoctorHospitalAssociation", 'Boolean'>
    readonly associationStartDate: FieldRef<"DoctorHospitalAssociation", 'DateTime'>
    readonly associationEndDate: FieldRef<"DoctorHospitalAssociation", 'DateTime'>
    readonly createdAt: FieldRef<"DoctorHospitalAssociation", 'DateTime'>
    readonly updatedAt: FieldRef<"DoctorHospitalAssociation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DoctorHospitalAssociation findUnique
   */
  export type DoctorHospitalAssociationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorHospitalAssociation
     */
    select?: DoctorHospitalAssociationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorHospitalAssociation
     */
    omit?: DoctorHospitalAssociationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorHospitalAssociationInclude<ExtArgs> | null
    /**
     * Filter, which DoctorHospitalAssociation to fetch.
     */
    where: DoctorHospitalAssociationWhereUniqueInput
  }

  /**
   * DoctorHospitalAssociation findUniqueOrThrow
   */
  export type DoctorHospitalAssociationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorHospitalAssociation
     */
    select?: DoctorHospitalAssociationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorHospitalAssociation
     */
    omit?: DoctorHospitalAssociationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorHospitalAssociationInclude<ExtArgs> | null
    /**
     * Filter, which DoctorHospitalAssociation to fetch.
     */
    where: DoctorHospitalAssociationWhereUniqueInput
  }

  /**
   * DoctorHospitalAssociation findFirst
   */
  export type DoctorHospitalAssociationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorHospitalAssociation
     */
    select?: DoctorHospitalAssociationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorHospitalAssociation
     */
    omit?: DoctorHospitalAssociationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorHospitalAssociationInclude<ExtArgs> | null
    /**
     * Filter, which DoctorHospitalAssociation to fetch.
     */
    where?: DoctorHospitalAssociationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorHospitalAssociations to fetch.
     */
    orderBy?: DoctorHospitalAssociationOrderByWithRelationInput | DoctorHospitalAssociationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DoctorHospitalAssociations.
     */
    cursor?: DoctorHospitalAssociationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorHospitalAssociations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorHospitalAssociations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DoctorHospitalAssociations.
     */
    distinct?: DoctorHospitalAssociationScalarFieldEnum | DoctorHospitalAssociationScalarFieldEnum[]
  }

  /**
   * DoctorHospitalAssociation findFirstOrThrow
   */
  export type DoctorHospitalAssociationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorHospitalAssociation
     */
    select?: DoctorHospitalAssociationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorHospitalAssociation
     */
    omit?: DoctorHospitalAssociationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorHospitalAssociationInclude<ExtArgs> | null
    /**
     * Filter, which DoctorHospitalAssociation to fetch.
     */
    where?: DoctorHospitalAssociationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorHospitalAssociations to fetch.
     */
    orderBy?: DoctorHospitalAssociationOrderByWithRelationInput | DoctorHospitalAssociationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DoctorHospitalAssociations.
     */
    cursor?: DoctorHospitalAssociationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorHospitalAssociations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorHospitalAssociations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DoctorHospitalAssociations.
     */
    distinct?: DoctorHospitalAssociationScalarFieldEnum | DoctorHospitalAssociationScalarFieldEnum[]
  }

  /**
   * DoctorHospitalAssociation findMany
   */
  export type DoctorHospitalAssociationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorHospitalAssociation
     */
    select?: DoctorHospitalAssociationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorHospitalAssociation
     */
    omit?: DoctorHospitalAssociationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorHospitalAssociationInclude<ExtArgs> | null
    /**
     * Filter, which DoctorHospitalAssociations to fetch.
     */
    where?: DoctorHospitalAssociationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorHospitalAssociations to fetch.
     */
    orderBy?: DoctorHospitalAssociationOrderByWithRelationInput | DoctorHospitalAssociationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DoctorHospitalAssociations.
     */
    cursor?: DoctorHospitalAssociationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorHospitalAssociations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorHospitalAssociations.
     */
    skip?: number
    distinct?: DoctorHospitalAssociationScalarFieldEnum | DoctorHospitalAssociationScalarFieldEnum[]
  }

  /**
   * DoctorHospitalAssociation create
   */
  export type DoctorHospitalAssociationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorHospitalAssociation
     */
    select?: DoctorHospitalAssociationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorHospitalAssociation
     */
    omit?: DoctorHospitalAssociationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorHospitalAssociationInclude<ExtArgs> | null
    /**
     * The data needed to create a DoctorHospitalAssociation.
     */
    data: XOR<DoctorHospitalAssociationCreateInput, DoctorHospitalAssociationUncheckedCreateInput>
  }

  /**
   * DoctorHospitalAssociation createMany
   */
  export type DoctorHospitalAssociationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DoctorHospitalAssociations.
     */
    data: DoctorHospitalAssociationCreateManyInput | DoctorHospitalAssociationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DoctorHospitalAssociation createManyAndReturn
   */
  export type DoctorHospitalAssociationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorHospitalAssociation
     */
    select?: DoctorHospitalAssociationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorHospitalAssociation
     */
    omit?: DoctorHospitalAssociationOmit<ExtArgs> | null
    /**
     * The data used to create many DoctorHospitalAssociations.
     */
    data: DoctorHospitalAssociationCreateManyInput | DoctorHospitalAssociationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorHospitalAssociationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DoctorHospitalAssociation update
   */
  export type DoctorHospitalAssociationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorHospitalAssociation
     */
    select?: DoctorHospitalAssociationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorHospitalAssociation
     */
    omit?: DoctorHospitalAssociationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorHospitalAssociationInclude<ExtArgs> | null
    /**
     * The data needed to update a DoctorHospitalAssociation.
     */
    data: XOR<DoctorHospitalAssociationUpdateInput, DoctorHospitalAssociationUncheckedUpdateInput>
    /**
     * Choose, which DoctorHospitalAssociation to update.
     */
    where: DoctorHospitalAssociationWhereUniqueInput
  }

  /**
   * DoctorHospitalAssociation updateMany
   */
  export type DoctorHospitalAssociationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DoctorHospitalAssociations.
     */
    data: XOR<DoctorHospitalAssociationUpdateManyMutationInput, DoctorHospitalAssociationUncheckedUpdateManyInput>
    /**
     * Filter which DoctorHospitalAssociations to update
     */
    where?: DoctorHospitalAssociationWhereInput
    /**
     * Limit how many DoctorHospitalAssociations to update.
     */
    limit?: number
  }

  /**
   * DoctorHospitalAssociation updateManyAndReturn
   */
  export type DoctorHospitalAssociationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorHospitalAssociation
     */
    select?: DoctorHospitalAssociationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorHospitalAssociation
     */
    omit?: DoctorHospitalAssociationOmit<ExtArgs> | null
    /**
     * The data used to update DoctorHospitalAssociations.
     */
    data: XOR<DoctorHospitalAssociationUpdateManyMutationInput, DoctorHospitalAssociationUncheckedUpdateManyInput>
    /**
     * Filter which DoctorHospitalAssociations to update
     */
    where?: DoctorHospitalAssociationWhereInput
    /**
     * Limit how many DoctorHospitalAssociations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorHospitalAssociationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DoctorHospitalAssociation upsert
   */
  export type DoctorHospitalAssociationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorHospitalAssociation
     */
    select?: DoctorHospitalAssociationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorHospitalAssociation
     */
    omit?: DoctorHospitalAssociationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorHospitalAssociationInclude<ExtArgs> | null
    /**
     * The filter to search for the DoctorHospitalAssociation to update in case it exists.
     */
    where: DoctorHospitalAssociationWhereUniqueInput
    /**
     * In case the DoctorHospitalAssociation found by the `where` argument doesn't exist, create a new DoctorHospitalAssociation with this data.
     */
    create: XOR<DoctorHospitalAssociationCreateInput, DoctorHospitalAssociationUncheckedCreateInput>
    /**
     * In case the DoctorHospitalAssociation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DoctorHospitalAssociationUpdateInput, DoctorHospitalAssociationUncheckedUpdateInput>
  }

  /**
   * DoctorHospitalAssociation delete
   */
  export type DoctorHospitalAssociationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorHospitalAssociation
     */
    select?: DoctorHospitalAssociationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorHospitalAssociation
     */
    omit?: DoctorHospitalAssociationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorHospitalAssociationInclude<ExtArgs> | null
    /**
     * Filter which DoctorHospitalAssociation to delete.
     */
    where: DoctorHospitalAssociationWhereUniqueInput
  }

  /**
   * DoctorHospitalAssociation deleteMany
   */
  export type DoctorHospitalAssociationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DoctorHospitalAssociations to delete
     */
    where?: DoctorHospitalAssociationWhereInput
    /**
     * Limit how many DoctorHospitalAssociations to delete.
     */
    limit?: number
  }

  /**
   * DoctorHospitalAssociation without action
   */
  export type DoctorHospitalAssociationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorHospitalAssociation
     */
    select?: DoctorHospitalAssociationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorHospitalAssociation
     */
    omit?: DoctorHospitalAssociationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorHospitalAssociationInclude<ExtArgs> | null
  }


  /**
   * Model DoctorConsultationSchedule
   */

  export type AggregateDoctorConsultationSchedule = {
    _count: DoctorConsultationScheduleCountAggregateOutputType | null
    _min: DoctorConsultationScheduleMinAggregateOutputType | null
    _max: DoctorConsultationScheduleMaxAggregateOutputType | null
  }

  export type DoctorConsultationScheduleMinAggregateOutputType = {
    id: string | null
    doctorId: string | null
    hospitalId: string | null
    dayOfWeek: $Enums.DayOfWeek | null
    startTime: Date | null
    endTime: Date | null
    consultationType: $Enums.ConsultationType | null
    isActive: boolean | null
    effectiveFrom: Date | null
    effectiveTo: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DoctorConsultationScheduleMaxAggregateOutputType = {
    id: string | null
    doctorId: string | null
    hospitalId: string | null
    dayOfWeek: $Enums.DayOfWeek | null
    startTime: Date | null
    endTime: Date | null
    consultationType: $Enums.ConsultationType | null
    isActive: boolean | null
    effectiveFrom: Date | null
    effectiveTo: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DoctorConsultationScheduleCountAggregateOutputType = {
    id: number
    doctorId: number
    hospitalId: number
    dayOfWeek: number
    startTime: number
    endTime: number
    consultationType: number
    isActive: number
    effectiveFrom: number
    effectiveTo: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DoctorConsultationScheduleMinAggregateInputType = {
    id?: true
    doctorId?: true
    hospitalId?: true
    dayOfWeek?: true
    startTime?: true
    endTime?: true
    consultationType?: true
    isActive?: true
    effectiveFrom?: true
    effectiveTo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DoctorConsultationScheduleMaxAggregateInputType = {
    id?: true
    doctorId?: true
    hospitalId?: true
    dayOfWeek?: true
    startTime?: true
    endTime?: true
    consultationType?: true
    isActive?: true
    effectiveFrom?: true
    effectiveTo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DoctorConsultationScheduleCountAggregateInputType = {
    id?: true
    doctorId?: true
    hospitalId?: true
    dayOfWeek?: true
    startTime?: true
    endTime?: true
    consultationType?: true
    isActive?: true
    effectiveFrom?: true
    effectiveTo?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DoctorConsultationScheduleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DoctorConsultationSchedule to aggregate.
     */
    where?: DoctorConsultationScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorConsultationSchedules to fetch.
     */
    orderBy?: DoctorConsultationScheduleOrderByWithRelationInput | DoctorConsultationScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DoctorConsultationScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorConsultationSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorConsultationSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DoctorConsultationSchedules
    **/
    _count?: true | DoctorConsultationScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoctorConsultationScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoctorConsultationScheduleMaxAggregateInputType
  }

  export type GetDoctorConsultationScheduleAggregateType<T extends DoctorConsultationScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctorConsultationSchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctorConsultationSchedule[P]>
      : GetScalarType<T[P], AggregateDoctorConsultationSchedule[P]>
  }




  export type DoctorConsultationScheduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorConsultationScheduleWhereInput
    orderBy?: DoctorConsultationScheduleOrderByWithAggregationInput | DoctorConsultationScheduleOrderByWithAggregationInput[]
    by: DoctorConsultationScheduleScalarFieldEnum[] | DoctorConsultationScheduleScalarFieldEnum
    having?: DoctorConsultationScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoctorConsultationScheduleCountAggregateInputType | true
    _min?: DoctorConsultationScheduleMinAggregateInputType
    _max?: DoctorConsultationScheduleMaxAggregateInputType
  }

  export type DoctorConsultationScheduleGroupByOutputType = {
    id: string
    doctorId: string
    hospitalId: string
    dayOfWeek: $Enums.DayOfWeek
    startTime: Date
    endTime: Date
    consultationType: $Enums.ConsultationType
    isActive: boolean
    effectiveFrom: Date | null
    effectiveTo: Date | null
    createdAt: Date
    updatedAt: Date
    _count: DoctorConsultationScheduleCountAggregateOutputType | null
    _min: DoctorConsultationScheduleMinAggregateOutputType | null
    _max: DoctorConsultationScheduleMaxAggregateOutputType | null
  }

  type GetDoctorConsultationScheduleGroupByPayload<T extends DoctorConsultationScheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DoctorConsultationScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoctorConsultationScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoctorConsultationScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], DoctorConsultationScheduleGroupByOutputType[P]>
        }
      >
    >


  export type DoctorConsultationScheduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    hospitalId?: boolean
    dayOfWeek?: boolean
    startTime?: boolean
    endTime?: boolean
    consultationType?: boolean
    isActive?: boolean
    effectiveFrom?: boolean
    effectiveTo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorConsultationSchedule"]>

  export type DoctorConsultationScheduleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    hospitalId?: boolean
    dayOfWeek?: boolean
    startTime?: boolean
    endTime?: boolean
    consultationType?: boolean
    isActive?: boolean
    effectiveFrom?: boolean
    effectiveTo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorConsultationSchedule"]>

  export type DoctorConsultationScheduleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    hospitalId?: boolean
    dayOfWeek?: boolean
    startTime?: boolean
    endTime?: boolean
    consultationType?: boolean
    isActive?: boolean
    effectiveFrom?: boolean
    effectiveTo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorConsultationSchedule"]>

  export type DoctorConsultationScheduleSelectScalar = {
    id?: boolean
    doctorId?: boolean
    hospitalId?: boolean
    dayOfWeek?: boolean
    startTime?: boolean
    endTime?: boolean
    consultationType?: boolean
    isActive?: boolean
    effectiveFrom?: boolean
    effectiveTo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DoctorConsultationScheduleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "doctorId" | "hospitalId" | "dayOfWeek" | "startTime" | "endTime" | "consultationType" | "isActive" | "effectiveFrom" | "effectiveTo" | "createdAt" | "updatedAt", ExtArgs["result"]["doctorConsultationSchedule"]>
  export type DoctorConsultationScheduleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }
  export type DoctorConsultationScheduleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }
  export type DoctorConsultationScheduleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }

  export type $DoctorConsultationSchedulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DoctorConsultationSchedule"
    objects: {
      doctor: Prisma.$DoctorPayload<ExtArgs>
      hospital: Prisma.$HospitalPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      doctorId: string
      hospitalId: string
      dayOfWeek: $Enums.DayOfWeek
      startTime: Date
      endTime: Date
      consultationType: $Enums.ConsultationType
      isActive: boolean
      effectiveFrom: Date | null
      effectiveTo: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["doctorConsultationSchedule"]>
    composites: {}
  }

  type DoctorConsultationScheduleGetPayload<S extends boolean | null | undefined | DoctorConsultationScheduleDefaultArgs> = $Result.GetResult<Prisma.$DoctorConsultationSchedulePayload, S>

  type DoctorConsultationScheduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DoctorConsultationScheduleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DoctorConsultationScheduleCountAggregateInputType | true
    }

  export interface DoctorConsultationScheduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DoctorConsultationSchedule'], meta: { name: 'DoctorConsultationSchedule' } }
    /**
     * Find zero or one DoctorConsultationSchedule that matches the filter.
     * @param {DoctorConsultationScheduleFindUniqueArgs} args - Arguments to find a DoctorConsultationSchedule
     * @example
     * // Get one DoctorConsultationSchedule
     * const doctorConsultationSchedule = await prisma.doctorConsultationSchedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DoctorConsultationScheduleFindUniqueArgs>(args: SelectSubset<T, DoctorConsultationScheduleFindUniqueArgs<ExtArgs>>): Prisma__DoctorConsultationScheduleClient<$Result.GetResult<Prisma.$DoctorConsultationSchedulePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DoctorConsultationSchedule that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DoctorConsultationScheduleFindUniqueOrThrowArgs} args - Arguments to find a DoctorConsultationSchedule
     * @example
     * // Get one DoctorConsultationSchedule
     * const doctorConsultationSchedule = await prisma.doctorConsultationSchedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DoctorConsultationScheduleFindUniqueOrThrowArgs>(args: SelectSubset<T, DoctorConsultationScheduleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DoctorConsultationScheduleClient<$Result.GetResult<Prisma.$DoctorConsultationSchedulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DoctorConsultationSchedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorConsultationScheduleFindFirstArgs} args - Arguments to find a DoctorConsultationSchedule
     * @example
     * // Get one DoctorConsultationSchedule
     * const doctorConsultationSchedule = await prisma.doctorConsultationSchedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DoctorConsultationScheduleFindFirstArgs>(args?: SelectSubset<T, DoctorConsultationScheduleFindFirstArgs<ExtArgs>>): Prisma__DoctorConsultationScheduleClient<$Result.GetResult<Prisma.$DoctorConsultationSchedulePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DoctorConsultationSchedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorConsultationScheduleFindFirstOrThrowArgs} args - Arguments to find a DoctorConsultationSchedule
     * @example
     * // Get one DoctorConsultationSchedule
     * const doctorConsultationSchedule = await prisma.doctorConsultationSchedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DoctorConsultationScheduleFindFirstOrThrowArgs>(args?: SelectSubset<T, DoctorConsultationScheduleFindFirstOrThrowArgs<ExtArgs>>): Prisma__DoctorConsultationScheduleClient<$Result.GetResult<Prisma.$DoctorConsultationSchedulePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DoctorConsultationSchedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorConsultationScheduleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DoctorConsultationSchedules
     * const doctorConsultationSchedules = await prisma.doctorConsultationSchedule.findMany()
     * 
     * // Get first 10 DoctorConsultationSchedules
     * const doctorConsultationSchedules = await prisma.doctorConsultationSchedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doctorConsultationScheduleWithIdOnly = await prisma.doctorConsultationSchedule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DoctorConsultationScheduleFindManyArgs>(args?: SelectSubset<T, DoctorConsultationScheduleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorConsultationSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DoctorConsultationSchedule.
     * @param {DoctorConsultationScheduleCreateArgs} args - Arguments to create a DoctorConsultationSchedule.
     * @example
     * // Create one DoctorConsultationSchedule
     * const DoctorConsultationSchedule = await prisma.doctorConsultationSchedule.create({
     *   data: {
     *     // ... data to create a DoctorConsultationSchedule
     *   }
     * })
     * 
     */
    create<T extends DoctorConsultationScheduleCreateArgs>(args: SelectSubset<T, DoctorConsultationScheduleCreateArgs<ExtArgs>>): Prisma__DoctorConsultationScheduleClient<$Result.GetResult<Prisma.$DoctorConsultationSchedulePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DoctorConsultationSchedules.
     * @param {DoctorConsultationScheduleCreateManyArgs} args - Arguments to create many DoctorConsultationSchedules.
     * @example
     * // Create many DoctorConsultationSchedules
     * const doctorConsultationSchedule = await prisma.doctorConsultationSchedule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DoctorConsultationScheduleCreateManyArgs>(args?: SelectSubset<T, DoctorConsultationScheduleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DoctorConsultationSchedules and returns the data saved in the database.
     * @param {DoctorConsultationScheduleCreateManyAndReturnArgs} args - Arguments to create many DoctorConsultationSchedules.
     * @example
     * // Create many DoctorConsultationSchedules
     * const doctorConsultationSchedule = await prisma.doctorConsultationSchedule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DoctorConsultationSchedules and only return the `id`
     * const doctorConsultationScheduleWithIdOnly = await prisma.doctorConsultationSchedule.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DoctorConsultationScheduleCreateManyAndReturnArgs>(args?: SelectSubset<T, DoctorConsultationScheduleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorConsultationSchedulePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DoctorConsultationSchedule.
     * @param {DoctorConsultationScheduleDeleteArgs} args - Arguments to delete one DoctorConsultationSchedule.
     * @example
     * // Delete one DoctorConsultationSchedule
     * const DoctorConsultationSchedule = await prisma.doctorConsultationSchedule.delete({
     *   where: {
     *     // ... filter to delete one DoctorConsultationSchedule
     *   }
     * })
     * 
     */
    delete<T extends DoctorConsultationScheduleDeleteArgs>(args: SelectSubset<T, DoctorConsultationScheduleDeleteArgs<ExtArgs>>): Prisma__DoctorConsultationScheduleClient<$Result.GetResult<Prisma.$DoctorConsultationSchedulePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DoctorConsultationSchedule.
     * @param {DoctorConsultationScheduleUpdateArgs} args - Arguments to update one DoctorConsultationSchedule.
     * @example
     * // Update one DoctorConsultationSchedule
     * const doctorConsultationSchedule = await prisma.doctorConsultationSchedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DoctorConsultationScheduleUpdateArgs>(args: SelectSubset<T, DoctorConsultationScheduleUpdateArgs<ExtArgs>>): Prisma__DoctorConsultationScheduleClient<$Result.GetResult<Prisma.$DoctorConsultationSchedulePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DoctorConsultationSchedules.
     * @param {DoctorConsultationScheduleDeleteManyArgs} args - Arguments to filter DoctorConsultationSchedules to delete.
     * @example
     * // Delete a few DoctorConsultationSchedules
     * const { count } = await prisma.doctorConsultationSchedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DoctorConsultationScheduleDeleteManyArgs>(args?: SelectSubset<T, DoctorConsultationScheduleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DoctorConsultationSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorConsultationScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DoctorConsultationSchedules
     * const doctorConsultationSchedule = await prisma.doctorConsultationSchedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DoctorConsultationScheduleUpdateManyArgs>(args: SelectSubset<T, DoctorConsultationScheduleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DoctorConsultationSchedules and returns the data updated in the database.
     * @param {DoctorConsultationScheduleUpdateManyAndReturnArgs} args - Arguments to update many DoctorConsultationSchedules.
     * @example
     * // Update many DoctorConsultationSchedules
     * const doctorConsultationSchedule = await prisma.doctorConsultationSchedule.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DoctorConsultationSchedules and only return the `id`
     * const doctorConsultationScheduleWithIdOnly = await prisma.doctorConsultationSchedule.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DoctorConsultationScheduleUpdateManyAndReturnArgs>(args: SelectSubset<T, DoctorConsultationScheduleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorConsultationSchedulePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DoctorConsultationSchedule.
     * @param {DoctorConsultationScheduleUpsertArgs} args - Arguments to update or create a DoctorConsultationSchedule.
     * @example
     * // Update or create a DoctorConsultationSchedule
     * const doctorConsultationSchedule = await prisma.doctorConsultationSchedule.upsert({
     *   create: {
     *     // ... data to create a DoctorConsultationSchedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DoctorConsultationSchedule we want to update
     *   }
     * })
     */
    upsert<T extends DoctorConsultationScheduleUpsertArgs>(args: SelectSubset<T, DoctorConsultationScheduleUpsertArgs<ExtArgs>>): Prisma__DoctorConsultationScheduleClient<$Result.GetResult<Prisma.$DoctorConsultationSchedulePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DoctorConsultationSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorConsultationScheduleCountArgs} args - Arguments to filter DoctorConsultationSchedules to count.
     * @example
     * // Count the number of DoctorConsultationSchedules
     * const count = await prisma.doctorConsultationSchedule.count({
     *   where: {
     *     // ... the filter for the DoctorConsultationSchedules we want to count
     *   }
     * })
    **/
    count<T extends DoctorConsultationScheduleCountArgs>(
      args?: Subset<T, DoctorConsultationScheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoctorConsultationScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DoctorConsultationSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorConsultationScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoctorConsultationScheduleAggregateArgs>(args: Subset<T, DoctorConsultationScheduleAggregateArgs>): Prisma.PrismaPromise<GetDoctorConsultationScheduleAggregateType<T>>

    /**
     * Group by DoctorConsultationSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorConsultationScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DoctorConsultationScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DoctorConsultationScheduleGroupByArgs['orderBy'] }
        : { orderBy?: DoctorConsultationScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DoctorConsultationScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctorConsultationScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DoctorConsultationSchedule model
   */
  readonly fields: DoctorConsultationScheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DoctorConsultationSchedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DoctorConsultationScheduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    doctor<T extends DoctorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DoctorDefaultArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    hospital<T extends HospitalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HospitalDefaultArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DoctorConsultationSchedule model
   */
  interface DoctorConsultationScheduleFieldRefs {
    readonly id: FieldRef<"DoctorConsultationSchedule", 'String'>
    readonly doctorId: FieldRef<"DoctorConsultationSchedule", 'String'>
    readonly hospitalId: FieldRef<"DoctorConsultationSchedule", 'String'>
    readonly dayOfWeek: FieldRef<"DoctorConsultationSchedule", 'DayOfWeek'>
    readonly startTime: FieldRef<"DoctorConsultationSchedule", 'DateTime'>
    readonly endTime: FieldRef<"DoctorConsultationSchedule", 'DateTime'>
    readonly consultationType: FieldRef<"DoctorConsultationSchedule", 'ConsultationType'>
    readonly isActive: FieldRef<"DoctorConsultationSchedule", 'Boolean'>
    readonly effectiveFrom: FieldRef<"DoctorConsultationSchedule", 'DateTime'>
    readonly effectiveTo: FieldRef<"DoctorConsultationSchedule", 'DateTime'>
    readonly createdAt: FieldRef<"DoctorConsultationSchedule", 'DateTime'>
    readonly updatedAt: FieldRef<"DoctorConsultationSchedule", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DoctorConsultationSchedule findUnique
   */
  export type DoctorConsultationScheduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorConsultationSchedule
     */
    select?: DoctorConsultationScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorConsultationSchedule
     */
    omit?: DoctorConsultationScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorConsultationScheduleInclude<ExtArgs> | null
    /**
     * Filter, which DoctorConsultationSchedule to fetch.
     */
    where: DoctorConsultationScheduleWhereUniqueInput
  }

  /**
   * DoctorConsultationSchedule findUniqueOrThrow
   */
  export type DoctorConsultationScheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorConsultationSchedule
     */
    select?: DoctorConsultationScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorConsultationSchedule
     */
    omit?: DoctorConsultationScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorConsultationScheduleInclude<ExtArgs> | null
    /**
     * Filter, which DoctorConsultationSchedule to fetch.
     */
    where: DoctorConsultationScheduleWhereUniqueInput
  }

  /**
   * DoctorConsultationSchedule findFirst
   */
  export type DoctorConsultationScheduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorConsultationSchedule
     */
    select?: DoctorConsultationScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorConsultationSchedule
     */
    omit?: DoctorConsultationScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorConsultationScheduleInclude<ExtArgs> | null
    /**
     * Filter, which DoctorConsultationSchedule to fetch.
     */
    where?: DoctorConsultationScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorConsultationSchedules to fetch.
     */
    orderBy?: DoctorConsultationScheduleOrderByWithRelationInput | DoctorConsultationScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DoctorConsultationSchedules.
     */
    cursor?: DoctorConsultationScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorConsultationSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorConsultationSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DoctorConsultationSchedules.
     */
    distinct?: DoctorConsultationScheduleScalarFieldEnum | DoctorConsultationScheduleScalarFieldEnum[]
  }

  /**
   * DoctorConsultationSchedule findFirstOrThrow
   */
  export type DoctorConsultationScheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorConsultationSchedule
     */
    select?: DoctorConsultationScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorConsultationSchedule
     */
    omit?: DoctorConsultationScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorConsultationScheduleInclude<ExtArgs> | null
    /**
     * Filter, which DoctorConsultationSchedule to fetch.
     */
    where?: DoctorConsultationScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorConsultationSchedules to fetch.
     */
    orderBy?: DoctorConsultationScheduleOrderByWithRelationInput | DoctorConsultationScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DoctorConsultationSchedules.
     */
    cursor?: DoctorConsultationScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorConsultationSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorConsultationSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DoctorConsultationSchedules.
     */
    distinct?: DoctorConsultationScheduleScalarFieldEnum | DoctorConsultationScheduleScalarFieldEnum[]
  }

  /**
   * DoctorConsultationSchedule findMany
   */
  export type DoctorConsultationScheduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorConsultationSchedule
     */
    select?: DoctorConsultationScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorConsultationSchedule
     */
    omit?: DoctorConsultationScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorConsultationScheduleInclude<ExtArgs> | null
    /**
     * Filter, which DoctorConsultationSchedules to fetch.
     */
    where?: DoctorConsultationScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorConsultationSchedules to fetch.
     */
    orderBy?: DoctorConsultationScheduleOrderByWithRelationInput | DoctorConsultationScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DoctorConsultationSchedules.
     */
    cursor?: DoctorConsultationScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorConsultationSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorConsultationSchedules.
     */
    skip?: number
    distinct?: DoctorConsultationScheduleScalarFieldEnum | DoctorConsultationScheduleScalarFieldEnum[]
  }

  /**
   * DoctorConsultationSchedule create
   */
  export type DoctorConsultationScheduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorConsultationSchedule
     */
    select?: DoctorConsultationScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorConsultationSchedule
     */
    omit?: DoctorConsultationScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorConsultationScheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a DoctorConsultationSchedule.
     */
    data: XOR<DoctorConsultationScheduleCreateInput, DoctorConsultationScheduleUncheckedCreateInput>
  }

  /**
   * DoctorConsultationSchedule createMany
   */
  export type DoctorConsultationScheduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DoctorConsultationSchedules.
     */
    data: DoctorConsultationScheduleCreateManyInput | DoctorConsultationScheduleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DoctorConsultationSchedule createManyAndReturn
   */
  export type DoctorConsultationScheduleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorConsultationSchedule
     */
    select?: DoctorConsultationScheduleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorConsultationSchedule
     */
    omit?: DoctorConsultationScheduleOmit<ExtArgs> | null
    /**
     * The data used to create many DoctorConsultationSchedules.
     */
    data: DoctorConsultationScheduleCreateManyInput | DoctorConsultationScheduleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorConsultationScheduleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DoctorConsultationSchedule update
   */
  export type DoctorConsultationScheduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorConsultationSchedule
     */
    select?: DoctorConsultationScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorConsultationSchedule
     */
    omit?: DoctorConsultationScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorConsultationScheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a DoctorConsultationSchedule.
     */
    data: XOR<DoctorConsultationScheduleUpdateInput, DoctorConsultationScheduleUncheckedUpdateInput>
    /**
     * Choose, which DoctorConsultationSchedule to update.
     */
    where: DoctorConsultationScheduleWhereUniqueInput
  }

  /**
   * DoctorConsultationSchedule updateMany
   */
  export type DoctorConsultationScheduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DoctorConsultationSchedules.
     */
    data: XOR<DoctorConsultationScheduleUpdateManyMutationInput, DoctorConsultationScheduleUncheckedUpdateManyInput>
    /**
     * Filter which DoctorConsultationSchedules to update
     */
    where?: DoctorConsultationScheduleWhereInput
    /**
     * Limit how many DoctorConsultationSchedules to update.
     */
    limit?: number
  }

  /**
   * DoctorConsultationSchedule updateManyAndReturn
   */
  export type DoctorConsultationScheduleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorConsultationSchedule
     */
    select?: DoctorConsultationScheduleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorConsultationSchedule
     */
    omit?: DoctorConsultationScheduleOmit<ExtArgs> | null
    /**
     * The data used to update DoctorConsultationSchedules.
     */
    data: XOR<DoctorConsultationScheduleUpdateManyMutationInput, DoctorConsultationScheduleUncheckedUpdateManyInput>
    /**
     * Filter which DoctorConsultationSchedules to update
     */
    where?: DoctorConsultationScheduleWhereInput
    /**
     * Limit how many DoctorConsultationSchedules to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorConsultationScheduleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DoctorConsultationSchedule upsert
   */
  export type DoctorConsultationScheduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorConsultationSchedule
     */
    select?: DoctorConsultationScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorConsultationSchedule
     */
    omit?: DoctorConsultationScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorConsultationScheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the DoctorConsultationSchedule to update in case it exists.
     */
    where: DoctorConsultationScheduleWhereUniqueInput
    /**
     * In case the DoctorConsultationSchedule found by the `where` argument doesn't exist, create a new DoctorConsultationSchedule with this data.
     */
    create: XOR<DoctorConsultationScheduleCreateInput, DoctorConsultationScheduleUncheckedCreateInput>
    /**
     * In case the DoctorConsultationSchedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DoctorConsultationScheduleUpdateInput, DoctorConsultationScheduleUncheckedUpdateInput>
  }

  /**
   * DoctorConsultationSchedule delete
   */
  export type DoctorConsultationScheduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorConsultationSchedule
     */
    select?: DoctorConsultationScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorConsultationSchedule
     */
    omit?: DoctorConsultationScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorConsultationScheduleInclude<ExtArgs> | null
    /**
     * Filter which DoctorConsultationSchedule to delete.
     */
    where: DoctorConsultationScheduleWhereUniqueInput
  }

  /**
   * DoctorConsultationSchedule deleteMany
   */
  export type DoctorConsultationScheduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DoctorConsultationSchedules to delete
     */
    where?: DoctorConsultationScheduleWhereInput
    /**
     * Limit how many DoctorConsultationSchedules to delete.
     */
    limit?: number
  }

  /**
   * DoctorConsultationSchedule without action
   */
  export type DoctorConsultationScheduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorConsultationSchedule
     */
    select?: DoctorConsultationScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorConsultationSchedule
     */
    omit?: DoctorConsultationScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorConsultationScheduleInclude<ExtArgs> | null
  }


  /**
   * Model DoctorNote
   */

  export type AggregateDoctorNote = {
    _count: DoctorNoteCountAggregateOutputType | null
    _min: DoctorNoteMinAggregateOutputType | null
    _max: DoctorNoteMaxAggregateOutputType | null
  }

  export type DoctorNoteMinAggregateOutputType = {
    id: string | null
    doctorId: string | null
    createdById: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DoctorNoteMaxAggregateOutputType = {
    id: string | null
    doctorId: string | null
    createdById: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DoctorNoteCountAggregateOutputType = {
    id: number
    doctorId: number
    createdById: number
    content: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DoctorNoteMinAggregateInputType = {
    id?: true
    doctorId?: true
    createdById?: true
    content?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DoctorNoteMaxAggregateInputType = {
    id?: true
    doctorId?: true
    createdById?: true
    content?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DoctorNoteCountAggregateInputType = {
    id?: true
    doctorId?: true
    createdById?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DoctorNoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DoctorNote to aggregate.
     */
    where?: DoctorNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorNotes to fetch.
     */
    orderBy?: DoctorNoteOrderByWithRelationInput | DoctorNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DoctorNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DoctorNotes
    **/
    _count?: true | DoctorNoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoctorNoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoctorNoteMaxAggregateInputType
  }

  export type GetDoctorNoteAggregateType<T extends DoctorNoteAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctorNote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctorNote[P]>
      : GetScalarType<T[P], AggregateDoctorNote[P]>
  }




  export type DoctorNoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorNoteWhereInput
    orderBy?: DoctorNoteOrderByWithAggregationInput | DoctorNoteOrderByWithAggregationInput[]
    by: DoctorNoteScalarFieldEnum[] | DoctorNoteScalarFieldEnum
    having?: DoctorNoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoctorNoteCountAggregateInputType | true
    _min?: DoctorNoteMinAggregateInputType
    _max?: DoctorNoteMaxAggregateInputType
  }

  export type DoctorNoteGroupByOutputType = {
    id: string
    doctorId: string
    createdById: string
    content: string
    createdAt: Date
    updatedAt: Date
    _count: DoctorNoteCountAggregateOutputType | null
    _min: DoctorNoteMinAggregateOutputType | null
    _max: DoctorNoteMaxAggregateOutputType | null
  }

  type GetDoctorNoteGroupByPayload<T extends DoctorNoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DoctorNoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoctorNoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoctorNoteGroupByOutputType[P]>
            : GetScalarType<T[P], DoctorNoteGroupByOutputType[P]>
        }
      >
    >


  export type DoctorNoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    createdById?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorNote"]>

  export type DoctorNoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    createdById?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorNote"]>

  export type DoctorNoteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    createdById?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorNote"]>

  export type DoctorNoteSelectScalar = {
    id?: boolean
    doctorId?: boolean
    createdById?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DoctorNoteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "doctorId" | "createdById" | "content" | "createdAt" | "updatedAt", ExtArgs["result"]["doctorNote"]>
  export type DoctorNoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type DoctorNoteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type DoctorNoteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $DoctorNotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DoctorNote"
    objects: {
      doctor: Prisma.$DoctorPayload<ExtArgs>
      createdBy: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      doctorId: string
      createdById: string
      content: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["doctorNote"]>
    composites: {}
  }

  type DoctorNoteGetPayload<S extends boolean | null | undefined | DoctorNoteDefaultArgs> = $Result.GetResult<Prisma.$DoctorNotePayload, S>

  type DoctorNoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DoctorNoteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DoctorNoteCountAggregateInputType | true
    }

  export interface DoctorNoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DoctorNote'], meta: { name: 'DoctorNote' } }
    /**
     * Find zero or one DoctorNote that matches the filter.
     * @param {DoctorNoteFindUniqueArgs} args - Arguments to find a DoctorNote
     * @example
     * // Get one DoctorNote
     * const doctorNote = await prisma.doctorNote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DoctorNoteFindUniqueArgs>(args: SelectSubset<T, DoctorNoteFindUniqueArgs<ExtArgs>>): Prisma__DoctorNoteClient<$Result.GetResult<Prisma.$DoctorNotePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DoctorNote that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DoctorNoteFindUniqueOrThrowArgs} args - Arguments to find a DoctorNote
     * @example
     * // Get one DoctorNote
     * const doctorNote = await prisma.doctorNote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DoctorNoteFindUniqueOrThrowArgs>(args: SelectSubset<T, DoctorNoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DoctorNoteClient<$Result.GetResult<Prisma.$DoctorNotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DoctorNote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorNoteFindFirstArgs} args - Arguments to find a DoctorNote
     * @example
     * // Get one DoctorNote
     * const doctorNote = await prisma.doctorNote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DoctorNoteFindFirstArgs>(args?: SelectSubset<T, DoctorNoteFindFirstArgs<ExtArgs>>): Prisma__DoctorNoteClient<$Result.GetResult<Prisma.$DoctorNotePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DoctorNote that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorNoteFindFirstOrThrowArgs} args - Arguments to find a DoctorNote
     * @example
     * // Get one DoctorNote
     * const doctorNote = await prisma.doctorNote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DoctorNoteFindFirstOrThrowArgs>(args?: SelectSubset<T, DoctorNoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__DoctorNoteClient<$Result.GetResult<Prisma.$DoctorNotePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DoctorNotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorNoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DoctorNotes
     * const doctorNotes = await prisma.doctorNote.findMany()
     * 
     * // Get first 10 DoctorNotes
     * const doctorNotes = await prisma.doctorNote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doctorNoteWithIdOnly = await prisma.doctorNote.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DoctorNoteFindManyArgs>(args?: SelectSubset<T, DoctorNoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorNotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DoctorNote.
     * @param {DoctorNoteCreateArgs} args - Arguments to create a DoctorNote.
     * @example
     * // Create one DoctorNote
     * const DoctorNote = await prisma.doctorNote.create({
     *   data: {
     *     // ... data to create a DoctorNote
     *   }
     * })
     * 
     */
    create<T extends DoctorNoteCreateArgs>(args: SelectSubset<T, DoctorNoteCreateArgs<ExtArgs>>): Prisma__DoctorNoteClient<$Result.GetResult<Prisma.$DoctorNotePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DoctorNotes.
     * @param {DoctorNoteCreateManyArgs} args - Arguments to create many DoctorNotes.
     * @example
     * // Create many DoctorNotes
     * const doctorNote = await prisma.doctorNote.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DoctorNoteCreateManyArgs>(args?: SelectSubset<T, DoctorNoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DoctorNotes and returns the data saved in the database.
     * @param {DoctorNoteCreateManyAndReturnArgs} args - Arguments to create many DoctorNotes.
     * @example
     * // Create many DoctorNotes
     * const doctorNote = await prisma.doctorNote.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DoctorNotes and only return the `id`
     * const doctorNoteWithIdOnly = await prisma.doctorNote.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DoctorNoteCreateManyAndReturnArgs>(args?: SelectSubset<T, DoctorNoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorNotePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DoctorNote.
     * @param {DoctorNoteDeleteArgs} args - Arguments to delete one DoctorNote.
     * @example
     * // Delete one DoctorNote
     * const DoctorNote = await prisma.doctorNote.delete({
     *   where: {
     *     // ... filter to delete one DoctorNote
     *   }
     * })
     * 
     */
    delete<T extends DoctorNoteDeleteArgs>(args: SelectSubset<T, DoctorNoteDeleteArgs<ExtArgs>>): Prisma__DoctorNoteClient<$Result.GetResult<Prisma.$DoctorNotePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DoctorNote.
     * @param {DoctorNoteUpdateArgs} args - Arguments to update one DoctorNote.
     * @example
     * // Update one DoctorNote
     * const doctorNote = await prisma.doctorNote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DoctorNoteUpdateArgs>(args: SelectSubset<T, DoctorNoteUpdateArgs<ExtArgs>>): Prisma__DoctorNoteClient<$Result.GetResult<Prisma.$DoctorNotePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DoctorNotes.
     * @param {DoctorNoteDeleteManyArgs} args - Arguments to filter DoctorNotes to delete.
     * @example
     * // Delete a few DoctorNotes
     * const { count } = await prisma.doctorNote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DoctorNoteDeleteManyArgs>(args?: SelectSubset<T, DoctorNoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DoctorNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorNoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DoctorNotes
     * const doctorNote = await prisma.doctorNote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DoctorNoteUpdateManyArgs>(args: SelectSubset<T, DoctorNoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DoctorNotes and returns the data updated in the database.
     * @param {DoctorNoteUpdateManyAndReturnArgs} args - Arguments to update many DoctorNotes.
     * @example
     * // Update many DoctorNotes
     * const doctorNote = await prisma.doctorNote.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DoctorNotes and only return the `id`
     * const doctorNoteWithIdOnly = await prisma.doctorNote.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DoctorNoteUpdateManyAndReturnArgs>(args: SelectSubset<T, DoctorNoteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorNotePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DoctorNote.
     * @param {DoctorNoteUpsertArgs} args - Arguments to update or create a DoctorNote.
     * @example
     * // Update or create a DoctorNote
     * const doctorNote = await prisma.doctorNote.upsert({
     *   create: {
     *     // ... data to create a DoctorNote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DoctorNote we want to update
     *   }
     * })
     */
    upsert<T extends DoctorNoteUpsertArgs>(args: SelectSubset<T, DoctorNoteUpsertArgs<ExtArgs>>): Prisma__DoctorNoteClient<$Result.GetResult<Prisma.$DoctorNotePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DoctorNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorNoteCountArgs} args - Arguments to filter DoctorNotes to count.
     * @example
     * // Count the number of DoctorNotes
     * const count = await prisma.doctorNote.count({
     *   where: {
     *     // ... the filter for the DoctorNotes we want to count
     *   }
     * })
    **/
    count<T extends DoctorNoteCountArgs>(
      args?: Subset<T, DoctorNoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoctorNoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DoctorNote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorNoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoctorNoteAggregateArgs>(args: Subset<T, DoctorNoteAggregateArgs>): Prisma.PrismaPromise<GetDoctorNoteAggregateType<T>>

    /**
     * Group by DoctorNote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorNoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DoctorNoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DoctorNoteGroupByArgs['orderBy'] }
        : { orderBy?: DoctorNoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DoctorNoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctorNoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DoctorNote model
   */
  readonly fields: DoctorNoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DoctorNote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DoctorNoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    doctor<T extends DoctorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DoctorDefaultArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DoctorNote model
   */
  interface DoctorNoteFieldRefs {
    readonly id: FieldRef<"DoctorNote", 'String'>
    readonly doctorId: FieldRef<"DoctorNote", 'String'>
    readonly createdById: FieldRef<"DoctorNote", 'String'>
    readonly content: FieldRef<"DoctorNote", 'String'>
    readonly createdAt: FieldRef<"DoctorNote", 'DateTime'>
    readonly updatedAt: FieldRef<"DoctorNote", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DoctorNote findUnique
   */
  export type DoctorNoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorNote
     */
    select?: DoctorNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorNote
     */
    omit?: DoctorNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorNoteInclude<ExtArgs> | null
    /**
     * Filter, which DoctorNote to fetch.
     */
    where: DoctorNoteWhereUniqueInput
  }

  /**
   * DoctorNote findUniqueOrThrow
   */
  export type DoctorNoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorNote
     */
    select?: DoctorNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorNote
     */
    omit?: DoctorNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorNoteInclude<ExtArgs> | null
    /**
     * Filter, which DoctorNote to fetch.
     */
    where: DoctorNoteWhereUniqueInput
  }

  /**
   * DoctorNote findFirst
   */
  export type DoctorNoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorNote
     */
    select?: DoctorNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorNote
     */
    omit?: DoctorNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorNoteInclude<ExtArgs> | null
    /**
     * Filter, which DoctorNote to fetch.
     */
    where?: DoctorNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorNotes to fetch.
     */
    orderBy?: DoctorNoteOrderByWithRelationInput | DoctorNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DoctorNotes.
     */
    cursor?: DoctorNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DoctorNotes.
     */
    distinct?: DoctorNoteScalarFieldEnum | DoctorNoteScalarFieldEnum[]
  }

  /**
   * DoctorNote findFirstOrThrow
   */
  export type DoctorNoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorNote
     */
    select?: DoctorNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorNote
     */
    omit?: DoctorNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorNoteInclude<ExtArgs> | null
    /**
     * Filter, which DoctorNote to fetch.
     */
    where?: DoctorNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorNotes to fetch.
     */
    orderBy?: DoctorNoteOrderByWithRelationInput | DoctorNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DoctorNotes.
     */
    cursor?: DoctorNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DoctorNotes.
     */
    distinct?: DoctorNoteScalarFieldEnum | DoctorNoteScalarFieldEnum[]
  }

  /**
   * DoctorNote findMany
   */
  export type DoctorNoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorNote
     */
    select?: DoctorNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorNote
     */
    omit?: DoctorNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorNoteInclude<ExtArgs> | null
    /**
     * Filter, which DoctorNotes to fetch.
     */
    where?: DoctorNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorNotes to fetch.
     */
    orderBy?: DoctorNoteOrderByWithRelationInput | DoctorNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DoctorNotes.
     */
    cursor?: DoctorNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorNotes.
     */
    skip?: number
    distinct?: DoctorNoteScalarFieldEnum | DoctorNoteScalarFieldEnum[]
  }

  /**
   * DoctorNote create
   */
  export type DoctorNoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorNote
     */
    select?: DoctorNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorNote
     */
    omit?: DoctorNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorNoteInclude<ExtArgs> | null
    /**
     * The data needed to create a DoctorNote.
     */
    data: XOR<DoctorNoteCreateInput, DoctorNoteUncheckedCreateInput>
  }

  /**
   * DoctorNote createMany
   */
  export type DoctorNoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DoctorNotes.
     */
    data: DoctorNoteCreateManyInput | DoctorNoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DoctorNote createManyAndReturn
   */
  export type DoctorNoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorNote
     */
    select?: DoctorNoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorNote
     */
    omit?: DoctorNoteOmit<ExtArgs> | null
    /**
     * The data used to create many DoctorNotes.
     */
    data: DoctorNoteCreateManyInput | DoctorNoteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorNoteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DoctorNote update
   */
  export type DoctorNoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorNote
     */
    select?: DoctorNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorNote
     */
    omit?: DoctorNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorNoteInclude<ExtArgs> | null
    /**
     * The data needed to update a DoctorNote.
     */
    data: XOR<DoctorNoteUpdateInput, DoctorNoteUncheckedUpdateInput>
    /**
     * Choose, which DoctorNote to update.
     */
    where: DoctorNoteWhereUniqueInput
  }

  /**
   * DoctorNote updateMany
   */
  export type DoctorNoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DoctorNotes.
     */
    data: XOR<DoctorNoteUpdateManyMutationInput, DoctorNoteUncheckedUpdateManyInput>
    /**
     * Filter which DoctorNotes to update
     */
    where?: DoctorNoteWhereInput
    /**
     * Limit how many DoctorNotes to update.
     */
    limit?: number
  }

  /**
   * DoctorNote updateManyAndReturn
   */
  export type DoctorNoteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorNote
     */
    select?: DoctorNoteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorNote
     */
    omit?: DoctorNoteOmit<ExtArgs> | null
    /**
     * The data used to update DoctorNotes.
     */
    data: XOR<DoctorNoteUpdateManyMutationInput, DoctorNoteUncheckedUpdateManyInput>
    /**
     * Filter which DoctorNotes to update
     */
    where?: DoctorNoteWhereInput
    /**
     * Limit how many DoctorNotes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorNoteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DoctorNote upsert
   */
  export type DoctorNoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorNote
     */
    select?: DoctorNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorNote
     */
    omit?: DoctorNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorNoteInclude<ExtArgs> | null
    /**
     * The filter to search for the DoctorNote to update in case it exists.
     */
    where: DoctorNoteWhereUniqueInput
    /**
     * In case the DoctorNote found by the `where` argument doesn't exist, create a new DoctorNote with this data.
     */
    create: XOR<DoctorNoteCreateInput, DoctorNoteUncheckedCreateInput>
    /**
     * In case the DoctorNote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DoctorNoteUpdateInput, DoctorNoteUncheckedUpdateInput>
  }

  /**
   * DoctorNote delete
   */
  export type DoctorNoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorNote
     */
    select?: DoctorNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorNote
     */
    omit?: DoctorNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorNoteInclude<ExtArgs> | null
    /**
     * Filter which DoctorNote to delete.
     */
    where: DoctorNoteWhereUniqueInput
  }

  /**
   * DoctorNote deleteMany
   */
  export type DoctorNoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DoctorNotes to delete
     */
    where?: DoctorNoteWhereInput
    /**
     * Limit how many DoctorNotes to delete.
     */
    limit?: number
  }

  /**
   * DoctorNote without action
   */
  export type DoctorNoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorNote
     */
    select?: DoctorNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorNote
     */
    omit?: DoctorNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorNoteInclude<ExtArgs> | null
  }


  /**
   * Model DoctorInteraction
   */

  export type AggregateDoctorInteraction = {
    _count: DoctorInteractionCountAggregateOutputType | null
    _avg: DoctorInteractionAvgAggregateOutputType | null
    _sum: DoctorInteractionSumAggregateOutputType | null
    _min: DoctorInteractionMinAggregateOutputType | null
    _max: DoctorInteractionMaxAggregateOutputType | null
  }

  export type DoctorInteractionAvgAggregateOutputType = {
    rating: number | null
  }

  export type DoctorInteractionSumAggregateOutputType = {
    rating: number | null
  }

  export type DoctorInteractionMinAggregateOutputType = {
    id: string | null
    doctorId: string | null
    employeeId: string | null
    hospitalId: string | null
    interactionType: $Enums.InteractionType | null
    startTime: Date | null
    endTime: Date | null
    purpose: string | null
    outcome: string | null
    comments: string | null
    rating: number | null
    createdAt: Date | null
    doctorTaskId: string | null
  }

  export type DoctorInteractionMaxAggregateOutputType = {
    id: string | null
    doctorId: string | null
    employeeId: string | null
    hospitalId: string | null
    interactionType: $Enums.InteractionType | null
    startTime: Date | null
    endTime: Date | null
    purpose: string | null
    outcome: string | null
    comments: string | null
    rating: number | null
    createdAt: Date | null
    doctorTaskId: string | null
  }

  export type DoctorInteractionCountAggregateOutputType = {
    id: number
    doctorId: number
    employeeId: number
    hospitalId: number
    interactionType: number
    startTime: number
    endTime: number
    purpose: number
    outcome: number
    comments: number
    rating: number
    createdAt: number
    doctorTaskId: number
    _all: number
  }


  export type DoctorInteractionAvgAggregateInputType = {
    rating?: true
  }

  export type DoctorInteractionSumAggregateInputType = {
    rating?: true
  }

  export type DoctorInteractionMinAggregateInputType = {
    id?: true
    doctorId?: true
    employeeId?: true
    hospitalId?: true
    interactionType?: true
    startTime?: true
    endTime?: true
    purpose?: true
    outcome?: true
    comments?: true
    rating?: true
    createdAt?: true
    doctorTaskId?: true
  }

  export type DoctorInteractionMaxAggregateInputType = {
    id?: true
    doctorId?: true
    employeeId?: true
    hospitalId?: true
    interactionType?: true
    startTime?: true
    endTime?: true
    purpose?: true
    outcome?: true
    comments?: true
    rating?: true
    createdAt?: true
    doctorTaskId?: true
  }

  export type DoctorInteractionCountAggregateInputType = {
    id?: true
    doctorId?: true
    employeeId?: true
    hospitalId?: true
    interactionType?: true
    startTime?: true
    endTime?: true
    purpose?: true
    outcome?: true
    comments?: true
    rating?: true
    createdAt?: true
    doctorTaskId?: true
    _all?: true
  }

  export type DoctorInteractionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DoctorInteraction to aggregate.
     */
    where?: DoctorInteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorInteractions to fetch.
     */
    orderBy?: DoctorInteractionOrderByWithRelationInput | DoctorInteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DoctorInteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorInteractions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorInteractions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DoctorInteractions
    **/
    _count?: true | DoctorInteractionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DoctorInteractionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DoctorInteractionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoctorInteractionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoctorInteractionMaxAggregateInputType
  }

  export type GetDoctorInteractionAggregateType<T extends DoctorInteractionAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctorInteraction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctorInteraction[P]>
      : GetScalarType<T[P], AggregateDoctorInteraction[P]>
  }




  export type DoctorInteractionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorInteractionWhereInput
    orderBy?: DoctorInteractionOrderByWithAggregationInput | DoctorInteractionOrderByWithAggregationInput[]
    by: DoctorInteractionScalarFieldEnum[] | DoctorInteractionScalarFieldEnum
    having?: DoctorInteractionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoctorInteractionCountAggregateInputType | true
    _avg?: DoctorInteractionAvgAggregateInputType
    _sum?: DoctorInteractionSumAggregateInputType
    _min?: DoctorInteractionMinAggregateInputType
    _max?: DoctorInteractionMaxAggregateInputType
  }

  export type DoctorInteractionGroupByOutputType = {
    id: string
    doctorId: string
    employeeId: string
    hospitalId: string | null
    interactionType: $Enums.InteractionType
    startTime: Date
    endTime: Date | null
    purpose: string | null
    outcome: string | null
    comments: string | null
    rating: number | null
    createdAt: Date
    doctorTaskId: string | null
    _count: DoctorInteractionCountAggregateOutputType | null
    _avg: DoctorInteractionAvgAggregateOutputType | null
    _sum: DoctorInteractionSumAggregateOutputType | null
    _min: DoctorInteractionMinAggregateOutputType | null
    _max: DoctorInteractionMaxAggregateOutputType | null
  }

  type GetDoctorInteractionGroupByPayload<T extends DoctorInteractionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DoctorInteractionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoctorInteractionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoctorInteractionGroupByOutputType[P]>
            : GetScalarType<T[P], DoctorInteractionGroupByOutputType[P]>
        }
      >
    >


  export type DoctorInteractionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    employeeId?: boolean
    hospitalId?: boolean
    interactionType?: boolean
    startTime?: boolean
    endTime?: boolean
    purpose?: boolean
    outcome?: boolean
    comments?: boolean
    rating?: boolean
    createdAt?: boolean
    doctorTaskId?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    hospital?: boolean | DoctorInteraction$hospitalArgs<ExtArgs>
    DoctorDistribution?: boolean | DoctorInteraction$DoctorDistributionArgs<ExtArgs>
    DoctorTask?: boolean | DoctorInteraction$DoctorTaskArgs<ExtArgs>
    _count?: boolean | DoctorInteractionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorInteraction"]>

  export type DoctorInteractionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    employeeId?: boolean
    hospitalId?: boolean
    interactionType?: boolean
    startTime?: boolean
    endTime?: boolean
    purpose?: boolean
    outcome?: boolean
    comments?: boolean
    rating?: boolean
    createdAt?: boolean
    doctorTaskId?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    hospital?: boolean | DoctorInteraction$hospitalArgs<ExtArgs>
    DoctorTask?: boolean | DoctorInteraction$DoctorTaskArgs<ExtArgs>
  }, ExtArgs["result"]["doctorInteraction"]>

  export type DoctorInteractionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    employeeId?: boolean
    hospitalId?: boolean
    interactionType?: boolean
    startTime?: boolean
    endTime?: boolean
    purpose?: boolean
    outcome?: boolean
    comments?: boolean
    rating?: boolean
    createdAt?: boolean
    doctorTaskId?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    hospital?: boolean | DoctorInteraction$hospitalArgs<ExtArgs>
    DoctorTask?: boolean | DoctorInteraction$DoctorTaskArgs<ExtArgs>
  }, ExtArgs["result"]["doctorInteraction"]>

  export type DoctorInteractionSelectScalar = {
    id?: boolean
    doctorId?: boolean
    employeeId?: boolean
    hospitalId?: boolean
    interactionType?: boolean
    startTime?: boolean
    endTime?: boolean
    purpose?: boolean
    outcome?: boolean
    comments?: boolean
    rating?: boolean
    createdAt?: boolean
    doctorTaskId?: boolean
  }

  export type DoctorInteractionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "doctorId" | "employeeId" | "hospitalId" | "interactionType" | "startTime" | "endTime" | "purpose" | "outcome" | "comments" | "rating" | "createdAt" | "doctorTaskId", ExtArgs["result"]["doctorInteraction"]>
  export type DoctorInteractionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    hospital?: boolean | DoctorInteraction$hospitalArgs<ExtArgs>
    DoctorDistribution?: boolean | DoctorInteraction$DoctorDistributionArgs<ExtArgs>
    DoctorTask?: boolean | DoctorInteraction$DoctorTaskArgs<ExtArgs>
    _count?: boolean | DoctorInteractionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DoctorInteractionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    hospital?: boolean | DoctorInteraction$hospitalArgs<ExtArgs>
    DoctorTask?: boolean | DoctorInteraction$DoctorTaskArgs<ExtArgs>
  }
  export type DoctorInteractionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    hospital?: boolean | DoctorInteraction$hospitalArgs<ExtArgs>
    DoctorTask?: boolean | DoctorInteraction$DoctorTaskArgs<ExtArgs>
  }

  export type $DoctorInteractionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DoctorInteraction"
    objects: {
      doctor: Prisma.$DoctorPayload<ExtArgs>
      employee: Prisma.$EmployeePayload<ExtArgs>
      hospital: Prisma.$HospitalPayload<ExtArgs> | null
      DoctorDistribution: Prisma.$DoctorDistributionPayload<ExtArgs>[]
      DoctorTask: Prisma.$DoctorTaskPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      doctorId: string
      employeeId: string
      hospitalId: string | null
      interactionType: $Enums.InteractionType
      startTime: Date
      endTime: Date | null
      purpose: string | null
      outcome: string | null
      comments: string | null
      rating: number | null
      createdAt: Date
      doctorTaskId: string | null
    }, ExtArgs["result"]["doctorInteraction"]>
    composites: {}
  }

  type DoctorInteractionGetPayload<S extends boolean | null | undefined | DoctorInteractionDefaultArgs> = $Result.GetResult<Prisma.$DoctorInteractionPayload, S>

  type DoctorInteractionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DoctorInteractionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DoctorInteractionCountAggregateInputType | true
    }

  export interface DoctorInteractionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DoctorInteraction'], meta: { name: 'DoctorInteraction' } }
    /**
     * Find zero or one DoctorInteraction that matches the filter.
     * @param {DoctorInteractionFindUniqueArgs} args - Arguments to find a DoctorInteraction
     * @example
     * // Get one DoctorInteraction
     * const doctorInteraction = await prisma.doctorInteraction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DoctorInteractionFindUniqueArgs>(args: SelectSubset<T, DoctorInteractionFindUniqueArgs<ExtArgs>>): Prisma__DoctorInteractionClient<$Result.GetResult<Prisma.$DoctorInteractionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DoctorInteraction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DoctorInteractionFindUniqueOrThrowArgs} args - Arguments to find a DoctorInteraction
     * @example
     * // Get one DoctorInteraction
     * const doctorInteraction = await prisma.doctorInteraction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DoctorInteractionFindUniqueOrThrowArgs>(args: SelectSubset<T, DoctorInteractionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DoctorInteractionClient<$Result.GetResult<Prisma.$DoctorInteractionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DoctorInteraction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorInteractionFindFirstArgs} args - Arguments to find a DoctorInteraction
     * @example
     * // Get one DoctorInteraction
     * const doctorInteraction = await prisma.doctorInteraction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DoctorInteractionFindFirstArgs>(args?: SelectSubset<T, DoctorInteractionFindFirstArgs<ExtArgs>>): Prisma__DoctorInteractionClient<$Result.GetResult<Prisma.$DoctorInteractionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DoctorInteraction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorInteractionFindFirstOrThrowArgs} args - Arguments to find a DoctorInteraction
     * @example
     * // Get one DoctorInteraction
     * const doctorInteraction = await prisma.doctorInteraction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DoctorInteractionFindFirstOrThrowArgs>(args?: SelectSubset<T, DoctorInteractionFindFirstOrThrowArgs<ExtArgs>>): Prisma__DoctorInteractionClient<$Result.GetResult<Prisma.$DoctorInteractionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DoctorInteractions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorInteractionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DoctorInteractions
     * const doctorInteractions = await prisma.doctorInteraction.findMany()
     * 
     * // Get first 10 DoctorInteractions
     * const doctorInteractions = await prisma.doctorInteraction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doctorInteractionWithIdOnly = await prisma.doctorInteraction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DoctorInteractionFindManyArgs>(args?: SelectSubset<T, DoctorInteractionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorInteractionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DoctorInteraction.
     * @param {DoctorInteractionCreateArgs} args - Arguments to create a DoctorInteraction.
     * @example
     * // Create one DoctorInteraction
     * const DoctorInteraction = await prisma.doctorInteraction.create({
     *   data: {
     *     // ... data to create a DoctorInteraction
     *   }
     * })
     * 
     */
    create<T extends DoctorInteractionCreateArgs>(args: SelectSubset<T, DoctorInteractionCreateArgs<ExtArgs>>): Prisma__DoctorInteractionClient<$Result.GetResult<Prisma.$DoctorInteractionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DoctorInteractions.
     * @param {DoctorInteractionCreateManyArgs} args - Arguments to create many DoctorInteractions.
     * @example
     * // Create many DoctorInteractions
     * const doctorInteraction = await prisma.doctorInteraction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DoctorInteractionCreateManyArgs>(args?: SelectSubset<T, DoctorInteractionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DoctorInteractions and returns the data saved in the database.
     * @param {DoctorInteractionCreateManyAndReturnArgs} args - Arguments to create many DoctorInteractions.
     * @example
     * // Create many DoctorInteractions
     * const doctorInteraction = await prisma.doctorInteraction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DoctorInteractions and only return the `id`
     * const doctorInteractionWithIdOnly = await prisma.doctorInteraction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DoctorInteractionCreateManyAndReturnArgs>(args?: SelectSubset<T, DoctorInteractionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorInteractionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DoctorInteraction.
     * @param {DoctorInteractionDeleteArgs} args - Arguments to delete one DoctorInteraction.
     * @example
     * // Delete one DoctorInteraction
     * const DoctorInteraction = await prisma.doctorInteraction.delete({
     *   where: {
     *     // ... filter to delete one DoctorInteraction
     *   }
     * })
     * 
     */
    delete<T extends DoctorInteractionDeleteArgs>(args: SelectSubset<T, DoctorInteractionDeleteArgs<ExtArgs>>): Prisma__DoctorInteractionClient<$Result.GetResult<Prisma.$DoctorInteractionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DoctorInteraction.
     * @param {DoctorInteractionUpdateArgs} args - Arguments to update one DoctorInteraction.
     * @example
     * // Update one DoctorInteraction
     * const doctorInteraction = await prisma.doctorInteraction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DoctorInteractionUpdateArgs>(args: SelectSubset<T, DoctorInteractionUpdateArgs<ExtArgs>>): Prisma__DoctorInteractionClient<$Result.GetResult<Prisma.$DoctorInteractionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DoctorInteractions.
     * @param {DoctorInteractionDeleteManyArgs} args - Arguments to filter DoctorInteractions to delete.
     * @example
     * // Delete a few DoctorInteractions
     * const { count } = await prisma.doctorInteraction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DoctorInteractionDeleteManyArgs>(args?: SelectSubset<T, DoctorInteractionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DoctorInteractions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorInteractionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DoctorInteractions
     * const doctorInteraction = await prisma.doctorInteraction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DoctorInteractionUpdateManyArgs>(args: SelectSubset<T, DoctorInteractionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DoctorInteractions and returns the data updated in the database.
     * @param {DoctorInteractionUpdateManyAndReturnArgs} args - Arguments to update many DoctorInteractions.
     * @example
     * // Update many DoctorInteractions
     * const doctorInteraction = await prisma.doctorInteraction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DoctorInteractions and only return the `id`
     * const doctorInteractionWithIdOnly = await prisma.doctorInteraction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DoctorInteractionUpdateManyAndReturnArgs>(args: SelectSubset<T, DoctorInteractionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorInteractionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DoctorInteraction.
     * @param {DoctorInteractionUpsertArgs} args - Arguments to update or create a DoctorInteraction.
     * @example
     * // Update or create a DoctorInteraction
     * const doctorInteraction = await prisma.doctorInteraction.upsert({
     *   create: {
     *     // ... data to create a DoctorInteraction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DoctorInteraction we want to update
     *   }
     * })
     */
    upsert<T extends DoctorInteractionUpsertArgs>(args: SelectSubset<T, DoctorInteractionUpsertArgs<ExtArgs>>): Prisma__DoctorInteractionClient<$Result.GetResult<Prisma.$DoctorInteractionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DoctorInteractions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorInteractionCountArgs} args - Arguments to filter DoctorInteractions to count.
     * @example
     * // Count the number of DoctorInteractions
     * const count = await prisma.doctorInteraction.count({
     *   where: {
     *     // ... the filter for the DoctorInteractions we want to count
     *   }
     * })
    **/
    count<T extends DoctorInteractionCountArgs>(
      args?: Subset<T, DoctorInteractionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoctorInteractionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DoctorInteraction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorInteractionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoctorInteractionAggregateArgs>(args: Subset<T, DoctorInteractionAggregateArgs>): Prisma.PrismaPromise<GetDoctorInteractionAggregateType<T>>

    /**
     * Group by DoctorInteraction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorInteractionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DoctorInteractionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DoctorInteractionGroupByArgs['orderBy'] }
        : { orderBy?: DoctorInteractionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DoctorInteractionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctorInteractionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DoctorInteraction model
   */
  readonly fields: DoctorInteractionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DoctorInteraction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DoctorInteractionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    doctor<T extends DoctorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DoctorDefaultArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    hospital<T extends DoctorInteraction$hospitalArgs<ExtArgs> = {}>(args?: Subset<T, DoctorInteraction$hospitalArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    DoctorDistribution<T extends DoctorInteraction$DoctorDistributionArgs<ExtArgs> = {}>(args?: Subset<T, DoctorInteraction$DoctorDistributionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorDistributionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    DoctorTask<T extends DoctorInteraction$DoctorTaskArgs<ExtArgs> = {}>(args?: Subset<T, DoctorInteraction$DoctorTaskArgs<ExtArgs>>): Prisma__DoctorTaskClient<$Result.GetResult<Prisma.$DoctorTaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DoctorInteraction model
   */
  interface DoctorInteractionFieldRefs {
    readonly id: FieldRef<"DoctorInteraction", 'String'>
    readonly doctorId: FieldRef<"DoctorInteraction", 'String'>
    readonly employeeId: FieldRef<"DoctorInteraction", 'String'>
    readonly hospitalId: FieldRef<"DoctorInteraction", 'String'>
    readonly interactionType: FieldRef<"DoctorInteraction", 'InteractionType'>
    readonly startTime: FieldRef<"DoctorInteraction", 'DateTime'>
    readonly endTime: FieldRef<"DoctorInteraction", 'DateTime'>
    readonly purpose: FieldRef<"DoctorInteraction", 'String'>
    readonly outcome: FieldRef<"DoctorInteraction", 'String'>
    readonly comments: FieldRef<"DoctorInteraction", 'String'>
    readonly rating: FieldRef<"DoctorInteraction", 'Int'>
    readonly createdAt: FieldRef<"DoctorInteraction", 'DateTime'>
    readonly doctorTaskId: FieldRef<"DoctorInteraction", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DoctorInteraction findUnique
   */
  export type DoctorInteractionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorInteraction
     */
    select?: DoctorInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorInteraction
     */
    omit?: DoctorInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInteractionInclude<ExtArgs> | null
    /**
     * Filter, which DoctorInteraction to fetch.
     */
    where: DoctorInteractionWhereUniqueInput
  }

  /**
   * DoctorInteraction findUniqueOrThrow
   */
  export type DoctorInteractionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorInteraction
     */
    select?: DoctorInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorInteraction
     */
    omit?: DoctorInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInteractionInclude<ExtArgs> | null
    /**
     * Filter, which DoctorInteraction to fetch.
     */
    where: DoctorInteractionWhereUniqueInput
  }

  /**
   * DoctorInteraction findFirst
   */
  export type DoctorInteractionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorInteraction
     */
    select?: DoctorInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorInteraction
     */
    omit?: DoctorInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInteractionInclude<ExtArgs> | null
    /**
     * Filter, which DoctorInteraction to fetch.
     */
    where?: DoctorInteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorInteractions to fetch.
     */
    orderBy?: DoctorInteractionOrderByWithRelationInput | DoctorInteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DoctorInteractions.
     */
    cursor?: DoctorInteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorInteractions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorInteractions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DoctorInteractions.
     */
    distinct?: DoctorInteractionScalarFieldEnum | DoctorInteractionScalarFieldEnum[]
  }

  /**
   * DoctorInteraction findFirstOrThrow
   */
  export type DoctorInteractionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorInteraction
     */
    select?: DoctorInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorInteraction
     */
    omit?: DoctorInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInteractionInclude<ExtArgs> | null
    /**
     * Filter, which DoctorInteraction to fetch.
     */
    where?: DoctorInteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorInteractions to fetch.
     */
    orderBy?: DoctorInteractionOrderByWithRelationInput | DoctorInteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DoctorInteractions.
     */
    cursor?: DoctorInteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorInteractions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorInteractions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DoctorInteractions.
     */
    distinct?: DoctorInteractionScalarFieldEnum | DoctorInteractionScalarFieldEnum[]
  }

  /**
   * DoctorInteraction findMany
   */
  export type DoctorInteractionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorInteraction
     */
    select?: DoctorInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorInteraction
     */
    omit?: DoctorInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInteractionInclude<ExtArgs> | null
    /**
     * Filter, which DoctorInteractions to fetch.
     */
    where?: DoctorInteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorInteractions to fetch.
     */
    orderBy?: DoctorInteractionOrderByWithRelationInput | DoctorInteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DoctorInteractions.
     */
    cursor?: DoctorInteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorInteractions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorInteractions.
     */
    skip?: number
    distinct?: DoctorInteractionScalarFieldEnum | DoctorInteractionScalarFieldEnum[]
  }

  /**
   * DoctorInteraction create
   */
  export type DoctorInteractionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorInteraction
     */
    select?: DoctorInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorInteraction
     */
    omit?: DoctorInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInteractionInclude<ExtArgs> | null
    /**
     * The data needed to create a DoctorInteraction.
     */
    data: XOR<DoctorInteractionCreateInput, DoctorInteractionUncheckedCreateInput>
  }

  /**
   * DoctorInteraction createMany
   */
  export type DoctorInteractionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DoctorInteractions.
     */
    data: DoctorInteractionCreateManyInput | DoctorInteractionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DoctorInteraction createManyAndReturn
   */
  export type DoctorInteractionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorInteraction
     */
    select?: DoctorInteractionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorInteraction
     */
    omit?: DoctorInteractionOmit<ExtArgs> | null
    /**
     * The data used to create many DoctorInteractions.
     */
    data: DoctorInteractionCreateManyInput | DoctorInteractionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInteractionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DoctorInteraction update
   */
  export type DoctorInteractionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorInteraction
     */
    select?: DoctorInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorInteraction
     */
    omit?: DoctorInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInteractionInclude<ExtArgs> | null
    /**
     * The data needed to update a DoctorInteraction.
     */
    data: XOR<DoctorInteractionUpdateInput, DoctorInteractionUncheckedUpdateInput>
    /**
     * Choose, which DoctorInteraction to update.
     */
    where: DoctorInteractionWhereUniqueInput
  }

  /**
   * DoctorInteraction updateMany
   */
  export type DoctorInteractionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DoctorInteractions.
     */
    data: XOR<DoctorInteractionUpdateManyMutationInput, DoctorInteractionUncheckedUpdateManyInput>
    /**
     * Filter which DoctorInteractions to update
     */
    where?: DoctorInteractionWhereInput
    /**
     * Limit how many DoctorInteractions to update.
     */
    limit?: number
  }

  /**
   * DoctorInteraction updateManyAndReturn
   */
  export type DoctorInteractionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorInteraction
     */
    select?: DoctorInteractionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorInteraction
     */
    omit?: DoctorInteractionOmit<ExtArgs> | null
    /**
     * The data used to update DoctorInteractions.
     */
    data: XOR<DoctorInteractionUpdateManyMutationInput, DoctorInteractionUncheckedUpdateManyInput>
    /**
     * Filter which DoctorInteractions to update
     */
    where?: DoctorInteractionWhereInput
    /**
     * Limit how many DoctorInteractions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInteractionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DoctorInteraction upsert
   */
  export type DoctorInteractionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorInteraction
     */
    select?: DoctorInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorInteraction
     */
    omit?: DoctorInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInteractionInclude<ExtArgs> | null
    /**
     * The filter to search for the DoctorInteraction to update in case it exists.
     */
    where: DoctorInteractionWhereUniqueInput
    /**
     * In case the DoctorInteraction found by the `where` argument doesn't exist, create a new DoctorInteraction with this data.
     */
    create: XOR<DoctorInteractionCreateInput, DoctorInteractionUncheckedCreateInput>
    /**
     * In case the DoctorInteraction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DoctorInteractionUpdateInput, DoctorInteractionUncheckedUpdateInput>
  }

  /**
   * DoctorInteraction delete
   */
  export type DoctorInteractionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorInteraction
     */
    select?: DoctorInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorInteraction
     */
    omit?: DoctorInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInteractionInclude<ExtArgs> | null
    /**
     * Filter which DoctorInteraction to delete.
     */
    where: DoctorInteractionWhereUniqueInput
  }

  /**
   * DoctorInteraction deleteMany
   */
  export type DoctorInteractionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DoctorInteractions to delete
     */
    where?: DoctorInteractionWhereInput
    /**
     * Limit how many DoctorInteractions to delete.
     */
    limit?: number
  }

  /**
   * DoctorInteraction.hospital
   */
  export type DoctorInteraction$hospitalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hospital
     */
    omit?: HospitalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalInclude<ExtArgs> | null
    where?: HospitalWhereInput
  }

  /**
   * DoctorInteraction.DoctorDistribution
   */
  export type DoctorInteraction$DoctorDistributionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistribution
     */
    select?: DoctorDistributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistribution
     */
    omit?: DoctorDistributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionInclude<ExtArgs> | null
    where?: DoctorDistributionWhereInput
    orderBy?: DoctorDistributionOrderByWithRelationInput | DoctorDistributionOrderByWithRelationInput[]
    cursor?: DoctorDistributionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorDistributionScalarFieldEnum | DoctorDistributionScalarFieldEnum[]
  }

  /**
   * DoctorInteraction.DoctorTask
   */
  export type DoctorInteraction$DoctorTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorTask
     */
    select?: DoctorTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorTask
     */
    omit?: DoctorTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorTaskInclude<ExtArgs> | null
    where?: DoctorTaskWhereInput
  }

  /**
   * DoctorInteraction without action
   */
  export type DoctorInteractionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorInteraction
     */
    select?: DoctorInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorInteraction
     */
    omit?: DoctorInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInteractionInclude<ExtArgs> | null
  }


  /**
   * Model Drug
   */

  export type AggregateDrug = {
    _count: DrugCountAggregateOutputType | null
    _avg: DrugAvgAggregateOutputType | null
    _sum: DrugSumAggregateOutputType | null
    _min: DrugMinAggregateOutputType | null
    _max: DrugMaxAggregateOutputType | null
  }

  export type DrugAvgAggregateOutputType = {
    price: Decimal | null
  }

  export type DrugSumAggregateOutputType = {
    price: Decimal | null
  }

  export type DrugMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    name: string | null
    composition: string | null
    manufacturer: string | null
    indications: string | null
    sideEffects: string | null
    safetyAdvice: string | null
    price: Decimal | null
    schedule: string | null
    regulatoryApprovals: string | null
    category: string | null
    isAvailable: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    isActive: boolean | null
  }

  export type DrugMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    name: string | null
    composition: string | null
    manufacturer: string | null
    indications: string | null
    sideEffects: string | null
    safetyAdvice: string | null
    price: Decimal | null
    schedule: string | null
    regulatoryApprovals: string | null
    category: string | null
    isAvailable: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    isActive: boolean | null
  }

  export type DrugCountAggregateOutputType = {
    id: number
    organizationId: number
    name: number
    composition: number
    manufacturer: number
    indications: number
    sideEffects: number
    safetyAdvice: number
    dosageForms: number
    price: number
    schedule: number
    regulatoryApprovals: number
    category: number
    isAvailable: number
    images: number
    marketingMaterials: number
    createdAt: number
    updatedAt: number
    createdById: number
    isActive: number
    _all: number
  }


  export type DrugAvgAggregateInputType = {
    price?: true
  }

  export type DrugSumAggregateInputType = {
    price?: true
  }

  export type DrugMinAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    composition?: true
    manufacturer?: true
    indications?: true
    sideEffects?: true
    safetyAdvice?: true
    price?: true
    schedule?: true
    regulatoryApprovals?: true
    category?: true
    isAvailable?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    isActive?: true
  }

  export type DrugMaxAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    composition?: true
    manufacturer?: true
    indications?: true
    sideEffects?: true
    safetyAdvice?: true
    price?: true
    schedule?: true
    regulatoryApprovals?: true
    category?: true
    isAvailable?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    isActive?: true
  }

  export type DrugCountAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    composition?: true
    manufacturer?: true
    indications?: true
    sideEffects?: true
    safetyAdvice?: true
    dosageForms?: true
    price?: true
    schedule?: true
    regulatoryApprovals?: true
    category?: true
    isAvailable?: true
    images?: true
    marketingMaterials?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    isActive?: true
    _all?: true
  }

  export type DrugAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Drug to aggregate.
     */
    where?: DrugWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Drugs to fetch.
     */
    orderBy?: DrugOrderByWithRelationInput | DrugOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DrugWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Drugs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Drugs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Drugs
    **/
    _count?: true | DrugCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DrugAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DrugSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DrugMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DrugMaxAggregateInputType
  }

  export type GetDrugAggregateType<T extends DrugAggregateArgs> = {
        [P in keyof T & keyof AggregateDrug]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDrug[P]>
      : GetScalarType<T[P], AggregateDrug[P]>
  }




  export type DrugGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DrugWhereInput
    orderBy?: DrugOrderByWithAggregationInput | DrugOrderByWithAggregationInput[]
    by: DrugScalarFieldEnum[] | DrugScalarFieldEnum
    having?: DrugScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DrugCountAggregateInputType | true
    _avg?: DrugAvgAggregateInputType
    _sum?: DrugSumAggregateInputType
    _min?: DrugMinAggregateInputType
    _max?: DrugMaxAggregateInputType
  }

  export type DrugGroupByOutputType = {
    id: string
    organizationId: string
    name: string
    composition: string | null
    manufacturer: string | null
    indications: string | null
    sideEffects: string | null
    safetyAdvice: string | null
    dosageForms: JsonValue | null
    price: Decimal | null
    schedule: string | null
    regulatoryApprovals: string | null
    category: string | null
    isAvailable: boolean
    images: JsonValue | null
    marketingMaterials: JsonValue | null
    createdAt: Date
    updatedAt: Date
    createdById: string
    isActive: boolean
    _count: DrugCountAggregateOutputType | null
    _avg: DrugAvgAggregateOutputType | null
    _sum: DrugSumAggregateOutputType | null
    _min: DrugMinAggregateOutputType | null
    _max: DrugMaxAggregateOutputType | null
  }

  type GetDrugGroupByPayload<T extends DrugGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DrugGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DrugGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DrugGroupByOutputType[P]>
            : GetScalarType<T[P], DrugGroupByOutputType[P]>
        }
      >
    >


  export type DrugSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    composition?: boolean
    manufacturer?: boolean
    indications?: boolean
    sideEffects?: boolean
    safetyAdvice?: boolean
    dosageForms?: boolean
    price?: boolean
    schedule?: boolean
    regulatoryApprovals?: boolean
    category?: boolean
    isAvailable?: boolean
    images?: boolean
    marketingMaterials?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    isActive?: boolean
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    orderItems?: boolean | Drug$orderItemsArgs<ExtArgs>
    rcpaData?: boolean | Drug$rcpaDataArgs<ExtArgs>
    UserDrugInventory?: boolean | Drug$UserDrugInventoryArgs<ExtArgs>
    DoctorDistributionDrugItem?: boolean | Drug$DoctorDistributionDrugItemArgs<ExtArgs>
    _count?: boolean | DrugCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["drug"]>

  export type DrugSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    composition?: boolean
    manufacturer?: boolean
    indications?: boolean
    sideEffects?: boolean
    safetyAdvice?: boolean
    dosageForms?: boolean
    price?: boolean
    schedule?: boolean
    regulatoryApprovals?: boolean
    category?: boolean
    isAvailable?: boolean
    images?: boolean
    marketingMaterials?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    isActive?: boolean
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["drug"]>

  export type DrugSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    composition?: boolean
    manufacturer?: boolean
    indications?: boolean
    sideEffects?: boolean
    safetyAdvice?: boolean
    dosageForms?: boolean
    price?: boolean
    schedule?: boolean
    regulatoryApprovals?: boolean
    category?: boolean
    isAvailable?: boolean
    images?: boolean
    marketingMaterials?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    isActive?: boolean
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["drug"]>

  export type DrugSelectScalar = {
    id?: boolean
    organizationId?: boolean
    name?: boolean
    composition?: boolean
    manufacturer?: boolean
    indications?: boolean
    sideEffects?: boolean
    safetyAdvice?: boolean
    dosageForms?: boolean
    price?: boolean
    schedule?: boolean
    regulatoryApprovals?: boolean
    category?: boolean
    isAvailable?: boolean
    images?: boolean
    marketingMaterials?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    isActive?: boolean
  }

  export type DrugOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "name" | "composition" | "manufacturer" | "indications" | "sideEffects" | "safetyAdvice" | "dosageForms" | "price" | "schedule" | "regulatoryApprovals" | "category" | "isAvailable" | "images" | "marketingMaterials" | "createdAt" | "updatedAt" | "createdById" | "isActive", ExtArgs["result"]["drug"]>
  export type DrugInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    orderItems?: boolean | Drug$orderItemsArgs<ExtArgs>
    rcpaData?: boolean | Drug$rcpaDataArgs<ExtArgs>
    UserDrugInventory?: boolean | Drug$UserDrugInventoryArgs<ExtArgs>
    DoctorDistributionDrugItem?: boolean | Drug$DoctorDistributionDrugItemArgs<ExtArgs>
    _count?: boolean | DrugCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DrugIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type DrugIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $DrugPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Drug"
    objects: {
      createdBy: Prisma.$EmployeePayload<ExtArgs>
      orderItems: Prisma.$OrderItemPayload<ExtArgs>[]
      rcpaData: Prisma.$RcpaDrugDataPayload<ExtArgs>[]
      UserDrugInventory: Prisma.$UserDrugInventoryPayload<ExtArgs>[]
      DoctorDistributionDrugItem: Prisma.$DoctorDistributionDrugItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      name: string
      composition: string | null
      manufacturer: string | null
      indications: string | null
      sideEffects: string | null
      safetyAdvice: string | null
      dosageForms: Prisma.JsonValue | null
      price: Prisma.Decimal | null
      schedule: string | null
      regulatoryApprovals: string | null
      category: string | null
      isAvailable: boolean
      images: Prisma.JsonValue | null
      marketingMaterials: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      createdById: string
      isActive: boolean
    }, ExtArgs["result"]["drug"]>
    composites: {}
  }

  type DrugGetPayload<S extends boolean | null | undefined | DrugDefaultArgs> = $Result.GetResult<Prisma.$DrugPayload, S>

  type DrugCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DrugFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DrugCountAggregateInputType | true
    }

  export interface DrugDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Drug'], meta: { name: 'Drug' } }
    /**
     * Find zero or one Drug that matches the filter.
     * @param {DrugFindUniqueArgs} args - Arguments to find a Drug
     * @example
     * // Get one Drug
     * const drug = await prisma.drug.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DrugFindUniqueArgs>(args: SelectSubset<T, DrugFindUniqueArgs<ExtArgs>>): Prisma__DrugClient<$Result.GetResult<Prisma.$DrugPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Drug that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DrugFindUniqueOrThrowArgs} args - Arguments to find a Drug
     * @example
     * // Get one Drug
     * const drug = await prisma.drug.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DrugFindUniqueOrThrowArgs>(args: SelectSubset<T, DrugFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DrugClient<$Result.GetResult<Prisma.$DrugPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Drug that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DrugFindFirstArgs} args - Arguments to find a Drug
     * @example
     * // Get one Drug
     * const drug = await prisma.drug.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DrugFindFirstArgs>(args?: SelectSubset<T, DrugFindFirstArgs<ExtArgs>>): Prisma__DrugClient<$Result.GetResult<Prisma.$DrugPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Drug that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DrugFindFirstOrThrowArgs} args - Arguments to find a Drug
     * @example
     * // Get one Drug
     * const drug = await prisma.drug.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DrugFindFirstOrThrowArgs>(args?: SelectSubset<T, DrugFindFirstOrThrowArgs<ExtArgs>>): Prisma__DrugClient<$Result.GetResult<Prisma.$DrugPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Drugs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DrugFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Drugs
     * const drugs = await prisma.drug.findMany()
     * 
     * // Get first 10 Drugs
     * const drugs = await prisma.drug.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const drugWithIdOnly = await prisma.drug.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DrugFindManyArgs>(args?: SelectSubset<T, DrugFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DrugPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Drug.
     * @param {DrugCreateArgs} args - Arguments to create a Drug.
     * @example
     * // Create one Drug
     * const Drug = await prisma.drug.create({
     *   data: {
     *     // ... data to create a Drug
     *   }
     * })
     * 
     */
    create<T extends DrugCreateArgs>(args: SelectSubset<T, DrugCreateArgs<ExtArgs>>): Prisma__DrugClient<$Result.GetResult<Prisma.$DrugPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Drugs.
     * @param {DrugCreateManyArgs} args - Arguments to create many Drugs.
     * @example
     * // Create many Drugs
     * const drug = await prisma.drug.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DrugCreateManyArgs>(args?: SelectSubset<T, DrugCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Drugs and returns the data saved in the database.
     * @param {DrugCreateManyAndReturnArgs} args - Arguments to create many Drugs.
     * @example
     * // Create many Drugs
     * const drug = await prisma.drug.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Drugs and only return the `id`
     * const drugWithIdOnly = await prisma.drug.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DrugCreateManyAndReturnArgs>(args?: SelectSubset<T, DrugCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DrugPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Drug.
     * @param {DrugDeleteArgs} args - Arguments to delete one Drug.
     * @example
     * // Delete one Drug
     * const Drug = await prisma.drug.delete({
     *   where: {
     *     // ... filter to delete one Drug
     *   }
     * })
     * 
     */
    delete<T extends DrugDeleteArgs>(args: SelectSubset<T, DrugDeleteArgs<ExtArgs>>): Prisma__DrugClient<$Result.GetResult<Prisma.$DrugPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Drug.
     * @param {DrugUpdateArgs} args - Arguments to update one Drug.
     * @example
     * // Update one Drug
     * const drug = await prisma.drug.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DrugUpdateArgs>(args: SelectSubset<T, DrugUpdateArgs<ExtArgs>>): Prisma__DrugClient<$Result.GetResult<Prisma.$DrugPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Drugs.
     * @param {DrugDeleteManyArgs} args - Arguments to filter Drugs to delete.
     * @example
     * // Delete a few Drugs
     * const { count } = await prisma.drug.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DrugDeleteManyArgs>(args?: SelectSubset<T, DrugDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Drugs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DrugUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Drugs
     * const drug = await prisma.drug.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DrugUpdateManyArgs>(args: SelectSubset<T, DrugUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Drugs and returns the data updated in the database.
     * @param {DrugUpdateManyAndReturnArgs} args - Arguments to update many Drugs.
     * @example
     * // Update many Drugs
     * const drug = await prisma.drug.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Drugs and only return the `id`
     * const drugWithIdOnly = await prisma.drug.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DrugUpdateManyAndReturnArgs>(args: SelectSubset<T, DrugUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DrugPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Drug.
     * @param {DrugUpsertArgs} args - Arguments to update or create a Drug.
     * @example
     * // Update or create a Drug
     * const drug = await prisma.drug.upsert({
     *   create: {
     *     // ... data to create a Drug
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Drug we want to update
     *   }
     * })
     */
    upsert<T extends DrugUpsertArgs>(args: SelectSubset<T, DrugUpsertArgs<ExtArgs>>): Prisma__DrugClient<$Result.GetResult<Prisma.$DrugPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Drugs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DrugCountArgs} args - Arguments to filter Drugs to count.
     * @example
     * // Count the number of Drugs
     * const count = await prisma.drug.count({
     *   where: {
     *     // ... the filter for the Drugs we want to count
     *   }
     * })
    **/
    count<T extends DrugCountArgs>(
      args?: Subset<T, DrugCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DrugCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Drug.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DrugAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DrugAggregateArgs>(args: Subset<T, DrugAggregateArgs>): Prisma.PrismaPromise<GetDrugAggregateType<T>>

    /**
     * Group by Drug.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DrugGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DrugGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DrugGroupByArgs['orderBy'] }
        : { orderBy?: DrugGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DrugGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDrugGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Drug model
   */
  readonly fields: DrugFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Drug.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DrugClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    orderItems<T extends Drug$orderItemsArgs<ExtArgs> = {}>(args?: Subset<T, Drug$orderItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rcpaData<T extends Drug$rcpaDataArgs<ExtArgs> = {}>(args?: Subset<T, Drug$rcpaDataArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RcpaDrugDataPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    UserDrugInventory<T extends Drug$UserDrugInventoryArgs<ExtArgs> = {}>(args?: Subset<T, Drug$UserDrugInventoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserDrugInventoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    DoctorDistributionDrugItem<T extends Drug$DoctorDistributionDrugItemArgs<ExtArgs> = {}>(args?: Subset<T, Drug$DoctorDistributionDrugItemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorDistributionDrugItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Drug model
   */
  interface DrugFieldRefs {
    readonly id: FieldRef<"Drug", 'String'>
    readonly organizationId: FieldRef<"Drug", 'String'>
    readonly name: FieldRef<"Drug", 'String'>
    readonly composition: FieldRef<"Drug", 'String'>
    readonly manufacturer: FieldRef<"Drug", 'String'>
    readonly indications: FieldRef<"Drug", 'String'>
    readonly sideEffects: FieldRef<"Drug", 'String'>
    readonly safetyAdvice: FieldRef<"Drug", 'String'>
    readonly dosageForms: FieldRef<"Drug", 'Json'>
    readonly price: FieldRef<"Drug", 'Decimal'>
    readonly schedule: FieldRef<"Drug", 'String'>
    readonly regulatoryApprovals: FieldRef<"Drug", 'String'>
    readonly category: FieldRef<"Drug", 'String'>
    readonly isAvailable: FieldRef<"Drug", 'Boolean'>
    readonly images: FieldRef<"Drug", 'Json'>
    readonly marketingMaterials: FieldRef<"Drug", 'Json'>
    readonly createdAt: FieldRef<"Drug", 'DateTime'>
    readonly updatedAt: FieldRef<"Drug", 'DateTime'>
    readonly createdById: FieldRef<"Drug", 'String'>
    readonly isActive: FieldRef<"Drug", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Drug findUnique
   */
  export type DrugFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Drug
     */
    select?: DrugSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Drug
     */
    omit?: DrugOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrugInclude<ExtArgs> | null
    /**
     * Filter, which Drug to fetch.
     */
    where: DrugWhereUniqueInput
  }

  /**
   * Drug findUniqueOrThrow
   */
  export type DrugFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Drug
     */
    select?: DrugSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Drug
     */
    omit?: DrugOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrugInclude<ExtArgs> | null
    /**
     * Filter, which Drug to fetch.
     */
    where: DrugWhereUniqueInput
  }

  /**
   * Drug findFirst
   */
  export type DrugFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Drug
     */
    select?: DrugSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Drug
     */
    omit?: DrugOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrugInclude<ExtArgs> | null
    /**
     * Filter, which Drug to fetch.
     */
    where?: DrugWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Drugs to fetch.
     */
    orderBy?: DrugOrderByWithRelationInput | DrugOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Drugs.
     */
    cursor?: DrugWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Drugs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Drugs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Drugs.
     */
    distinct?: DrugScalarFieldEnum | DrugScalarFieldEnum[]
  }

  /**
   * Drug findFirstOrThrow
   */
  export type DrugFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Drug
     */
    select?: DrugSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Drug
     */
    omit?: DrugOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrugInclude<ExtArgs> | null
    /**
     * Filter, which Drug to fetch.
     */
    where?: DrugWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Drugs to fetch.
     */
    orderBy?: DrugOrderByWithRelationInput | DrugOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Drugs.
     */
    cursor?: DrugWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Drugs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Drugs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Drugs.
     */
    distinct?: DrugScalarFieldEnum | DrugScalarFieldEnum[]
  }

  /**
   * Drug findMany
   */
  export type DrugFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Drug
     */
    select?: DrugSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Drug
     */
    omit?: DrugOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrugInclude<ExtArgs> | null
    /**
     * Filter, which Drugs to fetch.
     */
    where?: DrugWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Drugs to fetch.
     */
    orderBy?: DrugOrderByWithRelationInput | DrugOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Drugs.
     */
    cursor?: DrugWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Drugs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Drugs.
     */
    skip?: number
    distinct?: DrugScalarFieldEnum | DrugScalarFieldEnum[]
  }

  /**
   * Drug create
   */
  export type DrugCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Drug
     */
    select?: DrugSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Drug
     */
    omit?: DrugOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrugInclude<ExtArgs> | null
    /**
     * The data needed to create a Drug.
     */
    data: XOR<DrugCreateInput, DrugUncheckedCreateInput>
  }

  /**
   * Drug createMany
   */
  export type DrugCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Drugs.
     */
    data: DrugCreateManyInput | DrugCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Drug createManyAndReturn
   */
  export type DrugCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Drug
     */
    select?: DrugSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Drug
     */
    omit?: DrugOmit<ExtArgs> | null
    /**
     * The data used to create many Drugs.
     */
    data: DrugCreateManyInput | DrugCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrugIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Drug update
   */
  export type DrugUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Drug
     */
    select?: DrugSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Drug
     */
    omit?: DrugOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrugInclude<ExtArgs> | null
    /**
     * The data needed to update a Drug.
     */
    data: XOR<DrugUpdateInput, DrugUncheckedUpdateInput>
    /**
     * Choose, which Drug to update.
     */
    where: DrugWhereUniqueInput
  }

  /**
   * Drug updateMany
   */
  export type DrugUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Drugs.
     */
    data: XOR<DrugUpdateManyMutationInput, DrugUncheckedUpdateManyInput>
    /**
     * Filter which Drugs to update
     */
    where?: DrugWhereInput
    /**
     * Limit how many Drugs to update.
     */
    limit?: number
  }

  /**
   * Drug updateManyAndReturn
   */
  export type DrugUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Drug
     */
    select?: DrugSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Drug
     */
    omit?: DrugOmit<ExtArgs> | null
    /**
     * The data used to update Drugs.
     */
    data: XOR<DrugUpdateManyMutationInput, DrugUncheckedUpdateManyInput>
    /**
     * Filter which Drugs to update
     */
    where?: DrugWhereInput
    /**
     * Limit how many Drugs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrugIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Drug upsert
   */
  export type DrugUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Drug
     */
    select?: DrugSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Drug
     */
    omit?: DrugOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrugInclude<ExtArgs> | null
    /**
     * The filter to search for the Drug to update in case it exists.
     */
    where: DrugWhereUniqueInput
    /**
     * In case the Drug found by the `where` argument doesn't exist, create a new Drug with this data.
     */
    create: XOR<DrugCreateInput, DrugUncheckedCreateInput>
    /**
     * In case the Drug was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DrugUpdateInput, DrugUncheckedUpdateInput>
  }

  /**
   * Drug delete
   */
  export type DrugDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Drug
     */
    select?: DrugSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Drug
     */
    omit?: DrugOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrugInclude<ExtArgs> | null
    /**
     * Filter which Drug to delete.
     */
    where: DrugWhereUniqueInput
  }

  /**
   * Drug deleteMany
   */
  export type DrugDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Drugs to delete
     */
    where?: DrugWhereInput
    /**
     * Limit how many Drugs to delete.
     */
    limit?: number
  }

  /**
   * Drug.orderItems
   */
  export type Drug$orderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    cursor?: OrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * Drug.rcpaData
   */
  export type Drug$rcpaDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RcpaDrugData
     */
    select?: RcpaDrugDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RcpaDrugData
     */
    omit?: RcpaDrugDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RcpaDrugDataInclude<ExtArgs> | null
    where?: RcpaDrugDataWhereInput
    orderBy?: RcpaDrugDataOrderByWithRelationInput | RcpaDrugDataOrderByWithRelationInput[]
    cursor?: RcpaDrugDataWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RcpaDrugDataScalarFieldEnum | RcpaDrugDataScalarFieldEnum[]
  }

  /**
   * Drug.UserDrugInventory
   */
  export type Drug$UserDrugInventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDrugInventory
     */
    select?: UserDrugInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDrugInventory
     */
    omit?: UserDrugInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDrugInventoryInclude<ExtArgs> | null
    where?: UserDrugInventoryWhereInput
    orderBy?: UserDrugInventoryOrderByWithRelationInput | UserDrugInventoryOrderByWithRelationInput[]
    cursor?: UserDrugInventoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserDrugInventoryScalarFieldEnum | UserDrugInventoryScalarFieldEnum[]
  }

  /**
   * Drug.DoctorDistributionDrugItem
   */
  export type Drug$DoctorDistributionDrugItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistributionDrugItem
     */
    select?: DoctorDistributionDrugItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistributionDrugItem
     */
    omit?: DoctorDistributionDrugItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionDrugItemInclude<ExtArgs> | null
    where?: DoctorDistributionDrugItemWhereInput
    orderBy?: DoctorDistributionDrugItemOrderByWithRelationInput | DoctorDistributionDrugItemOrderByWithRelationInput[]
    cursor?: DoctorDistributionDrugItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorDistributionDrugItemScalarFieldEnum | DoctorDistributionDrugItemScalarFieldEnum[]
  }

  /**
   * Drug without action
   */
  export type DrugDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Drug
     */
    select?: DrugSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Drug
     */
    omit?: DrugOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrugInclude<ExtArgs> | null
  }


  /**
   * Model Chemist
   */

  export type AggregateChemist = {
    _count: ChemistCountAggregateOutputType | null
    _avg: ChemistAvgAggregateOutputType | null
    _sum: ChemistSumAggregateOutputType | null
    _min: ChemistMinAggregateOutputType | null
    _max: ChemistMaxAggregateOutputType | null
  }

  export type ChemistAvgAggregateOutputType = {
    latitude: Decimal | null
    longitude: Decimal | null
  }

  export type ChemistSumAggregateOutputType = {
    latitude: Decimal | null
    longitude: Decimal | null
  }

  export type ChemistMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    chemistChainId: string | null
    territoryId: string | null
    name: string | null
    type: $Enums.ChemistType | null
    email: string | null
    phone: string | null
    address: string | null
    city: string | null
    state: string | null
    pincode: string | null
    latitude: Decimal | null
    longitude: Decimal | null
    description: string | null
    profilePictureUrl: string | null
    visitingHours: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    isActive: boolean | null
  }

  export type ChemistMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    chemistChainId: string | null
    territoryId: string | null
    name: string | null
    type: $Enums.ChemistType | null
    email: string | null
    phone: string | null
    address: string | null
    city: string | null
    state: string | null
    pincode: string | null
    latitude: Decimal | null
    longitude: Decimal | null
    description: string | null
    profilePictureUrl: string | null
    visitingHours: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    isActive: boolean | null
  }

  export type ChemistCountAggregateOutputType = {
    id: number
    organizationId: number
    chemistChainId: number
    territoryId: number
    name: number
    type: number
    email: number
    phone: number
    address: number
    city: number
    state: number
    pincode: number
    latitude: number
    longitude: number
    description: number
    profilePictureUrl: number
    visitingHours: number
    createdAt: number
    updatedAt: number
    createdById: number
    isActive: number
    _all: number
  }


  export type ChemistAvgAggregateInputType = {
    latitude?: true
    longitude?: true
  }

  export type ChemistSumAggregateInputType = {
    latitude?: true
    longitude?: true
  }

  export type ChemistMinAggregateInputType = {
    id?: true
    organizationId?: true
    chemistChainId?: true
    territoryId?: true
    name?: true
    type?: true
    email?: true
    phone?: true
    address?: true
    city?: true
    state?: true
    pincode?: true
    latitude?: true
    longitude?: true
    description?: true
    profilePictureUrl?: true
    visitingHours?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    isActive?: true
  }

  export type ChemistMaxAggregateInputType = {
    id?: true
    organizationId?: true
    chemistChainId?: true
    territoryId?: true
    name?: true
    type?: true
    email?: true
    phone?: true
    address?: true
    city?: true
    state?: true
    pincode?: true
    latitude?: true
    longitude?: true
    description?: true
    profilePictureUrl?: true
    visitingHours?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    isActive?: true
  }

  export type ChemistCountAggregateInputType = {
    id?: true
    organizationId?: true
    chemistChainId?: true
    territoryId?: true
    name?: true
    type?: true
    email?: true
    phone?: true
    address?: true
    city?: true
    state?: true
    pincode?: true
    latitude?: true
    longitude?: true
    description?: true
    profilePictureUrl?: true
    visitingHours?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    isActive?: true
    _all?: true
  }

  export type ChemistAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chemist to aggregate.
     */
    where?: ChemistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chemists to fetch.
     */
    orderBy?: ChemistOrderByWithRelationInput | ChemistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChemistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chemists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chemists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Chemists
    **/
    _count?: true | ChemistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChemistAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChemistSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChemistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChemistMaxAggregateInputType
  }

  export type GetChemistAggregateType<T extends ChemistAggregateArgs> = {
        [P in keyof T & keyof AggregateChemist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChemist[P]>
      : GetScalarType<T[P], AggregateChemist[P]>
  }




  export type ChemistGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChemistWhereInput
    orderBy?: ChemistOrderByWithAggregationInput | ChemistOrderByWithAggregationInput[]
    by: ChemistScalarFieldEnum[] | ChemistScalarFieldEnum
    having?: ChemistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChemistCountAggregateInputType | true
    _avg?: ChemistAvgAggregateInputType
    _sum?: ChemistSumAggregateInputType
    _min?: ChemistMinAggregateInputType
    _max?: ChemistMaxAggregateInputType
  }

  export type ChemistGroupByOutputType = {
    id: string
    organizationId: string
    chemistChainId: string | null
    territoryId: string
    name: string
    type: $Enums.ChemistType
    email: string | null
    phone: string | null
    address: string | null
    city: string | null
    state: string | null
    pincode: string | null
    latitude: Decimal | null
    longitude: Decimal | null
    description: string | null
    profilePictureUrl: string | null
    visitingHours: string | null
    createdAt: Date
    updatedAt: Date
    createdById: string
    isActive: boolean
    _count: ChemistCountAggregateOutputType | null
    _avg: ChemistAvgAggregateOutputType | null
    _sum: ChemistSumAggregateOutputType | null
    _min: ChemistMinAggregateOutputType | null
    _max: ChemistMaxAggregateOutputType | null
  }

  type GetChemistGroupByPayload<T extends ChemistGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChemistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChemistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChemistGroupByOutputType[P]>
            : GetScalarType<T[P], ChemistGroupByOutputType[P]>
        }
      >
    >


  export type ChemistSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    chemistChainId?: boolean
    territoryId?: boolean
    name?: boolean
    type?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    pincode?: boolean
    latitude?: boolean
    longitude?: boolean
    description?: boolean
    profilePictureUrl?: boolean
    visitingHours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    isActive?: boolean
    chemistChain?: boolean | Chemist$chemistChainArgs<ExtArgs>
    territory?: boolean | TerritoryDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    notes?: boolean | Chemist$notesArgs<ExtArgs>
    interactions?: boolean | Chemist$interactionsArgs<ExtArgs>
    doctorRelations?: boolean | Chemist$doctorRelationsArgs<ExtArgs>
    orders?: boolean | Chemist$ordersArgs<ExtArgs>
    rcpaReports?: boolean | Chemist$rcpaReportsArgs<ExtArgs>
    chemistTasks?: boolean | Chemist$chemistTasksArgs<ExtArgs>
    _count?: boolean | ChemistCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chemist"]>

  export type ChemistSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    chemistChainId?: boolean
    territoryId?: boolean
    name?: boolean
    type?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    pincode?: boolean
    latitude?: boolean
    longitude?: boolean
    description?: boolean
    profilePictureUrl?: boolean
    visitingHours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    isActive?: boolean
    chemistChain?: boolean | Chemist$chemistChainArgs<ExtArgs>
    territory?: boolean | TerritoryDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chemist"]>

  export type ChemistSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    chemistChainId?: boolean
    territoryId?: boolean
    name?: boolean
    type?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    pincode?: boolean
    latitude?: boolean
    longitude?: boolean
    description?: boolean
    profilePictureUrl?: boolean
    visitingHours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    isActive?: boolean
    chemistChain?: boolean | Chemist$chemistChainArgs<ExtArgs>
    territory?: boolean | TerritoryDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chemist"]>

  export type ChemistSelectScalar = {
    id?: boolean
    organizationId?: boolean
    chemistChainId?: boolean
    territoryId?: boolean
    name?: boolean
    type?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    pincode?: boolean
    latitude?: boolean
    longitude?: boolean
    description?: boolean
    profilePictureUrl?: boolean
    visitingHours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    isActive?: boolean
  }

  export type ChemistOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "chemistChainId" | "territoryId" | "name" | "type" | "email" | "phone" | "address" | "city" | "state" | "pincode" | "latitude" | "longitude" | "description" | "profilePictureUrl" | "visitingHours" | "createdAt" | "updatedAt" | "createdById" | "isActive", ExtArgs["result"]["chemist"]>
  export type ChemistInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chemistChain?: boolean | Chemist$chemistChainArgs<ExtArgs>
    territory?: boolean | TerritoryDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    notes?: boolean | Chemist$notesArgs<ExtArgs>
    interactions?: boolean | Chemist$interactionsArgs<ExtArgs>
    doctorRelations?: boolean | Chemist$doctorRelationsArgs<ExtArgs>
    orders?: boolean | Chemist$ordersArgs<ExtArgs>
    rcpaReports?: boolean | Chemist$rcpaReportsArgs<ExtArgs>
    chemistTasks?: boolean | Chemist$chemistTasksArgs<ExtArgs>
    _count?: boolean | ChemistCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChemistIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chemistChain?: boolean | Chemist$chemistChainArgs<ExtArgs>
    territory?: boolean | TerritoryDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type ChemistIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chemistChain?: boolean | Chemist$chemistChainArgs<ExtArgs>
    territory?: boolean | TerritoryDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $ChemistPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Chemist"
    objects: {
      chemistChain: Prisma.$ChemistChainPayload<ExtArgs> | null
      territory: Prisma.$TerritoryPayload<ExtArgs>
      createdBy: Prisma.$EmployeePayload<ExtArgs>
      notes: Prisma.$ChemistNotePayload<ExtArgs>[]
      interactions: Prisma.$ChemistInteractionPayload<ExtArgs>[]
      doctorRelations: Prisma.$DoctorChemistRelationPayload<ExtArgs>[]
      orders: Prisma.$OrderPayload<ExtArgs>[]
      rcpaReports: Prisma.$RcpaReportPayload<ExtArgs>[]
      chemistTasks: Prisma.$ChemistTaskPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      chemistChainId: string | null
      territoryId: string
      name: string
      type: $Enums.ChemistType
      email: string | null
      phone: string | null
      address: string | null
      city: string | null
      state: string | null
      pincode: string | null
      latitude: Prisma.Decimal | null
      longitude: Prisma.Decimal | null
      description: string | null
      profilePictureUrl: string | null
      visitingHours: string | null
      createdAt: Date
      updatedAt: Date
      createdById: string
      isActive: boolean
    }, ExtArgs["result"]["chemist"]>
    composites: {}
  }

  type ChemistGetPayload<S extends boolean | null | undefined | ChemistDefaultArgs> = $Result.GetResult<Prisma.$ChemistPayload, S>

  type ChemistCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChemistFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChemistCountAggregateInputType | true
    }

  export interface ChemistDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Chemist'], meta: { name: 'Chemist' } }
    /**
     * Find zero or one Chemist that matches the filter.
     * @param {ChemistFindUniqueArgs} args - Arguments to find a Chemist
     * @example
     * // Get one Chemist
     * const chemist = await prisma.chemist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChemistFindUniqueArgs>(args: SelectSubset<T, ChemistFindUniqueArgs<ExtArgs>>): Prisma__ChemistClient<$Result.GetResult<Prisma.$ChemistPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Chemist that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChemistFindUniqueOrThrowArgs} args - Arguments to find a Chemist
     * @example
     * // Get one Chemist
     * const chemist = await prisma.chemist.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChemistFindUniqueOrThrowArgs>(args: SelectSubset<T, ChemistFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChemistClient<$Result.GetResult<Prisma.$ChemistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Chemist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistFindFirstArgs} args - Arguments to find a Chemist
     * @example
     * // Get one Chemist
     * const chemist = await prisma.chemist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChemistFindFirstArgs>(args?: SelectSubset<T, ChemistFindFirstArgs<ExtArgs>>): Prisma__ChemistClient<$Result.GetResult<Prisma.$ChemistPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Chemist that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistFindFirstOrThrowArgs} args - Arguments to find a Chemist
     * @example
     * // Get one Chemist
     * const chemist = await prisma.chemist.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChemistFindFirstOrThrowArgs>(args?: SelectSubset<T, ChemistFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChemistClient<$Result.GetResult<Prisma.$ChemistPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Chemists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chemists
     * const chemists = await prisma.chemist.findMany()
     * 
     * // Get first 10 Chemists
     * const chemists = await prisma.chemist.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chemistWithIdOnly = await prisma.chemist.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChemistFindManyArgs>(args?: SelectSubset<T, ChemistFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChemistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Chemist.
     * @param {ChemistCreateArgs} args - Arguments to create a Chemist.
     * @example
     * // Create one Chemist
     * const Chemist = await prisma.chemist.create({
     *   data: {
     *     // ... data to create a Chemist
     *   }
     * })
     * 
     */
    create<T extends ChemistCreateArgs>(args: SelectSubset<T, ChemistCreateArgs<ExtArgs>>): Prisma__ChemistClient<$Result.GetResult<Prisma.$ChemistPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Chemists.
     * @param {ChemistCreateManyArgs} args - Arguments to create many Chemists.
     * @example
     * // Create many Chemists
     * const chemist = await prisma.chemist.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChemistCreateManyArgs>(args?: SelectSubset<T, ChemistCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Chemists and returns the data saved in the database.
     * @param {ChemistCreateManyAndReturnArgs} args - Arguments to create many Chemists.
     * @example
     * // Create many Chemists
     * const chemist = await prisma.chemist.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Chemists and only return the `id`
     * const chemistWithIdOnly = await prisma.chemist.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChemistCreateManyAndReturnArgs>(args?: SelectSubset<T, ChemistCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChemistPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Chemist.
     * @param {ChemistDeleteArgs} args - Arguments to delete one Chemist.
     * @example
     * // Delete one Chemist
     * const Chemist = await prisma.chemist.delete({
     *   where: {
     *     // ... filter to delete one Chemist
     *   }
     * })
     * 
     */
    delete<T extends ChemistDeleteArgs>(args: SelectSubset<T, ChemistDeleteArgs<ExtArgs>>): Prisma__ChemistClient<$Result.GetResult<Prisma.$ChemistPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Chemist.
     * @param {ChemistUpdateArgs} args - Arguments to update one Chemist.
     * @example
     * // Update one Chemist
     * const chemist = await prisma.chemist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChemistUpdateArgs>(args: SelectSubset<T, ChemistUpdateArgs<ExtArgs>>): Prisma__ChemistClient<$Result.GetResult<Prisma.$ChemistPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Chemists.
     * @param {ChemistDeleteManyArgs} args - Arguments to filter Chemists to delete.
     * @example
     * // Delete a few Chemists
     * const { count } = await prisma.chemist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChemistDeleteManyArgs>(args?: SelectSubset<T, ChemistDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chemists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chemists
     * const chemist = await prisma.chemist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChemistUpdateManyArgs>(args: SelectSubset<T, ChemistUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chemists and returns the data updated in the database.
     * @param {ChemistUpdateManyAndReturnArgs} args - Arguments to update many Chemists.
     * @example
     * // Update many Chemists
     * const chemist = await prisma.chemist.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Chemists and only return the `id`
     * const chemistWithIdOnly = await prisma.chemist.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChemistUpdateManyAndReturnArgs>(args: SelectSubset<T, ChemistUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChemistPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Chemist.
     * @param {ChemistUpsertArgs} args - Arguments to update or create a Chemist.
     * @example
     * // Update or create a Chemist
     * const chemist = await prisma.chemist.upsert({
     *   create: {
     *     // ... data to create a Chemist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chemist we want to update
     *   }
     * })
     */
    upsert<T extends ChemistUpsertArgs>(args: SelectSubset<T, ChemistUpsertArgs<ExtArgs>>): Prisma__ChemistClient<$Result.GetResult<Prisma.$ChemistPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Chemists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistCountArgs} args - Arguments to filter Chemists to count.
     * @example
     * // Count the number of Chemists
     * const count = await prisma.chemist.count({
     *   where: {
     *     // ... the filter for the Chemists we want to count
     *   }
     * })
    **/
    count<T extends ChemistCountArgs>(
      args?: Subset<T, ChemistCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChemistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chemist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChemistAggregateArgs>(args: Subset<T, ChemistAggregateArgs>): Prisma.PrismaPromise<GetChemistAggregateType<T>>

    /**
     * Group by Chemist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChemistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChemistGroupByArgs['orderBy'] }
        : { orderBy?: ChemistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChemistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChemistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Chemist model
   */
  readonly fields: ChemistFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Chemist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChemistClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chemistChain<T extends Chemist$chemistChainArgs<ExtArgs> = {}>(args?: Subset<T, Chemist$chemistChainArgs<ExtArgs>>): Prisma__ChemistChainClient<$Result.GetResult<Prisma.$ChemistChainPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    territory<T extends TerritoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TerritoryDefaultArgs<ExtArgs>>): Prisma__TerritoryClient<$Result.GetResult<Prisma.$TerritoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    notes<T extends Chemist$notesArgs<ExtArgs> = {}>(args?: Subset<T, Chemist$notesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChemistNotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    interactions<T extends Chemist$interactionsArgs<ExtArgs> = {}>(args?: Subset<T, Chemist$interactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChemistInteractionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    doctorRelations<T extends Chemist$doctorRelationsArgs<ExtArgs> = {}>(args?: Subset<T, Chemist$doctorRelationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorChemistRelationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    orders<T extends Chemist$ordersArgs<ExtArgs> = {}>(args?: Subset<T, Chemist$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rcpaReports<T extends Chemist$rcpaReportsArgs<ExtArgs> = {}>(args?: Subset<T, Chemist$rcpaReportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RcpaReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    chemistTasks<T extends Chemist$chemistTasksArgs<ExtArgs> = {}>(args?: Subset<T, Chemist$chemistTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChemistTaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Chemist model
   */
  interface ChemistFieldRefs {
    readonly id: FieldRef<"Chemist", 'String'>
    readonly organizationId: FieldRef<"Chemist", 'String'>
    readonly chemistChainId: FieldRef<"Chemist", 'String'>
    readonly territoryId: FieldRef<"Chemist", 'String'>
    readonly name: FieldRef<"Chemist", 'String'>
    readonly type: FieldRef<"Chemist", 'ChemistType'>
    readonly email: FieldRef<"Chemist", 'String'>
    readonly phone: FieldRef<"Chemist", 'String'>
    readonly address: FieldRef<"Chemist", 'String'>
    readonly city: FieldRef<"Chemist", 'String'>
    readonly state: FieldRef<"Chemist", 'String'>
    readonly pincode: FieldRef<"Chemist", 'String'>
    readonly latitude: FieldRef<"Chemist", 'Decimal'>
    readonly longitude: FieldRef<"Chemist", 'Decimal'>
    readonly description: FieldRef<"Chemist", 'String'>
    readonly profilePictureUrl: FieldRef<"Chemist", 'String'>
    readonly visitingHours: FieldRef<"Chemist", 'String'>
    readonly createdAt: FieldRef<"Chemist", 'DateTime'>
    readonly updatedAt: FieldRef<"Chemist", 'DateTime'>
    readonly createdById: FieldRef<"Chemist", 'String'>
    readonly isActive: FieldRef<"Chemist", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Chemist findUnique
   */
  export type ChemistFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chemist
     */
    select?: ChemistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chemist
     */
    omit?: ChemistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistInclude<ExtArgs> | null
    /**
     * Filter, which Chemist to fetch.
     */
    where: ChemistWhereUniqueInput
  }

  /**
   * Chemist findUniqueOrThrow
   */
  export type ChemistFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chemist
     */
    select?: ChemistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chemist
     */
    omit?: ChemistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistInclude<ExtArgs> | null
    /**
     * Filter, which Chemist to fetch.
     */
    where: ChemistWhereUniqueInput
  }

  /**
   * Chemist findFirst
   */
  export type ChemistFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chemist
     */
    select?: ChemistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chemist
     */
    omit?: ChemistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistInclude<ExtArgs> | null
    /**
     * Filter, which Chemist to fetch.
     */
    where?: ChemistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chemists to fetch.
     */
    orderBy?: ChemistOrderByWithRelationInput | ChemistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chemists.
     */
    cursor?: ChemistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chemists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chemists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chemists.
     */
    distinct?: ChemistScalarFieldEnum | ChemistScalarFieldEnum[]
  }

  /**
   * Chemist findFirstOrThrow
   */
  export type ChemistFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chemist
     */
    select?: ChemistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chemist
     */
    omit?: ChemistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistInclude<ExtArgs> | null
    /**
     * Filter, which Chemist to fetch.
     */
    where?: ChemistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chemists to fetch.
     */
    orderBy?: ChemistOrderByWithRelationInput | ChemistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chemists.
     */
    cursor?: ChemistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chemists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chemists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chemists.
     */
    distinct?: ChemistScalarFieldEnum | ChemistScalarFieldEnum[]
  }

  /**
   * Chemist findMany
   */
  export type ChemistFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chemist
     */
    select?: ChemistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chemist
     */
    omit?: ChemistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistInclude<ExtArgs> | null
    /**
     * Filter, which Chemists to fetch.
     */
    where?: ChemistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chemists to fetch.
     */
    orderBy?: ChemistOrderByWithRelationInput | ChemistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Chemists.
     */
    cursor?: ChemistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chemists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chemists.
     */
    skip?: number
    distinct?: ChemistScalarFieldEnum | ChemistScalarFieldEnum[]
  }

  /**
   * Chemist create
   */
  export type ChemistCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chemist
     */
    select?: ChemistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chemist
     */
    omit?: ChemistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistInclude<ExtArgs> | null
    /**
     * The data needed to create a Chemist.
     */
    data: XOR<ChemistCreateInput, ChemistUncheckedCreateInput>
  }

  /**
   * Chemist createMany
   */
  export type ChemistCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Chemists.
     */
    data: ChemistCreateManyInput | ChemistCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Chemist createManyAndReturn
   */
  export type ChemistCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chemist
     */
    select?: ChemistSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Chemist
     */
    omit?: ChemistOmit<ExtArgs> | null
    /**
     * The data used to create many Chemists.
     */
    data: ChemistCreateManyInput | ChemistCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Chemist update
   */
  export type ChemistUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chemist
     */
    select?: ChemistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chemist
     */
    omit?: ChemistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistInclude<ExtArgs> | null
    /**
     * The data needed to update a Chemist.
     */
    data: XOR<ChemistUpdateInput, ChemistUncheckedUpdateInput>
    /**
     * Choose, which Chemist to update.
     */
    where: ChemistWhereUniqueInput
  }

  /**
   * Chemist updateMany
   */
  export type ChemistUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Chemists.
     */
    data: XOR<ChemistUpdateManyMutationInput, ChemistUncheckedUpdateManyInput>
    /**
     * Filter which Chemists to update
     */
    where?: ChemistWhereInput
    /**
     * Limit how many Chemists to update.
     */
    limit?: number
  }

  /**
   * Chemist updateManyAndReturn
   */
  export type ChemistUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chemist
     */
    select?: ChemistSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Chemist
     */
    omit?: ChemistOmit<ExtArgs> | null
    /**
     * The data used to update Chemists.
     */
    data: XOR<ChemistUpdateManyMutationInput, ChemistUncheckedUpdateManyInput>
    /**
     * Filter which Chemists to update
     */
    where?: ChemistWhereInput
    /**
     * Limit how many Chemists to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Chemist upsert
   */
  export type ChemistUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chemist
     */
    select?: ChemistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chemist
     */
    omit?: ChemistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistInclude<ExtArgs> | null
    /**
     * The filter to search for the Chemist to update in case it exists.
     */
    where: ChemistWhereUniqueInput
    /**
     * In case the Chemist found by the `where` argument doesn't exist, create a new Chemist with this data.
     */
    create: XOR<ChemistCreateInput, ChemistUncheckedCreateInput>
    /**
     * In case the Chemist was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChemistUpdateInput, ChemistUncheckedUpdateInput>
  }

  /**
   * Chemist delete
   */
  export type ChemistDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chemist
     */
    select?: ChemistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chemist
     */
    omit?: ChemistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistInclude<ExtArgs> | null
    /**
     * Filter which Chemist to delete.
     */
    where: ChemistWhereUniqueInput
  }

  /**
   * Chemist deleteMany
   */
  export type ChemistDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chemists to delete
     */
    where?: ChemistWhereInput
    /**
     * Limit how many Chemists to delete.
     */
    limit?: number
  }

  /**
   * Chemist.chemistChain
   */
  export type Chemist$chemistChainArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistChain
     */
    select?: ChemistChainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistChain
     */
    omit?: ChemistChainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistChainInclude<ExtArgs> | null
    where?: ChemistChainWhereInput
  }

  /**
   * Chemist.notes
   */
  export type Chemist$notesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistNote
     */
    select?: ChemistNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistNote
     */
    omit?: ChemistNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistNoteInclude<ExtArgs> | null
    where?: ChemistNoteWhereInput
    orderBy?: ChemistNoteOrderByWithRelationInput | ChemistNoteOrderByWithRelationInput[]
    cursor?: ChemistNoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChemistNoteScalarFieldEnum | ChemistNoteScalarFieldEnum[]
  }

  /**
   * Chemist.interactions
   */
  export type Chemist$interactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistInteraction
     */
    select?: ChemistInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistInteraction
     */
    omit?: ChemistInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistInteractionInclude<ExtArgs> | null
    where?: ChemistInteractionWhereInput
    orderBy?: ChemistInteractionOrderByWithRelationInput | ChemistInteractionOrderByWithRelationInput[]
    cursor?: ChemistInteractionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChemistInteractionScalarFieldEnum | ChemistInteractionScalarFieldEnum[]
  }

  /**
   * Chemist.doctorRelations
   */
  export type Chemist$doctorRelationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorChemistRelation
     */
    select?: DoctorChemistRelationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorChemistRelation
     */
    omit?: DoctorChemistRelationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorChemistRelationInclude<ExtArgs> | null
    where?: DoctorChemistRelationWhereInput
    orderBy?: DoctorChemistRelationOrderByWithRelationInput | DoctorChemistRelationOrderByWithRelationInput[]
    cursor?: DoctorChemistRelationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorChemistRelationScalarFieldEnum | DoctorChemistRelationScalarFieldEnum[]
  }

  /**
   * Chemist.orders
   */
  export type Chemist$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Chemist.rcpaReports
   */
  export type Chemist$rcpaReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RcpaReport
     */
    select?: RcpaReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RcpaReport
     */
    omit?: RcpaReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RcpaReportInclude<ExtArgs> | null
    where?: RcpaReportWhereInput
    orderBy?: RcpaReportOrderByWithRelationInput | RcpaReportOrderByWithRelationInput[]
    cursor?: RcpaReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RcpaReportScalarFieldEnum | RcpaReportScalarFieldEnum[]
  }

  /**
   * Chemist.chemistTasks
   */
  export type Chemist$chemistTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistTask
     */
    select?: ChemistTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistTask
     */
    omit?: ChemistTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistTaskInclude<ExtArgs> | null
    where?: ChemistTaskWhereInput
    orderBy?: ChemistTaskOrderByWithRelationInput | ChemistTaskOrderByWithRelationInput[]
    cursor?: ChemistTaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChemistTaskScalarFieldEnum | ChemistTaskScalarFieldEnum[]
  }

  /**
   * Chemist without action
   */
  export type ChemistDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chemist
     */
    select?: ChemistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chemist
     */
    omit?: ChemistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistInclude<ExtArgs> | null
  }


  /**
   * Model ChemistNote
   */

  export type AggregateChemistNote = {
    _count: ChemistNoteCountAggregateOutputType | null
    _min: ChemistNoteMinAggregateOutputType | null
    _max: ChemistNoteMaxAggregateOutputType | null
  }

  export type ChemistNoteMinAggregateOutputType = {
    id: string | null
    chemistId: string | null
    createdById: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChemistNoteMaxAggregateOutputType = {
    id: string | null
    chemistId: string | null
    createdById: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChemistNoteCountAggregateOutputType = {
    id: number
    chemistId: number
    createdById: number
    content: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ChemistNoteMinAggregateInputType = {
    id?: true
    chemistId?: true
    createdById?: true
    content?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChemistNoteMaxAggregateInputType = {
    id?: true
    chemistId?: true
    createdById?: true
    content?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChemistNoteCountAggregateInputType = {
    id?: true
    chemistId?: true
    createdById?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ChemistNoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChemistNote to aggregate.
     */
    where?: ChemistNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChemistNotes to fetch.
     */
    orderBy?: ChemistNoteOrderByWithRelationInput | ChemistNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChemistNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChemistNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChemistNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChemistNotes
    **/
    _count?: true | ChemistNoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChemistNoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChemistNoteMaxAggregateInputType
  }

  export type GetChemistNoteAggregateType<T extends ChemistNoteAggregateArgs> = {
        [P in keyof T & keyof AggregateChemistNote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChemistNote[P]>
      : GetScalarType<T[P], AggregateChemistNote[P]>
  }




  export type ChemistNoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChemistNoteWhereInput
    orderBy?: ChemistNoteOrderByWithAggregationInput | ChemistNoteOrderByWithAggregationInput[]
    by: ChemistNoteScalarFieldEnum[] | ChemistNoteScalarFieldEnum
    having?: ChemistNoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChemistNoteCountAggregateInputType | true
    _min?: ChemistNoteMinAggregateInputType
    _max?: ChemistNoteMaxAggregateInputType
  }

  export type ChemistNoteGroupByOutputType = {
    id: string
    chemistId: string
    createdById: string
    content: string
    createdAt: Date
    updatedAt: Date
    _count: ChemistNoteCountAggregateOutputType | null
    _min: ChemistNoteMinAggregateOutputType | null
    _max: ChemistNoteMaxAggregateOutputType | null
  }

  type GetChemistNoteGroupByPayload<T extends ChemistNoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChemistNoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChemistNoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChemistNoteGroupByOutputType[P]>
            : GetScalarType<T[P], ChemistNoteGroupByOutputType[P]>
        }
      >
    >


  export type ChemistNoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    chemistId?: boolean
    createdById?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chemist?: boolean | ChemistDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chemistNote"]>

  export type ChemistNoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    chemistId?: boolean
    createdById?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chemist?: boolean | ChemistDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chemistNote"]>

  export type ChemistNoteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    chemistId?: boolean
    createdById?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chemist?: boolean | ChemistDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chemistNote"]>

  export type ChemistNoteSelectScalar = {
    id?: boolean
    chemistId?: boolean
    createdById?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ChemistNoteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "chemistId" | "createdById" | "content" | "createdAt" | "updatedAt", ExtArgs["result"]["chemistNote"]>
  export type ChemistNoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chemist?: boolean | ChemistDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type ChemistNoteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chemist?: boolean | ChemistDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type ChemistNoteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chemist?: boolean | ChemistDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $ChemistNotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChemistNote"
    objects: {
      chemist: Prisma.$ChemistPayload<ExtArgs>
      createdBy: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      chemistId: string
      createdById: string
      content: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["chemistNote"]>
    composites: {}
  }

  type ChemistNoteGetPayload<S extends boolean | null | undefined | ChemistNoteDefaultArgs> = $Result.GetResult<Prisma.$ChemistNotePayload, S>

  type ChemistNoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChemistNoteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChemistNoteCountAggregateInputType | true
    }

  export interface ChemistNoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChemistNote'], meta: { name: 'ChemistNote' } }
    /**
     * Find zero or one ChemistNote that matches the filter.
     * @param {ChemistNoteFindUniqueArgs} args - Arguments to find a ChemistNote
     * @example
     * // Get one ChemistNote
     * const chemistNote = await prisma.chemistNote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChemistNoteFindUniqueArgs>(args: SelectSubset<T, ChemistNoteFindUniqueArgs<ExtArgs>>): Prisma__ChemistNoteClient<$Result.GetResult<Prisma.$ChemistNotePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChemistNote that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChemistNoteFindUniqueOrThrowArgs} args - Arguments to find a ChemistNote
     * @example
     * // Get one ChemistNote
     * const chemistNote = await prisma.chemistNote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChemistNoteFindUniqueOrThrowArgs>(args: SelectSubset<T, ChemistNoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChemistNoteClient<$Result.GetResult<Prisma.$ChemistNotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChemistNote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistNoteFindFirstArgs} args - Arguments to find a ChemistNote
     * @example
     * // Get one ChemistNote
     * const chemistNote = await prisma.chemistNote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChemistNoteFindFirstArgs>(args?: SelectSubset<T, ChemistNoteFindFirstArgs<ExtArgs>>): Prisma__ChemistNoteClient<$Result.GetResult<Prisma.$ChemistNotePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChemistNote that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistNoteFindFirstOrThrowArgs} args - Arguments to find a ChemistNote
     * @example
     * // Get one ChemistNote
     * const chemistNote = await prisma.chemistNote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChemistNoteFindFirstOrThrowArgs>(args?: SelectSubset<T, ChemistNoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChemistNoteClient<$Result.GetResult<Prisma.$ChemistNotePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChemistNotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistNoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChemistNotes
     * const chemistNotes = await prisma.chemistNote.findMany()
     * 
     * // Get first 10 ChemistNotes
     * const chemistNotes = await prisma.chemistNote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chemistNoteWithIdOnly = await prisma.chemistNote.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChemistNoteFindManyArgs>(args?: SelectSubset<T, ChemistNoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChemistNotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChemistNote.
     * @param {ChemistNoteCreateArgs} args - Arguments to create a ChemistNote.
     * @example
     * // Create one ChemistNote
     * const ChemistNote = await prisma.chemistNote.create({
     *   data: {
     *     // ... data to create a ChemistNote
     *   }
     * })
     * 
     */
    create<T extends ChemistNoteCreateArgs>(args: SelectSubset<T, ChemistNoteCreateArgs<ExtArgs>>): Prisma__ChemistNoteClient<$Result.GetResult<Prisma.$ChemistNotePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChemistNotes.
     * @param {ChemistNoteCreateManyArgs} args - Arguments to create many ChemistNotes.
     * @example
     * // Create many ChemistNotes
     * const chemistNote = await prisma.chemistNote.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChemistNoteCreateManyArgs>(args?: SelectSubset<T, ChemistNoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChemistNotes and returns the data saved in the database.
     * @param {ChemistNoteCreateManyAndReturnArgs} args - Arguments to create many ChemistNotes.
     * @example
     * // Create many ChemistNotes
     * const chemistNote = await prisma.chemistNote.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChemistNotes and only return the `id`
     * const chemistNoteWithIdOnly = await prisma.chemistNote.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChemistNoteCreateManyAndReturnArgs>(args?: SelectSubset<T, ChemistNoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChemistNotePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ChemistNote.
     * @param {ChemistNoteDeleteArgs} args - Arguments to delete one ChemistNote.
     * @example
     * // Delete one ChemistNote
     * const ChemistNote = await prisma.chemistNote.delete({
     *   where: {
     *     // ... filter to delete one ChemistNote
     *   }
     * })
     * 
     */
    delete<T extends ChemistNoteDeleteArgs>(args: SelectSubset<T, ChemistNoteDeleteArgs<ExtArgs>>): Prisma__ChemistNoteClient<$Result.GetResult<Prisma.$ChemistNotePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChemistNote.
     * @param {ChemistNoteUpdateArgs} args - Arguments to update one ChemistNote.
     * @example
     * // Update one ChemistNote
     * const chemistNote = await prisma.chemistNote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChemistNoteUpdateArgs>(args: SelectSubset<T, ChemistNoteUpdateArgs<ExtArgs>>): Prisma__ChemistNoteClient<$Result.GetResult<Prisma.$ChemistNotePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChemistNotes.
     * @param {ChemistNoteDeleteManyArgs} args - Arguments to filter ChemistNotes to delete.
     * @example
     * // Delete a few ChemistNotes
     * const { count } = await prisma.chemistNote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChemistNoteDeleteManyArgs>(args?: SelectSubset<T, ChemistNoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChemistNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistNoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChemistNotes
     * const chemistNote = await prisma.chemistNote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChemistNoteUpdateManyArgs>(args: SelectSubset<T, ChemistNoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChemistNotes and returns the data updated in the database.
     * @param {ChemistNoteUpdateManyAndReturnArgs} args - Arguments to update many ChemistNotes.
     * @example
     * // Update many ChemistNotes
     * const chemistNote = await prisma.chemistNote.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChemistNotes and only return the `id`
     * const chemistNoteWithIdOnly = await prisma.chemistNote.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChemistNoteUpdateManyAndReturnArgs>(args: SelectSubset<T, ChemistNoteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChemistNotePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ChemistNote.
     * @param {ChemistNoteUpsertArgs} args - Arguments to update or create a ChemistNote.
     * @example
     * // Update or create a ChemistNote
     * const chemistNote = await prisma.chemistNote.upsert({
     *   create: {
     *     // ... data to create a ChemistNote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChemistNote we want to update
     *   }
     * })
     */
    upsert<T extends ChemistNoteUpsertArgs>(args: SelectSubset<T, ChemistNoteUpsertArgs<ExtArgs>>): Prisma__ChemistNoteClient<$Result.GetResult<Prisma.$ChemistNotePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChemistNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistNoteCountArgs} args - Arguments to filter ChemistNotes to count.
     * @example
     * // Count the number of ChemistNotes
     * const count = await prisma.chemistNote.count({
     *   where: {
     *     // ... the filter for the ChemistNotes we want to count
     *   }
     * })
    **/
    count<T extends ChemistNoteCountArgs>(
      args?: Subset<T, ChemistNoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChemistNoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChemistNote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistNoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChemistNoteAggregateArgs>(args: Subset<T, ChemistNoteAggregateArgs>): Prisma.PrismaPromise<GetChemistNoteAggregateType<T>>

    /**
     * Group by ChemistNote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistNoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChemistNoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChemistNoteGroupByArgs['orderBy'] }
        : { orderBy?: ChemistNoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChemistNoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChemistNoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChemistNote model
   */
  readonly fields: ChemistNoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChemistNote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChemistNoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chemist<T extends ChemistDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChemistDefaultArgs<ExtArgs>>): Prisma__ChemistClient<$Result.GetResult<Prisma.$ChemistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChemistNote model
   */
  interface ChemistNoteFieldRefs {
    readonly id: FieldRef<"ChemistNote", 'String'>
    readonly chemistId: FieldRef<"ChemistNote", 'String'>
    readonly createdById: FieldRef<"ChemistNote", 'String'>
    readonly content: FieldRef<"ChemistNote", 'String'>
    readonly createdAt: FieldRef<"ChemistNote", 'DateTime'>
    readonly updatedAt: FieldRef<"ChemistNote", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ChemistNote findUnique
   */
  export type ChemistNoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistNote
     */
    select?: ChemistNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistNote
     */
    omit?: ChemistNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistNoteInclude<ExtArgs> | null
    /**
     * Filter, which ChemistNote to fetch.
     */
    where: ChemistNoteWhereUniqueInput
  }

  /**
   * ChemistNote findUniqueOrThrow
   */
  export type ChemistNoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistNote
     */
    select?: ChemistNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistNote
     */
    omit?: ChemistNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistNoteInclude<ExtArgs> | null
    /**
     * Filter, which ChemistNote to fetch.
     */
    where: ChemistNoteWhereUniqueInput
  }

  /**
   * ChemistNote findFirst
   */
  export type ChemistNoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistNote
     */
    select?: ChemistNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistNote
     */
    omit?: ChemistNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistNoteInclude<ExtArgs> | null
    /**
     * Filter, which ChemistNote to fetch.
     */
    where?: ChemistNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChemistNotes to fetch.
     */
    orderBy?: ChemistNoteOrderByWithRelationInput | ChemistNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChemistNotes.
     */
    cursor?: ChemistNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChemistNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChemistNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChemistNotes.
     */
    distinct?: ChemistNoteScalarFieldEnum | ChemistNoteScalarFieldEnum[]
  }

  /**
   * ChemistNote findFirstOrThrow
   */
  export type ChemistNoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistNote
     */
    select?: ChemistNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistNote
     */
    omit?: ChemistNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistNoteInclude<ExtArgs> | null
    /**
     * Filter, which ChemistNote to fetch.
     */
    where?: ChemistNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChemistNotes to fetch.
     */
    orderBy?: ChemistNoteOrderByWithRelationInput | ChemistNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChemistNotes.
     */
    cursor?: ChemistNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChemistNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChemistNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChemistNotes.
     */
    distinct?: ChemistNoteScalarFieldEnum | ChemistNoteScalarFieldEnum[]
  }

  /**
   * ChemistNote findMany
   */
  export type ChemistNoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistNote
     */
    select?: ChemistNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistNote
     */
    omit?: ChemistNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistNoteInclude<ExtArgs> | null
    /**
     * Filter, which ChemistNotes to fetch.
     */
    where?: ChemistNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChemistNotes to fetch.
     */
    orderBy?: ChemistNoteOrderByWithRelationInput | ChemistNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChemistNotes.
     */
    cursor?: ChemistNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChemistNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChemistNotes.
     */
    skip?: number
    distinct?: ChemistNoteScalarFieldEnum | ChemistNoteScalarFieldEnum[]
  }

  /**
   * ChemistNote create
   */
  export type ChemistNoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistNote
     */
    select?: ChemistNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistNote
     */
    omit?: ChemistNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistNoteInclude<ExtArgs> | null
    /**
     * The data needed to create a ChemistNote.
     */
    data: XOR<ChemistNoteCreateInput, ChemistNoteUncheckedCreateInput>
  }

  /**
   * ChemistNote createMany
   */
  export type ChemistNoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChemistNotes.
     */
    data: ChemistNoteCreateManyInput | ChemistNoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChemistNote createManyAndReturn
   */
  export type ChemistNoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistNote
     */
    select?: ChemistNoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistNote
     */
    omit?: ChemistNoteOmit<ExtArgs> | null
    /**
     * The data used to create many ChemistNotes.
     */
    data: ChemistNoteCreateManyInput | ChemistNoteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistNoteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChemistNote update
   */
  export type ChemistNoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistNote
     */
    select?: ChemistNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistNote
     */
    omit?: ChemistNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistNoteInclude<ExtArgs> | null
    /**
     * The data needed to update a ChemistNote.
     */
    data: XOR<ChemistNoteUpdateInput, ChemistNoteUncheckedUpdateInput>
    /**
     * Choose, which ChemistNote to update.
     */
    where: ChemistNoteWhereUniqueInput
  }

  /**
   * ChemistNote updateMany
   */
  export type ChemistNoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChemistNotes.
     */
    data: XOR<ChemistNoteUpdateManyMutationInput, ChemistNoteUncheckedUpdateManyInput>
    /**
     * Filter which ChemistNotes to update
     */
    where?: ChemistNoteWhereInput
    /**
     * Limit how many ChemistNotes to update.
     */
    limit?: number
  }

  /**
   * ChemistNote updateManyAndReturn
   */
  export type ChemistNoteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistNote
     */
    select?: ChemistNoteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistNote
     */
    omit?: ChemistNoteOmit<ExtArgs> | null
    /**
     * The data used to update ChemistNotes.
     */
    data: XOR<ChemistNoteUpdateManyMutationInput, ChemistNoteUncheckedUpdateManyInput>
    /**
     * Filter which ChemistNotes to update
     */
    where?: ChemistNoteWhereInput
    /**
     * Limit how many ChemistNotes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistNoteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChemistNote upsert
   */
  export type ChemistNoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistNote
     */
    select?: ChemistNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistNote
     */
    omit?: ChemistNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistNoteInclude<ExtArgs> | null
    /**
     * The filter to search for the ChemistNote to update in case it exists.
     */
    where: ChemistNoteWhereUniqueInput
    /**
     * In case the ChemistNote found by the `where` argument doesn't exist, create a new ChemistNote with this data.
     */
    create: XOR<ChemistNoteCreateInput, ChemistNoteUncheckedCreateInput>
    /**
     * In case the ChemistNote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChemistNoteUpdateInput, ChemistNoteUncheckedUpdateInput>
  }

  /**
   * ChemistNote delete
   */
  export type ChemistNoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistNote
     */
    select?: ChemistNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistNote
     */
    omit?: ChemistNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistNoteInclude<ExtArgs> | null
    /**
     * Filter which ChemistNote to delete.
     */
    where: ChemistNoteWhereUniqueInput
  }

  /**
   * ChemistNote deleteMany
   */
  export type ChemistNoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChemistNotes to delete
     */
    where?: ChemistNoteWhereInput
    /**
     * Limit how many ChemistNotes to delete.
     */
    limit?: number
  }

  /**
   * ChemistNote without action
   */
  export type ChemistNoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistNote
     */
    select?: ChemistNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistNote
     */
    omit?: ChemistNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistNoteInclude<ExtArgs> | null
  }


  /**
   * Model ChemistInteraction
   */

  export type AggregateChemistInteraction = {
    _count: ChemistInteractionCountAggregateOutputType | null
    _avg: ChemistInteractionAvgAggregateOutputType | null
    _sum: ChemistInteractionSumAggregateOutputType | null
    _min: ChemistInteractionMinAggregateOutputType | null
    _max: ChemistInteractionMaxAggregateOutputType | null
  }

  export type ChemistInteractionAvgAggregateOutputType = {
    rating: number | null
  }

  export type ChemistInteractionSumAggregateOutputType = {
    rating: number | null
  }

  export type ChemistInteractionMinAggregateOutputType = {
    id: string | null
    chemistId: string | null
    employeeId: string | null
    interactionType: $Enums.InteractionType | null
    startTime: Date | null
    endTime: Date | null
    purpose: string | null
    outcome: string | null
    comments: string | null
    rating: number | null
    createdAt: Date | null
    chemistTaskId: string | null
  }

  export type ChemistInteractionMaxAggregateOutputType = {
    id: string | null
    chemistId: string | null
    employeeId: string | null
    interactionType: $Enums.InteractionType | null
    startTime: Date | null
    endTime: Date | null
    purpose: string | null
    outcome: string | null
    comments: string | null
    rating: number | null
    createdAt: Date | null
    chemistTaskId: string | null
  }

  export type ChemistInteractionCountAggregateOutputType = {
    id: number
    chemistId: number
    employeeId: number
    interactionType: number
    startTime: number
    endTime: number
    purpose: number
    outcome: number
    comments: number
    rating: number
    createdAt: number
    chemistTaskId: number
    _all: number
  }


  export type ChemistInteractionAvgAggregateInputType = {
    rating?: true
  }

  export type ChemistInteractionSumAggregateInputType = {
    rating?: true
  }

  export type ChemistInteractionMinAggregateInputType = {
    id?: true
    chemistId?: true
    employeeId?: true
    interactionType?: true
    startTime?: true
    endTime?: true
    purpose?: true
    outcome?: true
    comments?: true
    rating?: true
    createdAt?: true
    chemistTaskId?: true
  }

  export type ChemistInteractionMaxAggregateInputType = {
    id?: true
    chemistId?: true
    employeeId?: true
    interactionType?: true
    startTime?: true
    endTime?: true
    purpose?: true
    outcome?: true
    comments?: true
    rating?: true
    createdAt?: true
    chemistTaskId?: true
  }

  export type ChemistInteractionCountAggregateInputType = {
    id?: true
    chemistId?: true
    employeeId?: true
    interactionType?: true
    startTime?: true
    endTime?: true
    purpose?: true
    outcome?: true
    comments?: true
    rating?: true
    createdAt?: true
    chemistTaskId?: true
    _all?: true
  }

  export type ChemistInteractionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChemistInteraction to aggregate.
     */
    where?: ChemistInteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChemistInteractions to fetch.
     */
    orderBy?: ChemistInteractionOrderByWithRelationInput | ChemistInteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChemistInteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChemistInteractions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChemistInteractions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChemistInteractions
    **/
    _count?: true | ChemistInteractionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChemistInteractionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChemistInteractionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChemistInteractionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChemistInteractionMaxAggregateInputType
  }

  export type GetChemistInteractionAggregateType<T extends ChemistInteractionAggregateArgs> = {
        [P in keyof T & keyof AggregateChemistInteraction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChemistInteraction[P]>
      : GetScalarType<T[P], AggregateChemistInteraction[P]>
  }




  export type ChemistInteractionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChemistInteractionWhereInput
    orderBy?: ChemistInteractionOrderByWithAggregationInput | ChemistInteractionOrderByWithAggregationInput[]
    by: ChemistInteractionScalarFieldEnum[] | ChemistInteractionScalarFieldEnum
    having?: ChemistInteractionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChemistInteractionCountAggregateInputType | true
    _avg?: ChemistInteractionAvgAggregateInputType
    _sum?: ChemistInteractionSumAggregateInputType
    _min?: ChemistInteractionMinAggregateInputType
    _max?: ChemistInteractionMaxAggregateInputType
  }

  export type ChemistInteractionGroupByOutputType = {
    id: string
    chemistId: string
    employeeId: string
    interactionType: $Enums.InteractionType
    startTime: Date
    endTime: Date | null
    purpose: string | null
    outcome: string | null
    comments: string | null
    rating: number | null
    createdAt: Date
    chemistTaskId: string | null
    _count: ChemistInteractionCountAggregateOutputType | null
    _avg: ChemistInteractionAvgAggregateOutputType | null
    _sum: ChemistInteractionSumAggregateOutputType | null
    _min: ChemistInteractionMinAggregateOutputType | null
    _max: ChemistInteractionMaxAggregateOutputType | null
  }

  type GetChemistInteractionGroupByPayload<T extends ChemistInteractionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChemistInteractionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChemistInteractionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChemistInteractionGroupByOutputType[P]>
            : GetScalarType<T[P], ChemistInteractionGroupByOutputType[P]>
        }
      >
    >


  export type ChemistInteractionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    chemistId?: boolean
    employeeId?: boolean
    interactionType?: boolean
    startTime?: boolean
    endTime?: boolean
    purpose?: boolean
    outcome?: boolean
    comments?: boolean
    rating?: boolean
    createdAt?: boolean
    chemistTaskId?: boolean
    chemist?: boolean | ChemistDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    chemistTask?: boolean | ChemistInteraction$chemistTaskArgs<ExtArgs>
  }, ExtArgs["result"]["chemistInteraction"]>

  export type ChemistInteractionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    chemistId?: boolean
    employeeId?: boolean
    interactionType?: boolean
    startTime?: boolean
    endTime?: boolean
    purpose?: boolean
    outcome?: boolean
    comments?: boolean
    rating?: boolean
    createdAt?: boolean
    chemistTaskId?: boolean
    chemist?: boolean | ChemistDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    chemistTask?: boolean | ChemistInteraction$chemistTaskArgs<ExtArgs>
  }, ExtArgs["result"]["chemistInteraction"]>

  export type ChemistInteractionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    chemistId?: boolean
    employeeId?: boolean
    interactionType?: boolean
    startTime?: boolean
    endTime?: boolean
    purpose?: boolean
    outcome?: boolean
    comments?: boolean
    rating?: boolean
    createdAt?: boolean
    chemistTaskId?: boolean
    chemist?: boolean | ChemistDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    chemistTask?: boolean | ChemistInteraction$chemistTaskArgs<ExtArgs>
  }, ExtArgs["result"]["chemistInteraction"]>

  export type ChemistInteractionSelectScalar = {
    id?: boolean
    chemistId?: boolean
    employeeId?: boolean
    interactionType?: boolean
    startTime?: boolean
    endTime?: boolean
    purpose?: boolean
    outcome?: boolean
    comments?: boolean
    rating?: boolean
    createdAt?: boolean
    chemistTaskId?: boolean
  }

  export type ChemistInteractionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "chemistId" | "employeeId" | "interactionType" | "startTime" | "endTime" | "purpose" | "outcome" | "comments" | "rating" | "createdAt" | "chemistTaskId", ExtArgs["result"]["chemistInteraction"]>
  export type ChemistInteractionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chemist?: boolean | ChemistDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    chemistTask?: boolean | ChemistInteraction$chemistTaskArgs<ExtArgs>
  }
  export type ChemistInteractionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chemist?: boolean | ChemistDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    chemistTask?: boolean | ChemistInteraction$chemistTaskArgs<ExtArgs>
  }
  export type ChemistInteractionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chemist?: boolean | ChemistDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    chemistTask?: boolean | ChemistInteraction$chemistTaskArgs<ExtArgs>
  }

  export type $ChemistInteractionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChemistInteraction"
    objects: {
      chemist: Prisma.$ChemistPayload<ExtArgs>
      employee: Prisma.$EmployeePayload<ExtArgs>
      chemistTask: Prisma.$ChemistTaskPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      chemistId: string
      employeeId: string
      interactionType: $Enums.InteractionType
      startTime: Date
      endTime: Date | null
      purpose: string | null
      outcome: string | null
      comments: string | null
      rating: number | null
      createdAt: Date
      chemistTaskId: string | null
    }, ExtArgs["result"]["chemistInteraction"]>
    composites: {}
  }

  type ChemistInteractionGetPayload<S extends boolean | null | undefined | ChemistInteractionDefaultArgs> = $Result.GetResult<Prisma.$ChemistInteractionPayload, S>

  type ChemistInteractionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChemistInteractionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChemistInteractionCountAggregateInputType | true
    }

  export interface ChemistInteractionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChemistInteraction'], meta: { name: 'ChemistInteraction' } }
    /**
     * Find zero or one ChemistInteraction that matches the filter.
     * @param {ChemistInteractionFindUniqueArgs} args - Arguments to find a ChemistInteraction
     * @example
     * // Get one ChemistInteraction
     * const chemistInteraction = await prisma.chemistInteraction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChemistInteractionFindUniqueArgs>(args: SelectSubset<T, ChemistInteractionFindUniqueArgs<ExtArgs>>): Prisma__ChemistInteractionClient<$Result.GetResult<Prisma.$ChemistInteractionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChemistInteraction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChemistInteractionFindUniqueOrThrowArgs} args - Arguments to find a ChemistInteraction
     * @example
     * // Get one ChemistInteraction
     * const chemistInteraction = await prisma.chemistInteraction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChemistInteractionFindUniqueOrThrowArgs>(args: SelectSubset<T, ChemistInteractionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChemistInteractionClient<$Result.GetResult<Prisma.$ChemistInteractionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChemistInteraction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistInteractionFindFirstArgs} args - Arguments to find a ChemistInteraction
     * @example
     * // Get one ChemistInteraction
     * const chemistInteraction = await prisma.chemistInteraction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChemistInteractionFindFirstArgs>(args?: SelectSubset<T, ChemistInteractionFindFirstArgs<ExtArgs>>): Prisma__ChemistInteractionClient<$Result.GetResult<Prisma.$ChemistInteractionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChemistInteraction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistInteractionFindFirstOrThrowArgs} args - Arguments to find a ChemistInteraction
     * @example
     * // Get one ChemistInteraction
     * const chemistInteraction = await prisma.chemistInteraction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChemistInteractionFindFirstOrThrowArgs>(args?: SelectSubset<T, ChemistInteractionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChemistInteractionClient<$Result.GetResult<Prisma.$ChemistInteractionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChemistInteractions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistInteractionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChemistInteractions
     * const chemistInteractions = await prisma.chemistInteraction.findMany()
     * 
     * // Get first 10 ChemistInteractions
     * const chemistInteractions = await prisma.chemistInteraction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chemistInteractionWithIdOnly = await prisma.chemistInteraction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChemistInteractionFindManyArgs>(args?: SelectSubset<T, ChemistInteractionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChemistInteractionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChemistInteraction.
     * @param {ChemistInteractionCreateArgs} args - Arguments to create a ChemistInteraction.
     * @example
     * // Create one ChemistInteraction
     * const ChemistInteraction = await prisma.chemistInteraction.create({
     *   data: {
     *     // ... data to create a ChemistInteraction
     *   }
     * })
     * 
     */
    create<T extends ChemistInteractionCreateArgs>(args: SelectSubset<T, ChemistInteractionCreateArgs<ExtArgs>>): Prisma__ChemistInteractionClient<$Result.GetResult<Prisma.$ChemistInteractionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChemistInteractions.
     * @param {ChemistInteractionCreateManyArgs} args - Arguments to create many ChemistInteractions.
     * @example
     * // Create many ChemistInteractions
     * const chemistInteraction = await prisma.chemistInteraction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChemistInteractionCreateManyArgs>(args?: SelectSubset<T, ChemistInteractionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChemistInteractions and returns the data saved in the database.
     * @param {ChemistInteractionCreateManyAndReturnArgs} args - Arguments to create many ChemistInteractions.
     * @example
     * // Create many ChemistInteractions
     * const chemistInteraction = await prisma.chemistInteraction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChemistInteractions and only return the `id`
     * const chemistInteractionWithIdOnly = await prisma.chemistInteraction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChemistInteractionCreateManyAndReturnArgs>(args?: SelectSubset<T, ChemistInteractionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChemistInteractionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ChemistInteraction.
     * @param {ChemistInteractionDeleteArgs} args - Arguments to delete one ChemistInteraction.
     * @example
     * // Delete one ChemistInteraction
     * const ChemistInteraction = await prisma.chemistInteraction.delete({
     *   where: {
     *     // ... filter to delete one ChemistInteraction
     *   }
     * })
     * 
     */
    delete<T extends ChemistInteractionDeleteArgs>(args: SelectSubset<T, ChemistInteractionDeleteArgs<ExtArgs>>): Prisma__ChemistInteractionClient<$Result.GetResult<Prisma.$ChemistInteractionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChemistInteraction.
     * @param {ChemistInteractionUpdateArgs} args - Arguments to update one ChemistInteraction.
     * @example
     * // Update one ChemistInteraction
     * const chemistInteraction = await prisma.chemistInteraction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChemistInteractionUpdateArgs>(args: SelectSubset<T, ChemistInteractionUpdateArgs<ExtArgs>>): Prisma__ChemistInteractionClient<$Result.GetResult<Prisma.$ChemistInteractionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChemistInteractions.
     * @param {ChemistInteractionDeleteManyArgs} args - Arguments to filter ChemistInteractions to delete.
     * @example
     * // Delete a few ChemistInteractions
     * const { count } = await prisma.chemistInteraction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChemistInteractionDeleteManyArgs>(args?: SelectSubset<T, ChemistInteractionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChemistInteractions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistInteractionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChemistInteractions
     * const chemistInteraction = await prisma.chemistInteraction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChemistInteractionUpdateManyArgs>(args: SelectSubset<T, ChemistInteractionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChemistInteractions and returns the data updated in the database.
     * @param {ChemistInteractionUpdateManyAndReturnArgs} args - Arguments to update many ChemistInteractions.
     * @example
     * // Update many ChemistInteractions
     * const chemistInteraction = await prisma.chemistInteraction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChemistInteractions and only return the `id`
     * const chemistInteractionWithIdOnly = await prisma.chemistInteraction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChemistInteractionUpdateManyAndReturnArgs>(args: SelectSubset<T, ChemistInteractionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChemistInteractionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ChemistInteraction.
     * @param {ChemistInteractionUpsertArgs} args - Arguments to update or create a ChemistInteraction.
     * @example
     * // Update or create a ChemistInteraction
     * const chemistInteraction = await prisma.chemistInteraction.upsert({
     *   create: {
     *     // ... data to create a ChemistInteraction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChemistInteraction we want to update
     *   }
     * })
     */
    upsert<T extends ChemistInteractionUpsertArgs>(args: SelectSubset<T, ChemistInteractionUpsertArgs<ExtArgs>>): Prisma__ChemistInteractionClient<$Result.GetResult<Prisma.$ChemistInteractionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChemistInteractions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistInteractionCountArgs} args - Arguments to filter ChemistInteractions to count.
     * @example
     * // Count the number of ChemistInteractions
     * const count = await prisma.chemistInteraction.count({
     *   where: {
     *     // ... the filter for the ChemistInteractions we want to count
     *   }
     * })
    **/
    count<T extends ChemistInteractionCountArgs>(
      args?: Subset<T, ChemistInteractionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChemistInteractionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChemistInteraction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistInteractionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChemistInteractionAggregateArgs>(args: Subset<T, ChemistInteractionAggregateArgs>): Prisma.PrismaPromise<GetChemistInteractionAggregateType<T>>

    /**
     * Group by ChemistInteraction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistInteractionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChemistInteractionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChemistInteractionGroupByArgs['orderBy'] }
        : { orderBy?: ChemistInteractionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChemistInteractionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChemistInteractionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChemistInteraction model
   */
  readonly fields: ChemistInteractionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChemistInteraction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChemistInteractionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chemist<T extends ChemistDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChemistDefaultArgs<ExtArgs>>): Prisma__ChemistClient<$Result.GetResult<Prisma.$ChemistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    chemistTask<T extends ChemistInteraction$chemistTaskArgs<ExtArgs> = {}>(args?: Subset<T, ChemistInteraction$chemistTaskArgs<ExtArgs>>): Prisma__ChemistTaskClient<$Result.GetResult<Prisma.$ChemistTaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChemistInteraction model
   */
  interface ChemistInteractionFieldRefs {
    readonly id: FieldRef<"ChemistInteraction", 'String'>
    readonly chemistId: FieldRef<"ChemistInteraction", 'String'>
    readonly employeeId: FieldRef<"ChemistInteraction", 'String'>
    readonly interactionType: FieldRef<"ChemistInteraction", 'InteractionType'>
    readonly startTime: FieldRef<"ChemistInteraction", 'DateTime'>
    readonly endTime: FieldRef<"ChemistInteraction", 'DateTime'>
    readonly purpose: FieldRef<"ChemistInteraction", 'String'>
    readonly outcome: FieldRef<"ChemistInteraction", 'String'>
    readonly comments: FieldRef<"ChemistInteraction", 'String'>
    readonly rating: FieldRef<"ChemistInteraction", 'Int'>
    readonly createdAt: FieldRef<"ChemistInteraction", 'DateTime'>
    readonly chemistTaskId: FieldRef<"ChemistInteraction", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ChemistInteraction findUnique
   */
  export type ChemistInteractionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistInteraction
     */
    select?: ChemistInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistInteraction
     */
    omit?: ChemistInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistInteractionInclude<ExtArgs> | null
    /**
     * Filter, which ChemistInteraction to fetch.
     */
    where: ChemistInteractionWhereUniqueInput
  }

  /**
   * ChemistInteraction findUniqueOrThrow
   */
  export type ChemistInteractionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistInteraction
     */
    select?: ChemistInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistInteraction
     */
    omit?: ChemistInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistInteractionInclude<ExtArgs> | null
    /**
     * Filter, which ChemistInteraction to fetch.
     */
    where: ChemistInteractionWhereUniqueInput
  }

  /**
   * ChemistInteraction findFirst
   */
  export type ChemistInteractionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistInteraction
     */
    select?: ChemistInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistInteraction
     */
    omit?: ChemistInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistInteractionInclude<ExtArgs> | null
    /**
     * Filter, which ChemistInteraction to fetch.
     */
    where?: ChemistInteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChemistInteractions to fetch.
     */
    orderBy?: ChemistInteractionOrderByWithRelationInput | ChemistInteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChemistInteractions.
     */
    cursor?: ChemistInteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChemistInteractions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChemistInteractions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChemistInteractions.
     */
    distinct?: ChemistInteractionScalarFieldEnum | ChemistInteractionScalarFieldEnum[]
  }

  /**
   * ChemistInteraction findFirstOrThrow
   */
  export type ChemistInteractionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistInteraction
     */
    select?: ChemistInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistInteraction
     */
    omit?: ChemistInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistInteractionInclude<ExtArgs> | null
    /**
     * Filter, which ChemistInteraction to fetch.
     */
    where?: ChemistInteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChemistInteractions to fetch.
     */
    orderBy?: ChemistInteractionOrderByWithRelationInput | ChemistInteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChemistInteractions.
     */
    cursor?: ChemistInteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChemistInteractions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChemistInteractions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChemistInteractions.
     */
    distinct?: ChemistInteractionScalarFieldEnum | ChemistInteractionScalarFieldEnum[]
  }

  /**
   * ChemistInteraction findMany
   */
  export type ChemistInteractionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistInteraction
     */
    select?: ChemistInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistInteraction
     */
    omit?: ChemistInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistInteractionInclude<ExtArgs> | null
    /**
     * Filter, which ChemistInteractions to fetch.
     */
    where?: ChemistInteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChemistInteractions to fetch.
     */
    orderBy?: ChemistInteractionOrderByWithRelationInput | ChemistInteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChemistInteractions.
     */
    cursor?: ChemistInteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChemistInteractions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChemistInteractions.
     */
    skip?: number
    distinct?: ChemistInteractionScalarFieldEnum | ChemistInteractionScalarFieldEnum[]
  }

  /**
   * ChemistInteraction create
   */
  export type ChemistInteractionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistInteraction
     */
    select?: ChemistInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistInteraction
     */
    omit?: ChemistInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistInteractionInclude<ExtArgs> | null
    /**
     * The data needed to create a ChemistInteraction.
     */
    data: XOR<ChemistInteractionCreateInput, ChemistInteractionUncheckedCreateInput>
  }

  /**
   * ChemistInteraction createMany
   */
  export type ChemistInteractionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChemistInteractions.
     */
    data: ChemistInteractionCreateManyInput | ChemistInteractionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChemistInteraction createManyAndReturn
   */
  export type ChemistInteractionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistInteraction
     */
    select?: ChemistInteractionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistInteraction
     */
    omit?: ChemistInteractionOmit<ExtArgs> | null
    /**
     * The data used to create many ChemistInteractions.
     */
    data: ChemistInteractionCreateManyInput | ChemistInteractionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistInteractionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChemistInteraction update
   */
  export type ChemistInteractionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistInteraction
     */
    select?: ChemistInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistInteraction
     */
    omit?: ChemistInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistInteractionInclude<ExtArgs> | null
    /**
     * The data needed to update a ChemistInteraction.
     */
    data: XOR<ChemistInteractionUpdateInput, ChemistInteractionUncheckedUpdateInput>
    /**
     * Choose, which ChemistInteraction to update.
     */
    where: ChemistInteractionWhereUniqueInput
  }

  /**
   * ChemistInteraction updateMany
   */
  export type ChemistInteractionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChemistInteractions.
     */
    data: XOR<ChemistInteractionUpdateManyMutationInput, ChemistInteractionUncheckedUpdateManyInput>
    /**
     * Filter which ChemistInteractions to update
     */
    where?: ChemistInteractionWhereInput
    /**
     * Limit how many ChemistInteractions to update.
     */
    limit?: number
  }

  /**
   * ChemistInteraction updateManyAndReturn
   */
  export type ChemistInteractionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistInteraction
     */
    select?: ChemistInteractionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistInteraction
     */
    omit?: ChemistInteractionOmit<ExtArgs> | null
    /**
     * The data used to update ChemistInteractions.
     */
    data: XOR<ChemistInteractionUpdateManyMutationInput, ChemistInteractionUncheckedUpdateManyInput>
    /**
     * Filter which ChemistInteractions to update
     */
    where?: ChemistInteractionWhereInput
    /**
     * Limit how many ChemistInteractions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistInteractionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChemistInteraction upsert
   */
  export type ChemistInteractionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistInteraction
     */
    select?: ChemistInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistInteraction
     */
    omit?: ChemistInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistInteractionInclude<ExtArgs> | null
    /**
     * The filter to search for the ChemistInteraction to update in case it exists.
     */
    where: ChemistInteractionWhereUniqueInput
    /**
     * In case the ChemistInteraction found by the `where` argument doesn't exist, create a new ChemistInteraction with this data.
     */
    create: XOR<ChemistInteractionCreateInput, ChemistInteractionUncheckedCreateInput>
    /**
     * In case the ChemistInteraction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChemistInteractionUpdateInput, ChemistInteractionUncheckedUpdateInput>
  }

  /**
   * ChemistInteraction delete
   */
  export type ChemistInteractionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistInteraction
     */
    select?: ChemistInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistInteraction
     */
    omit?: ChemistInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistInteractionInclude<ExtArgs> | null
    /**
     * Filter which ChemistInteraction to delete.
     */
    where: ChemistInteractionWhereUniqueInput
  }

  /**
   * ChemistInteraction deleteMany
   */
  export type ChemistInteractionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChemistInteractions to delete
     */
    where?: ChemistInteractionWhereInput
    /**
     * Limit how many ChemistInteractions to delete.
     */
    limit?: number
  }

  /**
   * ChemistInteraction.chemistTask
   */
  export type ChemistInteraction$chemistTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistTask
     */
    select?: ChemistTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistTask
     */
    omit?: ChemistTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistTaskInclude<ExtArgs> | null
    where?: ChemistTaskWhereInput
  }

  /**
   * ChemistInteraction without action
   */
  export type ChemistInteractionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistInteraction
     */
    select?: ChemistInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistInteraction
     */
    omit?: ChemistInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistInteractionInclude<ExtArgs> | null
  }


  /**
   * Model DoctorChemistRelation
   */

  export type AggregateDoctorChemistRelation = {
    _count: DoctorChemistRelationCountAggregateOutputType | null
    _min: DoctorChemistRelationMinAggregateOutputType | null
    _max: DoctorChemistRelationMaxAggregateOutputType | null
  }

  export type DoctorChemistRelationMinAggregateOutputType = {
    id: string | null
    doctorId: string | null
    chemistId: string | null
    createdAt: Date | null
    createdById: string | null
  }

  export type DoctorChemistRelationMaxAggregateOutputType = {
    id: string | null
    doctorId: string | null
    chemistId: string | null
    createdAt: Date | null
    createdById: string | null
  }

  export type DoctorChemistRelationCountAggregateOutputType = {
    id: number
    doctorId: number
    chemistId: number
    createdAt: number
    createdById: number
    _all: number
  }


  export type DoctorChemistRelationMinAggregateInputType = {
    id?: true
    doctorId?: true
    chemistId?: true
    createdAt?: true
    createdById?: true
  }

  export type DoctorChemistRelationMaxAggregateInputType = {
    id?: true
    doctorId?: true
    chemistId?: true
    createdAt?: true
    createdById?: true
  }

  export type DoctorChemistRelationCountAggregateInputType = {
    id?: true
    doctorId?: true
    chemistId?: true
    createdAt?: true
    createdById?: true
    _all?: true
  }

  export type DoctorChemistRelationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DoctorChemistRelation to aggregate.
     */
    where?: DoctorChemistRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorChemistRelations to fetch.
     */
    orderBy?: DoctorChemistRelationOrderByWithRelationInput | DoctorChemistRelationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DoctorChemistRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorChemistRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorChemistRelations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DoctorChemistRelations
    **/
    _count?: true | DoctorChemistRelationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoctorChemistRelationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoctorChemistRelationMaxAggregateInputType
  }

  export type GetDoctorChemistRelationAggregateType<T extends DoctorChemistRelationAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctorChemistRelation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctorChemistRelation[P]>
      : GetScalarType<T[P], AggregateDoctorChemistRelation[P]>
  }




  export type DoctorChemistRelationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorChemistRelationWhereInput
    orderBy?: DoctorChemistRelationOrderByWithAggregationInput | DoctorChemistRelationOrderByWithAggregationInput[]
    by: DoctorChemistRelationScalarFieldEnum[] | DoctorChemistRelationScalarFieldEnum
    having?: DoctorChemistRelationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoctorChemistRelationCountAggregateInputType | true
    _min?: DoctorChemistRelationMinAggregateInputType
    _max?: DoctorChemistRelationMaxAggregateInputType
  }

  export type DoctorChemistRelationGroupByOutputType = {
    id: string
    doctorId: string
    chemistId: string
    createdAt: Date
    createdById: string
    _count: DoctorChemistRelationCountAggregateOutputType | null
    _min: DoctorChemistRelationMinAggregateOutputType | null
    _max: DoctorChemistRelationMaxAggregateOutputType | null
  }

  type GetDoctorChemistRelationGroupByPayload<T extends DoctorChemistRelationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DoctorChemistRelationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoctorChemistRelationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoctorChemistRelationGroupByOutputType[P]>
            : GetScalarType<T[P], DoctorChemistRelationGroupByOutputType[P]>
        }
      >
    >


  export type DoctorChemistRelationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    chemistId?: boolean
    createdAt?: boolean
    createdById?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    chemist?: boolean | ChemistDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorChemistRelation"]>

  export type DoctorChemistRelationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    chemistId?: boolean
    createdAt?: boolean
    createdById?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    chemist?: boolean | ChemistDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorChemistRelation"]>

  export type DoctorChemistRelationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    chemistId?: boolean
    createdAt?: boolean
    createdById?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    chemist?: boolean | ChemistDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorChemistRelation"]>

  export type DoctorChemistRelationSelectScalar = {
    id?: boolean
    doctorId?: boolean
    chemistId?: boolean
    createdAt?: boolean
    createdById?: boolean
  }

  export type DoctorChemistRelationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "doctorId" | "chemistId" | "createdAt" | "createdById", ExtArgs["result"]["doctorChemistRelation"]>
  export type DoctorChemistRelationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    chemist?: boolean | ChemistDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type DoctorChemistRelationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    chemist?: boolean | ChemistDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type DoctorChemistRelationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    chemist?: boolean | ChemistDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $DoctorChemistRelationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DoctorChemistRelation"
    objects: {
      doctor: Prisma.$DoctorPayload<ExtArgs>
      chemist: Prisma.$ChemistPayload<ExtArgs>
      createdBy: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      doctorId: string
      chemistId: string
      createdAt: Date
      createdById: string
    }, ExtArgs["result"]["doctorChemistRelation"]>
    composites: {}
  }

  type DoctorChemistRelationGetPayload<S extends boolean | null | undefined | DoctorChemistRelationDefaultArgs> = $Result.GetResult<Prisma.$DoctorChemistRelationPayload, S>

  type DoctorChemistRelationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DoctorChemistRelationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DoctorChemistRelationCountAggregateInputType | true
    }

  export interface DoctorChemistRelationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DoctorChemistRelation'], meta: { name: 'DoctorChemistRelation' } }
    /**
     * Find zero or one DoctorChemistRelation that matches the filter.
     * @param {DoctorChemistRelationFindUniqueArgs} args - Arguments to find a DoctorChemistRelation
     * @example
     * // Get one DoctorChemistRelation
     * const doctorChemistRelation = await prisma.doctorChemistRelation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DoctorChemistRelationFindUniqueArgs>(args: SelectSubset<T, DoctorChemistRelationFindUniqueArgs<ExtArgs>>): Prisma__DoctorChemistRelationClient<$Result.GetResult<Prisma.$DoctorChemistRelationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DoctorChemistRelation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DoctorChemistRelationFindUniqueOrThrowArgs} args - Arguments to find a DoctorChemistRelation
     * @example
     * // Get one DoctorChemistRelation
     * const doctorChemistRelation = await prisma.doctorChemistRelation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DoctorChemistRelationFindUniqueOrThrowArgs>(args: SelectSubset<T, DoctorChemistRelationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DoctorChemistRelationClient<$Result.GetResult<Prisma.$DoctorChemistRelationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DoctorChemistRelation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorChemistRelationFindFirstArgs} args - Arguments to find a DoctorChemistRelation
     * @example
     * // Get one DoctorChemistRelation
     * const doctorChemistRelation = await prisma.doctorChemistRelation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DoctorChemistRelationFindFirstArgs>(args?: SelectSubset<T, DoctorChemistRelationFindFirstArgs<ExtArgs>>): Prisma__DoctorChemistRelationClient<$Result.GetResult<Prisma.$DoctorChemistRelationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DoctorChemistRelation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorChemistRelationFindFirstOrThrowArgs} args - Arguments to find a DoctorChemistRelation
     * @example
     * // Get one DoctorChemistRelation
     * const doctorChemistRelation = await prisma.doctorChemistRelation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DoctorChemistRelationFindFirstOrThrowArgs>(args?: SelectSubset<T, DoctorChemistRelationFindFirstOrThrowArgs<ExtArgs>>): Prisma__DoctorChemistRelationClient<$Result.GetResult<Prisma.$DoctorChemistRelationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DoctorChemistRelations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorChemistRelationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DoctorChemistRelations
     * const doctorChemistRelations = await prisma.doctorChemistRelation.findMany()
     * 
     * // Get first 10 DoctorChemistRelations
     * const doctorChemistRelations = await prisma.doctorChemistRelation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doctorChemistRelationWithIdOnly = await prisma.doctorChemistRelation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DoctorChemistRelationFindManyArgs>(args?: SelectSubset<T, DoctorChemistRelationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorChemistRelationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DoctorChemistRelation.
     * @param {DoctorChemistRelationCreateArgs} args - Arguments to create a DoctorChemistRelation.
     * @example
     * // Create one DoctorChemistRelation
     * const DoctorChemistRelation = await prisma.doctorChemistRelation.create({
     *   data: {
     *     // ... data to create a DoctorChemistRelation
     *   }
     * })
     * 
     */
    create<T extends DoctorChemistRelationCreateArgs>(args: SelectSubset<T, DoctorChemistRelationCreateArgs<ExtArgs>>): Prisma__DoctorChemistRelationClient<$Result.GetResult<Prisma.$DoctorChemistRelationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DoctorChemistRelations.
     * @param {DoctorChemistRelationCreateManyArgs} args - Arguments to create many DoctorChemistRelations.
     * @example
     * // Create many DoctorChemistRelations
     * const doctorChemistRelation = await prisma.doctorChemistRelation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DoctorChemistRelationCreateManyArgs>(args?: SelectSubset<T, DoctorChemistRelationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DoctorChemistRelations and returns the data saved in the database.
     * @param {DoctorChemistRelationCreateManyAndReturnArgs} args - Arguments to create many DoctorChemistRelations.
     * @example
     * // Create many DoctorChemistRelations
     * const doctorChemistRelation = await prisma.doctorChemistRelation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DoctorChemistRelations and only return the `id`
     * const doctorChemistRelationWithIdOnly = await prisma.doctorChemistRelation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DoctorChemistRelationCreateManyAndReturnArgs>(args?: SelectSubset<T, DoctorChemistRelationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorChemistRelationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DoctorChemistRelation.
     * @param {DoctorChemistRelationDeleteArgs} args - Arguments to delete one DoctorChemistRelation.
     * @example
     * // Delete one DoctorChemistRelation
     * const DoctorChemistRelation = await prisma.doctorChemistRelation.delete({
     *   where: {
     *     // ... filter to delete one DoctorChemistRelation
     *   }
     * })
     * 
     */
    delete<T extends DoctorChemistRelationDeleteArgs>(args: SelectSubset<T, DoctorChemistRelationDeleteArgs<ExtArgs>>): Prisma__DoctorChemistRelationClient<$Result.GetResult<Prisma.$DoctorChemistRelationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DoctorChemistRelation.
     * @param {DoctorChemistRelationUpdateArgs} args - Arguments to update one DoctorChemistRelation.
     * @example
     * // Update one DoctorChemistRelation
     * const doctorChemistRelation = await prisma.doctorChemistRelation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DoctorChemistRelationUpdateArgs>(args: SelectSubset<T, DoctorChemistRelationUpdateArgs<ExtArgs>>): Prisma__DoctorChemistRelationClient<$Result.GetResult<Prisma.$DoctorChemistRelationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DoctorChemistRelations.
     * @param {DoctorChemistRelationDeleteManyArgs} args - Arguments to filter DoctorChemistRelations to delete.
     * @example
     * // Delete a few DoctorChemistRelations
     * const { count } = await prisma.doctorChemistRelation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DoctorChemistRelationDeleteManyArgs>(args?: SelectSubset<T, DoctorChemistRelationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DoctorChemistRelations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorChemistRelationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DoctorChemistRelations
     * const doctorChemistRelation = await prisma.doctorChemistRelation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DoctorChemistRelationUpdateManyArgs>(args: SelectSubset<T, DoctorChemistRelationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DoctorChemistRelations and returns the data updated in the database.
     * @param {DoctorChemistRelationUpdateManyAndReturnArgs} args - Arguments to update many DoctorChemistRelations.
     * @example
     * // Update many DoctorChemistRelations
     * const doctorChemistRelation = await prisma.doctorChemistRelation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DoctorChemistRelations and only return the `id`
     * const doctorChemistRelationWithIdOnly = await prisma.doctorChemistRelation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DoctorChemistRelationUpdateManyAndReturnArgs>(args: SelectSubset<T, DoctorChemistRelationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorChemistRelationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DoctorChemistRelation.
     * @param {DoctorChemistRelationUpsertArgs} args - Arguments to update or create a DoctorChemistRelation.
     * @example
     * // Update or create a DoctorChemistRelation
     * const doctorChemistRelation = await prisma.doctorChemistRelation.upsert({
     *   create: {
     *     // ... data to create a DoctorChemistRelation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DoctorChemistRelation we want to update
     *   }
     * })
     */
    upsert<T extends DoctorChemistRelationUpsertArgs>(args: SelectSubset<T, DoctorChemistRelationUpsertArgs<ExtArgs>>): Prisma__DoctorChemistRelationClient<$Result.GetResult<Prisma.$DoctorChemistRelationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DoctorChemistRelations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorChemistRelationCountArgs} args - Arguments to filter DoctorChemistRelations to count.
     * @example
     * // Count the number of DoctorChemistRelations
     * const count = await prisma.doctorChemistRelation.count({
     *   where: {
     *     // ... the filter for the DoctorChemistRelations we want to count
     *   }
     * })
    **/
    count<T extends DoctorChemistRelationCountArgs>(
      args?: Subset<T, DoctorChemistRelationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoctorChemistRelationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DoctorChemistRelation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorChemistRelationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoctorChemistRelationAggregateArgs>(args: Subset<T, DoctorChemistRelationAggregateArgs>): Prisma.PrismaPromise<GetDoctorChemistRelationAggregateType<T>>

    /**
     * Group by DoctorChemistRelation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorChemistRelationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DoctorChemistRelationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DoctorChemistRelationGroupByArgs['orderBy'] }
        : { orderBy?: DoctorChemistRelationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DoctorChemistRelationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctorChemistRelationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DoctorChemistRelation model
   */
  readonly fields: DoctorChemistRelationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DoctorChemistRelation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DoctorChemistRelationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    doctor<T extends DoctorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DoctorDefaultArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    chemist<T extends ChemistDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChemistDefaultArgs<ExtArgs>>): Prisma__ChemistClient<$Result.GetResult<Prisma.$ChemistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DoctorChemistRelation model
   */
  interface DoctorChemistRelationFieldRefs {
    readonly id: FieldRef<"DoctorChemistRelation", 'String'>
    readonly doctorId: FieldRef<"DoctorChemistRelation", 'String'>
    readonly chemistId: FieldRef<"DoctorChemistRelation", 'String'>
    readonly createdAt: FieldRef<"DoctorChemistRelation", 'DateTime'>
    readonly createdById: FieldRef<"DoctorChemistRelation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DoctorChemistRelation findUnique
   */
  export type DoctorChemistRelationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorChemistRelation
     */
    select?: DoctorChemistRelationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorChemistRelation
     */
    omit?: DoctorChemistRelationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorChemistRelationInclude<ExtArgs> | null
    /**
     * Filter, which DoctorChemistRelation to fetch.
     */
    where: DoctorChemistRelationWhereUniqueInput
  }

  /**
   * DoctorChemistRelation findUniqueOrThrow
   */
  export type DoctorChemistRelationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorChemistRelation
     */
    select?: DoctorChemistRelationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorChemistRelation
     */
    omit?: DoctorChemistRelationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorChemistRelationInclude<ExtArgs> | null
    /**
     * Filter, which DoctorChemistRelation to fetch.
     */
    where: DoctorChemistRelationWhereUniqueInput
  }

  /**
   * DoctorChemistRelation findFirst
   */
  export type DoctorChemistRelationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorChemistRelation
     */
    select?: DoctorChemistRelationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorChemistRelation
     */
    omit?: DoctorChemistRelationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorChemistRelationInclude<ExtArgs> | null
    /**
     * Filter, which DoctorChemistRelation to fetch.
     */
    where?: DoctorChemistRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorChemistRelations to fetch.
     */
    orderBy?: DoctorChemistRelationOrderByWithRelationInput | DoctorChemistRelationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DoctorChemistRelations.
     */
    cursor?: DoctorChemistRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorChemistRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorChemistRelations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DoctorChemistRelations.
     */
    distinct?: DoctorChemistRelationScalarFieldEnum | DoctorChemistRelationScalarFieldEnum[]
  }

  /**
   * DoctorChemistRelation findFirstOrThrow
   */
  export type DoctorChemistRelationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorChemistRelation
     */
    select?: DoctorChemistRelationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorChemistRelation
     */
    omit?: DoctorChemistRelationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorChemistRelationInclude<ExtArgs> | null
    /**
     * Filter, which DoctorChemistRelation to fetch.
     */
    where?: DoctorChemistRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorChemistRelations to fetch.
     */
    orderBy?: DoctorChemistRelationOrderByWithRelationInput | DoctorChemistRelationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DoctorChemistRelations.
     */
    cursor?: DoctorChemistRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorChemistRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorChemistRelations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DoctorChemistRelations.
     */
    distinct?: DoctorChemistRelationScalarFieldEnum | DoctorChemistRelationScalarFieldEnum[]
  }

  /**
   * DoctorChemistRelation findMany
   */
  export type DoctorChemistRelationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorChemistRelation
     */
    select?: DoctorChemistRelationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorChemistRelation
     */
    omit?: DoctorChemistRelationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorChemistRelationInclude<ExtArgs> | null
    /**
     * Filter, which DoctorChemistRelations to fetch.
     */
    where?: DoctorChemistRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorChemistRelations to fetch.
     */
    orderBy?: DoctorChemistRelationOrderByWithRelationInput | DoctorChemistRelationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DoctorChemistRelations.
     */
    cursor?: DoctorChemistRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorChemistRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorChemistRelations.
     */
    skip?: number
    distinct?: DoctorChemistRelationScalarFieldEnum | DoctorChemistRelationScalarFieldEnum[]
  }

  /**
   * DoctorChemistRelation create
   */
  export type DoctorChemistRelationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorChemistRelation
     */
    select?: DoctorChemistRelationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorChemistRelation
     */
    omit?: DoctorChemistRelationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorChemistRelationInclude<ExtArgs> | null
    /**
     * The data needed to create a DoctorChemistRelation.
     */
    data: XOR<DoctorChemistRelationCreateInput, DoctorChemistRelationUncheckedCreateInput>
  }

  /**
   * DoctorChemistRelation createMany
   */
  export type DoctorChemistRelationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DoctorChemistRelations.
     */
    data: DoctorChemistRelationCreateManyInput | DoctorChemistRelationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DoctorChemistRelation createManyAndReturn
   */
  export type DoctorChemistRelationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorChemistRelation
     */
    select?: DoctorChemistRelationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorChemistRelation
     */
    omit?: DoctorChemistRelationOmit<ExtArgs> | null
    /**
     * The data used to create many DoctorChemistRelations.
     */
    data: DoctorChemistRelationCreateManyInput | DoctorChemistRelationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorChemistRelationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DoctorChemistRelation update
   */
  export type DoctorChemistRelationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorChemistRelation
     */
    select?: DoctorChemistRelationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorChemistRelation
     */
    omit?: DoctorChemistRelationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorChemistRelationInclude<ExtArgs> | null
    /**
     * The data needed to update a DoctorChemistRelation.
     */
    data: XOR<DoctorChemistRelationUpdateInput, DoctorChemistRelationUncheckedUpdateInput>
    /**
     * Choose, which DoctorChemistRelation to update.
     */
    where: DoctorChemistRelationWhereUniqueInput
  }

  /**
   * DoctorChemistRelation updateMany
   */
  export type DoctorChemistRelationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DoctorChemistRelations.
     */
    data: XOR<DoctorChemistRelationUpdateManyMutationInput, DoctorChemistRelationUncheckedUpdateManyInput>
    /**
     * Filter which DoctorChemistRelations to update
     */
    where?: DoctorChemistRelationWhereInput
    /**
     * Limit how many DoctorChemistRelations to update.
     */
    limit?: number
  }

  /**
   * DoctorChemistRelation updateManyAndReturn
   */
  export type DoctorChemistRelationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorChemistRelation
     */
    select?: DoctorChemistRelationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorChemistRelation
     */
    omit?: DoctorChemistRelationOmit<ExtArgs> | null
    /**
     * The data used to update DoctorChemistRelations.
     */
    data: XOR<DoctorChemistRelationUpdateManyMutationInput, DoctorChemistRelationUncheckedUpdateManyInput>
    /**
     * Filter which DoctorChemistRelations to update
     */
    where?: DoctorChemistRelationWhereInput
    /**
     * Limit how many DoctorChemistRelations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorChemistRelationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DoctorChemistRelation upsert
   */
  export type DoctorChemistRelationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorChemistRelation
     */
    select?: DoctorChemistRelationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorChemistRelation
     */
    omit?: DoctorChemistRelationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorChemistRelationInclude<ExtArgs> | null
    /**
     * The filter to search for the DoctorChemistRelation to update in case it exists.
     */
    where: DoctorChemistRelationWhereUniqueInput
    /**
     * In case the DoctorChemistRelation found by the `where` argument doesn't exist, create a new DoctorChemistRelation with this data.
     */
    create: XOR<DoctorChemistRelationCreateInput, DoctorChemistRelationUncheckedCreateInput>
    /**
     * In case the DoctorChemistRelation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DoctorChemistRelationUpdateInput, DoctorChemistRelationUncheckedUpdateInput>
  }

  /**
   * DoctorChemistRelation delete
   */
  export type DoctorChemistRelationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorChemistRelation
     */
    select?: DoctorChemistRelationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorChemistRelation
     */
    omit?: DoctorChemistRelationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorChemistRelationInclude<ExtArgs> | null
    /**
     * Filter which DoctorChemistRelation to delete.
     */
    where: DoctorChemistRelationWhereUniqueInput
  }

  /**
   * DoctorChemistRelation deleteMany
   */
  export type DoctorChemistRelationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DoctorChemistRelations to delete
     */
    where?: DoctorChemistRelationWhereInput
    /**
     * Limit how many DoctorChemistRelations to delete.
     */
    limit?: number
  }

  /**
   * DoctorChemistRelation without action
   */
  export type DoctorChemistRelationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorChemistRelation
     */
    select?: DoctorChemistRelationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorChemistRelation
     */
    omit?: DoctorChemistRelationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorChemistRelationInclude<ExtArgs> | null
  }


  /**
   * Model Order
   */

  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    totalAmount: Decimal | null
  }

  export type OrderSumAggregateOutputType = {
    totalAmount: Decimal | null
  }

  export type OrderMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    chemistId: string | null
    totalAmount: Decimal | null
    status: $Enums.OrderStatus | null
    orderDate: Date | null
    deliveryDate: Date | null
    specialInstructions: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
  }

  export type OrderMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    chemistId: string | null
    totalAmount: Decimal | null
    status: $Enums.OrderStatus | null
    orderDate: Date | null
    deliveryDate: Date | null
    specialInstructions: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    organizationId: number
    chemistId: number
    totalAmount: number
    status: number
    orderDate: number
    deliveryDate: number
    specialInstructions: number
    createdAt: number
    updatedAt: number
    createdById: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    totalAmount?: true
  }

  export type OrderSumAggregateInputType = {
    totalAmount?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    organizationId?: true
    chemistId?: true
    totalAmount?: true
    status?: true
    orderDate?: true
    deliveryDate?: true
    specialInstructions?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    organizationId?: true
    chemistId?: true
    totalAmount?: true
    status?: true
    orderDate?: true
    deliveryDate?: true
    specialInstructions?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    organizationId?: true
    chemistId?: true
    totalAmount?: true
    status?: true
    orderDate?: true
    deliveryDate?: true
    specialInstructions?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    _all?: true
  }

  export type OrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order to aggregate.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type OrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithAggregationInput | OrderOrderByWithAggregationInput[]
    by: OrderScalarFieldEnum[] | OrderScalarFieldEnum
    having?: OrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }

  export type OrderGroupByOutputType = {
    id: string
    organizationId: string
    chemistId: string | null
    totalAmount: Decimal
    status: $Enums.OrderStatus
    orderDate: Date
    deliveryDate: Date | null
    specialInstructions: string | null
    createdAt: Date
    updatedAt: Date
    createdById: string
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type OrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    chemistId?: boolean
    totalAmount?: boolean
    status?: boolean
    orderDate?: boolean
    deliveryDate?: boolean
    specialInstructions?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    chemist?: boolean | Order$chemistArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    items?: boolean | Order$itemsArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    chemistId?: boolean
    totalAmount?: boolean
    status?: boolean
    orderDate?: boolean
    deliveryDate?: boolean
    specialInstructions?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    chemist?: boolean | Order$chemistArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    chemistId?: boolean
    totalAmount?: boolean
    status?: boolean
    orderDate?: boolean
    deliveryDate?: boolean
    specialInstructions?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    chemist?: boolean | Order$chemistArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectScalar = {
    id?: boolean
    organizationId?: boolean
    chemistId?: boolean
    totalAmount?: boolean
    status?: boolean
    orderDate?: boolean
    deliveryDate?: boolean
    specialInstructions?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
  }

  export type OrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "chemistId" | "totalAmount" | "status" | "orderDate" | "deliveryDate" | "specialInstructions" | "createdAt" | "updatedAt" | "createdById", ExtArgs["result"]["order"]>
  export type OrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chemist?: boolean | Order$chemistArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    items?: boolean | Order$itemsArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chemist?: boolean | Order$chemistArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type OrderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chemist?: boolean | Order$chemistArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $OrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Order"
    objects: {
      chemist: Prisma.$ChemistPayload<ExtArgs> | null
      createdBy: Prisma.$EmployeePayload<ExtArgs>
      items: Prisma.$OrderItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      chemistId: string | null
      totalAmount: Prisma.Decimal
      status: $Enums.OrderStatus
      orderDate: Date
      deliveryDate: Date | null
      specialInstructions: string | null
      createdAt: Date
      updatedAt: Date
      createdById: string
    }, ExtArgs["result"]["order"]>
    composites: {}
  }

  type OrderGetPayload<S extends boolean | null | undefined | OrderDefaultArgs> = $Result.GetResult<Prisma.$OrderPayload, S>

  type OrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface OrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Order'], meta: { name: 'Order' } }
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderFindUniqueArgs>(args: SelectSubset<T, OrderFindUniqueArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Order that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderFindFirstArgs>(args?: SelectSubset<T, OrderFindFirstArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderFindManyArgs>(args?: SelectSubset<T, OrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
     */
    create<T extends OrderCreateArgs>(args: SelectSubset<T, OrderCreateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Orders.
     * @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderCreateManyArgs>(args?: SelectSubset<T, OrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Orders and returns the data saved in the database.
     * @param {OrderCreateManyAndReturnArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
     */
    delete<T extends OrderDeleteArgs>(args: SelectSubset<T, OrderDeleteArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderUpdateArgs>(args: SelectSubset<T, OrderUpdateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderDeleteManyArgs>(args?: SelectSubset<T, OrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderUpdateManyArgs>(args: SelectSubset<T, OrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders and returns the data updated in the database.
     * @param {OrderUpdateManyAndReturnArgs} args - Arguments to update many Orders.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrderUpdateManyAndReturnArgs>(args: SelectSubset<T, OrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
     */
    upsert<T extends OrderUpsertArgs>(args: SelectSubset<T, OrderUpsertArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Order model
   */
  readonly fields: OrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chemist<T extends Order$chemistArgs<ExtArgs> = {}>(args?: Subset<T, Order$chemistArgs<ExtArgs>>): Prisma__ChemistClient<$Result.GetResult<Prisma.$ChemistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    items<T extends Order$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Order$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Order model
   */
  interface OrderFieldRefs {
    readonly id: FieldRef<"Order", 'String'>
    readonly organizationId: FieldRef<"Order", 'String'>
    readonly chemistId: FieldRef<"Order", 'String'>
    readonly totalAmount: FieldRef<"Order", 'Decimal'>
    readonly status: FieldRef<"Order", 'OrderStatus'>
    readonly orderDate: FieldRef<"Order", 'DateTime'>
    readonly deliveryDate: FieldRef<"Order", 'DateTime'>
    readonly specialInstructions: FieldRef<"Order", 'String'>
    readonly createdAt: FieldRef<"Order", 'DateTime'>
    readonly updatedAt: FieldRef<"Order", 'DateTime'>
    readonly createdById: FieldRef<"Order", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Order findUnique
   */
  export type OrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findUniqueOrThrow
   */
  export type OrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findFirst
   */
  export type OrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findFirstOrThrow
   */
  export type OrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findMany
   */
  export type OrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order create
   */
  export type OrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to create a Order.
     */
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>
  }

  /**
   * Order createMany
   */
  export type OrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Order createManyAndReturn
   */
  export type OrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Order update
   */
  export type OrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to update a Order.
     */
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
    /**
     * Choose, which Order to update.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to update.
     */
    limit?: number
  }

  /**
   * Order updateManyAndReturn
   */
  export type OrderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Order upsert
   */
  export type OrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The filter to search for the Order to update in case it exists.
     */
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     */
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
  }

  /**
   * Order delete
   */
  export type OrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter which Order to delete.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orders to delete
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to delete.
     */
    limit?: number
  }

  /**
   * Order.chemist
   */
  export type Order$chemistArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chemist
     */
    select?: ChemistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chemist
     */
    omit?: ChemistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistInclude<ExtArgs> | null
    where?: ChemistWhereInput
  }

  /**
   * Order.items
   */
  export type Order$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    cursor?: OrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * Order without action
   */
  export type OrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
  }


  /**
   * Model OrderItem
   */

  export type AggregateOrderItem = {
    _count: OrderItemCountAggregateOutputType | null
    _avg: OrderItemAvgAggregateOutputType | null
    _sum: OrderItemSumAggregateOutputType | null
    _min: OrderItemMinAggregateOutputType | null
    _max: OrderItemMaxAggregateOutputType | null
  }

  export type OrderItemAvgAggregateOutputType = {
    quantity: number | null
    unitPrice: Decimal | null
    subtotal: Decimal | null
  }

  export type OrderItemSumAggregateOutputType = {
    quantity: number | null
    unitPrice: Decimal | null
    subtotal: Decimal | null
  }

  export type OrderItemMinAggregateOutputType = {
    orderId: string | null
    drugId: string | null
    quantity: number | null
    unitPrice: Decimal | null
    subtotal: Decimal | null
    createdAt: Date | null
  }

  export type OrderItemMaxAggregateOutputType = {
    orderId: string | null
    drugId: string | null
    quantity: number | null
    unitPrice: Decimal | null
    subtotal: Decimal | null
    createdAt: Date | null
  }

  export type OrderItemCountAggregateOutputType = {
    orderId: number
    drugId: number
    quantity: number
    unitPrice: number
    subtotal: number
    createdAt: number
    _all: number
  }


  export type OrderItemAvgAggregateInputType = {
    quantity?: true
    unitPrice?: true
    subtotal?: true
  }

  export type OrderItemSumAggregateInputType = {
    quantity?: true
    unitPrice?: true
    subtotal?: true
  }

  export type OrderItemMinAggregateInputType = {
    orderId?: true
    drugId?: true
    quantity?: true
    unitPrice?: true
    subtotal?: true
    createdAt?: true
  }

  export type OrderItemMaxAggregateInputType = {
    orderId?: true
    drugId?: true
    quantity?: true
    unitPrice?: true
    subtotal?: true
    createdAt?: true
  }

  export type OrderItemCountAggregateInputType = {
    orderId?: true
    drugId?: true
    quantity?: true
    unitPrice?: true
    subtotal?: true
    createdAt?: true
    _all?: true
  }

  export type OrderItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderItem to aggregate.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrderItems
    **/
    _count?: true | OrderItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderItemMaxAggregateInputType
  }

  export type GetOrderItemAggregateType<T extends OrderItemAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderItem[P]>
      : GetScalarType<T[P], AggregateOrderItem[P]>
  }




  export type OrderItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithAggregationInput | OrderItemOrderByWithAggregationInput[]
    by: OrderItemScalarFieldEnum[] | OrderItemScalarFieldEnum
    having?: OrderItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderItemCountAggregateInputType | true
    _avg?: OrderItemAvgAggregateInputType
    _sum?: OrderItemSumAggregateInputType
    _min?: OrderItemMinAggregateInputType
    _max?: OrderItemMaxAggregateInputType
  }

  export type OrderItemGroupByOutputType = {
    orderId: string
    drugId: string
    quantity: number
    unitPrice: Decimal
    subtotal: Decimal
    createdAt: Date
    _count: OrderItemCountAggregateOutputType | null
    _avg: OrderItemAvgAggregateOutputType | null
    _sum: OrderItemSumAggregateOutputType | null
    _min: OrderItemMinAggregateOutputType | null
    _max: OrderItemMaxAggregateOutputType | null
  }

  type GetOrderItemGroupByPayload<T extends OrderItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderItemGroupByOutputType[P]>
            : GetScalarType<T[P], OrderItemGroupByOutputType[P]>
        }
      >
    >


  export type OrderItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    orderId?: boolean
    drugId?: boolean
    quantity?: boolean
    unitPrice?: boolean
    subtotal?: boolean
    createdAt?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    drug?: boolean | DrugDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderItem"]>

  export type OrderItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    orderId?: boolean
    drugId?: boolean
    quantity?: boolean
    unitPrice?: boolean
    subtotal?: boolean
    createdAt?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    drug?: boolean | DrugDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderItem"]>

  export type OrderItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    orderId?: boolean
    drugId?: boolean
    quantity?: boolean
    unitPrice?: boolean
    subtotal?: boolean
    createdAt?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    drug?: boolean | DrugDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderItem"]>

  export type OrderItemSelectScalar = {
    orderId?: boolean
    drugId?: boolean
    quantity?: boolean
    unitPrice?: boolean
    subtotal?: boolean
    createdAt?: boolean
  }

  export type OrderItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"orderId" | "drugId" | "quantity" | "unitPrice" | "subtotal" | "createdAt", ExtArgs["result"]["orderItem"]>
  export type OrderItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    drug?: boolean | DrugDefaultArgs<ExtArgs>
  }
  export type OrderItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    drug?: boolean | DrugDefaultArgs<ExtArgs>
  }
  export type OrderItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    drug?: boolean | DrugDefaultArgs<ExtArgs>
  }

  export type $OrderItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrderItem"
    objects: {
      order: Prisma.$OrderPayload<ExtArgs>
      drug: Prisma.$DrugPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      orderId: string
      drugId: string
      quantity: number
      unitPrice: Prisma.Decimal
      subtotal: Prisma.Decimal
      createdAt: Date
    }, ExtArgs["result"]["orderItem"]>
    composites: {}
  }

  type OrderItemGetPayload<S extends boolean | null | undefined | OrderItemDefaultArgs> = $Result.GetResult<Prisma.$OrderItemPayload, S>

  type OrderItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderItemCountAggregateInputType | true
    }

  export interface OrderItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrderItem'], meta: { name: 'OrderItem' } }
    /**
     * Find zero or one OrderItem that matches the filter.
     * @param {OrderItemFindUniqueArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderItemFindUniqueArgs>(args: SelectSubset<T, OrderItemFindUniqueArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OrderItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderItemFindUniqueOrThrowArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderItemFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindFirstArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderItemFindFirstArgs>(args?: SelectSubset<T, OrderItemFindFirstArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindFirstOrThrowArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderItemFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OrderItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderItems
     * const orderItems = await prisma.orderItem.findMany()
     * 
     * // Get first 10 OrderItems
     * const orderItems = await prisma.orderItem.findMany({ take: 10 })
     * 
     * // Only select the `orderId`
     * const orderItemWithOrderIdOnly = await prisma.orderItem.findMany({ select: { orderId: true } })
     * 
     */
    findMany<T extends OrderItemFindManyArgs>(args?: SelectSubset<T, OrderItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OrderItem.
     * @param {OrderItemCreateArgs} args - Arguments to create a OrderItem.
     * @example
     * // Create one OrderItem
     * const OrderItem = await prisma.orderItem.create({
     *   data: {
     *     // ... data to create a OrderItem
     *   }
     * })
     * 
     */
    create<T extends OrderItemCreateArgs>(args: SelectSubset<T, OrderItemCreateArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OrderItems.
     * @param {OrderItemCreateManyArgs} args - Arguments to create many OrderItems.
     * @example
     * // Create many OrderItems
     * const orderItem = await prisma.orderItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderItemCreateManyArgs>(args?: SelectSubset<T, OrderItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OrderItems and returns the data saved in the database.
     * @param {OrderItemCreateManyAndReturnArgs} args - Arguments to create many OrderItems.
     * @example
     * // Create many OrderItems
     * const orderItem = await prisma.orderItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OrderItems and only return the `orderId`
     * const orderItemWithOrderIdOnly = await prisma.orderItem.createManyAndReturn({
     *   select: { orderId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderItemCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OrderItem.
     * @param {OrderItemDeleteArgs} args - Arguments to delete one OrderItem.
     * @example
     * // Delete one OrderItem
     * const OrderItem = await prisma.orderItem.delete({
     *   where: {
     *     // ... filter to delete one OrderItem
     *   }
     * })
     * 
     */
    delete<T extends OrderItemDeleteArgs>(args: SelectSubset<T, OrderItemDeleteArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OrderItem.
     * @param {OrderItemUpdateArgs} args - Arguments to update one OrderItem.
     * @example
     * // Update one OrderItem
     * const orderItem = await prisma.orderItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderItemUpdateArgs>(args: SelectSubset<T, OrderItemUpdateArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OrderItems.
     * @param {OrderItemDeleteManyArgs} args - Arguments to filter OrderItems to delete.
     * @example
     * // Delete a few OrderItems
     * const { count } = await prisma.orderItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderItemDeleteManyArgs>(args?: SelectSubset<T, OrderItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderItems
     * const orderItem = await prisma.orderItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderItemUpdateManyArgs>(args: SelectSubset<T, OrderItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderItems and returns the data updated in the database.
     * @param {OrderItemUpdateManyAndReturnArgs} args - Arguments to update many OrderItems.
     * @example
     * // Update many OrderItems
     * const orderItem = await prisma.orderItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OrderItems and only return the `orderId`
     * const orderItemWithOrderIdOnly = await prisma.orderItem.updateManyAndReturn({
     *   select: { orderId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrderItemUpdateManyAndReturnArgs>(args: SelectSubset<T, OrderItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OrderItem.
     * @param {OrderItemUpsertArgs} args - Arguments to update or create a OrderItem.
     * @example
     * // Update or create a OrderItem
     * const orderItem = await prisma.orderItem.upsert({
     *   create: {
     *     // ... data to create a OrderItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderItem we want to update
     *   }
     * })
     */
    upsert<T extends OrderItemUpsertArgs>(args: SelectSubset<T, OrderItemUpsertArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemCountArgs} args - Arguments to filter OrderItems to count.
     * @example
     * // Count the number of OrderItems
     * const count = await prisma.orderItem.count({
     *   where: {
     *     // ... the filter for the OrderItems we want to count
     *   }
     * })
    **/
    count<T extends OrderItemCountArgs>(
      args?: Subset<T, OrderItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderItemAggregateArgs>(args: Subset<T, OrderItemAggregateArgs>): Prisma.PrismaPromise<GetOrderItemAggregateType<T>>

    /**
     * Group by OrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderItemGroupByArgs['orderBy'] }
        : { orderBy?: OrderItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrderItem model
   */
  readonly fields: OrderItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    drug<T extends DrugDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DrugDefaultArgs<ExtArgs>>): Prisma__DrugClient<$Result.GetResult<Prisma.$DrugPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrderItem model
   */
  interface OrderItemFieldRefs {
    readonly orderId: FieldRef<"OrderItem", 'String'>
    readonly drugId: FieldRef<"OrderItem", 'String'>
    readonly quantity: FieldRef<"OrderItem", 'Int'>
    readonly unitPrice: FieldRef<"OrderItem", 'Decimal'>
    readonly subtotal: FieldRef<"OrderItem", 'Decimal'>
    readonly createdAt: FieldRef<"OrderItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OrderItem findUnique
   */
  export type OrderItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem findUniqueOrThrow
   */
  export type OrderItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem findFirst
   */
  export type OrderItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderItems.
     */
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem findFirstOrThrow
   */
  export type OrderItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderItems.
     */
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem findMany
   */
  export type OrderItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItems to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem create
   */
  export type OrderItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The data needed to create a OrderItem.
     */
    data: XOR<OrderItemCreateInput, OrderItemUncheckedCreateInput>
  }

  /**
   * OrderItem createMany
   */
  export type OrderItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrderItems.
     */
    data: OrderItemCreateManyInput | OrderItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrderItem createManyAndReturn
   */
  export type OrderItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * The data used to create many OrderItems.
     */
    data: OrderItemCreateManyInput | OrderItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderItem update
   */
  export type OrderItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The data needed to update a OrderItem.
     */
    data: XOR<OrderItemUpdateInput, OrderItemUncheckedUpdateInput>
    /**
     * Choose, which OrderItem to update.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem updateMany
   */
  export type OrderItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrderItems.
     */
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyInput>
    /**
     * Filter which OrderItems to update
     */
    where?: OrderItemWhereInput
    /**
     * Limit how many OrderItems to update.
     */
    limit?: number
  }

  /**
   * OrderItem updateManyAndReturn
   */
  export type OrderItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * The data used to update OrderItems.
     */
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyInput>
    /**
     * Filter which OrderItems to update
     */
    where?: OrderItemWhereInput
    /**
     * Limit how many OrderItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderItem upsert
   */
  export type OrderItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The filter to search for the OrderItem to update in case it exists.
     */
    where: OrderItemWhereUniqueInput
    /**
     * In case the OrderItem found by the `where` argument doesn't exist, create a new OrderItem with this data.
     */
    create: XOR<OrderItemCreateInput, OrderItemUncheckedCreateInput>
    /**
     * In case the OrderItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderItemUpdateInput, OrderItemUncheckedUpdateInput>
  }

  /**
   * OrderItem delete
   */
  export type OrderItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter which OrderItem to delete.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem deleteMany
   */
  export type OrderItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderItems to delete
     */
    where?: OrderItemWhereInput
    /**
     * Limit how many OrderItems to delete.
     */
    limit?: number
  }

  /**
   * OrderItem without action
   */
  export type OrderItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
  }


  /**
   * Model DcrReport
   */

  export type AggregateDcrReport = {
    _count: DcrReportCountAggregateOutputType | null
    _min: DcrReportMinAggregateOutputType | null
    _max: DcrReportMaxAggregateOutputType | null
  }

  export type DcrReportMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    employeeId: string | null
    taskId: string | null
    taskType: $Enums.TaskTypeReference | null
    reportDate: Date | null
    productsDiscussed: string | null
    comments: string | null
    isDraft: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DcrReportMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    employeeId: string | null
    taskId: string | null
    taskType: $Enums.TaskTypeReference | null
    reportDate: Date | null
    productsDiscussed: string | null
    comments: string | null
    isDraft: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DcrReportCountAggregateOutputType = {
    id: number
    organizationId: number
    employeeId: number
    taskId: number
    taskType: number
    reportDate: number
    productsDiscussed: number
    comments: number
    isDraft: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DcrReportMinAggregateInputType = {
    id?: true
    organizationId?: true
    employeeId?: true
    taskId?: true
    taskType?: true
    reportDate?: true
    productsDiscussed?: true
    comments?: true
    isDraft?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DcrReportMaxAggregateInputType = {
    id?: true
    organizationId?: true
    employeeId?: true
    taskId?: true
    taskType?: true
    reportDate?: true
    productsDiscussed?: true
    comments?: true
    isDraft?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DcrReportCountAggregateInputType = {
    id?: true
    organizationId?: true
    employeeId?: true
    taskId?: true
    taskType?: true
    reportDate?: true
    productsDiscussed?: true
    comments?: true
    isDraft?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DcrReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DcrReport to aggregate.
     */
    where?: DcrReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DcrReports to fetch.
     */
    orderBy?: DcrReportOrderByWithRelationInput | DcrReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DcrReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DcrReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DcrReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DcrReports
    **/
    _count?: true | DcrReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DcrReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DcrReportMaxAggregateInputType
  }

  export type GetDcrReportAggregateType<T extends DcrReportAggregateArgs> = {
        [P in keyof T & keyof AggregateDcrReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDcrReport[P]>
      : GetScalarType<T[P], AggregateDcrReport[P]>
  }




  export type DcrReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DcrReportWhereInput
    orderBy?: DcrReportOrderByWithAggregationInput | DcrReportOrderByWithAggregationInput[]
    by: DcrReportScalarFieldEnum[] | DcrReportScalarFieldEnum
    having?: DcrReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DcrReportCountAggregateInputType | true
    _min?: DcrReportMinAggregateInputType
    _max?: DcrReportMaxAggregateInputType
  }

  export type DcrReportGroupByOutputType = {
    id: string
    organizationId: string
    employeeId: string
    taskId: string | null
    taskType: $Enums.TaskTypeReference | null
    reportDate: Date
    productsDiscussed: string | null
    comments: string | null
    isDraft: boolean
    createdAt: Date
    updatedAt: Date
    _count: DcrReportCountAggregateOutputType | null
    _min: DcrReportMinAggregateOutputType | null
    _max: DcrReportMaxAggregateOutputType | null
  }

  type GetDcrReportGroupByPayload<T extends DcrReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DcrReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DcrReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DcrReportGroupByOutputType[P]>
            : GetScalarType<T[P], DcrReportGroupByOutputType[P]>
        }
      >
    >


  export type DcrReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    employeeId?: boolean
    taskId?: boolean
    taskType?: boolean
    reportDate?: boolean
    productsDiscussed?: boolean
    comments?: boolean
    isDraft?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    doctorTask?: boolean | DcrReport$doctorTaskArgs<ExtArgs>
    chemistTask?: boolean | DcrReport$chemistTaskArgs<ExtArgs>
    tourPlanTask?: boolean | DcrReport$tourPlanTaskArgs<ExtArgs>
  }, ExtArgs["result"]["dcrReport"]>

  export type DcrReportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    employeeId?: boolean
    taskId?: boolean
    taskType?: boolean
    reportDate?: boolean
    productsDiscussed?: boolean
    comments?: boolean
    isDraft?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    doctorTask?: boolean | DcrReport$doctorTaskArgs<ExtArgs>
    chemistTask?: boolean | DcrReport$chemistTaskArgs<ExtArgs>
    tourPlanTask?: boolean | DcrReport$tourPlanTaskArgs<ExtArgs>
  }, ExtArgs["result"]["dcrReport"]>

  export type DcrReportSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    employeeId?: boolean
    taskId?: boolean
    taskType?: boolean
    reportDate?: boolean
    productsDiscussed?: boolean
    comments?: boolean
    isDraft?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    doctorTask?: boolean | DcrReport$doctorTaskArgs<ExtArgs>
    chemistTask?: boolean | DcrReport$chemistTaskArgs<ExtArgs>
    tourPlanTask?: boolean | DcrReport$tourPlanTaskArgs<ExtArgs>
  }, ExtArgs["result"]["dcrReport"]>

  export type DcrReportSelectScalar = {
    id?: boolean
    organizationId?: boolean
    employeeId?: boolean
    taskId?: boolean
    taskType?: boolean
    reportDate?: boolean
    productsDiscussed?: boolean
    comments?: boolean
    isDraft?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DcrReportOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "employeeId" | "taskId" | "taskType" | "reportDate" | "productsDiscussed" | "comments" | "isDraft" | "createdAt" | "updatedAt", ExtArgs["result"]["dcrReport"]>
  export type DcrReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    doctorTask?: boolean | DcrReport$doctorTaskArgs<ExtArgs>
    chemistTask?: boolean | DcrReport$chemistTaskArgs<ExtArgs>
    tourPlanTask?: boolean | DcrReport$tourPlanTaskArgs<ExtArgs>
  }
  export type DcrReportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    doctorTask?: boolean | DcrReport$doctorTaskArgs<ExtArgs>
    chemistTask?: boolean | DcrReport$chemistTaskArgs<ExtArgs>
    tourPlanTask?: boolean | DcrReport$tourPlanTaskArgs<ExtArgs>
  }
  export type DcrReportIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    doctorTask?: boolean | DcrReport$doctorTaskArgs<ExtArgs>
    chemistTask?: boolean | DcrReport$chemistTaskArgs<ExtArgs>
    tourPlanTask?: boolean | DcrReport$tourPlanTaskArgs<ExtArgs>
  }

  export type $DcrReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DcrReport"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
      doctorTask: Prisma.$DoctorTaskPayload<ExtArgs> | null
      chemistTask: Prisma.$ChemistTaskPayload<ExtArgs> | null
      tourPlanTask: Prisma.$TourPlanTaskPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      employeeId: string
      taskId: string | null
      taskType: $Enums.TaskTypeReference | null
      reportDate: Date
      productsDiscussed: string | null
      comments: string | null
      isDraft: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["dcrReport"]>
    composites: {}
  }

  type DcrReportGetPayload<S extends boolean | null | undefined | DcrReportDefaultArgs> = $Result.GetResult<Prisma.$DcrReportPayload, S>

  type DcrReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DcrReportFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DcrReportCountAggregateInputType | true
    }

  export interface DcrReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DcrReport'], meta: { name: 'DcrReport' } }
    /**
     * Find zero or one DcrReport that matches the filter.
     * @param {DcrReportFindUniqueArgs} args - Arguments to find a DcrReport
     * @example
     * // Get one DcrReport
     * const dcrReport = await prisma.dcrReport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DcrReportFindUniqueArgs>(args: SelectSubset<T, DcrReportFindUniqueArgs<ExtArgs>>): Prisma__DcrReportClient<$Result.GetResult<Prisma.$DcrReportPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DcrReport that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DcrReportFindUniqueOrThrowArgs} args - Arguments to find a DcrReport
     * @example
     * // Get one DcrReport
     * const dcrReport = await prisma.dcrReport.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DcrReportFindUniqueOrThrowArgs>(args: SelectSubset<T, DcrReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DcrReportClient<$Result.GetResult<Prisma.$DcrReportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DcrReport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DcrReportFindFirstArgs} args - Arguments to find a DcrReport
     * @example
     * // Get one DcrReport
     * const dcrReport = await prisma.dcrReport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DcrReportFindFirstArgs>(args?: SelectSubset<T, DcrReportFindFirstArgs<ExtArgs>>): Prisma__DcrReportClient<$Result.GetResult<Prisma.$DcrReportPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DcrReport that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DcrReportFindFirstOrThrowArgs} args - Arguments to find a DcrReport
     * @example
     * // Get one DcrReport
     * const dcrReport = await prisma.dcrReport.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DcrReportFindFirstOrThrowArgs>(args?: SelectSubset<T, DcrReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__DcrReportClient<$Result.GetResult<Prisma.$DcrReportPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DcrReports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DcrReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DcrReports
     * const dcrReports = await prisma.dcrReport.findMany()
     * 
     * // Get first 10 DcrReports
     * const dcrReports = await prisma.dcrReport.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dcrReportWithIdOnly = await prisma.dcrReport.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DcrReportFindManyArgs>(args?: SelectSubset<T, DcrReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DcrReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DcrReport.
     * @param {DcrReportCreateArgs} args - Arguments to create a DcrReport.
     * @example
     * // Create one DcrReport
     * const DcrReport = await prisma.dcrReport.create({
     *   data: {
     *     // ... data to create a DcrReport
     *   }
     * })
     * 
     */
    create<T extends DcrReportCreateArgs>(args: SelectSubset<T, DcrReportCreateArgs<ExtArgs>>): Prisma__DcrReportClient<$Result.GetResult<Prisma.$DcrReportPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DcrReports.
     * @param {DcrReportCreateManyArgs} args - Arguments to create many DcrReports.
     * @example
     * // Create many DcrReports
     * const dcrReport = await prisma.dcrReport.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DcrReportCreateManyArgs>(args?: SelectSubset<T, DcrReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DcrReports and returns the data saved in the database.
     * @param {DcrReportCreateManyAndReturnArgs} args - Arguments to create many DcrReports.
     * @example
     * // Create many DcrReports
     * const dcrReport = await prisma.dcrReport.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DcrReports and only return the `id`
     * const dcrReportWithIdOnly = await prisma.dcrReport.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DcrReportCreateManyAndReturnArgs>(args?: SelectSubset<T, DcrReportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DcrReportPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DcrReport.
     * @param {DcrReportDeleteArgs} args - Arguments to delete one DcrReport.
     * @example
     * // Delete one DcrReport
     * const DcrReport = await prisma.dcrReport.delete({
     *   where: {
     *     // ... filter to delete one DcrReport
     *   }
     * })
     * 
     */
    delete<T extends DcrReportDeleteArgs>(args: SelectSubset<T, DcrReportDeleteArgs<ExtArgs>>): Prisma__DcrReportClient<$Result.GetResult<Prisma.$DcrReportPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DcrReport.
     * @param {DcrReportUpdateArgs} args - Arguments to update one DcrReport.
     * @example
     * // Update one DcrReport
     * const dcrReport = await prisma.dcrReport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DcrReportUpdateArgs>(args: SelectSubset<T, DcrReportUpdateArgs<ExtArgs>>): Prisma__DcrReportClient<$Result.GetResult<Prisma.$DcrReportPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DcrReports.
     * @param {DcrReportDeleteManyArgs} args - Arguments to filter DcrReports to delete.
     * @example
     * // Delete a few DcrReports
     * const { count } = await prisma.dcrReport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DcrReportDeleteManyArgs>(args?: SelectSubset<T, DcrReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DcrReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DcrReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DcrReports
     * const dcrReport = await prisma.dcrReport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DcrReportUpdateManyArgs>(args: SelectSubset<T, DcrReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DcrReports and returns the data updated in the database.
     * @param {DcrReportUpdateManyAndReturnArgs} args - Arguments to update many DcrReports.
     * @example
     * // Update many DcrReports
     * const dcrReport = await prisma.dcrReport.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DcrReports and only return the `id`
     * const dcrReportWithIdOnly = await prisma.dcrReport.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DcrReportUpdateManyAndReturnArgs>(args: SelectSubset<T, DcrReportUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DcrReportPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DcrReport.
     * @param {DcrReportUpsertArgs} args - Arguments to update or create a DcrReport.
     * @example
     * // Update or create a DcrReport
     * const dcrReport = await prisma.dcrReport.upsert({
     *   create: {
     *     // ... data to create a DcrReport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DcrReport we want to update
     *   }
     * })
     */
    upsert<T extends DcrReportUpsertArgs>(args: SelectSubset<T, DcrReportUpsertArgs<ExtArgs>>): Prisma__DcrReportClient<$Result.GetResult<Prisma.$DcrReportPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DcrReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DcrReportCountArgs} args - Arguments to filter DcrReports to count.
     * @example
     * // Count the number of DcrReports
     * const count = await prisma.dcrReport.count({
     *   where: {
     *     // ... the filter for the DcrReports we want to count
     *   }
     * })
    **/
    count<T extends DcrReportCountArgs>(
      args?: Subset<T, DcrReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DcrReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DcrReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DcrReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DcrReportAggregateArgs>(args: Subset<T, DcrReportAggregateArgs>): Prisma.PrismaPromise<GetDcrReportAggregateType<T>>

    /**
     * Group by DcrReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DcrReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DcrReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DcrReportGroupByArgs['orderBy'] }
        : { orderBy?: DcrReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DcrReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDcrReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DcrReport model
   */
  readonly fields: DcrReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DcrReport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DcrReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    doctorTask<T extends DcrReport$doctorTaskArgs<ExtArgs> = {}>(args?: Subset<T, DcrReport$doctorTaskArgs<ExtArgs>>): Prisma__DoctorTaskClient<$Result.GetResult<Prisma.$DoctorTaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    chemistTask<T extends DcrReport$chemistTaskArgs<ExtArgs> = {}>(args?: Subset<T, DcrReport$chemistTaskArgs<ExtArgs>>): Prisma__ChemistTaskClient<$Result.GetResult<Prisma.$ChemistTaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    tourPlanTask<T extends DcrReport$tourPlanTaskArgs<ExtArgs> = {}>(args?: Subset<T, DcrReport$tourPlanTaskArgs<ExtArgs>>): Prisma__TourPlanTaskClient<$Result.GetResult<Prisma.$TourPlanTaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DcrReport model
   */
  interface DcrReportFieldRefs {
    readonly id: FieldRef<"DcrReport", 'String'>
    readonly organizationId: FieldRef<"DcrReport", 'String'>
    readonly employeeId: FieldRef<"DcrReport", 'String'>
    readonly taskId: FieldRef<"DcrReport", 'String'>
    readonly taskType: FieldRef<"DcrReport", 'TaskTypeReference'>
    readonly reportDate: FieldRef<"DcrReport", 'DateTime'>
    readonly productsDiscussed: FieldRef<"DcrReport", 'String'>
    readonly comments: FieldRef<"DcrReport", 'String'>
    readonly isDraft: FieldRef<"DcrReport", 'Boolean'>
    readonly createdAt: FieldRef<"DcrReport", 'DateTime'>
    readonly updatedAt: FieldRef<"DcrReport", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DcrReport findUnique
   */
  export type DcrReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DcrReport
     */
    select?: DcrReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DcrReport
     */
    omit?: DcrReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DcrReportInclude<ExtArgs> | null
    /**
     * Filter, which DcrReport to fetch.
     */
    where: DcrReportWhereUniqueInput
  }

  /**
   * DcrReport findUniqueOrThrow
   */
  export type DcrReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DcrReport
     */
    select?: DcrReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DcrReport
     */
    omit?: DcrReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DcrReportInclude<ExtArgs> | null
    /**
     * Filter, which DcrReport to fetch.
     */
    where: DcrReportWhereUniqueInput
  }

  /**
   * DcrReport findFirst
   */
  export type DcrReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DcrReport
     */
    select?: DcrReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DcrReport
     */
    omit?: DcrReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DcrReportInclude<ExtArgs> | null
    /**
     * Filter, which DcrReport to fetch.
     */
    where?: DcrReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DcrReports to fetch.
     */
    orderBy?: DcrReportOrderByWithRelationInput | DcrReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DcrReports.
     */
    cursor?: DcrReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DcrReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DcrReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DcrReports.
     */
    distinct?: DcrReportScalarFieldEnum | DcrReportScalarFieldEnum[]
  }

  /**
   * DcrReport findFirstOrThrow
   */
  export type DcrReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DcrReport
     */
    select?: DcrReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DcrReport
     */
    omit?: DcrReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DcrReportInclude<ExtArgs> | null
    /**
     * Filter, which DcrReport to fetch.
     */
    where?: DcrReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DcrReports to fetch.
     */
    orderBy?: DcrReportOrderByWithRelationInput | DcrReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DcrReports.
     */
    cursor?: DcrReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DcrReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DcrReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DcrReports.
     */
    distinct?: DcrReportScalarFieldEnum | DcrReportScalarFieldEnum[]
  }

  /**
   * DcrReport findMany
   */
  export type DcrReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DcrReport
     */
    select?: DcrReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DcrReport
     */
    omit?: DcrReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DcrReportInclude<ExtArgs> | null
    /**
     * Filter, which DcrReports to fetch.
     */
    where?: DcrReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DcrReports to fetch.
     */
    orderBy?: DcrReportOrderByWithRelationInput | DcrReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DcrReports.
     */
    cursor?: DcrReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DcrReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DcrReports.
     */
    skip?: number
    distinct?: DcrReportScalarFieldEnum | DcrReportScalarFieldEnum[]
  }

  /**
   * DcrReport create
   */
  export type DcrReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DcrReport
     */
    select?: DcrReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DcrReport
     */
    omit?: DcrReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DcrReportInclude<ExtArgs> | null
    /**
     * The data needed to create a DcrReport.
     */
    data: XOR<DcrReportCreateInput, DcrReportUncheckedCreateInput>
  }

  /**
   * DcrReport createMany
   */
  export type DcrReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DcrReports.
     */
    data: DcrReportCreateManyInput | DcrReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DcrReport createManyAndReturn
   */
  export type DcrReportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DcrReport
     */
    select?: DcrReportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DcrReport
     */
    omit?: DcrReportOmit<ExtArgs> | null
    /**
     * The data used to create many DcrReports.
     */
    data: DcrReportCreateManyInput | DcrReportCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DcrReportIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DcrReport update
   */
  export type DcrReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DcrReport
     */
    select?: DcrReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DcrReport
     */
    omit?: DcrReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DcrReportInclude<ExtArgs> | null
    /**
     * The data needed to update a DcrReport.
     */
    data: XOR<DcrReportUpdateInput, DcrReportUncheckedUpdateInput>
    /**
     * Choose, which DcrReport to update.
     */
    where: DcrReportWhereUniqueInput
  }

  /**
   * DcrReport updateMany
   */
  export type DcrReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DcrReports.
     */
    data: XOR<DcrReportUpdateManyMutationInput, DcrReportUncheckedUpdateManyInput>
    /**
     * Filter which DcrReports to update
     */
    where?: DcrReportWhereInput
    /**
     * Limit how many DcrReports to update.
     */
    limit?: number
  }

  /**
   * DcrReport updateManyAndReturn
   */
  export type DcrReportUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DcrReport
     */
    select?: DcrReportSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DcrReport
     */
    omit?: DcrReportOmit<ExtArgs> | null
    /**
     * The data used to update DcrReports.
     */
    data: XOR<DcrReportUpdateManyMutationInput, DcrReportUncheckedUpdateManyInput>
    /**
     * Filter which DcrReports to update
     */
    where?: DcrReportWhereInput
    /**
     * Limit how many DcrReports to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DcrReportIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DcrReport upsert
   */
  export type DcrReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DcrReport
     */
    select?: DcrReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DcrReport
     */
    omit?: DcrReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DcrReportInclude<ExtArgs> | null
    /**
     * The filter to search for the DcrReport to update in case it exists.
     */
    where: DcrReportWhereUniqueInput
    /**
     * In case the DcrReport found by the `where` argument doesn't exist, create a new DcrReport with this data.
     */
    create: XOR<DcrReportCreateInput, DcrReportUncheckedCreateInput>
    /**
     * In case the DcrReport was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DcrReportUpdateInput, DcrReportUncheckedUpdateInput>
  }

  /**
   * DcrReport delete
   */
  export type DcrReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DcrReport
     */
    select?: DcrReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DcrReport
     */
    omit?: DcrReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DcrReportInclude<ExtArgs> | null
    /**
     * Filter which DcrReport to delete.
     */
    where: DcrReportWhereUniqueInput
  }

  /**
   * DcrReport deleteMany
   */
  export type DcrReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DcrReports to delete
     */
    where?: DcrReportWhereInput
    /**
     * Limit how many DcrReports to delete.
     */
    limit?: number
  }

  /**
   * DcrReport.doctorTask
   */
  export type DcrReport$doctorTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorTask
     */
    select?: DoctorTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorTask
     */
    omit?: DoctorTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorTaskInclude<ExtArgs> | null
    where?: DoctorTaskWhereInput
  }

  /**
   * DcrReport.chemistTask
   */
  export type DcrReport$chemistTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistTask
     */
    select?: ChemistTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistTask
     */
    omit?: ChemistTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistTaskInclude<ExtArgs> | null
    where?: ChemistTaskWhereInput
  }

  /**
   * DcrReport.tourPlanTask
   */
  export type DcrReport$tourPlanTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlanTask
     */
    select?: TourPlanTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlanTask
     */
    omit?: TourPlanTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanTaskInclude<ExtArgs> | null
    where?: TourPlanTaskWhereInput
  }

  /**
   * DcrReport without action
   */
  export type DcrReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DcrReport
     */
    select?: DcrReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DcrReport
     */
    omit?: DcrReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DcrReportInclude<ExtArgs> | null
  }


  /**
   * Model RcpaReport
   */

  export type AggregateRcpaReport = {
    _count: RcpaReportCountAggregateOutputType | null
    _min: RcpaReportMinAggregateOutputType | null
    _max: RcpaReportMaxAggregateOutputType | null
  }

  export type RcpaReportMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    employeeId: string | null
    chemistId: string | null
    remarks: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RcpaReportMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    employeeId: string | null
    chemistId: string | null
    remarks: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RcpaReportCountAggregateOutputType = {
    id: number
    organizationId: number
    employeeId: number
    chemistId: number
    remarks: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RcpaReportMinAggregateInputType = {
    id?: true
    organizationId?: true
    employeeId?: true
    chemistId?: true
    remarks?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RcpaReportMaxAggregateInputType = {
    id?: true
    organizationId?: true
    employeeId?: true
    chemistId?: true
    remarks?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RcpaReportCountAggregateInputType = {
    id?: true
    organizationId?: true
    employeeId?: true
    chemistId?: true
    remarks?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RcpaReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RcpaReport to aggregate.
     */
    where?: RcpaReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RcpaReports to fetch.
     */
    orderBy?: RcpaReportOrderByWithRelationInput | RcpaReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RcpaReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RcpaReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RcpaReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RcpaReports
    **/
    _count?: true | RcpaReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RcpaReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RcpaReportMaxAggregateInputType
  }

  export type GetRcpaReportAggregateType<T extends RcpaReportAggregateArgs> = {
        [P in keyof T & keyof AggregateRcpaReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRcpaReport[P]>
      : GetScalarType<T[P], AggregateRcpaReport[P]>
  }




  export type RcpaReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RcpaReportWhereInput
    orderBy?: RcpaReportOrderByWithAggregationInput | RcpaReportOrderByWithAggregationInput[]
    by: RcpaReportScalarFieldEnum[] | RcpaReportScalarFieldEnum
    having?: RcpaReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RcpaReportCountAggregateInputType | true
    _min?: RcpaReportMinAggregateInputType
    _max?: RcpaReportMaxAggregateInputType
  }

  export type RcpaReportGroupByOutputType = {
    id: string
    organizationId: string
    employeeId: string
    chemistId: string
    remarks: string | null
    createdAt: Date
    updatedAt: Date
    _count: RcpaReportCountAggregateOutputType | null
    _min: RcpaReportMinAggregateOutputType | null
    _max: RcpaReportMaxAggregateOutputType | null
  }

  type GetRcpaReportGroupByPayload<T extends RcpaReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RcpaReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RcpaReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RcpaReportGroupByOutputType[P]>
            : GetScalarType<T[P], RcpaReportGroupByOutputType[P]>
        }
      >
    >


  export type RcpaReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    employeeId?: boolean
    chemistId?: boolean
    remarks?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    chemist?: boolean | ChemistDefaultArgs<ExtArgs>
    drugData?: boolean | RcpaReport$drugDataArgs<ExtArgs>
    _count?: boolean | RcpaReportCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rcpaReport"]>

  export type RcpaReportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    employeeId?: boolean
    chemistId?: boolean
    remarks?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    chemist?: boolean | ChemistDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rcpaReport"]>

  export type RcpaReportSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    employeeId?: boolean
    chemistId?: boolean
    remarks?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    chemist?: boolean | ChemistDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rcpaReport"]>

  export type RcpaReportSelectScalar = {
    id?: boolean
    organizationId?: boolean
    employeeId?: boolean
    chemistId?: boolean
    remarks?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RcpaReportOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "employeeId" | "chemistId" | "remarks" | "createdAt" | "updatedAt", ExtArgs["result"]["rcpaReport"]>
  export type RcpaReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    chemist?: boolean | ChemistDefaultArgs<ExtArgs>
    drugData?: boolean | RcpaReport$drugDataArgs<ExtArgs>
    _count?: boolean | RcpaReportCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RcpaReportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    chemist?: boolean | ChemistDefaultArgs<ExtArgs>
  }
  export type RcpaReportIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    chemist?: boolean | ChemistDefaultArgs<ExtArgs>
  }

  export type $RcpaReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RcpaReport"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
      chemist: Prisma.$ChemistPayload<ExtArgs>
      drugData: Prisma.$RcpaDrugDataPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      employeeId: string
      chemistId: string
      remarks: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["rcpaReport"]>
    composites: {}
  }

  type RcpaReportGetPayload<S extends boolean | null | undefined | RcpaReportDefaultArgs> = $Result.GetResult<Prisma.$RcpaReportPayload, S>

  type RcpaReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RcpaReportFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RcpaReportCountAggregateInputType | true
    }

  export interface RcpaReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RcpaReport'], meta: { name: 'RcpaReport' } }
    /**
     * Find zero or one RcpaReport that matches the filter.
     * @param {RcpaReportFindUniqueArgs} args - Arguments to find a RcpaReport
     * @example
     * // Get one RcpaReport
     * const rcpaReport = await prisma.rcpaReport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RcpaReportFindUniqueArgs>(args: SelectSubset<T, RcpaReportFindUniqueArgs<ExtArgs>>): Prisma__RcpaReportClient<$Result.GetResult<Prisma.$RcpaReportPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RcpaReport that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RcpaReportFindUniqueOrThrowArgs} args - Arguments to find a RcpaReport
     * @example
     * // Get one RcpaReport
     * const rcpaReport = await prisma.rcpaReport.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RcpaReportFindUniqueOrThrowArgs>(args: SelectSubset<T, RcpaReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RcpaReportClient<$Result.GetResult<Prisma.$RcpaReportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RcpaReport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RcpaReportFindFirstArgs} args - Arguments to find a RcpaReport
     * @example
     * // Get one RcpaReport
     * const rcpaReport = await prisma.rcpaReport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RcpaReportFindFirstArgs>(args?: SelectSubset<T, RcpaReportFindFirstArgs<ExtArgs>>): Prisma__RcpaReportClient<$Result.GetResult<Prisma.$RcpaReportPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RcpaReport that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RcpaReportFindFirstOrThrowArgs} args - Arguments to find a RcpaReport
     * @example
     * // Get one RcpaReport
     * const rcpaReport = await prisma.rcpaReport.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RcpaReportFindFirstOrThrowArgs>(args?: SelectSubset<T, RcpaReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__RcpaReportClient<$Result.GetResult<Prisma.$RcpaReportPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RcpaReports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RcpaReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RcpaReports
     * const rcpaReports = await prisma.rcpaReport.findMany()
     * 
     * // Get first 10 RcpaReports
     * const rcpaReports = await prisma.rcpaReport.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rcpaReportWithIdOnly = await prisma.rcpaReport.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RcpaReportFindManyArgs>(args?: SelectSubset<T, RcpaReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RcpaReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RcpaReport.
     * @param {RcpaReportCreateArgs} args - Arguments to create a RcpaReport.
     * @example
     * // Create one RcpaReport
     * const RcpaReport = await prisma.rcpaReport.create({
     *   data: {
     *     // ... data to create a RcpaReport
     *   }
     * })
     * 
     */
    create<T extends RcpaReportCreateArgs>(args: SelectSubset<T, RcpaReportCreateArgs<ExtArgs>>): Prisma__RcpaReportClient<$Result.GetResult<Prisma.$RcpaReportPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RcpaReports.
     * @param {RcpaReportCreateManyArgs} args - Arguments to create many RcpaReports.
     * @example
     * // Create many RcpaReports
     * const rcpaReport = await prisma.rcpaReport.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RcpaReportCreateManyArgs>(args?: SelectSubset<T, RcpaReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RcpaReports and returns the data saved in the database.
     * @param {RcpaReportCreateManyAndReturnArgs} args - Arguments to create many RcpaReports.
     * @example
     * // Create many RcpaReports
     * const rcpaReport = await prisma.rcpaReport.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RcpaReports and only return the `id`
     * const rcpaReportWithIdOnly = await prisma.rcpaReport.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RcpaReportCreateManyAndReturnArgs>(args?: SelectSubset<T, RcpaReportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RcpaReportPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RcpaReport.
     * @param {RcpaReportDeleteArgs} args - Arguments to delete one RcpaReport.
     * @example
     * // Delete one RcpaReport
     * const RcpaReport = await prisma.rcpaReport.delete({
     *   where: {
     *     // ... filter to delete one RcpaReport
     *   }
     * })
     * 
     */
    delete<T extends RcpaReportDeleteArgs>(args: SelectSubset<T, RcpaReportDeleteArgs<ExtArgs>>): Prisma__RcpaReportClient<$Result.GetResult<Prisma.$RcpaReportPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RcpaReport.
     * @param {RcpaReportUpdateArgs} args - Arguments to update one RcpaReport.
     * @example
     * // Update one RcpaReport
     * const rcpaReport = await prisma.rcpaReport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RcpaReportUpdateArgs>(args: SelectSubset<T, RcpaReportUpdateArgs<ExtArgs>>): Prisma__RcpaReportClient<$Result.GetResult<Prisma.$RcpaReportPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RcpaReports.
     * @param {RcpaReportDeleteManyArgs} args - Arguments to filter RcpaReports to delete.
     * @example
     * // Delete a few RcpaReports
     * const { count } = await prisma.rcpaReport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RcpaReportDeleteManyArgs>(args?: SelectSubset<T, RcpaReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RcpaReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RcpaReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RcpaReports
     * const rcpaReport = await prisma.rcpaReport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RcpaReportUpdateManyArgs>(args: SelectSubset<T, RcpaReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RcpaReports and returns the data updated in the database.
     * @param {RcpaReportUpdateManyAndReturnArgs} args - Arguments to update many RcpaReports.
     * @example
     * // Update many RcpaReports
     * const rcpaReport = await prisma.rcpaReport.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RcpaReports and only return the `id`
     * const rcpaReportWithIdOnly = await prisma.rcpaReport.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RcpaReportUpdateManyAndReturnArgs>(args: SelectSubset<T, RcpaReportUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RcpaReportPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RcpaReport.
     * @param {RcpaReportUpsertArgs} args - Arguments to update or create a RcpaReport.
     * @example
     * // Update or create a RcpaReport
     * const rcpaReport = await prisma.rcpaReport.upsert({
     *   create: {
     *     // ... data to create a RcpaReport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RcpaReport we want to update
     *   }
     * })
     */
    upsert<T extends RcpaReportUpsertArgs>(args: SelectSubset<T, RcpaReportUpsertArgs<ExtArgs>>): Prisma__RcpaReportClient<$Result.GetResult<Prisma.$RcpaReportPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RcpaReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RcpaReportCountArgs} args - Arguments to filter RcpaReports to count.
     * @example
     * // Count the number of RcpaReports
     * const count = await prisma.rcpaReport.count({
     *   where: {
     *     // ... the filter for the RcpaReports we want to count
     *   }
     * })
    **/
    count<T extends RcpaReportCountArgs>(
      args?: Subset<T, RcpaReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RcpaReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RcpaReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RcpaReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RcpaReportAggregateArgs>(args: Subset<T, RcpaReportAggregateArgs>): Prisma.PrismaPromise<GetRcpaReportAggregateType<T>>

    /**
     * Group by RcpaReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RcpaReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RcpaReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RcpaReportGroupByArgs['orderBy'] }
        : { orderBy?: RcpaReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RcpaReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRcpaReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RcpaReport model
   */
  readonly fields: RcpaReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RcpaReport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RcpaReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    chemist<T extends ChemistDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChemistDefaultArgs<ExtArgs>>): Prisma__ChemistClient<$Result.GetResult<Prisma.$ChemistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    drugData<T extends RcpaReport$drugDataArgs<ExtArgs> = {}>(args?: Subset<T, RcpaReport$drugDataArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RcpaDrugDataPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RcpaReport model
   */
  interface RcpaReportFieldRefs {
    readonly id: FieldRef<"RcpaReport", 'String'>
    readonly organizationId: FieldRef<"RcpaReport", 'String'>
    readonly employeeId: FieldRef<"RcpaReport", 'String'>
    readonly chemistId: FieldRef<"RcpaReport", 'String'>
    readonly remarks: FieldRef<"RcpaReport", 'String'>
    readonly createdAt: FieldRef<"RcpaReport", 'DateTime'>
    readonly updatedAt: FieldRef<"RcpaReport", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RcpaReport findUnique
   */
  export type RcpaReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RcpaReport
     */
    select?: RcpaReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RcpaReport
     */
    omit?: RcpaReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RcpaReportInclude<ExtArgs> | null
    /**
     * Filter, which RcpaReport to fetch.
     */
    where: RcpaReportWhereUniqueInput
  }

  /**
   * RcpaReport findUniqueOrThrow
   */
  export type RcpaReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RcpaReport
     */
    select?: RcpaReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RcpaReport
     */
    omit?: RcpaReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RcpaReportInclude<ExtArgs> | null
    /**
     * Filter, which RcpaReport to fetch.
     */
    where: RcpaReportWhereUniqueInput
  }

  /**
   * RcpaReport findFirst
   */
  export type RcpaReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RcpaReport
     */
    select?: RcpaReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RcpaReport
     */
    omit?: RcpaReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RcpaReportInclude<ExtArgs> | null
    /**
     * Filter, which RcpaReport to fetch.
     */
    where?: RcpaReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RcpaReports to fetch.
     */
    orderBy?: RcpaReportOrderByWithRelationInput | RcpaReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RcpaReports.
     */
    cursor?: RcpaReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RcpaReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RcpaReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RcpaReports.
     */
    distinct?: RcpaReportScalarFieldEnum | RcpaReportScalarFieldEnum[]
  }

  /**
   * RcpaReport findFirstOrThrow
   */
  export type RcpaReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RcpaReport
     */
    select?: RcpaReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RcpaReport
     */
    omit?: RcpaReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RcpaReportInclude<ExtArgs> | null
    /**
     * Filter, which RcpaReport to fetch.
     */
    where?: RcpaReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RcpaReports to fetch.
     */
    orderBy?: RcpaReportOrderByWithRelationInput | RcpaReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RcpaReports.
     */
    cursor?: RcpaReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RcpaReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RcpaReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RcpaReports.
     */
    distinct?: RcpaReportScalarFieldEnum | RcpaReportScalarFieldEnum[]
  }

  /**
   * RcpaReport findMany
   */
  export type RcpaReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RcpaReport
     */
    select?: RcpaReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RcpaReport
     */
    omit?: RcpaReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RcpaReportInclude<ExtArgs> | null
    /**
     * Filter, which RcpaReports to fetch.
     */
    where?: RcpaReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RcpaReports to fetch.
     */
    orderBy?: RcpaReportOrderByWithRelationInput | RcpaReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RcpaReports.
     */
    cursor?: RcpaReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RcpaReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RcpaReports.
     */
    skip?: number
    distinct?: RcpaReportScalarFieldEnum | RcpaReportScalarFieldEnum[]
  }

  /**
   * RcpaReport create
   */
  export type RcpaReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RcpaReport
     */
    select?: RcpaReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RcpaReport
     */
    omit?: RcpaReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RcpaReportInclude<ExtArgs> | null
    /**
     * The data needed to create a RcpaReport.
     */
    data: XOR<RcpaReportCreateInput, RcpaReportUncheckedCreateInput>
  }

  /**
   * RcpaReport createMany
   */
  export type RcpaReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RcpaReports.
     */
    data: RcpaReportCreateManyInput | RcpaReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RcpaReport createManyAndReturn
   */
  export type RcpaReportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RcpaReport
     */
    select?: RcpaReportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RcpaReport
     */
    omit?: RcpaReportOmit<ExtArgs> | null
    /**
     * The data used to create many RcpaReports.
     */
    data: RcpaReportCreateManyInput | RcpaReportCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RcpaReportIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RcpaReport update
   */
  export type RcpaReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RcpaReport
     */
    select?: RcpaReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RcpaReport
     */
    omit?: RcpaReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RcpaReportInclude<ExtArgs> | null
    /**
     * The data needed to update a RcpaReport.
     */
    data: XOR<RcpaReportUpdateInput, RcpaReportUncheckedUpdateInput>
    /**
     * Choose, which RcpaReport to update.
     */
    where: RcpaReportWhereUniqueInput
  }

  /**
   * RcpaReport updateMany
   */
  export type RcpaReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RcpaReports.
     */
    data: XOR<RcpaReportUpdateManyMutationInput, RcpaReportUncheckedUpdateManyInput>
    /**
     * Filter which RcpaReports to update
     */
    where?: RcpaReportWhereInput
    /**
     * Limit how many RcpaReports to update.
     */
    limit?: number
  }

  /**
   * RcpaReport updateManyAndReturn
   */
  export type RcpaReportUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RcpaReport
     */
    select?: RcpaReportSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RcpaReport
     */
    omit?: RcpaReportOmit<ExtArgs> | null
    /**
     * The data used to update RcpaReports.
     */
    data: XOR<RcpaReportUpdateManyMutationInput, RcpaReportUncheckedUpdateManyInput>
    /**
     * Filter which RcpaReports to update
     */
    where?: RcpaReportWhereInput
    /**
     * Limit how many RcpaReports to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RcpaReportIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RcpaReport upsert
   */
  export type RcpaReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RcpaReport
     */
    select?: RcpaReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RcpaReport
     */
    omit?: RcpaReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RcpaReportInclude<ExtArgs> | null
    /**
     * The filter to search for the RcpaReport to update in case it exists.
     */
    where: RcpaReportWhereUniqueInput
    /**
     * In case the RcpaReport found by the `where` argument doesn't exist, create a new RcpaReport with this data.
     */
    create: XOR<RcpaReportCreateInput, RcpaReportUncheckedCreateInput>
    /**
     * In case the RcpaReport was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RcpaReportUpdateInput, RcpaReportUncheckedUpdateInput>
  }

  /**
   * RcpaReport delete
   */
  export type RcpaReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RcpaReport
     */
    select?: RcpaReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RcpaReport
     */
    omit?: RcpaReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RcpaReportInclude<ExtArgs> | null
    /**
     * Filter which RcpaReport to delete.
     */
    where: RcpaReportWhereUniqueInput
  }

  /**
   * RcpaReport deleteMany
   */
  export type RcpaReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RcpaReports to delete
     */
    where?: RcpaReportWhereInput
    /**
     * Limit how many RcpaReports to delete.
     */
    limit?: number
  }

  /**
   * RcpaReport.drugData
   */
  export type RcpaReport$drugDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RcpaDrugData
     */
    select?: RcpaDrugDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RcpaDrugData
     */
    omit?: RcpaDrugDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RcpaDrugDataInclude<ExtArgs> | null
    where?: RcpaDrugDataWhereInput
    orderBy?: RcpaDrugDataOrderByWithRelationInput | RcpaDrugDataOrderByWithRelationInput[]
    cursor?: RcpaDrugDataWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RcpaDrugDataScalarFieldEnum | RcpaDrugDataScalarFieldEnum[]
  }

  /**
   * RcpaReport without action
   */
  export type RcpaReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RcpaReport
     */
    select?: RcpaReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RcpaReport
     */
    omit?: RcpaReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RcpaReportInclude<ExtArgs> | null
  }


  /**
   * Model RcpaDrugData
   */

  export type AggregateRcpaDrugData = {
    _count: RcpaDrugDataCountAggregateOutputType | null
    _avg: RcpaDrugDataAvgAggregateOutputType | null
    _sum: RcpaDrugDataSumAggregateOutputType | null
    _min: RcpaDrugDataMinAggregateOutputType | null
    _max: RcpaDrugDataMaxAggregateOutputType | null
  }

  export type RcpaDrugDataAvgAggregateOutputType = {
    ownQuantity: number | null
    competitorQuantity: number | null
  }

  export type RcpaDrugDataSumAggregateOutputType = {
    ownQuantity: number | null
    competitorQuantity: number | null
  }

  export type RcpaDrugDataMinAggregateOutputType = {
    id: string | null
    rcpaReportId: string | null
    drugId: string | null
    competitorDrugName: string | null
    ownQuantity: number | null
    competitorQuantity: number | null
    createdAt: Date | null
  }

  export type RcpaDrugDataMaxAggregateOutputType = {
    id: string | null
    rcpaReportId: string | null
    drugId: string | null
    competitorDrugName: string | null
    ownQuantity: number | null
    competitorQuantity: number | null
    createdAt: Date | null
  }

  export type RcpaDrugDataCountAggregateOutputType = {
    id: number
    rcpaReportId: number
    drugId: number
    competitorDrugName: number
    ownQuantity: number
    competitorQuantity: number
    createdAt: number
    _all: number
  }


  export type RcpaDrugDataAvgAggregateInputType = {
    ownQuantity?: true
    competitorQuantity?: true
  }

  export type RcpaDrugDataSumAggregateInputType = {
    ownQuantity?: true
    competitorQuantity?: true
  }

  export type RcpaDrugDataMinAggregateInputType = {
    id?: true
    rcpaReportId?: true
    drugId?: true
    competitorDrugName?: true
    ownQuantity?: true
    competitorQuantity?: true
    createdAt?: true
  }

  export type RcpaDrugDataMaxAggregateInputType = {
    id?: true
    rcpaReportId?: true
    drugId?: true
    competitorDrugName?: true
    ownQuantity?: true
    competitorQuantity?: true
    createdAt?: true
  }

  export type RcpaDrugDataCountAggregateInputType = {
    id?: true
    rcpaReportId?: true
    drugId?: true
    competitorDrugName?: true
    ownQuantity?: true
    competitorQuantity?: true
    createdAt?: true
    _all?: true
  }

  export type RcpaDrugDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RcpaDrugData to aggregate.
     */
    where?: RcpaDrugDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RcpaDrugData to fetch.
     */
    orderBy?: RcpaDrugDataOrderByWithRelationInput | RcpaDrugDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RcpaDrugDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RcpaDrugData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RcpaDrugData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RcpaDrugData
    **/
    _count?: true | RcpaDrugDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RcpaDrugDataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RcpaDrugDataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RcpaDrugDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RcpaDrugDataMaxAggregateInputType
  }

  export type GetRcpaDrugDataAggregateType<T extends RcpaDrugDataAggregateArgs> = {
        [P in keyof T & keyof AggregateRcpaDrugData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRcpaDrugData[P]>
      : GetScalarType<T[P], AggregateRcpaDrugData[P]>
  }




  export type RcpaDrugDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RcpaDrugDataWhereInput
    orderBy?: RcpaDrugDataOrderByWithAggregationInput | RcpaDrugDataOrderByWithAggregationInput[]
    by: RcpaDrugDataScalarFieldEnum[] | RcpaDrugDataScalarFieldEnum
    having?: RcpaDrugDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RcpaDrugDataCountAggregateInputType | true
    _avg?: RcpaDrugDataAvgAggregateInputType
    _sum?: RcpaDrugDataSumAggregateInputType
    _min?: RcpaDrugDataMinAggregateInputType
    _max?: RcpaDrugDataMaxAggregateInputType
  }

  export type RcpaDrugDataGroupByOutputType = {
    id: string
    rcpaReportId: string
    drugId: string | null
    competitorDrugName: string | null
    ownQuantity: number
    competitorQuantity: number
    createdAt: Date
    _count: RcpaDrugDataCountAggregateOutputType | null
    _avg: RcpaDrugDataAvgAggregateOutputType | null
    _sum: RcpaDrugDataSumAggregateOutputType | null
    _min: RcpaDrugDataMinAggregateOutputType | null
    _max: RcpaDrugDataMaxAggregateOutputType | null
  }

  type GetRcpaDrugDataGroupByPayload<T extends RcpaDrugDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RcpaDrugDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RcpaDrugDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RcpaDrugDataGroupByOutputType[P]>
            : GetScalarType<T[P], RcpaDrugDataGroupByOutputType[P]>
        }
      >
    >


  export type RcpaDrugDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rcpaReportId?: boolean
    drugId?: boolean
    competitorDrugName?: boolean
    ownQuantity?: boolean
    competitorQuantity?: boolean
    createdAt?: boolean
    rcpaReport?: boolean | RcpaReportDefaultArgs<ExtArgs>
    drug?: boolean | RcpaDrugData$drugArgs<ExtArgs>
  }, ExtArgs["result"]["rcpaDrugData"]>

  export type RcpaDrugDataSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rcpaReportId?: boolean
    drugId?: boolean
    competitorDrugName?: boolean
    ownQuantity?: boolean
    competitorQuantity?: boolean
    createdAt?: boolean
    rcpaReport?: boolean | RcpaReportDefaultArgs<ExtArgs>
    drug?: boolean | RcpaDrugData$drugArgs<ExtArgs>
  }, ExtArgs["result"]["rcpaDrugData"]>

  export type RcpaDrugDataSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rcpaReportId?: boolean
    drugId?: boolean
    competitorDrugName?: boolean
    ownQuantity?: boolean
    competitorQuantity?: boolean
    createdAt?: boolean
    rcpaReport?: boolean | RcpaReportDefaultArgs<ExtArgs>
    drug?: boolean | RcpaDrugData$drugArgs<ExtArgs>
  }, ExtArgs["result"]["rcpaDrugData"]>

  export type RcpaDrugDataSelectScalar = {
    id?: boolean
    rcpaReportId?: boolean
    drugId?: boolean
    competitorDrugName?: boolean
    ownQuantity?: boolean
    competitorQuantity?: boolean
    createdAt?: boolean
  }

  export type RcpaDrugDataOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "rcpaReportId" | "drugId" | "competitorDrugName" | "ownQuantity" | "competitorQuantity" | "createdAt", ExtArgs["result"]["rcpaDrugData"]>
  export type RcpaDrugDataInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rcpaReport?: boolean | RcpaReportDefaultArgs<ExtArgs>
    drug?: boolean | RcpaDrugData$drugArgs<ExtArgs>
  }
  export type RcpaDrugDataIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rcpaReport?: boolean | RcpaReportDefaultArgs<ExtArgs>
    drug?: boolean | RcpaDrugData$drugArgs<ExtArgs>
  }
  export type RcpaDrugDataIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rcpaReport?: boolean | RcpaReportDefaultArgs<ExtArgs>
    drug?: boolean | RcpaDrugData$drugArgs<ExtArgs>
  }

  export type $RcpaDrugDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RcpaDrugData"
    objects: {
      rcpaReport: Prisma.$RcpaReportPayload<ExtArgs>
      drug: Prisma.$DrugPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      rcpaReportId: string
      drugId: string | null
      competitorDrugName: string | null
      ownQuantity: number
      competitorQuantity: number
      createdAt: Date
    }, ExtArgs["result"]["rcpaDrugData"]>
    composites: {}
  }

  type RcpaDrugDataGetPayload<S extends boolean | null | undefined | RcpaDrugDataDefaultArgs> = $Result.GetResult<Prisma.$RcpaDrugDataPayload, S>

  type RcpaDrugDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RcpaDrugDataFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RcpaDrugDataCountAggregateInputType | true
    }

  export interface RcpaDrugDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RcpaDrugData'], meta: { name: 'RcpaDrugData' } }
    /**
     * Find zero or one RcpaDrugData that matches the filter.
     * @param {RcpaDrugDataFindUniqueArgs} args - Arguments to find a RcpaDrugData
     * @example
     * // Get one RcpaDrugData
     * const rcpaDrugData = await prisma.rcpaDrugData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RcpaDrugDataFindUniqueArgs>(args: SelectSubset<T, RcpaDrugDataFindUniqueArgs<ExtArgs>>): Prisma__RcpaDrugDataClient<$Result.GetResult<Prisma.$RcpaDrugDataPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RcpaDrugData that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RcpaDrugDataFindUniqueOrThrowArgs} args - Arguments to find a RcpaDrugData
     * @example
     * // Get one RcpaDrugData
     * const rcpaDrugData = await prisma.rcpaDrugData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RcpaDrugDataFindUniqueOrThrowArgs>(args: SelectSubset<T, RcpaDrugDataFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RcpaDrugDataClient<$Result.GetResult<Prisma.$RcpaDrugDataPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RcpaDrugData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RcpaDrugDataFindFirstArgs} args - Arguments to find a RcpaDrugData
     * @example
     * // Get one RcpaDrugData
     * const rcpaDrugData = await prisma.rcpaDrugData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RcpaDrugDataFindFirstArgs>(args?: SelectSubset<T, RcpaDrugDataFindFirstArgs<ExtArgs>>): Prisma__RcpaDrugDataClient<$Result.GetResult<Prisma.$RcpaDrugDataPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RcpaDrugData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RcpaDrugDataFindFirstOrThrowArgs} args - Arguments to find a RcpaDrugData
     * @example
     * // Get one RcpaDrugData
     * const rcpaDrugData = await prisma.rcpaDrugData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RcpaDrugDataFindFirstOrThrowArgs>(args?: SelectSubset<T, RcpaDrugDataFindFirstOrThrowArgs<ExtArgs>>): Prisma__RcpaDrugDataClient<$Result.GetResult<Prisma.$RcpaDrugDataPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RcpaDrugData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RcpaDrugDataFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RcpaDrugData
     * const rcpaDrugData = await prisma.rcpaDrugData.findMany()
     * 
     * // Get first 10 RcpaDrugData
     * const rcpaDrugData = await prisma.rcpaDrugData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rcpaDrugDataWithIdOnly = await prisma.rcpaDrugData.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RcpaDrugDataFindManyArgs>(args?: SelectSubset<T, RcpaDrugDataFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RcpaDrugDataPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RcpaDrugData.
     * @param {RcpaDrugDataCreateArgs} args - Arguments to create a RcpaDrugData.
     * @example
     * // Create one RcpaDrugData
     * const RcpaDrugData = await prisma.rcpaDrugData.create({
     *   data: {
     *     // ... data to create a RcpaDrugData
     *   }
     * })
     * 
     */
    create<T extends RcpaDrugDataCreateArgs>(args: SelectSubset<T, RcpaDrugDataCreateArgs<ExtArgs>>): Prisma__RcpaDrugDataClient<$Result.GetResult<Prisma.$RcpaDrugDataPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RcpaDrugData.
     * @param {RcpaDrugDataCreateManyArgs} args - Arguments to create many RcpaDrugData.
     * @example
     * // Create many RcpaDrugData
     * const rcpaDrugData = await prisma.rcpaDrugData.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RcpaDrugDataCreateManyArgs>(args?: SelectSubset<T, RcpaDrugDataCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RcpaDrugData and returns the data saved in the database.
     * @param {RcpaDrugDataCreateManyAndReturnArgs} args - Arguments to create many RcpaDrugData.
     * @example
     * // Create many RcpaDrugData
     * const rcpaDrugData = await prisma.rcpaDrugData.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RcpaDrugData and only return the `id`
     * const rcpaDrugDataWithIdOnly = await prisma.rcpaDrugData.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RcpaDrugDataCreateManyAndReturnArgs>(args?: SelectSubset<T, RcpaDrugDataCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RcpaDrugDataPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RcpaDrugData.
     * @param {RcpaDrugDataDeleteArgs} args - Arguments to delete one RcpaDrugData.
     * @example
     * // Delete one RcpaDrugData
     * const RcpaDrugData = await prisma.rcpaDrugData.delete({
     *   where: {
     *     // ... filter to delete one RcpaDrugData
     *   }
     * })
     * 
     */
    delete<T extends RcpaDrugDataDeleteArgs>(args: SelectSubset<T, RcpaDrugDataDeleteArgs<ExtArgs>>): Prisma__RcpaDrugDataClient<$Result.GetResult<Prisma.$RcpaDrugDataPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RcpaDrugData.
     * @param {RcpaDrugDataUpdateArgs} args - Arguments to update one RcpaDrugData.
     * @example
     * // Update one RcpaDrugData
     * const rcpaDrugData = await prisma.rcpaDrugData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RcpaDrugDataUpdateArgs>(args: SelectSubset<T, RcpaDrugDataUpdateArgs<ExtArgs>>): Prisma__RcpaDrugDataClient<$Result.GetResult<Prisma.$RcpaDrugDataPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RcpaDrugData.
     * @param {RcpaDrugDataDeleteManyArgs} args - Arguments to filter RcpaDrugData to delete.
     * @example
     * // Delete a few RcpaDrugData
     * const { count } = await prisma.rcpaDrugData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RcpaDrugDataDeleteManyArgs>(args?: SelectSubset<T, RcpaDrugDataDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RcpaDrugData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RcpaDrugDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RcpaDrugData
     * const rcpaDrugData = await prisma.rcpaDrugData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RcpaDrugDataUpdateManyArgs>(args: SelectSubset<T, RcpaDrugDataUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RcpaDrugData and returns the data updated in the database.
     * @param {RcpaDrugDataUpdateManyAndReturnArgs} args - Arguments to update many RcpaDrugData.
     * @example
     * // Update many RcpaDrugData
     * const rcpaDrugData = await prisma.rcpaDrugData.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RcpaDrugData and only return the `id`
     * const rcpaDrugDataWithIdOnly = await prisma.rcpaDrugData.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RcpaDrugDataUpdateManyAndReturnArgs>(args: SelectSubset<T, RcpaDrugDataUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RcpaDrugDataPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RcpaDrugData.
     * @param {RcpaDrugDataUpsertArgs} args - Arguments to update or create a RcpaDrugData.
     * @example
     * // Update or create a RcpaDrugData
     * const rcpaDrugData = await prisma.rcpaDrugData.upsert({
     *   create: {
     *     // ... data to create a RcpaDrugData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RcpaDrugData we want to update
     *   }
     * })
     */
    upsert<T extends RcpaDrugDataUpsertArgs>(args: SelectSubset<T, RcpaDrugDataUpsertArgs<ExtArgs>>): Prisma__RcpaDrugDataClient<$Result.GetResult<Prisma.$RcpaDrugDataPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RcpaDrugData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RcpaDrugDataCountArgs} args - Arguments to filter RcpaDrugData to count.
     * @example
     * // Count the number of RcpaDrugData
     * const count = await prisma.rcpaDrugData.count({
     *   where: {
     *     // ... the filter for the RcpaDrugData we want to count
     *   }
     * })
    **/
    count<T extends RcpaDrugDataCountArgs>(
      args?: Subset<T, RcpaDrugDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RcpaDrugDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RcpaDrugData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RcpaDrugDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RcpaDrugDataAggregateArgs>(args: Subset<T, RcpaDrugDataAggregateArgs>): Prisma.PrismaPromise<GetRcpaDrugDataAggregateType<T>>

    /**
     * Group by RcpaDrugData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RcpaDrugDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RcpaDrugDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RcpaDrugDataGroupByArgs['orderBy'] }
        : { orderBy?: RcpaDrugDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RcpaDrugDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRcpaDrugDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RcpaDrugData model
   */
  readonly fields: RcpaDrugDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RcpaDrugData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RcpaDrugDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rcpaReport<T extends RcpaReportDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RcpaReportDefaultArgs<ExtArgs>>): Prisma__RcpaReportClient<$Result.GetResult<Prisma.$RcpaReportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    drug<T extends RcpaDrugData$drugArgs<ExtArgs> = {}>(args?: Subset<T, RcpaDrugData$drugArgs<ExtArgs>>): Prisma__DrugClient<$Result.GetResult<Prisma.$DrugPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RcpaDrugData model
   */
  interface RcpaDrugDataFieldRefs {
    readonly id: FieldRef<"RcpaDrugData", 'String'>
    readonly rcpaReportId: FieldRef<"RcpaDrugData", 'String'>
    readonly drugId: FieldRef<"RcpaDrugData", 'String'>
    readonly competitorDrugName: FieldRef<"RcpaDrugData", 'String'>
    readonly ownQuantity: FieldRef<"RcpaDrugData", 'Int'>
    readonly competitorQuantity: FieldRef<"RcpaDrugData", 'Int'>
    readonly createdAt: FieldRef<"RcpaDrugData", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RcpaDrugData findUnique
   */
  export type RcpaDrugDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RcpaDrugData
     */
    select?: RcpaDrugDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RcpaDrugData
     */
    omit?: RcpaDrugDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RcpaDrugDataInclude<ExtArgs> | null
    /**
     * Filter, which RcpaDrugData to fetch.
     */
    where: RcpaDrugDataWhereUniqueInput
  }

  /**
   * RcpaDrugData findUniqueOrThrow
   */
  export type RcpaDrugDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RcpaDrugData
     */
    select?: RcpaDrugDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RcpaDrugData
     */
    omit?: RcpaDrugDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RcpaDrugDataInclude<ExtArgs> | null
    /**
     * Filter, which RcpaDrugData to fetch.
     */
    where: RcpaDrugDataWhereUniqueInput
  }

  /**
   * RcpaDrugData findFirst
   */
  export type RcpaDrugDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RcpaDrugData
     */
    select?: RcpaDrugDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RcpaDrugData
     */
    omit?: RcpaDrugDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RcpaDrugDataInclude<ExtArgs> | null
    /**
     * Filter, which RcpaDrugData to fetch.
     */
    where?: RcpaDrugDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RcpaDrugData to fetch.
     */
    orderBy?: RcpaDrugDataOrderByWithRelationInput | RcpaDrugDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RcpaDrugData.
     */
    cursor?: RcpaDrugDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RcpaDrugData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RcpaDrugData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RcpaDrugData.
     */
    distinct?: RcpaDrugDataScalarFieldEnum | RcpaDrugDataScalarFieldEnum[]
  }

  /**
   * RcpaDrugData findFirstOrThrow
   */
  export type RcpaDrugDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RcpaDrugData
     */
    select?: RcpaDrugDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RcpaDrugData
     */
    omit?: RcpaDrugDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RcpaDrugDataInclude<ExtArgs> | null
    /**
     * Filter, which RcpaDrugData to fetch.
     */
    where?: RcpaDrugDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RcpaDrugData to fetch.
     */
    orderBy?: RcpaDrugDataOrderByWithRelationInput | RcpaDrugDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RcpaDrugData.
     */
    cursor?: RcpaDrugDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RcpaDrugData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RcpaDrugData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RcpaDrugData.
     */
    distinct?: RcpaDrugDataScalarFieldEnum | RcpaDrugDataScalarFieldEnum[]
  }

  /**
   * RcpaDrugData findMany
   */
  export type RcpaDrugDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RcpaDrugData
     */
    select?: RcpaDrugDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RcpaDrugData
     */
    omit?: RcpaDrugDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RcpaDrugDataInclude<ExtArgs> | null
    /**
     * Filter, which RcpaDrugData to fetch.
     */
    where?: RcpaDrugDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RcpaDrugData to fetch.
     */
    orderBy?: RcpaDrugDataOrderByWithRelationInput | RcpaDrugDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RcpaDrugData.
     */
    cursor?: RcpaDrugDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RcpaDrugData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RcpaDrugData.
     */
    skip?: number
    distinct?: RcpaDrugDataScalarFieldEnum | RcpaDrugDataScalarFieldEnum[]
  }

  /**
   * RcpaDrugData create
   */
  export type RcpaDrugDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RcpaDrugData
     */
    select?: RcpaDrugDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RcpaDrugData
     */
    omit?: RcpaDrugDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RcpaDrugDataInclude<ExtArgs> | null
    /**
     * The data needed to create a RcpaDrugData.
     */
    data: XOR<RcpaDrugDataCreateInput, RcpaDrugDataUncheckedCreateInput>
  }

  /**
   * RcpaDrugData createMany
   */
  export type RcpaDrugDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RcpaDrugData.
     */
    data: RcpaDrugDataCreateManyInput | RcpaDrugDataCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RcpaDrugData createManyAndReturn
   */
  export type RcpaDrugDataCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RcpaDrugData
     */
    select?: RcpaDrugDataSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RcpaDrugData
     */
    omit?: RcpaDrugDataOmit<ExtArgs> | null
    /**
     * The data used to create many RcpaDrugData.
     */
    data: RcpaDrugDataCreateManyInput | RcpaDrugDataCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RcpaDrugDataIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RcpaDrugData update
   */
  export type RcpaDrugDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RcpaDrugData
     */
    select?: RcpaDrugDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RcpaDrugData
     */
    omit?: RcpaDrugDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RcpaDrugDataInclude<ExtArgs> | null
    /**
     * The data needed to update a RcpaDrugData.
     */
    data: XOR<RcpaDrugDataUpdateInput, RcpaDrugDataUncheckedUpdateInput>
    /**
     * Choose, which RcpaDrugData to update.
     */
    where: RcpaDrugDataWhereUniqueInput
  }

  /**
   * RcpaDrugData updateMany
   */
  export type RcpaDrugDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RcpaDrugData.
     */
    data: XOR<RcpaDrugDataUpdateManyMutationInput, RcpaDrugDataUncheckedUpdateManyInput>
    /**
     * Filter which RcpaDrugData to update
     */
    where?: RcpaDrugDataWhereInput
    /**
     * Limit how many RcpaDrugData to update.
     */
    limit?: number
  }

  /**
   * RcpaDrugData updateManyAndReturn
   */
  export type RcpaDrugDataUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RcpaDrugData
     */
    select?: RcpaDrugDataSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RcpaDrugData
     */
    omit?: RcpaDrugDataOmit<ExtArgs> | null
    /**
     * The data used to update RcpaDrugData.
     */
    data: XOR<RcpaDrugDataUpdateManyMutationInput, RcpaDrugDataUncheckedUpdateManyInput>
    /**
     * Filter which RcpaDrugData to update
     */
    where?: RcpaDrugDataWhereInput
    /**
     * Limit how many RcpaDrugData to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RcpaDrugDataIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RcpaDrugData upsert
   */
  export type RcpaDrugDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RcpaDrugData
     */
    select?: RcpaDrugDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RcpaDrugData
     */
    omit?: RcpaDrugDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RcpaDrugDataInclude<ExtArgs> | null
    /**
     * The filter to search for the RcpaDrugData to update in case it exists.
     */
    where: RcpaDrugDataWhereUniqueInput
    /**
     * In case the RcpaDrugData found by the `where` argument doesn't exist, create a new RcpaDrugData with this data.
     */
    create: XOR<RcpaDrugDataCreateInput, RcpaDrugDataUncheckedCreateInput>
    /**
     * In case the RcpaDrugData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RcpaDrugDataUpdateInput, RcpaDrugDataUncheckedUpdateInput>
  }

  /**
   * RcpaDrugData delete
   */
  export type RcpaDrugDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RcpaDrugData
     */
    select?: RcpaDrugDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RcpaDrugData
     */
    omit?: RcpaDrugDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RcpaDrugDataInclude<ExtArgs> | null
    /**
     * Filter which RcpaDrugData to delete.
     */
    where: RcpaDrugDataWhereUniqueInput
  }

  /**
   * RcpaDrugData deleteMany
   */
  export type RcpaDrugDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RcpaDrugData to delete
     */
    where?: RcpaDrugDataWhereInput
    /**
     * Limit how many RcpaDrugData to delete.
     */
    limit?: number
  }

  /**
   * RcpaDrugData.drug
   */
  export type RcpaDrugData$drugArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Drug
     */
    select?: DrugSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Drug
     */
    omit?: DrugOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrugInclude<ExtArgs> | null
    where?: DrugWhereInput
  }

  /**
   * RcpaDrugData without action
   */
  export type RcpaDrugDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RcpaDrugData
     */
    select?: RcpaDrugDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RcpaDrugData
     */
    omit?: RcpaDrugDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RcpaDrugDataInclude<ExtArgs> | null
  }


  /**
   * Model CheckIn
   */

  export type AggregateCheckIn = {
    _count: CheckInCountAggregateOutputType | null
    _avg: CheckInAvgAggregateOutputType | null
    _sum: CheckInSumAggregateOutputType | null
    _min: CheckInMinAggregateOutputType | null
    _max: CheckInMaxAggregateOutputType | null
  }

  export type CheckInAvgAggregateOutputType = {
    checkInLatitude: Decimal | null
    checkInLongitude: Decimal | null
    checkOutLatitude: Decimal | null
    checkOutLongitude: Decimal | null
  }

  export type CheckInSumAggregateOutputType = {
    checkInLatitude: Decimal | null
    checkInLongitude: Decimal | null
    checkOutLatitude: Decimal | null
    checkOutLongitude: Decimal | null
  }

  export type CheckInMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    employeeId: string | null
    checkInTime: Date | null
    checkOutTime: Date | null
    checkInLatitude: Decimal | null
    checkInLongitude: Decimal | null
    checkOutLatitude: Decimal | null
    checkOutLongitude: Decimal | null
    createdAt: Date | null
  }

  export type CheckInMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    employeeId: string | null
    checkInTime: Date | null
    checkOutTime: Date | null
    checkInLatitude: Decimal | null
    checkInLongitude: Decimal | null
    checkOutLatitude: Decimal | null
    checkOutLongitude: Decimal | null
    createdAt: Date | null
  }

  export type CheckInCountAggregateOutputType = {
    id: number
    organizationId: number
    employeeId: number
    checkInTime: number
    checkOutTime: number
    checkInLatitude: number
    checkInLongitude: number
    checkOutLatitude: number
    checkOutLongitude: number
    createdAt: number
    _all: number
  }


  export type CheckInAvgAggregateInputType = {
    checkInLatitude?: true
    checkInLongitude?: true
    checkOutLatitude?: true
    checkOutLongitude?: true
  }

  export type CheckInSumAggregateInputType = {
    checkInLatitude?: true
    checkInLongitude?: true
    checkOutLatitude?: true
    checkOutLongitude?: true
  }

  export type CheckInMinAggregateInputType = {
    id?: true
    organizationId?: true
    employeeId?: true
    checkInTime?: true
    checkOutTime?: true
    checkInLatitude?: true
    checkInLongitude?: true
    checkOutLatitude?: true
    checkOutLongitude?: true
    createdAt?: true
  }

  export type CheckInMaxAggregateInputType = {
    id?: true
    organizationId?: true
    employeeId?: true
    checkInTime?: true
    checkOutTime?: true
    checkInLatitude?: true
    checkInLongitude?: true
    checkOutLatitude?: true
    checkOutLongitude?: true
    createdAt?: true
  }

  export type CheckInCountAggregateInputType = {
    id?: true
    organizationId?: true
    employeeId?: true
    checkInTime?: true
    checkOutTime?: true
    checkInLatitude?: true
    checkInLongitude?: true
    checkOutLatitude?: true
    checkOutLongitude?: true
    createdAt?: true
    _all?: true
  }

  export type CheckInAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CheckIn to aggregate.
     */
    where?: CheckInWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CheckIns to fetch.
     */
    orderBy?: CheckInOrderByWithRelationInput | CheckInOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CheckInWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CheckIns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CheckIns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CheckIns
    **/
    _count?: true | CheckInCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CheckInAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CheckInSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CheckInMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CheckInMaxAggregateInputType
  }

  export type GetCheckInAggregateType<T extends CheckInAggregateArgs> = {
        [P in keyof T & keyof AggregateCheckIn]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCheckIn[P]>
      : GetScalarType<T[P], AggregateCheckIn[P]>
  }




  export type CheckInGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CheckInWhereInput
    orderBy?: CheckInOrderByWithAggregationInput | CheckInOrderByWithAggregationInput[]
    by: CheckInScalarFieldEnum[] | CheckInScalarFieldEnum
    having?: CheckInScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CheckInCountAggregateInputType | true
    _avg?: CheckInAvgAggregateInputType
    _sum?: CheckInSumAggregateInputType
    _min?: CheckInMinAggregateInputType
    _max?: CheckInMaxAggregateInputType
  }

  export type CheckInGroupByOutputType = {
    id: string
    organizationId: string
    employeeId: string
    checkInTime: Date | null
    checkOutTime: Date | null
    checkInLatitude: Decimal | null
    checkInLongitude: Decimal | null
    checkOutLatitude: Decimal | null
    checkOutLongitude: Decimal | null
    createdAt: Date
    _count: CheckInCountAggregateOutputType | null
    _avg: CheckInAvgAggregateOutputType | null
    _sum: CheckInSumAggregateOutputType | null
    _min: CheckInMinAggregateOutputType | null
    _max: CheckInMaxAggregateOutputType | null
  }

  type GetCheckInGroupByPayload<T extends CheckInGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CheckInGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CheckInGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CheckInGroupByOutputType[P]>
            : GetScalarType<T[P], CheckInGroupByOutputType[P]>
        }
      >
    >


  export type CheckInSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    employeeId?: boolean
    checkInTime?: boolean
    checkOutTime?: boolean
    checkInLatitude?: boolean
    checkInLongitude?: boolean
    checkOutLatitude?: boolean
    checkOutLongitude?: boolean
    createdAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["checkIn"]>

  export type CheckInSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    employeeId?: boolean
    checkInTime?: boolean
    checkOutTime?: boolean
    checkInLatitude?: boolean
    checkInLongitude?: boolean
    checkOutLatitude?: boolean
    checkOutLongitude?: boolean
    createdAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["checkIn"]>

  export type CheckInSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    employeeId?: boolean
    checkInTime?: boolean
    checkOutTime?: boolean
    checkInLatitude?: boolean
    checkInLongitude?: boolean
    checkOutLatitude?: boolean
    checkOutLongitude?: boolean
    createdAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["checkIn"]>

  export type CheckInSelectScalar = {
    id?: boolean
    organizationId?: boolean
    employeeId?: boolean
    checkInTime?: boolean
    checkOutTime?: boolean
    checkInLatitude?: boolean
    checkInLongitude?: boolean
    checkOutLatitude?: boolean
    checkOutLongitude?: boolean
    createdAt?: boolean
  }

  export type CheckInOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "employeeId" | "checkInTime" | "checkOutTime" | "checkInLatitude" | "checkInLongitude" | "checkOutLatitude" | "checkOutLongitude" | "createdAt", ExtArgs["result"]["checkIn"]>
  export type CheckInInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type CheckInIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type CheckInIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $CheckInPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CheckIn"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      employeeId: string
      checkInTime: Date | null
      checkOutTime: Date | null
      checkInLatitude: Prisma.Decimal | null
      checkInLongitude: Prisma.Decimal | null
      checkOutLatitude: Prisma.Decimal | null
      checkOutLongitude: Prisma.Decimal | null
      createdAt: Date
    }, ExtArgs["result"]["checkIn"]>
    composites: {}
  }

  type CheckInGetPayload<S extends boolean | null | undefined | CheckInDefaultArgs> = $Result.GetResult<Prisma.$CheckInPayload, S>

  type CheckInCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CheckInFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CheckInCountAggregateInputType | true
    }

  export interface CheckInDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CheckIn'], meta: { name: 'CheckIn' } }
    /**
     * Find zero or one CheckIn that matches the filter.
     * @param {CheckInFindUniqueArgs} args - Arguments to find a CheckIn
     * @example
     * // Get one CheckIn
     * const checkIn = await prisma.checkIn.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CheckInFindUniqueArgs>(args: SelectSubset<T, CheckInFindUniqueArgs<ExtArgs>>): Prisma__CheckInClient<$Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CheckIn that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CheckInFindUniqueOrThrowArgs} args - Arguments to find a CheckIn
     * @example
     * // Get one CheckIn
     * const checkIn = await prisma.checkIn.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CheckInFindUniqueOrThrowArgs>(args: SelectSubset<T, CheckInFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CheckInClient<$Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CheckIn that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckInFindFirstArgs} args - Arguments to find a CheckIn
     * @example
     * // Get one CheckIn
     * const checkIn = await prisma.checkIn.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CheckInFindFirstArgs>(args?: SelectSubset<T, CheckInFindFirstArgs<ExtArgs>>): Prisma__CheckInClient<$Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CheckIn that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckInFindFirstOrThrowArgs} args - Arguments to find a CheckIn
     * @example
     * // Get one CheckIn
     * const checkIn = await prisma.checkIn.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CheckInFindFirstOrThrowArgs>(args?: SelectSubset<T, CheckInFindFirstOrThrowArgs<ExtArgs>>): Prisma__CheckInClient<$Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CheckIns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckInFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CheckIns
     * const checkIns = await prisma.checkIn.findMany()
     * 
     * // Get first 10 CheckIns
     * const checkIns = await prisma.checkIn.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const checkInWithIdOnly = await prisma.checkIn.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CheckInFindManyArgs>(args?: SelectSubset<T, CheckInFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CheckIn.
     * @param {CheckInCreateArgs} args - Arguments to create a CheckIn.
     * @example
     * // Create one CheckIn
     * const CheckIn = await prisma.checkIn.create({
     *   data: {
     *     // ... data to create a CheckIn
     *   }
     * })
     * 
     */
    create<T extends CheckInCreateArgs>(args: SelectSubset<T, CheckInCreateArgs<ExtArgs>>): Prisma__CheckInClient<$Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CheckIns.
     * @param {CheckInCreateManyArgs} args - Arguments to create many CheckIns.
     * @example
     * // Create many CheckIns
     * const checkIn = await prisma.checkIn.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CheckInCreateManyArgs>(args?: SelectSubset<T, CheckInCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CheckIns and returns the data saved in the database.
     * @param {CheckInCreateManyAndReturnArgs} args - Arguments to create many CheckIns.
     * @example
     * // Create many CheckIns
     * const checkIn = await prisma.checkIn.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CheckIns and only return the `id`
     * const checkInWithIdOnly = await prisma.checkIn.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CheckInCreateManyAndReturnArgs>(args?: SelectSubset<T, CheckInCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CheckIn.
     * @param {CheckInDeleteArgs} args - Arguments to delete one CheckIn.
     * @example
     * // Delete one CheckIn
     * const CheckIn = await prisma.checkIn.delete({
     *   where: {
     *     // ... filter to delete one CheckIn
     *   }
     * })
     * 
     */
    delete<T extends CheckInDeleteArgs>(args: SelectSubset<T, CheckInDeleteArgs<ExtArgs>>): Prisma__CheckInClient<$Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CheckIn.
     * @param {CheckInUpdateArgs} args - Arguments to update one CheckIn.
     * @example
     * // Update one CheckIn
     * const checkIn = await prisma.checkIn.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CheckInUpdateArgs>(args: SelectSubset<T, CheckInUpdateArgs<ExtArgs>>): Prisma__CheckInClient<$Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CheckIns.
     * @param {CheckInDeleteManyArgs} args - Arguments to filter CheckIns to delete.
     * @example
     * // Delete a few CheckIns
     * const { count } = await prisma.checkIn.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CheckInDeleteManyArgs>(args?: SelectSubset<T, CheckInDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CheckIns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckInUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CheckIns
     * const checkIn = await prisma.checkIn.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CheckInUpdateManyArgs>(args: SelectSubset<T, CheckInUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CheckIns and returns the data updated in the database.
     * @param {CheckInUpdateManyAndReturnArgs} args - Arguments to update many CheckIns.
     * @example
     * // Update many CheckIns
     * const checkIn = await prisma.checkIn.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CheckIns and only return the `id`
     * const checkInWithIdOnly = await prisma.checkIn.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CheckInUpdateManyAndReturnArgs>(args: SelectSubset<T, CheckInUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CheckIn.
     * @param {CheckInUpsertArgs} args - Arguments to update or create a CheckIn.
     * @example
     * // Update or create a CheckIn
     * const checkIn = await prisma.checkIn.upsert({
     *   create: {
     *     // ... data to create a CheckIn
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CheckIn we want to update
     *   }
     * })
     */
    upsert<T extends CheckInUpsertArgs>(args: SelectSubset<T, CheckInUpsertArgs<ExtArgs>>): Prisma__CheckInClient<$Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CheckIns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckInCountArgs} args - Arguments to filter CheckIns to count.
     * @example
     * // Count the number of CheckIns
     * const count = await prisma.checkIn.count({
     *   where: {
     *     // ... the filter for the CheckIns we want to count
     *   }
     * })
    **/
    count<T extends CheckInCountArgs>(
      args?: Subset<T, CheckInCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CheckInCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CheckIn.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckInAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CheckInAggregateArgs>(args: Subset<T, CheckInAggregateArgs>): Prisma.PrismaPromise<GetCheckInAggregateType<T>>

    /**
     * Group by CheckIn.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckInGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CheckInGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CheckInGroupByArgs['orderBy'] }
        : { orderBy?: CheckInGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CheckInGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCheckInGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CheckIn model
   */
  readonly fields: CheckInFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CheckIn.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CheckInClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CheckIn model
   */
  interface CheckInFieldRefs {
    readonly id: FieldRef<"CheckIn", 'String'>
    readonly organizationId: FieldRef<"CheckIn", 'String'>
    readonly employeeId: FieldRef<"CheckIn", 'String'>
    readonly checkInTime: FieldRef<"CheckIn", 'DateTime'>
    readonly checkOutTime: FieldRef<"CheckIn", 'DateTime'>
    readonly checkInLatitude: FieldRef<"CheckIn", 'Decimal'>
    readonly checkInLongitude: FieldRef<"CheckIn", 'Decimal'>
    readonly checkOutLatitude: FieldRef<"CheckIn", 'Decimal'>
    readonly checkOutLongitude: FieldRef<"CheckIn", 'Decimal'>
    readonly createdAt: FieldRef<"CheckIn", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CheckIn findUnique
   */
  export type CheckInFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckIn
     */
    select?: CheckInSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckIn
     */
    omit?: CheckInOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckInInclude<ExtArgs> | null
    /**
     * Filter, which CheckIn to fetch.
     */
    where: CheckInWhereUniqueInput
  }

  /**
   * CheckIn findUniqueOrThrow
   */
  export type CheckInFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckIn
     */
    select?: CheckInSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckIn
     */
    omit?: CheckInOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckInInclude<ExtArgs> | null
    /**
     * Filter, which CheckIn to fetch.
     */
    where: CheckInWhereUniqueInput
  }

  /**
   * CheckIn findFirst
   */
  export type CheckInFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckIn
     */
    select?: CheckInSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckIn
     */
    omit?: CheckInOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckInInclude<ExtArgs> | null
    /**
     * Filter, which CheckIn to fetch.
     */
    where?: CheckInWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CheckIns to fetch.
     */
    orderBy?: CheckInOrderByWithRelationInput | CheckInOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CheckIns.
     */
    cursor?: CheckInWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CheckIns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CheckIns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CheckIns.
     */
    distinct?: CheckInScalarFieldEnum | CheckInScalarFieldEnum[]
  }

  /**
   * CheckIn findFirstOrThrow
   */
  export type CheckInFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckIn
     */
    select?: CheckInSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckIn
     */
    omit?: CheckInOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckInInclude<ExtArgs> | null
    /**
     * Filter, which CheckIn to fetch.
     */
    where?: CheckInWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CheckIns to fetch.
     */
    orderBy?: CheckInOrderByWithRelationInput | CheckInOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CheckIns.
     */
    cursor?: CheckInWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CheckIns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CheckIns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CheckIns.
     */
    distinct?: CheckInScalarFieldEnum | CheckInScalarFieldEnum[]
  }

  /**
   * CheckIn findMany
   */
  export type CheckInFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckIn
     */
    select?: CheckInSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckIn
     */
    omit?: CheckInOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckInInclude<ExtArgs> | null
    /**
     * Filter, which CheckIns to fetch.
     */
    where?: CheckInWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CheckIns to fetch.
     */
    orderBy?: CheckInOrderByWithRelationInput | CheckInOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CheckIns.
     */
    cursor?: CheckInWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CheckIns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CheckIns.
     */
    skip?: number
    distinct?: CheckInScalarFieldEnum | CheckInScalarFieldEnum[]
  }

  /**
   * CheckIn create
   */
  export type CheckInCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckIn
     */
    select?: CheckInSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckIn
     */
    omit?: CheckInOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckInInclude<ExtArgs> | null
    /**
     * The data needed to create a CheckIn.
     */
    data: XOR<CheckInCreateInput, CheckInUncheckedCreateInput>
  }

  /**
   * CheckIn createMany
   */
  export type CheckInCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CheckIns.
     */
    data: CheckInCreateManyInput | CheckInCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CheckIn createManyAndReturn
   */
  export type CheckInCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckIn
     */
    select?: CheckInSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CheckIn
     */
    omit?: CheckInOmit<ExtArgs> | null
    /**
     * The data used to create many CheckIns.
     */
    data: CheckInCreateManyInput | CheckInCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckInIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CheckIn update
   */
  export type CheckInUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckIn
     */
    select?: CheckInSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckIn
     */
    omit?: CheckInOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckInInclude<ExtArgs> | null
    /**
     * The data needed to update a CheckIn.
     */
    data: XOR<CheckInUpdateInput, CheckInUncheckedUpdateInput>
    /**
     * Choose, which CheckIn to update.
     */
    where: CheckInWhereUniqueInput
  }

  /**
   * CheckIn updateMany
   */
  export type CheckInUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CheckIns.
     */
    data: XOR<CheckInUpdateManyMutationInput, CheckInUncheckedUpdateManyInput>
    /**
     * Filter which CheckIns to update
     */
    where?: CheckInWhereInput
    /**
     * Limit how many CheckIns to update.
     */
    limit?: number
  }

  /**
   * CheckIn updateManyAndReturn
   */
  export type CheckInUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckIn
     */
    select?: CheckInSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CheckIn
     */
    omit?: CheckInOmit<ExtArgs> | null
    /**
     * The data used to update CheckIns.
     */
    data: XOR<CheckInUpdateManyMutationInput, CheckInUncheckedUpdateManyInput>
    /**
     * Filter which CheckIns to update
     */
    where?: CheckInWhereInput
    /**
     * Limit how many CheckIns to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckInIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CheckIn upsert
   */
  export type CheckInUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckIn
     */
    select?: CheckInSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckIn
     */
    omit?: CheckInOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckInInclude<ExtArgs> | null
    /**
     * The filter to search for the CheckIn to update in case it exists.
     */
    where: CheckInWhereUniqueInput
    /**
     * In case the CheckIn found by the `where` argument doesn't exist, create a new CheckIn with this data.
     */
    create: XOR<CheckInCreateInput, CheckInUncheckedCreateInput>
    /**
     * In case the CheckIn was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CheckInUpdateInput, CheckInUncheckedUpdateInput>
  }

  /**
   * CheckIn delete
   */
  export type CheckInDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckIn
     */
    select?: CheckInSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckIn
     */
    omit?: CheckInOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckInInclude<ExtArgs> | null
    /**
     * Filter which CheckIn to delete.
     */
    where: CheckInWhereUniqueInput
  }

  /**
   * CheckIn deleteMany
   */
  export type CheckInDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CheckIns to delete
     */
    where?: CheckInWhereInput
    /**
     * Limit how many CheckIns to delete.
     */
    limit?: number
  }

  /**
   * CheckIn without action
   */
  export type CheckInDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckIn
     */
    select?: CheckInSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckIn
     */
    omit?: CheckInOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckInInclude<ExtArgs> | null
  }


  /**
   * Model TaskPlanner
   */

  export type AggregateTaskPlanner = {
    _count: TaskPlannerCountAggregateOutputType | null
    _min: TaskPlannerMinAggregateOutputType | null
    _max: TaskPlannerMaxAggregateOutputType | null
  }

  export type TaskPlannerMinAggregateOutputType = {
    id: string | null
    employeeId: string | null
    startDate: Date | null
    endDate: Date | null
    status: $Enums.TaskPlannerStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TaskPlannerMaxAggregateOutputType = {
    id: string | null
    employeeId: string | null
    startDate: Date | null
    endDate: Date | null
    status: $Enums.TaskPlannerStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TaskPlannerCountAggregateOutputType = {
    id: number
    employeeId: number
    startDate: number
    endDate: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TaskPlannerMinAggregateInputType = {
    id?: true
    employeeId?: true
    startDate?: true
    endDate?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TaskPlannerMaxAggregateInputType = {
    id?: true
    employeeId?: true
    startDate?: true
    endDate?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TaskPlannerCountAggregateInputType = {
    id?: true
    employeeId?: true
    startDate?: true
    endDate?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TaskPlannerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TaskPlanner to aggregate.
     */
    where?: TaskPlannerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskPlanners to fetch.
     */
    orderBy?: TaskPlannerOrderByWithRelationInput | TaskPlannerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskPlannerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskPlanners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskPlanners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TaskPlanners
    **/
    _count?: true | TaskPlannerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskPlannerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskPlannerMaxAggregateInputType
  }

  export type GetTaskPlannerAggregateType<T extends TaskPlannerAggregateArgs> = {
        [P in keyof T & keyof AggregateTaskPlanner]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTaskPlanner[P]>
      : GetScalarType<T[P], AggregateTaskPlanner[P]>
  }




  export type TaskPlannerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskPlannerWhereInput
    orderBy?: TaskPlannerOrderByWithAggregationInput | TaskPlannerOrderByWithAggregationInput[]
    by: TaskPlannerScalarFieldEnum[] | TaskPlannerScalarFieldEnum
    having?: TaskPlannerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskPlannerCountAggregateInputType | true
    _min?: TaskPlannerMinAggregateInputType
    _max?: TaskPlannerMaxAggregateInputType
  }

  export type TaskPlannerGroupByOutputType = {
    id: string
    employeeId: string
    startDate: Date
    endDate: Date
    status: $Enums.TaskPlannerStatus
    createdAt: Date
    updatedAt: Date
    _count: TaskPlannerCountAggregateOutputType | null
    _min: TaskPlannerMinAggregateOutputType | null
    _max: TaskPlannerMaxAggregateOutputType | null
  }

  type GetTaskPlannerGroupByPayload<T extends TaskPlannerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskPlannerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskPlannerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskPlannerGroupByOutputType[P]>
            : GetScalarType<T[P], TaskPlannerGroupByOutputType[P]>
        }
      >
    >


  export type TaskPlannerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    doctorTasks?: boolean | TaskPlanner$doctorTasksArgs<ExtArgs>
    chemistTasks?: boolean | TaskPlanner$chemistTasksArgs<ExtArgs>
    tourPlanTasks?: boolean | TaskPlanner$tourPlanTasksArgs<ExtArgs>
    _count?: boolean | TaskPlannerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["taskPlanner"]>

  export type TaskPlannerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["taskPlanner"]>

  export type TaskPlannerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["taskPlanner"]>

  export type TaskPlannerSelectScalar = {
    id?: boolean
    employeeId?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TaskPlannerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "employeeId" | "startDate" | "endDate" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["taskPlanner"]>
  export type TaskPlannerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    doctorTasks?: boolean | TaskPlanner$doctorTasksArgs<ExtArgs>
    chemistTasks?: boolean | TaskPlanner$chemistTasksArgs<ExtArgs>
    tourPlanTasks?: boolean | TaskPlanner$tourPlanTasksArgs<ExtArgs>
    _count?: boolean | TaskPlannerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TaskPlannerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type TaskPlannerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $TaskPlannerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TaskPlanner"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
      doctorTasks: Prisma.$DoctorTaskPayload<ExtArgs>[]
      chemistTasks: Prisma.$ChemistTaskPayload<ExtArgs>[]
      tourPlanTasks: Prisma.$TourPlanTaskPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      employeeId: string
      startDate: Date
      endDate: Date
      status: $Enums.TaskPlannerStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["taskPlanner"]>
    composites: {}
  }

  type TaskPlannerGetPayload<S extends boolean | null | undefined | TaskPlannerDefaultArgs> = $Result.GetResult<Prisma.$TaskPlannerPayload, S>

  type TaskPlannerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TaskPlannerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TaskPlannerCountAggregateInputType | true
    }

  export interface TaskPlannerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TaskPlanner'], meta: { name: 'TaskPlanner' } }
    /**
     * Find zero or one TaskPlanner that matches the filter.
     * @param {TaskPlannerFindUniqueArgs} args - Arguments to find a TaskPlanner
     * @example
     * // Get one TaskPlanner
     * const taskPlanner = await prisma.taskPlanner.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaskPlannerFindUniqueArgs>(args: SelectSubset<T, TaskPlannerFindUniqueArgs<ExtArgs>>): Prisma__TaskPlannerClient<$Result.GetResult<Prisma.$TaskPlannerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TaskPlanner that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TaskPlannerFindUniqueOrThrowArgs} args - Arguments to find a TaskPlanner
     * @example
     * // Get one TaskPlanner
     * const taskPlanner = await prisma.taskPlanner.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaskPlannerFindUniqueOrThrowArgs>(args: SelectSubset<T, TaskPlannerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TaskPlannerClient<$Result.GetResult<Prisma.$TaskPlannerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TaskPlanner that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskPlannerFindFirstArgs} args - Arguments to find a TaskPlanner
     * @example
     * // Get one TaskPlanner
     * const taskPlanner = await prisma.taskPlanner.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaskPlannerFindFirstArgs>(args?: SelectSubset<T, TaskPlannerFindFirstArgs<ExtArgs>>): Prisma__TaskPlannerClient<$Result.GetResult<Prisma.$TaskPlannerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TaskPlanner that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskPlannerFindFirstOrThrowArgs} args - Arguments to find a TaskPlanner
     * @example
     * // Get one TaskPlanner
     * const taskPlanner = await prisma.taskPlanner.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaskPlannerFindFirstOrThrowArgs>(args?: SelectSubset<T, TaskPlannerFindFirstOrThrowArgs<ExtArgs>>): Prisma__TaskPlannerClient<$Result.GetResult<Prisma.$TaskPlannerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TaskPlanners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskPlannerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TaskPlanners
     * const taskPlanners = await prisma.taskPlanner.findMany()
     * 
     * // Get first 10 TaskPlanners
     * const taskPlanners = await prisma.taskPlanner.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskPlannerWithIdOnly = await prisma.taskPlanner.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TaskPlannerFindManyArgs>(args?: SelectSubset<T, TaskPlannerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPlannerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TaskPlanner.
     * @param {TaskPlannerCreateArgs} args - Arguments to create a TaskPlanner.
     * @example
     * // Create one TaskPlanner
     * const TaskPlanner = await prisma.taskPlanner.create({
     *   data: {
     *     // ... data to create a TaskPlanner
     *   }
     * })
     * 
     */
    create<T extends TaskPlannerCreateArgs>(args: SelectSubset<T, TaskPlannerCreateArgs<ExtArgs>>): Prisma__TaskPlannerClient<$Result.GetResult<Prisma.$TaskPlannerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TaskPlanners.
     * @param {TaskPlannerCreateManyArgs} args - Arguments to create many TaskPlanners.
     * @example
     * // Create many TaskPlanners
     * const taskPlanner = await prisma.taskPlanner.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TaskPlannerCreateManyArgs>(args?: SelectSubset<T, TaskPlannerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TaskPlanners and returns the data saved in the database.
     * @param {TaskPlannerCreateManyAndReturnArgs} args - Arguments to create many TaskPlanners.
     * @example
     * // Create many TaskPlanners
     * const taskPlanner = await prisma.taskPlanner.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TaskPlanners and only return the `id`
     * const taskPlannerWithIdOnly = await prisma.taskPlanner.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TaskPlannerCreateManyAndReturnArgs>(args?: SelectSubset<T, TaskPlannerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPlannerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TaskPlanner.
     * @param {TaskPlannerDeleteArgs} args - Arguments to delete one TaskPlanner.
     * @example
     * // Delete one TaskPlanner
     * const TaskPlanner = await prisma.taskPlanner.delete({
     *   where: {
     *     // ... filter to delete one TaskPlanner
     *   }
     * })
     * 
     */
    delete<T extends TaskPlannerDeleteArgs>(args: SelectSubset<T, TaskPlannerDeleteArgs<ExtArgs>>): Prisma__TaskPlannerClient<$Result.GetResult<Prisma.$TaskPlannerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TaskPlanner.
     * @param {TaskPlannerUpdateArgs} args - Arguments to update one TaskPlanner.
     * @example
     * // Update one TaskPlanner
     * const taskPlanner = await prisma.taskPlanner.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TaskPlannerUpdateArgs>(args: SelectSubset<T, TaskPlannerUpdateArgs<ExtArgs>>): Prisma__TaskPlannerClient<$Result.GetResult<Prisma.$TaskPlannerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TaskPlanners.
     * @param {TaskPlannerDeleteManyArgs} args - Arguments to filter TaskPlanners to delete.
     * @example
     * // Delete a few TaskPlanners
     * const { count } = await prisma.taskPlanner.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TaskPlannerDeleteManyArgs>(args?: SelectSubset<T, TaskPlannerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TaskPlanners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskPlannerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TaskPlanners
     * const taskPlanner = await prisma.taskPlanner.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TaskPlannerUpdateManyArgs>(args: SelectSubset<T, TaskPlannerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TaskPlanners and returns the data updated in the database.
     * @param {TaskPlannerUpdateManyAndReturnArgs} args - Arguments to update many TaskPlanners.
     * @example
     * // Update many TaskPlanners
     * const taskPlanner = await prisma.taskPlanner.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TaskPlanners and only return the `id`
     * const taskPlannerWithIdOnly = await prisma.taskPlanner.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TaskPlannerUpdateManyAndReturnArgs>(args: SelectSubset<T, TaskPlannerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPlannerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TaskPlanner.
     * @param {TaskPlannerUpsertArgs} args - Arguments to update or create a TaskPlanner.
     * @example
     * // Update or create a TaskPlanner
     * const taskPlanner = await prisma.taskPlanner.upsert({
     *   create: {
     *     // ... data to create a TaskPlanner
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TaskPlanner we want to update
     *   }
     * })
     */
    upsert<T extends TaskPlannerUpsertArgs>(args: SelectSubset<T, TaskPlannerUpsertArgs<ExtArgs>>): Prisma__TaskPlannerClient<$Result.GetResult<Prisma.$TaskPlannerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TaskPlanners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskPlannerCountArgs} args - Arguments to filter TaskPlanners to count.
     * @example
     * // Count the number of TaskPlanners
     * const count = await prisma.taskPlanner.count({
     *   where: {
     *     // ... the filter for the TaskPlanners we want to count
     *   }
     * })
    **/
    count<T extends TaskPlannerCountArgs>(
      args?: Subset<T, TaskPlannerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskPlannerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TaskPlanner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskPlannerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskPlannerAggregateArgs>(args: Subset<T, TaskPlannerAggregateArgs>): Prisma.PrismaPromise<GetTaskPlannerAggregateType<T>>

    /**
     * Group by TaskPlanner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskPlannerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskPlannerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskPlannerGroupByArgs['orderBy'] }
        : { orderBy?: TaskPlannerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskPlannerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskPlannerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TaskPlanner model
   */
  readonly fields: TaskPlannerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TaskPlanner.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskPlannerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    doctorTasks<T extends TaskPlanner$doctorTasksArgs<ExtArgs> = {}>(args?: Subset<T, TaskPlanner$doctorTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorTaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    chemistTasks<T extends TaskPlanner$chemistTasksArgs<ExtArgs> = {}>(args?: Subset<T, TaskPlanner$chemistTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChemistTaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tourPlanTasks<T extends TaskPlanner$tourPlanTasksArgs<ExtArgs> = {}>(args?: Subset<T, TaskPlanner$tourPlanTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TourPlanTaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TaskPlanner model
   */
  interface TaskPlannerFieldRefs {
    readonly id: FieldRef<"TaskPlanner", 'String'>
    readonly employeeId: FieldRef<"TaskPlanner", 'String'>
    readonly startDate: FieldRef<"TaskPlanner", 'DateTime'>
    readonly endDate: FieldRef<"TaskPlanner", 'DateTime'>
    readonly status: FieldRef<"TaskPlanner", 'TaskPlannerStatus'>
    readonly createdAt: FieldRef<"TaskPlanner", 'DateTime'>
    readonly updatedAt: FieldRef<"TaskPlanner", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TaskPlanner findUnique
   */
  export type TaskPlannerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskPlanner
     */
    select?: TaskPlannerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskPlanner
     */
    omit?: TaskPlannerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskPlannerInclude<ExtArgs> | null
    /**
     * Filter, which TaskPlanner to fetch.
     */
    where: TaskPlannerWhereUniqueInput
  }

  /**
   * TaskPlanner findUniqueOrThrow
   */
  export type TaskPlannerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskPlanner
     */
    select?: TaskPlannerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskPlanner
     */
    omit?: TaskPlannerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskPlannerInclude<ExtArgs> | null
    /**
     * Filter, which TaskPlanner to fetch.
     */
    where: TaskPlannerWhereUniqueInput
  }

  /**
   * TaskPlanner findFirst
   */
  export type TaskPlannerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskPlanner
     */
    select?: TaskPlannerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskPlanner
     */
    omit?: TaskPlannerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskPlannerInclude<ExtArgs> | null
    /**
     * Filter, which TaskPlanner to fetch.
     */
    where?: TaskPlannerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskPlanners to fetch.
     */
    orderBy?: TaskPlannerOrderByWithRelationInput | TaskPlannerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TaskPlanners.
     */
    cursor?: TaskPlannerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskPlanners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskPlanners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TaskPlanners.
     */
    distinct?: TaskPlannerScalarFieldEnum | TaskPlannerScalarFieldEnum[]
  }

  /**
   * TaskPlanner findFirstOrThrow
   */
  export type TaskPlannerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskPlanner
     */
    select?: TaskPlannerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskPlanner
     */
    omit?: TaskPlannerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskPlannerInclude<ExtArgs> | null
    /**
     * Filter, which TaskPlanner to fetch.
     */
    where?: TaskPlannerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskPlanners to fetch.
     */
    orderBy?: TaskPlannerOrderByWithRelationInput | TaskPlannerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TaskPlanners.
     */
    cursor?: TaskPlannerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskPlanners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskPlanners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TaskPlanners.
     */
    distinct?: TaskPlannerScalarFieldEnum | TaskPlannerScalarFieldEnum[]
  }

  /**
   * TaskPlanner findMany
   */
  export type TaskPlannerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskPlanner
     */
    select?: TaskPlannerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskPlanner
     */
    omit?: TaskPlannerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskPlannerInclude<ExtArgs> | null
    /**
     * Filter, which TaskPlanners to fetch.
     */
    where?: TaskPlannerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskPlanners to fetch.
     */
    orderBy?: TaskPlannerOrderByWithRelationInput | TaskPlannerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TaskPlanners.
     */
    cursor?: TaskPlannerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskPlanners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskPlanners.
     */
    skip?: number
    distinct?: TaskPlannerScalarFieldEnum | TaskPlannerScalarFieldEnum[]
  }

  /**
   * TaskPlanner create
   */
  export type TaskPlannerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskPlanner
     */
    select?: TaskPlannerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskPlanner
     */
    omit?: TaskPlannerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskPlannerInclude<ExtArgs> | null
    /**
     * The data needed to create a TaskPlanner.
     */
    data: XOR<TaskPlannerCreateInput, TaskPlannerUncheckedCreateInput>
  }

  /**
   * TaskPlanner createMany
   */
  export type TaskPlannerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TaskPlanners.
     */
    data: TaskPlannerCreateManyInput | TaskPlannerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TaskPlanner createManyAndReturn
   */
  export type TaskPlannerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskPlanner
     */
    select?: TaskPlannerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TaskPlanner
     */
    omit?: TaskPlannerOmit<ExtArgs> | null
    /**
     * The data used to create many TaskPlanners.
     */
    data: TaskPlannerCreateManyInput | TaskPlannerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskPlannerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TaskPlanner update
   */
  export type TaskPlannerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskPlanner
     */
    select?: TaskPlannerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskPlanner
     */
    omit?: TaskPlannerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskPlannerInclude<ExtArgs> | null
    /**
     * The data needed to update a TaskPlanner.
     */
    data: XOR<TaskPlannerUpdateInput, TaskPlannerUncheckedUpdateInput>
    /**
     * Choose, which TaskPlanner to update.
     */
    where: TaskPlannerWhereUniqueInput
  }

  /**
   * TaskPlanner updateMany
   */
  export type TaskPlannerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TaskPlanners.
     */
    data: XOR<TaskPlannerUpdateManyMutationInput, TaskPlannerUncheckedUpdateManyInput>
    /**
     * Filter which TaskPlanners to update
     */
    where?: TaskPlannerWhereInput
    /**
     * Limit how many TaskPlanners to update.
     */
    limit?: number
  }

  /**
   * TaskPlanner updateManyAndReturn
   */
  export type TaskPlannerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskPlanner
     */
    select?: TaskPlannerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TaskPlanner
     */
    omit?: TaskPlannerOmit<ExtArgs> | null
    /**
     * The data used to update TaskPlanners.
     */
    data: XOR<TaskPlannerUpdateManyMutationInput, TaskPlannerUncheckedUpdateManyInput>
    /**
     * Filter which TaskPlanners to update
     */
    where?: TaskPlannerWhereInput
    /**
     * Limit how many TaskPlanners to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskPlannerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TaskPlanner upsert
   */
  export type TaskPlannerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskPlanner
     */
    select?: TaskPlannerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskPlanner
     */
    omit?: TaskPlannerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskPlannerInclude<ExtArgs> | null
    /**
     * The filter to search for the TaskPlanner to update in case it exists.
     */
    where: TaskPlannerWhereUniqueInput
    /**
     * In case the TaskPlanner found by the `where` argument doesn't exist, create a new TaskPlanner with this data.
     */
    create: XOR<TaskPlannerCreateInput, TaskPlannerUncheckedCreateInput>
    /**
     * In case the TaskPlanner was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskPlannerUpdateInput, TaskPlannerUncheckedUpdateInput>
  }

  /**
   * TaskPlanner delete
   */
  export type TaskPlannerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskPlanner
     */
    select?: TaskPlannerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskPlanner
     */
    omit?: TaskPlannerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskPlannerInclude<ExtArgs> | null
    /**
     * Filter which TaskPlanner to delete.
     */
    where: TaskPlannerWhereUniqueInput
  }

  /**
   * TaskPlanner deleteMany
   */
  export type TaskPlannerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TaskPlanners to delete
     */
    where?: TaskPlannerWhereInput
    /**
     * Limit how many TaskPlanners to delete.
     */
    limit?: number
  }

  /**
   * TaskPlanner.doctorTasks
   */
  export type TaskPlanner$doctorTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorTask
     */
    select?: DoctorTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorTask
     */
    omit?: DoctorTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorTaskInclude<ExtArgs> | null
    where?: DoctorTaskWhereInput
    orderBy?: DoctorTaskOrderByWithRelationInput | DoctorTaskOrderByWithRelationInput[]
    cursor?: DoctorTaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorTaskScalarFieldEnum | DoctorTaskScalarFieldEnum[]
  }

  /**
   * TaskPlanner.chemistTasks
   */
  export type TaskPlanner$chemistTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistTask
     */
    select?: ChemistTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistTask
     */
    omit?: ChemistTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistTaskInclude<ExtArgs> | null
    where?: ChemistTaskWhereInput
    orderBy?: ChemistTaskOrderByWithRelationInput | ChemistTaskOrderByWithRelationInput[]
    cursor?: ChemistTaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChemistTaskScalarFieldEnum | ChemistTaskScalarFieldEnum[]
  }

  /**
   * TaskPlanner.tourPlanTasks
   */
  export type TaskPlanner$tourPlanTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlanTask
     */
    select?: TourPlanTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlanTask
     */
    omit?: TourPlanTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanTaskInclude<ExtArgs> | null
    where?: TourPlanTaskWhereInput
    orderBy?: TourPlanTaskOrderByWithRelationInput | TourPlanTaskOrderByWithRelationInput[]
    cursor?: TourPlanTaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TourPlanTaskScalarFieldEnum | TourPlanTaskScalarFieldEnum[]
  }

  /**
   * TaskPlanner without action
   */
  export type TaskPlannerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskPlanner
     */
    select?: TaskPlannerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskPlanner
     */
    omit?: TaskPlannerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskPlannerInclude<ExtArgs> | null
  }


  /**
   * Model DoctorTask
   */

  export type AggregateDoctorTask = {
    _count: DoctorTaskCountAggregateOutputType | null
    _min: DoctorTaskMinAggregateOutputType | null
    _max: DoctorTaskMaxAggregateOutputType | null
  }

  export type DoctorTaskMinAggregateOutputType = {
    id: string | null
    plannerId: string | null
    employeeId: string | null
    doctorId: string | null
    taskDate: Date | null
    startTime: Date | null
    endTime: Date | null
    taskStatus: $Enums.TaskStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DoctorTaskMaxAggregateOutputType = {
    id: string | null
    plannerId: string | null
    employeeId: string | null
    doctorId: string | null
    taskDate: Date | null
    startTime: Date | null
    endTime: Date | null
    taskStatus: $Enums.TaskStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DoctorTaskCountAggregateOutputType = {
    id: number
    plannerId: number
    employeeId: number
    doctorId: number
    taskDate: number
    startTime: number
    endTime: number
    taskStatus: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DoctorTaskMinAggregateInputType = {
    id?: true
    plannerId?: true
    employeeId?: true
    doctorId?: true
    taskDate?: true
    startTime?: true
    endTime?: true
    taskStatus?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DoctorTaskMaxAggregateInputType = {
    id?: true
    plannerId?: true
    employeeId?: true
    doctorId?: true
    taskDate?: true
    startTime?: true
    endTime?: true
    taskStatus?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DoctorTaskCountAggregateInputType = {
    id?: true
    plannerId?: true
    employeeId?: true
    doctorId?: true
    taskDate?: true
    startTime?: true
    endTime?: true
    taskStatus?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DoctorTaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DoctorTask to aggregate.
     */
    where?: DoctorTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorTasks to fetch.
     */
    orderBy?: DoctorTaskOrderByWithRelationInput | DoctorTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DoctorTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DoctorTasks
    **/
    _count?: true | DoctorTaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoctorTaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoctorTaskMaxAggregateInputType
  }

  export type GetDoctorTaskAggregateType<T extends DoctorTaskAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctorTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctorTask[P]>
      : GetScalarType<T[P], AggregateDoctorTask[P]>
  }




  export type DoctorTaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorTaskWhereInput
    orderBy?: DoctorTaskOrderByWithAggregationInput | DoctorTaskOrderByWithAggregationInput[]
    by: DoctorTaskScalarFieldEnum[] | DoctorTaskScalarFieldEnum
    having?: DoctorTaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoctorTaskCountAggregateInputType | true
    _min?: DoctorTaskMinAggregateInputType
    _max?: DoctorTaskMaxAggregateInputType
  }

  export type DoctorTaskGroupByOutputType = {
    id: string
    plannerId: string
    employeeId: string
    doctorId: string
    taskDate: Date
    startTime: Date
    endTime: Date
    taskStatus: $Enums.TaskStatus
    createdAt: Date
    updatedAt: Date
    _count: DoctorTaskCountAggregateOutputType | null
    _min: DoctorTaskMinAggregateOutputType | null
    _max: DoctorTaskMaxAggregateOutputType | null
  }

  type GetDoctorTaskGroupByPayload<T extends DoctorTaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DoctorTaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoctorTaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoctorTaskGroupByOutputType[P]>
            : GetScalarType<T[P], DoctorTaskGroupByOutputType[P]>
        }
      >
    >


  export type DoctorTaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    plannerId?: boolean
    employeeId?: boolean
    doctorId?: boolean
    taskDate?: boolean
    startTime?: boolean
    endTime?: boolean
    taskStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    planner?: boolean | TaskPlannerDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    doctorInteractions?: boolean | DoctorTask$doctorInteractionsArgs<ExtArgs>
    dcrReports?: boolean | DoctorTask$dcrReportsArgs<ExtArgs>
    _count?: boolean | DoctorTaskCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorTask"]>

  export type DoctorTaskSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    plannerId?: boolean
    employeeId?: boolean
    doctorId?: boolean
    taskDate?: boolean
    startTime?: boolean
    endTime?: boolean
    taskStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    planner?: boolean | TaskPlannerDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorTask"]>

  export type DoctorTaskSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    plannerId?: boolean
    employeeId?: boolean
    doctorId?: boolean
    taskDate?: boolean
    startTime?: boolean
    endTime?: boolean
    taskStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    planner?: boolean | TaskPlannerDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorTask"]>

  export type DoctorTaskSelectScalar = {
    id?: boolean
    plannerId?: boolean
    employeeId?: boolean
    doctorId?: boolean
    taskDate?: boolean
    startTime?: boolean
    endTime?: boolean
    taskStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DoctorTaskOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "plannerId" | "employeeId" | "doctorId" | "taskDate" | "startTime" | "endTime" | "taskStatus" | "createdAt" | "updatedAt", ExtArgs["result"]["doctorTask"]>
  export type DoctorTaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    planner?: boolean | TaskPlannerDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    doctorInteractions?: boolean | DoctorTask$doctorInteractionsArgs<ExtArgs>
    dcrReports?: boolean | DoctorTask$dcrReportsArgs<ExtArgs>
    _count?: boolean | DoctorTaskCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DoctorTaskIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    planner?: boolean | TaskPlannerDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
  }
  export type DoctorTaskIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    planner?: boolean | TaskPlannerDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
  }

  export type $DoctorTaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DoctorTask"
    objects: {
      planner: Prisma.$TaskPlannerPayload<ExtArgs>
      employee: Prisma.$EmployeePayload<ExtArgs>
      doctor: Prisma.$DoctorPayload<ExtArgs>
      doctorInteractions: Prisma.$DoctorInteractionPayload<ExtArgs>[]
      dcrReports: Prisma.$DcrReportPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      plannerId: string
      employeeId: string
      doctorId: string
      taskDate: Date
      startTime: Date
      endTime: Date
      taskStatus: $Enums.TaskStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["doctorTask"]>
    composites: {}
  }

  type DoctorTaskGetPayload<S extends boolean | null | undefined | DoctorTaskDefaultArgs> = $Result.GetResult<Prisma.$DoctorTaskPayload, S>

  type DoctorTaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DoctorTaskFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DoctorTaskCountAggregateInputType | true
    }

  export interface DoctorTaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DoctorTask'], meta: { name: 'DoctorTask' } }
    /**
     * Find zero or one DoctorTask that matches the filter.
     * @param {DoctorTaskFindUniqueArgs} args - Arguments to find a DoctorTask
     * @example
     * // Get one DoctorTask
     * const doctorTask = await prisma.doctorTask.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DoctorTaskFindUniqueArgs>(args: SelectSubset<T, DoctorTaskFindUniqueArgs<ExtArgs>>): Prisma__DoctorTaskClient<$Result.GetResult<Prisma.$DoctorTaskPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DoctorTask that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DoctorTaskFindUniqueOrThrowArgs} args - Arguments to find a DoctorTask
     * @example
     * // Get one DoctorTask
     * const doctorTask = await prisma.doctorTask.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DoctorTaskFindUniqueOrThrowArgs>(args: SelectSubset<T, DoctorTaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DoctorTaskClient<$Result.GetResult<Prisma.$DoctorTaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DoctorTask that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorTaskFindFirstArgs} args - Arguments to find a DoctorTask
     * @example
     * // Get one DoctorTask
     * const doctorTask = await prisma.doctorTask.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DoctorTaskFindFirstArgs>(args?: SelectSubset<T, DoctorTaskFindFirstArgs<ExtArgs>>): Prisma__DoctorTaskClient<$Result.GetResult<Prisma.$DoctorTaskPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DoctorTask that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorTaskFindFirstOrThrowArgs} args - Arguments to find a DoctorTask
     * @example
     * // Get one DoctorTask
     * const doctorTask = await prisma.doctorTask.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DoctorTaskFindFirstOrThrowArgs>(args?: SelectSubset<T, DoctorTaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__DoctorTaskClient<$Result.GetResult<Prisma.$DoctorTaskPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DoctorTasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorTaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DoctorTasks
     * const doctorTasks = await prisma.doctorTask.findMany()
     * 
     * // Get first 10 DoctorTasks
     * const doctorTasks = await prisma.doctorTask.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doctorTaskWithIdOnly = await prisma.doctorTask.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DoctorTaskFindManyArgs>(args?: SelectSubset<T, DoctorTaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorTaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DoctorTask.
     * @param {DoctorTaskCreateArgs} args - Arguments to create a DoctorTask.
     * @example
     * // Create one DoctorTask
     * const DoctorTask = await prisma.doctorTask.create({
     *   data: {
     *     // ... data to create a DoctorTask
     *   }
     * })
     * 
     */
    create<T extends DoctorTaskCreateArgs>(args: SelectSubset<T, DoctorTaskCreateArgs<ExtArgs>>): Prisma__DoctorTaskClient<$Result.GetResult<Prisma.$DoctorTaskPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DoctorTasks.
     * @param {DoctorTaskCreateManyArgs} args - Arguments to create many DoctorTasks.
     * @example
     * // Create many DoctorTasks
     * const doctorTask = await prisma.doctorTask.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DoctorTaskCreateManyArgs>(args?: SelectSubset<T, DoctorTaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DoctorTasks and returns the data saved in the database.
     * @param {DoctorTaskCreateManyAndReturnArgs} args - Arguments to create many DoctorTasks.
     * @example
     * // Create many DoctorTasks
     * const doctorTask = await prisma.doctorTask.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DoctorTasks and only return the `id`
     * const doctorTaskWithIdOnly = await prisma.doctorTask.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DoctorTaskCreateManyAndReturnArgs>(args?: SelectSubset<T, DoctorTaskCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorTaskPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DoctorTask.
     * @param {DoctorTaskDeleteArgs} args - Arguments to delete one DoctorTask.
     * @example
     * // Delete one DoctorTask
     * const DoctorTask = await prisma.doctorTask.delete({
     *   where: {
     *     // ... filter to delete one DoctorTask
     *   }
     * })
     * 
     */
    delete<T extends DoctorTaskDeleteArgs>(args: SelectSubset<T, DoctorTaskDeleteArgs<ExtArgs>>): Prisma__DoctorTaskClient<$Result.GetResult<Prisma.$DoctorTaskPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DoctorTask.
     * @param {DoctorTaskUpdateArgs} args - Arguments to update one DoctorTask.
     * @example
     * // Update one DoctorTask
     * const doctorTask = await prisma.doctorTask.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DoctorTaskUpdateArgs>(args: SelectSubset<T, DoctorTaskUpdateArgs<ExtArgs>>): Prisma__DoctorTaskClient<$Result.GetResult<Prisma.$DoctorTaskPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DoctorTasks.
     * @param {DoctorTaskDeleteManyArgs} args - Arguments to filter DoctorTasks to delete.
     * @example
     * // Delete a few DoctorTasks
     * const { count } = await prisma.doctorTask.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DoctorTaskDeleteManyArgs>(args?: SelectSubset<T, DoctorTaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DoctorTasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorTaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DoctorTasks
     * const doctorTask = await prisma.doctorTask.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DoctorTaskUpdateManyArgs>(args: SelectSubset<T, DoctorTaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DoctorTasks and returns the data updated in the database.
     * @param {DoctorTaskUpdateManyAndReturnArgs} args - Arguments to update many DoctorTasks.
     * @example
     * // Update many DoctorTasks
     * const doctorTask = await prisma.doctorTask.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DoctorTasks and only return the `id`
     * const doctorTaskWithIdOnly = await prisma.doctorTask.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DoctorTaskUpdateManyAndReturnArgs>(args: SelectSubset<T, DoctorTaskUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorTaskPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DoctorTask.
     * @param {DoctorTaskUpsertArgs} args - Arguments to update or create a DoctorTask.
     * @example
     * // Update or create a DoctorTask
     * const doctorTask = await prisma.doctorTask.upsert({
     *   create: {
     *     // ... data to create a DoctorTask
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DoctorTask we want to update
     *   }
     * })
     */
    upsert<T extends DoctorTaskUpsertArgs>(args: SelectSubset<T, DoctorTaskUpsertArgs<ExtArgs>>): Prisma__DoctorTaskClient<$Result.GetResult<Prisma.$DoctorTaskPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DoctorTasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorTaskCountArgs} args - Arguments to filter DoctorTasks to count.
     * @example
     * // Count the number of DoctorTasks
     * const count = await prisma.doctorTask.count({
     *   where: {
     *     // ... the filter for the DoctorTasks we want to count
     *   }
     * })
    **/
    count<T extends DoctorTaskCountArgs>(
      args?: Subset<T, DoctorTaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoctorTaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DoctorTask.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorTaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoctorTaskAggregateArgs>(args: Subset<T, DoctorTaskAggregateArgs>): Prisma.PrismaPromise<GetDoctorTaskAggregateType<T>>

    /**
     * Group by DoctorTask.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorTaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DoctorTaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DoctorTaskGroupByArgs['orderBy'] }
        : { orderBy?: DoctorTaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DoctorTaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctorTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DoctorTask model
   */
  readonly fields: DoctorTaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DoctorTask.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DoctorTaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    planner<T extends TaskPlannerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TaskPlannerDefaultArgs<ExtArgs>>): Prisma__TaskPlannerClient<$Result.GetResult<Prisma.$TaskPlannerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    doctor<T extends DoctorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DoctorDefaultArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    doctorInteractions<T extends DoctorTask$doctorInteractionsArgs<ExtArgs> = {}>(args?: Subset<T, DoctorTask$doctorInteractionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorInteractionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    dcrReports<T extends DoctorTask$dcrReportsArgs<ExtArgs> = {}>(args?: Subset<T, DoctorTask$dcrReportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DcrReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DoctorTask model
   */
  interface DoctorTaskFieldRefs {
    readonly id: FieldRef<"DoctorTask", 'String'>
    readonly plannerId: FieldRef<"DoctorTask", 'String'>
    readonly employeeId: FieldRef<"DoctorTask", 'String'>
    readonly doctorId: FieldRef<"DoctorTask", 'String'>
    readonly taskDate: FieldRef<"DoctorTask", 'DateTime'>
    readonly startTime: FieldRef<"DoctorTask", 'DateTime'>
    readonly endTime: FieldRef<"DoctorTask", 'DateTime'>
    readonly taskStatus: FieldRef<"DoctorTask", 'TaskStatus'>
    readonly createdAt: FieldRef<"DoctorTask", 'DateTime'>
    readonly updatedAt: FieldRef<"DoctorTask", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DoctorTask findUnique
   */
  export type DoctorTaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorTask
     */
    select?: DoctorTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorTask
     */
    omit?: DoctorTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorTaskInclude<ExtArgs> | null
    /**
     * Filter, which DoctorTask to fetch.
     */
    where: DoctorTaskWhereUniqueInput
  }

  /**
   * DoctorTask findUniqueOrThrow
   */
  export type DoctorTaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorTask
     */
    select?: DoctorTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorTask
     */
    omit?: DoctorTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorTaskInclude<ExtArgs> | null
    /**
     * Filter, which DoctorTask to fetch.
     */
    where: DoctorTaskWhereUniqueInput
  }

  /**
   * DoctorTask findFirst
   */
  export type DoctorTaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorTask
     */
    select?: DoctorTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorTask
     */
    omit?: DoctorTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorTaskInclude<ExtArgs> | null
    /**
     * Filter, which DoctorTask to fetch.
     */
    where?: DoctorTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorTasks to fetch.
     */
    orderBy?: DoctorTaskOrderByWithRelationInput | DoctorTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DoctorTasks.
     */
    cursor?: DoctorTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DoctorTasks.
     */
    distinct?: DoctorTaskScalarFieldEnum | DoctorTaskScalarFieldEnum[]
  }

  /**
   * DoctorTask findFirstOrThrow
   */
  export type DoctorTaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorTask
     */
    select?: DoctorTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorTask
     */
    omit?: DoctorTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorTaskInclude<ExtArgs> | null
    /**
     * Filter, which DoctorTask to fetch.
     */
    where?: DoctorTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorTasks to fetch.
     */
    orderBy?: DoctorTaskOrderByWithRelationInput | DoctorTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DoctorTasks.
     */
    cursor?: DoctorTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DoctorTasks.
     */
    distinct?: DoctorTaskScalarFieldEnum | DoctorTaskScalarFieldEnum[]
  }

  /**
   * DoctorTask findMany
   */
  export type DoctorTaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorTask
     */
    select?: DoctorTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorTask
     */
    omit?: DoctorTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorTaskInclude<ExtArgs> | null
    /**
     * Filter, which DoctorTasks to fetch.
     */
    where?: DoctorTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorTasks to fetch.
     */
    orderBy?: DoctorTaskOrderByWithRelationInput | DoctorTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DoctorTasks.
     */
    cursor?: DoctorTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorTasks.
     */
    skip?: number
    distinct?: DoctorTaskScalarFieldEnum | DoctorTaskScalarFieldEnum[]
  }

  /**
   * DoctorTask create
   */
  export type DoctorTaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorTask
     */
    select?: DoctorTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorTask
     */
    omit?: DoctorTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorTaskInclude<ExtArgs> | null
    /**
     * The data needed to create a DoctorTask.
     */
    data: XOR<DoctorTaskCreateInput, DoctorTaskUncheckedCreateInput>
  }

  /**
   * DoctorTask createMany
   */
  export type DoctorTaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DoctorTasks.
     */
    data: DoctorTaskCreateManyInput | DoctorTaskCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DoctorTask createManyAndReturn
   */
  export type DoctorTaskCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorTask
     */
    select?: DoctorTaskSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorTask
     */
    omit?: DoctorTaskOmit<ExtArgs> | null
    /**
     * The data used to create many DoctorTasks.
     */
    data: DoctorTaskCreateManyInput | DoctorTaskCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorTaskIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DoctorTask update
   */
  export type DoctorTaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorTask
     */
    select?: DoctorTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorTask
     */
    omit?: DoctorTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorTaskInclude<ExtArgs> | null
    /**
     * The data needed to update a DoctorTask.
     */
    data: XOR<DoctorTaskUpdateInput, DoctorTaskUncheckedUpdateInput>
    /**
     * Choose, which DoctorTask to update.
     */
    where: DoctorTaskWhereUniqueInput
  }

  /**
   * DoctorTask updateMany
   */
  export type DoctorTaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DoctorTasks.
     */
    data: XOR<DoctorTaskUpdateManyMutationInput, DoctorTaskUncheckedUpdateManyInput>
    /**
     * Filter which DoctorTasks to update
     */
    where?: DoctorTaskWhereInput
    /**
     * Limit how many DoctorTasks to update.
     */
    limit?: number
  }

  /**
   * DoctorTask updateManyAndReturn
   */
  export type DoctorTaskUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorTask
     */
    select?: DoctorTaskSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorTask
     */
    omit?: DoctorTaskOmit<ExtArgs> | null
    /**
     * The data used to update DoctorTasks.
     */
    data: XOR<DoctorTaskUpdateManyMutationInput, DoctorTaskUncheckedUpdateManyInput>
    /**
     * Filter which DoctorTasks to update
     */
    where?: DoctorTaskWhereInput
    /**
     * Limit how many DoctorTasks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorTaskIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DoctorTask upsert
   */
  export type DoctorTaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorTask
     */
    select?: DoctorTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorTask
     */
    omit?: DoctorTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorTaskInclude<ExtArgs> | null
    /**
     * The filter to search for the DoctorTask to update in case it exists.
     */
    where: DoctorTaskWhereUniqueInput
    /**
     * In case the DoctorTask found by the `where` argument doesn't exist, create a new DoctorTask with this data.
     */
    create: XOR<DoctorTaskCreateInput, DoctorTaskUncheckedCreateInput>
    /**
     * In case the DoctorTask was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DoctorTaskUpdateInput, DoctorTaskUncheckedUpdateInput>
  }

  /**
   * DoctorTask delete
   */
  export type DoctorTaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorTask
     */
    select?: DoctorTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorTask
     */
    omit?: DoctorTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorTaskInclude<ExtArgs> | null
    /**
     * Filter which DoctorTask to delete.
     */
    where: DoctorTaskWhereUniqueInput
  }

  /**
   * DoctorTask deleteMany
   */
  export type DoctorTaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DoctorTasks to delete
     */
    where?: DoctorTaskWhereInput
    /**
     * Limit how many DoctorTasks to delete.
     */
    limit?: number
  }

  /**
   * DoctorTask.doctorInteractions
   */
  export type DoctorTask$doctorInteractionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorInteraction
     */
    select?: DoctorInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorInteraction
     */
    omit?: DoctorInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInteractionInclude<ExtArgs> | null
    where?: DoctorInteractionWhereInput
    orderBy?: DoctorInteractionOrderByWithRelationInput | DoctorInteractionOrderByWithRelationInput[]
    cursor?: DoctorInteractionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorInteractionScalarFieldEnum | DoctorInteractionScalarFieldEnum[]
  }

  /**
   * DoctorTask.dcrReports
   */
  export type DoctorTask$dcrReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DcrReport
     */
    select?: DcrReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DcrReport
     */
    omit?: DcrReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DcrReportInclude<ExtArgs> | null
    where?: DcrReportWhereInput
    orderBy?: DcrReportOrderByWithRelationInput | DcrReportOrderByWithRelationInput[]
    cursor?: DcrReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DcrReportScalarFieldEnum | DcrReportScalarFieldEnum[]
  }

  /**
   * DoctorTask without action
   */
  export type DoctorTaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorTask
     */
    select?: DoctorTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorTask
     */
    omit?: DoctorTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorTaskInclude<ExtArgs> | null
  }


  /**
   * Model ChemistTask
   */

  export type AggregateChemistTask = {
    _count: ChemistTaskCountAggregateOutputType | null
    _min: ChemistTaskMinAggregateOutputType | null
    _max: ChemistTaskMaxAggregateOutputType | null
  }

  export type ChemistTaskMinAggregateOutputType = {
    id: string | null
    plannerId: string | null
    employeeId: string | null
    chemistId: string | null
    taskDate: Date | null
    startTime: Date | null
    endTime: Date | null
    taskStatus: $Enums.TaskStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChemistTaskMaxAggregateOutputType = {
    id: string | null
    plannerId: string | null
    employeeId: string | null
    chemistId: string | null
    taskDate: Date | null
    startTime: Date | null
    endTime: Date | null
    taskStatus: $Enums.TaskStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChemistTaskCountAggregateOutputType = {
    id: number
    plannerId: number
    employeeId: number
    chemistId: number
    taskDate: number
    startTime: number
    endTime: number
    taskStatus: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ChemistTaskMinAggregateInputType = {
    id?: true
    plannerId?: true
    employeeId?: true
    chemistId?: true
    taskDate?: true
    startTime?: true
    endTime?: true
    taskStatus?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChemistTaskMaxAggregateInputType = {
    id?: true
    plannerId?: true
    employeeId?: true
    chemistId?: true
    taskDate?: true
    startTime?: true
    endTime?: true
    taskStatus?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChemistTaskCountAggregateInputType = {
    id?: true
    plannerId?: true
    employeeId?: true
    chemistId?: true
    taskDate?: true
    startTime?: true
    endTime?: true
    taskStatus?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ChemistTaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChemistTask to aggregate.
     */
    where?: ChemistTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChemistTasks to fetch.
     */
    orderBy?: ChemistTaskOrderByWithRelationInput | ChemistTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChemistTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChemistTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChemistTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChemistTasks
    **/
    _count?: true | ChemistTaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChemistTaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChemistTaskMaxAggregateInputType
  }

  export type GetChemistTaskAggregateType<T extends ChemistTaskAggregateArgs> = {
        [P in keyof T & keyof AggregateChemistTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChemistTask[P]>
      : GetScalarType<T[P], AggregateChemistTask[P]>
  }




  export type ChemistTaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChemistTaskWhereInput
    orderBy?: ChemistTaskOrderByWithAggregationInput | ChemistTaskOrderByWithAggregationInput[]
    by: ChemistTaskScalarFieldEnum[] | ChemistTaskScalarFieldEnum
    having?: ChemistTaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChemistTaskCountAggregateInputType | true
    _min?: ChemistTaskMinAggregateInputType
    _max?: ChemistTaskMaxAggregateInputType
  }

  export type ChemistTaskGroupByOutputType = {
    id: string
    plannerId: string
    employeeId: string
    chemistId: string
    taskDate: Date
    startTime: Date
    endTime: Date
    taskStatus: $Enums.TaskStatus
    createdAt: Date
    updatedAt: Date
    _count: ChemistTaskCountAggregateOutputType | null
    _min: ChemistTaskMinAggregateOutputType | null
    _max: ChemistTaskMaxAggregateOutputType | null
  }

  type GetChemistTaskGroupByPayload<T extends ChemistTaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChemistTaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChemistTaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChemistTaskGroupByOutputType[P]>
            : GetScalarType<T[P], ChemistTaskGroupByOutputType[P]>
        }
      >
    >


  export type ChemistTaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    plannerId?: boolean
    employeeId?: boolean
    chemistId?: boolean
    taskDate?: boolean
    startTime?: boolean
    endTime?: boolean
    taskStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    planner?: boolean | TaskPlannerDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    chemist?: boolean | ChemistDefaultArgs<ExtArgs>
    chemistInteractions?: boolean | ChemistTask$chemistInteractionsArgs<ExtArgs>
    dcrReports?: boolean | ChemistTask$dcrReportsArgs<ExtArgs>
    _count?: boolean | ChemistTaskCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chemistTask"]>

  export type ChemistTaskSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    plannerId?: boolean
    employeeId?: boolean
    chemistId?: boolean
    taskDate?: boolean
    startTime?: boolean
    endTime?: boolean
    taskStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    planner?: boolean | TaskPlannerDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    chemist?: boolean | ChemistDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chemistTask"]>

  export type ChemistTaskSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    plannerId?: boolean
    employeeId?: boolean
    chemistId?: boolean
    taskDate?: boolean
    startTime?: boolean
    endTime?: boolean
    taskStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    planner?: boolean | TaskPlannerDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    chemist?: boolean | ChemistDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chemistTask"]>

  export type ChemistTaskSelectScalar = {
    id?: boolean
    plannerId?: boolean
    employeeId?: boolean
    chemistId?: boolean
    taskDate?: boolean
    startTime?: boolean
    endTime?: boolean
    taskStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ChemistTaskOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "plannerId" | "employeeId" | "chemistId" | "taskDate" | "startTime" | "endTime" | "taskStatus" | "createdAt" | "updatedAt", ExtArgs["result"]["chemistTask"]>
  export type ChemistTaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    planner?: boolean | TaskPlannerDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    chemist?: boolean | ChemistDefaultArgs<ExtArgs>
    chemistInteractions?: boolean | ChemistTask$chemistInteractionsArgs<ExtArgs>
    dcrReports?: boolean | ChemistTask$dcrReportsArgs<ExtArgs>
    _count?: boolean | ChemistTaskCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChemistTaskIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    planner?: boolean | TaskPlannerDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    chemist?: boolean | ChemistDefaultArgs<ExtArgs>
  }
  export type ChemistTaskIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    planner?: boolean | TaskPlannerDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    chemist?: boolean | ChemistDefaultArgs<ExtArgs>
  }

  export type $ChemistTaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChemistTask"
    objects: {
      planner: Prisma.$TaskPlannerPayload<ExtArgs>
      employee: Prisma.$EmployeePayload<ExtArgs>
      chemist: Prisma.$ChemistPayload<ExtArgs>
      chemistInteractions: Prisma.$ChemistInteractionPayload<ExtArgs>[]
      dcrReports: Prisma.$DcrReportPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      plannerId: string
      employeeId: string
      chemistId: string
      taskDate: Date
      startTime: Date
      endTime: Date
      taskStatus: $Enums.TaskStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["chemistTask"]>
    composites: {}
  }

  type ChemistTaskGetPayload<S extends boolean | null | undefined | ChemistTaskDefaultArgs> = $Result.GetResult<Prisma.$ChemistTaskPayload, S>

  type ChemistTaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChemistTaskFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChemistTaskCountAggregateInputType | true
    }

  export interface ChemistTaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChemistTask'], meta: { name: 'ChemistTask' } }
    /**
     * Find zero or one ChemistTask that matches the filter.
     * @param {ChemistTaskFindUniqueArgs} args - Arguments to find a ChemistTask
     * @example
     * // Get one ChemistTask
     * const chemistTask = await prisma.chemistTask.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChemistTaskFindUniqueArgs>(args: SelectSubset<T, ChemistTaskFindUniqueArgs<ExtArgs>>): Prisma__ChemistTaskClient<$Result.GetResult<Prisma.$ChemistTaskPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChemistTask that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChemistTaskFindUniqueOrThrowArgs} args - Arguments to find a ChemistTask
     * @example
     * // Get one ChemistTask
     * const chemistTask = await prisma.chemistTask.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChemistTaskFindUniqueOrThrowArgs>(args: SelectSubset<T, ChemistTaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChemistTaskClient<$Result.GetResult<Prisma.$ChemistTaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChemistTask that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistTaskFindFirstArgs} args - Arguments to find a ChemistTask
     * @example
     * // Get one ChemistTask
     * const chemistTask = await prisma.chemistTask.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChemistTaskFindFirstArgs>(args?: SelectSubset<T, ChemistTaskFindFirstArgs<ExtArgs>>): Prisma__ChemistTaskClient<$Result.GetResult<Prisma.$ChemistTaskPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChemistTask that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistTaskFindFirstOrThrowArgs} args - Arguments to find a ChemistTask
     * @example
     * // Get one ChemistTask
     * const chemistTask = await prisma.chemistTask.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChemistTaskFindFirstOrThrowArgs>(args?: SelectSubset<T, ChemistTaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChemistTaskClient<$Result.GetResult<Prisma.$ChemistTaskPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChemistTasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistTaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChemistTasks
     * const chemistTasks = await prisma.chemistTask.findMany()
     * 
     * // Get first 10 ChemistTasks
     * const chemistTasks = await prisma.chemistTask.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chemistTaskWithIdOnly = await prisma.chemistTask.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChemistTaskFindManyArgs>(args?: SelectSubset<T, ChemistTaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChemistTaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChemistTask.
     * @param {ChemistTaskCreateArgs} args - Arguments to create a ChemistTask.
     * @example
     * // Create one ChemistTask
     * const ChemistTask = await prisma.chemistTask.create({
     *   data: {
     *     // ... data to create a ChemistTask
     *   }
     * })
     * 
     */
    create<T extends ChemistTaskCreateArgs>(args: SelectSubset<T, ChemistTaskCreateArgs<ExtArgs>>): Prisma__ChemistTaskClient<$Result.GetResult<Prisma.$ChemistTaskPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChemistTasks.
     * @param {ChemistTaskCreateManyArgs} args - Arguments to create many ChemistTasks.
     * @example
     * // Create many ChemistTasks
     * const chemistTask = await prisma.chemistTask.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChemistTaskCreateManyArgs>(args?: SelectSubset<T, ChemistTaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChemistTasks and returns the data saved in the database.
     * @param {ChemistTaskCreateManyAndReturnArgs} args - Arguments to create many ChemistTasks.
     * @example
     * // Create many ChemistTasks
     * const chemistTask = await prisma.chemistTask.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChemistTasks and only return the `id`
     * const chemistTaskWithIdOnly = await prisma.chemistTask.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChemistTaskCreateManyAndReturnArgs>(args?: SelectSubset<T, ChemistTaskCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChemistTaskPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ChemistTask.
     * @param {ChemistTaskDeleteArgs} args - Arguments to delete one ChemistTask.
     * @example
     * // Delete one ChemistTask
     * const ChemistTask = await prisma.chemistTask.delete({
     *   where: {
     *     // ... filter to delete one ChemistTask
     *   }
     * })
     * 
     */
    delete<T extends ChemistTaskDeleteArgs>(args: SelectSubset<T, ChemistTaskDeleteArgs<ExtArgs>>): Prisma__ChemistTaskClient<$Result.GetResult<Prisma.$ChemistTaskPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChemistTask.
     * @param {ChemistTaskUpdateArgs} args - Arguments to update one ChemistTask.
     * @example
     * // Update one ChemistTask
     * const chemistTask = await prisma.chemistTask.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChemistTaskUpdateArgs>(args: SelectSubset<T, ChemistTaskUpdateArgs<ExtArgs>>): Prisma__ChemistTaskClient<$Result.GetResult<Prisma.$ChemistTaskPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChemistTasks.
     * @param {ChemistTaskDeleteManyArgs} args - Arguments to filter ChemistTasks to delete.
     * @example
     * // Delete a few ChemistTasks
     * const { count } = await prisma.chemistTask.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChemistTaskDeleteManyArgs>(args?: SelectSubset<T, ChemistTaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChemistTasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistTaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChemistTasks
     * const chemistTask = await prisma.chemistTask.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChemistTaskUpdateManyArgs>(args: SelectSubset<T, ChemistTaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChemistTasks and returns the data updated in the database.
     * @param {ChemistTaskUpdateManyAndReturnArgs} args - Arguments to update many ChemistTasks.
     * @example
     * // Update many ChemistTasks
     * const chemistTask = await prisma.chemistTask.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChemistTasks and only return the `id`
     * const chemistTaskWithIdOnly = await prisma.chemistTask.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChemistTaskUpdateManyAndReturnArgs>(args: SelectSubset<T, ChemistTaskUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChemistTaskPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ChemistTask.
     * @param {ChemistTaskUpsertArgs} args - Arguments to update or create a ChemistTask.
     * @example
     * // Update or create a ChemistTask
     * const chemistTask = await prisma.chemistTask.upsert({
     *   create: {
     *     // ... data to create a ChemistTask
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChemistTask we want to update
     *   }
     * })
     */
    upsert<T extends ChemistTaskUpsertArgs>(args: SelectSubset<T, ChemistTaskUpsertArgs<ExtArgs>>): Prisma__ChemistTaskClient<$Result.GetResult<Prisma.$ChemistTaskPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChemistTasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistTaskCountArgs} args - Arguments to filter ChemistTasks to count.
     * @example
     * // Count the number of ChemistTasks
     * const count = await prisma.chemistTask.count({
     *   where: {
     *     // ... the filter for the ChemistTasks we want to count
     *   }
     * })
    **/
    count<T extends ChemistTaskCountArgs>(
      args?: Subset<T, ChemistTaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChemistTaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChemistTask.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistTaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChemistTaskAggregateArgs>(args: Subset<T, ChemistTaskAggregateArgs>): Prisma.PrismaPromise<GetChemistTaskAggregateType<T>>

    /**
     * Group by ChemistTask.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChemistTaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChemistTaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChemistTaskGroupByArgs['orderBy'] }
        : { orderBy?: ChemistTaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChemistTaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChemistTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChemistTask model
   */
  readonly fields: ChemistTaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChemistTask.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChemistTaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    planner<T extends TaskPlannerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TaskPlannerDefaultArgs<ExtArgs>>): Prisma__TaskPlannerClient<$Result.GetResult<Prisma.$TaskPlannerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    chemist<T extends ChemistDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChemistDefaultArgs<ExtArgs>>): Prisma__ChemistClient<$Result.GetResult<Prisma.$ChemistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    chemistInteractions<T extends ChemistTask$chemistInteractionsArgs<ExtArgs> = {}>(args?: Subset<T, ChemistTask$chemistInteractionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChemistInteractionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    dcrReports<T extends ChemistTask$dcrReportsArgs<ExtArgs> = {}>(args?: Subset<T, ChemistTask$dcrReportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DcrReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChemistTask model
   */
  interface ChemistTaskFieldRefs {
    readonly id: FieldRef<"ChemistTask", 'String'>
    readonly plannerId: FieldRef<"ChemistTask", 'String'>
    readonly employeeId: FieldRef<"ChemistTask", 'String'>
    readonly chemistId: FieldRef<"ChemistTask", 'String'>
    readonly taskDate: FieldRef<"ChemistTask", 'DateTime'>
    readonly startTime: FieldRef<"ChemistTask", 'DateTime'>
    readonly endTime: FieldRef<"ChemistTask", 'DateTime'>
    readonly taskStatus: FieldRef<"ChemistTask", 'TaskStatus'>
    readonly createdAt: FieldRef<"ChemistTask", 'DateTime'>
    readonly updatedAt: FieldRef<"ChemistTask", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ChemistTask findUnique
   */
  export type ChemistTaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistTask
     */
    select?: ChemistTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistTask
     */
    omit?: ChemistTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistTaskInclude<ExtArgs> | null
    /**
     * Filter, which ChemistTask to fetch.
     */
    where: ChemistTaskWhereUniqueInput
  }

  /**
   * ChemistTask findUniqueOrThrow
   */
  export type ChemistTaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistTask
     */
    select?: ChemistTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistTask
     */
    omit?: ChemistTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistTaskInclude<ExtArgs> | null
    /**
     * Filter, which ChemistTask to fetch.
     */
    where: ChemistTaskWhereUniqueInput
  }

  /**
   * ChemistTask findFirst
   */
  export type ChemistTaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistTask
     */
    select?: ChemistTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistTask
     */
    omit?: ChemistTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistTaskInclude<ExtArgs> | null
    /**
     * Filter, which ChemistTask to fetch.
     */
    where?: ChemistTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChemistTasks to fetch.
     */
    orderBy?: ChemistTaskOrderByWithRelationInput | ChemistTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChemistTasks.
     */
    cursor?: ChemistTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChemistTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChemistTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChemistTasks.
     */
    distinct?: ChemistTaskScalarFieldEnum | ChemistTaskScalarFieldEnum[]
  }

  /**
   * ChemistTask findFirstOrThrow
   */
  export type ChemistTaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistTask
     */
    select?: ChemistTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistTask
     */
    omit?: ChemistTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistTaskInclude<ExtArgs> | null
    /**
     * Filter, which ChemistTask to fetch.
     */
    where?: ChemistTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChemistTasks to fetch.
     */
    orderBy?: ChemistTaskOrderByWithRelationInput | ChemistTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChemistTasks.
     */
    cursor?: ChemistTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChemistTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChemistTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChemistTasks.
     */
    distinct?: ChemistTaskScalarFieldEnum | ChemistTaskScalarFieldEnum[]
  }

  /**
   * ChemistTask findMany
   */
  export type ChemistTaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistTask
     */
    select?: ChemistTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistTask
     */
    omit?: ChemistTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistTaskInclude<ExtArgs> | null
    /**
     * Filter, which ChemistTasks to fetch.
     */
    where?: ChemistTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChemistTasks to fetch.
     */
    orderBy?: ChemistTaskOrderByWithRelationInput | ChemistTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChemistTasks.
     */
    cursor?: ChemistTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChemistTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChemistTasks.
     */
    skip?: number
    distinct?: ChemistTaskScalarFieldEnum | ChemistTaskScalarFieldEnum[]
  }

  /**
   * ChemistTask create
   */
  export type ChemistTaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistTask
     */
    select?: ChemistTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistTask
     */
    omit?: ChemistTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistTaskInclude<ExtArgs> | null
    /**
     * The data needed to create a ChemistTask.
     */
    data: XOR<ChemistTaskCreateInput, ChemistTaskUncheckedCreateInput>
  }

  /**
   * ChemistTask createMany
   */
  export type ChemistTaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChemistTasks.
     */
    data: ChemistTaskCreateManyInput | ChemistTaskCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChemistTask createManyAndReturn
   */
  export type ChemistTaskCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistTask
     */
    select?: ChemistTaskSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistTask
     */
    omit?: ChemistTaskOmit<ExtArgs> | null
    /**
     * The data used to create many ChemistTasks.
     */
    data: ChemistTaskCreateManyInput | ChemistTaskCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistTaskIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChemistTask update
   */
  export type ChemistTaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistTask
     */
    select?: ChemistTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistTask
     */
    omit?: ChemistTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistTaskInclude<ExtArgs> | null
    /**
     * The data needed to update a ChemistTask.
     */
    data: XOR<ChemistTaskUpdateInput, ChemistTaskUncheckedUpdateInput>
    /**
     * Choose, which ChemistTask to update.
     */
    where: ChemistTaskWhereUniqueInput
  }

  /**
   * ChemistTask updateMany
   */
  export type ChemistTaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChemistTasks.
     */
    data: XOR<ChemistTaskUpdateManyMutationInput, ChemistTaskUncheckedUpdateManyInput>
    /**
     * Filter which ChemistTasks to update
     */
    where?: ChemistTaskWhereInput
    /**
     * Limit how many ChemistTasks to update.
     */
    limit?: number
  }

  /**
   * ChemistTask updateManyAndReturn
   */
  export type ChemistTaskUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistTask
     */
    select?: ChemistTaskSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistTask
     */
    omit?: ChemistTaskOmit<ExtArgs> | null
    /**
     * The data used to update ChemistTasks.
     */
    data: XOR<ChemistTaskUpdateManyMutationInput, ChemistTaskUncheckedUpdateManyInput>
    /**
     * Filter which ChemistTasks to update
     */
    where?: ChemistTaskWhereInput
    /**
     * Limit how many ChemistTasks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistTaskIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChemistTask upsert
   */
  export type ChemistTaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistTask
     */
    select?: ChemistTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistTask
     */
    omit?: ChemistTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistTaskInclude<ExtArgs> | null
    /**
     * The filter to search for the ChemistTask to update in case it exists.
     */
    where: ChemistTaskWhereUniqueInput
    /**
     * In case the ChemistTask found by the `where` argument doesn't exist, create a new ChemistTask with this data.
     */
    create: XOR<ChemistTaskCreateInput, ChemistTaskUncheckedCreateInput>
    /**
     * In case the ChemistTask was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChemistTaskUpdateInput, ChemistTaskUncheckedUpdateInput>
  }

  /**
   * ChemistTask delete
   */
  export type ChemistTaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistTask
     */
    select?: ChemistTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistTask
     */
    omit?: ChemistTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistTaskInclude<ExtArgs> | null
    /**
     * Filter which ChemistTask to delete.
     */
    where: ChemistTaskWhereUniqueInput
  }

  /**
   * ChemistTask deleteMany
   */
  export type ChemistTaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChemistTasks to delete
     */
    where?: ChemistTaskWhereInput
    /**
     * Limit how many ChemistTasks to delete.
     */
    limit?: number
  }

  /**
   * ChemistTask.chemistInteractions
   */
  export type ChemistTask$chemistInteractionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistInteraction
     */
    select?: ChemistInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistInteraction
     */
    omit?: ChemistInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistInteractionInclude<ExtArgs> | null
    where?: ChemistInteractionWhereInput
    orderBy?: ChemistInteractionOrderByWithRelationInput | ChemistInteractionOrderByWithRelationInput[]
    cursor?: ChemistInteractionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChemistInteractionScalarFieldEnum | ChemistInteractionScalarFieldEnum[]
  }

  /**
   * ChemistTask.dcrReports
   */
  export type ChemistTask$dcrReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DcrReport
     */
    select?: DcrReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DcrReport
     */
    omit?: DcrReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DcrReportInclude<ExtArgs> | null
    where?: DcrReportWhereInput
    orderBy?: DcrReportOrderByWithRelationInput | DcrReportOrderByWithRelationInput[]
    cursor?: DcrReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DcrReportScalarFieldEnum | DcrReportScalarFieldEnum[]
  }

  /**
   * ChemistTask without action
   */
  export type ChemistTaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChemistTask
     */
    select?: ChemistTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChemistTask
     */
    omit?: ChemistTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChemistTaskInclude<ExtArgs> | null
  }


  /**
   * Model TourPlanTask
   */

  export type AggregateTourPlanTask = {
    _count: TourPlanTaskCountAggregateOutputType | null
    _min: TourPlanTaskMinAggregateOutputType | null
    _max: TourPlanTaskMaxAggregateOutputType | null
  }

  export type TourPlanTaskMinAggregateOutputType = {
    id: string | null
    plannerId: string | null
    employeeId: string | null
    tourPlanId: string | null
    location: string | null
    taskDate: Date | null
    startTime: Date | null
    endTime: Date | null
    taskStatus: $Enums.TaskStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TourPlanTaskMaxAggregateOutputType = {
    id: string | null
    plannerId: string | null
    employeeId: string | null
    tourPlanId: string | null
    location: string | null
    taskDate: Date | null
    startTime: Date | null
    endTime: Date | null
    taskStatus: $Enums.TaskStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TourPlanTaskCountAggregateOutputType = {
    id: number
    plannerId: number
    employeeId: number
    tourPlanId: number
    location: number
    taskDate: number
    startTime: number
    endTime: number
    taskStatus: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TourPlanTaskMinAggregateInputType = {
    id?: true
    plannerId?: true
    employeeId?: true
    tourPlanId?: true
    location?: true
    taskDate?: true
    startTime?: true
    endTime?: true
    taskStatus?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TourPlanTaskMaxAggregateInputType = {
    id?: true
    plannerId?: true
    employeeId?: true
    tourPlanId?: true
    location?: true
    taskDate?: true
    startTime?: true
    endTime?: true
    taskStatus?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TourPlanTaskCountAggregateInputType = {
    id?: true
    plannerId?: true
    employeeId?: true
    tourPlanId?: true
    location?: true
    taskDate?: true
    startTime?: true
    endTime?: true
    taskStatus?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TourPlanTaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TourPlanTask to aggregate.
     */
    where?: TourPlanTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TourPlanTasks to fetch.
     */
    orderBy?: TourPlanTaskOrderByWithRelationInput | TourPlanTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TourPlanTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TourPlanTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TourPlanTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TourPlanTasks
    **/
    _count?: true | TourPlanTaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TourPlanTaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TourPlanTaskMaxAggregateInputType
  }

  export type GetTourPlanTaskAggregateType<T extends TourPlanTaskAggregateArgs> = {
        [P in keyof T & keyof AggregateTourPlanTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTourPlanTask[P]>
      : GetScalarType<T[P], AggregateTourPlanTask[P]>
  }




  export type TourPlanTaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TourPlanTaskWhereInput
    orderBy?: TourPlanTaskOrderByWithAggregationInput | TourPlanTaskOrderByWithAggregationInput[]
    by: TourPlanTaskScalarFieldEnum[] | TourPlanTaskScalarFieldEnum
    having?: TourPlanTaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TourPlanTaskCountAggregateInputType | true
    _min?: TourPlanTaskMinAggregateInputType
    _max?: TourPlanTaskMaxAggregateInputType
  }

  export type TourPlanTaskGroupByOutputType = {
    id: string
    plannerId: string
    employeeId: string
    tourPlanId: string
    location: string
    taskDate: Date
    startTime: Date
    endTime: Date
    taskStatus: $Enums.TaskStatus
    createdAt: Date
    updatedAt: Date
    _count: TourPlanTaskCountAggregateOutputType | null
    _min: TourPlanTaskMinAggregateOutputType | null
    _max: TourPlanTaskMaxAggregateOutputType | null
  }

  type GetTourPlanTaskGroupByPayload<T extends TourPlanTaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TourPlanTaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TourPlanTaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TourPlanTaskGroupByOutputType[P]>
            : GetScalarType<T[P], TourPlanTaskGroupByOutputType[P]>
        }
      >
    >


  export type TourPlanTaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    plannerId?: boolean
    employeeId?: boolean
    tourPlanId?: boolean
    location?: boolean
    taskDate?: boolean
    startTime?: boolean
    endTime?: boolean
    taskStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    planner?: boolean | TaskPlannerDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    tourPlan?: boolean | TourPlanDefaultArgs<ExtArgs>
    tourPlanReports?: boolean | TourPlanTask$tourPlanReportsArgs<ExtArgs>
    dcrReports?: boolean | TourPlanTask$dcrReportsArgs<ExtArgs>
    _count?: boolean | TourPlanTaskCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tourPlanTask"]>

  export type TourPlanTaskSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    plannerId?: boolean
    employeeId?: boolean
    tourPlanId?: boolean
    location?: boolean
    taskDate?: boolean
    startTime?: boolean
    endTime?: boolean
    taskStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    planner?: boolean | TaskPlannerDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    tourPlan?: boolean | TourPlanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tourPlanTask"]>

  export type TourPlanTaskSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    plannerId?: boolean
    employeeId?: boolean
    tourPlanId?: boolean
    location?: boolean
    taskDate?: boolean
    startTime?: boolean
    endTime?: boolean
    taskStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    planner?: boolean | TaskPlannerDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    tourPlan?: boolean | TourPlanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tourPlanTask"]>

  export type TourPlanTaskSelectScalar = {
    id?: boolean
    plannerId?: boolean
    employeeId?: boolean
    tourPlanId?: boolean
    location?: boolean
    taskDate?: boolean
    startTime?: boolean
    endTime?: boolean
    taskStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TourPlanTaskOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "plannerId" | "employeeId" | "tourPlanId" | "location" | "taskDate" | "startTime" | "endTime" | "taskStatus" | "createdAt" | "updatedAt", ExtArgs["result"]["tourPlanTask"]>
  export type TourPlanTaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    planner?: boolean | TaskPlannerDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    tourPlan?: boolean | TourPlanDefaultArgs<ExtArgs>
    tourPlanReports?: boolean | TourPlanTask$tourPlanReportsArgs<ExtArgs>
    dcrReports?: boolean | TourPlanTask$dcrReportsArgs<ExtArgs>
    _count?: boolean | TourPlanTaskCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TourPlanTaskIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    planner?: boolean | TaskPlannerDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    tourPlan?: boolean | TourPlanDefaultArgs<ExtArgs>
  }
  export type TourPlanTaskIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    planner?: boolean | TaskPlannerDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    tourPlan?: boolean | TourPlanDefaultArgs<ExtArgs>
  }

  export type $TourPlanTaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TourPlanTask"
    objects: {
      planner: Prisma.$TaskPlannerPayload<ExtArgs>
      employee: Prisma.$EmployeePayload<ExtArgs>
      tourPlan: Prisma.$TourPlanPayload<ExtArgs>
      tourPlanReports: Prisma.$TourPlanReportPayload<ExtArgs>[]
      dcrReports: Prisma.$DcrReportPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      plannerId: string
      employeeId: string
      tourPlanId: string
      location: string
      taskDate: Date
      startTime: Date
      endTime: Date
      taskStatus: $Enums.TaskStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tourPlanTask"]>
    composites: {}
  }

  type TourPlanTaskGetPayload<S extends boolean | null | undefined | TourPlanTaskDefaultArgs> = $Result.GetResult<Prisma.$TourPlanTaskPayload, S>

  type TourPlanTaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TourPlanTaskFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TourPlanTaskCountAggregateInputType | true
    }

  export interface TourPlanTaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TourPlanTask'], meta: { name: 'TourPlanTask' } }
    /**
     * Find zero or one TourPlanTask that matches the filter.
     * @param {TourPlanTaskFindUniqueArgs} args - Arguments to find a TourPlanTask
     * @example
     * // Get one TourPlanTask
     * const tourPlanTask = await prisma.tourPlanTask.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TourPlanTaskFindUniqueArgs>(args: SelectSubset<T, TourPlanTaskFindUniqueArgs<ExtArgs>>): Prisma__TourPlanTaskClient<$Result.GetResult<Prisma.$TourPlanTaskPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TourPlanTask that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TourPlanTaskFindUniqueOrThrowArgs} args - Arguments to find a TourPlanTask
     * @example
     * // Get one TourPlanTask
     * const tourPlanTask = await prisma.tourPlanTask.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TourPlanTaskFindUniqueOrThrowArgs>(args: SelectSubset<T, TourPlanTaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TourPlanTaskClient<$Result.GetResult<Prisma.$TourPlanTaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TourPlanTask that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TourPlanTaskFindFirstArgs} args - Arguments to find a TourPlanTask
     * @example
     * // Get one TourPlanTask
     * const tourPlanTask = await prisma.tourPlanTask.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TourPlanTaskFindFirstArgs>(args?: SelectSubset<T, TourPlanTaskFindFirstArgs<ExtArgs>>): Prisma__TourPlanTaskClient<$Result.GetResult<Prisma.$TourPlanTaskPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TourPlanTask that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TourPlanTaskFindFirstOrThrowArgs} args - Arguments to find a TourPlanTask
     * @example
     * // Get one TourPlanTask
     * const tourPlanTask = await prisma.tourPlanTask.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TourPlanTaskFindFirstOrThrowArgs>(args?: SelectSubset<T, TourPlanTaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__TourPlanTaskClient<$Result.GetResult<Prisma.$TourPlanTaskPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TourPlanTasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TourPlanTaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TourPlanTasks
     * const tourPlanTasks = await prisma.tourPlanTask.findMany()
     * 
     * // Get first 10 TourPlanTasks
     * const tourPlanTasks = await prisma.tourPlanTask.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tourPlanTaskWithIdOnly = await prisma.tourPlanTask.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TourPlanTaskFindManyArgs>(args?: SelectSubset<T, TourPlanTaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TourPlanTaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TourPlanTask.
     * @param {TourPlanTaskCreateArgs} args - Arguments to create a TourPlanTask.
     * @example
     * // Create one TourPlanTask
     * const TourPlanTask = await prisma.tourPlanTask.create({
     *   data: {
     *     // ... data to create a TourPlanTask
     *   }
     * })
     * 
     */
    create<T extends TourPlanTaskCreateArgs>(args: SelectSubset<T, TourPlanTaskCreateArgs<ExtArgs>>): Prisma__TourPlanTaskClient<$Result.GetResult<Prisma.$TourPlanTaskPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TourPlanTasks.
     * @param {TourPlanTaskCreateManyArgs} args - Arguments to create many TourPlanTasks.
     * @example
     * // Create many TourPlanTasks
     * const tourPlanTask = await prisma.tourPlanTask.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TourPlanTaskCreateManyArgs>(args?: SelectSubset<T, TourPlanTaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TourPlanTasks and returns the data saved in the database.
     * @param {TourPlanTaskCreateManyAndReturnArgs} args - Arguments to create many TourPlanTasks.
     * @example
     * // Create many TourPlanTasks
     * const tourPlanTask = await prisma.tourPlanTask.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TourPlanTasks and only return the `id`
     * const tourPlanTaskWithIdOnly = await prisma.tourPlanTask.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TourPlanTaskCreateManyAndReturnArgs>(args?: SelectSubset<T, TourPlanTaskCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TourPlanTaskPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TourPlanTask.
     * @param {TourPlanTaskDeleteArgs} args - Arguments to delete one TourPlanTask.
     * @example
     * // Delete one TourPlanTask
     * const TourPlanTask = await prisma.tourPlanTask.delete({
     *   where: {
     *     // ... filter to delete one TourPlanTask
     *   }
     * })
     * 
     */
    delete<T extends TourPlanTaskDeleteArgs>(args: SelectSubset<T, TourPlanTaskDeleteArgs<ExtArgs>>): Prisma__TourPlanTaskClient<$Result.GetResult<Prisma.$TourPlanTaskPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TourPlanTask.
     * @param {TourPlanTaskUpdateArgs} args - Arguments to update one TourPlanTask.
     * @example
     * // Update one TourPlanTask
     * const tourPlanTask = await prisma.tourPlanTask.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TourPlanTaskUpdateArgs>(args: SelectSubset<T, TourPlanTaskUpdateArgs<ExtArgs>>): Prisma__TourPlanTaskClient<$Result.GetResult<Prisma.$TourPlanTaskPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TourPlanTasks.
     * @param {TourPlanTaskDeleteManyArgs} args - Arguments to filter TourPlanTasks to delete.
     * @example
     * // Delete a few TourPlanTasks
     * const { count } = await prisma.tourPlanTask.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TourPlanTaskDeleteManyArgs>(args?: SelectSubset<T, TourPlanTaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TourPlanTasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TourPlanTaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TourPlanTasks
     * const tourPlanTask = await prisma.tourPlanTask.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TourPlanTaskUpdateManyArgs>(args: SelectSubset<T, TourPlanTaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TourPlanTasks and returns the data updated in the database.
     * @param {TourPlanTaskUpdateManyAndReturnArgs} args - Arguments to update many TourPlanTasks.
     * @example
     * // Update many TourPlanTasks
     * const tourPlanTask = await prisma.tourPlanTask.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TourPlanTasks and only return the `id`
     * const tourPlanTaskWithIdOnly = await prisma.tourPlanTask.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TourPlanTaskUpdateManyAndReturnArgs>(args: SelectSubset<T, TourPlanTaskUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TourPlanTaskPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TourPlanTask.
     * @param {TourPlanTaskUpsertArgs} args - Arguments to update or create a TourPlanTask.
     * @example
     * // Update or create a TourPlanTask
     * const tourPlanTask = await prisma.tourPlanTask.upsert({
     *   create: {
     *     // ... data to create a TourPlanTask
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TourPlanTask we want to update
     *   }
     * })
     */
    upsert<T extends TourPlanTaskUpsertArgs>(args: SelectSubset<T, TourPlanTaskUpsertArgs<ExtArgs>>): Prisma__TourPlanTaskClient<$Result.GetResult<Prisma.$TourPlanTaskPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TourPlanTasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TourPlanTaskCountArgs} args - Arguments to filter TourPlanTasks to count.
     * @example
     * // Count the number of TourPlanTasks
     * const count = await prisma.tourPlanTask.count({
     *   where: {
     *     // ... the filter for the TourPlanTasks we want to count
     *   }
     * })
    **/
    count<T extends TourPlanTaskCountArgs>(
      args?: Subset<T, TourPlanTaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TourPlanTaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TourPlanTask.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TourPlanTaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TourPlanTaskAggregateArgs>(args: Subset<T, TourPlanTaskAggregateArgs>): Prisma.PrismaPromise<GetTourPlanTaskAggregateType<T>>

    /**
     * Group by TourPlanTask.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TourPlanTaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TourPlanTaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TourPlanTaskGroupByArgs['orderBy'] }
        : { orderBy?: TourPlanTaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TourPlanTaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTourPlanTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TourPlanTask model
   */
  readonly fields: TourPlanTaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TourPlanTask.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TourPlanTaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    planner<T extends TaskPlannerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TaskPlannerDefaultArgs<ExtArgs>>): Prisma__TaskPlannerClient<$Result.GetResult<Prisma.$TaskPlannerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tourPlan<T extends TourPlanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TourPlanDefaultArgs<ExtArgs>>): Prisma__TourPlanClient<$Result.GetResult<Prisma.$TourPlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tourPlanReports<T extends TourPlanTask$tourPlanReportsArgs<ExtArgs> = {}>(args?: Subset<T, TourPlanTask$tourPlanReportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TourPlanReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    dcrReports<T extends TourPlanTask$dcrReportsArgs<ExtArgs> = {}>(args?: Subset<T, TourPlanTask$dcrReportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DcrReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TourPlanTask model
   */
  interface TourPlanTaskFieldRefs {
    readonly id: FieldRef<"TourPlanTask", 'String'>
    readonly plannerId: FieldRef<"TourPlanTask", 'String'>
    readonly employeeId: FieldRef<"TourPlanTask", 'String'>
    readonly tourPlanId: FieldRef<"TourPlanTask", 'String'>
    readonly location: FieldRef<"TourPlanTask", 'String'>
    readonly taskDate: FieldRef<"TourPlanTask", 'DateTime'>
    readonly startTime: FieldRef<"TourPlanTask", 'DateTime'>
    readonly endTime: FieldRef<"TourPlanTask", 'DateTime'>
    readonly taskStatus: FieldRef<"TourPlanTask", 'TaskStatus'>
    readonly createdAt: FieldRef<"TourPlanTask", 'DateTime'>
    readonly updatedAt: FieldRef<"TourPlanTask", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TourPlanTask findUnique
   */
  export type TourPlanTaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlanTask
     */
    select?: TourPlanTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlanTask
     */
    omit?: TourPlanTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanTaskInclude<ExtArgs> | null
    /**
     * Filter, which TourPlanTask to fetch.
     */
    where: TourPlanTaskWhereUniqueInput
  }

  /**
   * TourPlanTask findUniqueOrThrow
   */
  export type TourPlanTaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlanTask
     */
    select?: TourPlanTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlanTask
     */
    omit?: TourPlanTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanTaskInclude<ExtArgs> | null
    /**
     * Filter, which TourPlanTask to fetch.
     */
    where: TourPlanTaskWhereUniqueInput
  }

  /**
   * TourPlanTask findFirst
   */
  export type TourPlanTaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlanTask
     */
    select?: TourPlanTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlanTask
     */
    omit?: TourPlanTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanTaskInclude<ExtArgs> | null
    /**
     * Filter, which TourPlanTask to fetch.
     */
    where?: TourPlanTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TourPlanTasks to fetch.
     */
    orderBy?: TourPlanTaskOrderByWithRelationInput | TourPlanTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TourPlanTasks.
     */
    cursor?: TourPlanTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TourPlanTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TourPlanTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TourPlanTasks.
     */
    distinct?: TourPlanTaskScalarFieldEnum | TourPlanTaskScalarFieldEnum[]
  }

  /**
   * TourPlanTask findFirstOrThrow
   */
  export type TourPlanTaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlanTask
     */
    select?: TourPlanTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlanTask
     */
    omit?: TourPlanTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanTaskInclude<ExtArgs> | null
    /**
     * Filter, which TourPlanTask to fetch.
     */
    where?: TourPlanTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TourPlanTasks to fetch.
     */
    orderBy?: TourPlanTaskOrderByWithRelationInput | TourPlanTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TourPlanTasks.
     */
    cursor?: TourPlanTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TourPlanTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TourPlanTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TourPlanTasks.
     */
    distinct?: TourPlanTaskScalarFieldEnum | TourPlanTaskScalarFieldEnum[]
  }

  /**
   * TourPlanTask findMany
   */
  export type TourPlanTaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlanTask
     */
    select?: TourPlanTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlanTask
     */
    omit?: TourPlanTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanTaskInclude<ExtArgs> | null
    /**
     * Filter, which TourPlanTasks to fetch.
     */
    where?: TourPlanTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TourPlanTasks to fetch.
     */
    orderBy?: TourPlanTaskOrderByWithRelationInput | TourPlanTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TourPlanTasks.
     */
    cursor?: TourPlanTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TourPlanTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TourPlanTasks.
     */
    skip?: number
    distinct?: TourPlanTaskScalarFieldEnum | TourPlanTaskScalarFieldEnum[]
  }

  /**
   * TourPlanTask create
   */
  export type TourPlanTaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlanTask
     */
    select?: TourPlanTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlanTask
     */
    omit?: TourPlanTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanTaskInclude<ExtArgs> | null
    /**
     * The data needed to create a TourPlanTask.
     */
    data: XOR<TourPlanTaskCreateInput, TourPlanTaskUncheckedCreateInput>
  }

  /**
   * TourPlanTask createMany
   */
  export type TourPlanTaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TourPlanTasks.
     */
    data: TourPlanTaskCreateManyInput | TourPlanTaskCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TourPlanTask createManyAndReturn
   */
  export type TourPlanTaskCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlanTask
     */
    select?: TourPlanTaskSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlanTask
     */
    omit?: TourPlanTaskOmit<ExtArgs> | null
    /**
     * The data used to create many TourPlanTasks.
     */
    data: TourPlanTaskCreateManyInput | TourPlanTaskCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanTaskIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TourPlanTask update
   */
  export type TourPlanTaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlanTask
     */
    select?: TourPlanTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlanTask
     */
    omit?: TourPlanTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanTaskInclude<ExtArgs> | null
    /**
     * The data needed to update a TourPlanTask.
     */
    data: XOR<TourPlanTaskUpdateInput, TourPlanTaskUncheckedUpdateInput>
    /**
     * Choose, which TourPlanTask to update.
     */
    where: TourPlanTaskWhereUniqueInput
  }

  /**
   * TourPlanTask updateMany
   */
  export type TourPlanTaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TourPlanTasks.
     */
    data: XOR<TourPlanTaskUpdateManyMutationInput, TourPlanTaskUncheckedUpdateManyInput>
    /**
     * Filter which TourPlanTasks to update
     */
    where?: TourPlanTaskWhereInput
    /**
     * Limit how many TourPlanTasks to update.
     */
    limit?: number
  }

  /**
   * TourPlanTask updateManyAndReturn
   */
  export type TourPlanTaskUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlanTask
     */
    select?: TourPlanTaskSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlanTask
     */
    omit?: TourPlanTaskOmit<ExtArgs> | null
    /**
     * The data used to update TourPlanTasks.
     */
    data: XOR<TourPlanTaskUpdateManyMutationInput, TourPlanTaskUncheckedUpdateManyInput>
    /**
     * Filter which TourPlanTasks to update
     */
    where?: TourPlanTaskWhereInput
    /**
     * Limit how many TourPlanTasks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanTaskIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TourPlanTask upsert
   */
  export type TourPlanTaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlanTask
     */
    select?: TourPlanTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlanTask
     */
    omit?: TourPlanTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanTaskInclude<ExtArgs> | null
    /**
     * The filter to search for the TourPlanTask to update in case it exists.
     */
    where: TourPlanTaskWhereUniqueInput
    /**
     * In case the TourPlanTask found by the `where` argument doesn't exist, create a new TourPlanTask with this data.
     */
    create: XOR<TourPlanTaskCreateInput, TourPlanTaskUncheckedCreateInput>
    /**
     * In case the TourPlanTask was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TourPlanTaskUpdateInput, TourPlanTaskUncheckedUpdateInput>
  }

  /**
   * TourPlanTask delete
   */
  export type TourPlanTaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlanTask
     */
    select?: TourPlanTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlanTask
     */
    omit?: TourPlanTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanTaskInclude<ExtArgs> | null
    /**
     * Filter which TourPlanTask to delete.
     */
    where: TourPlanTaskWhereUniqueInput
  }

  /**
   * TourPlanTask deleteMany
   */
  export type TourPlanTaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TourPlanTasks to delete
     */
    where?: TourPlanTaskWhereInput
    /**
     * Limit how many TourPlanTasks to delete.
     */
    limit?: number
  }

  /**
   * TourPlanTask.tourPlanReports
   */
  export type TourPlanTask$tourPlanReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlanReport
     */
    select?: TourPlanReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlanReport
     */
    omit?: TourPlanReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanReportInclude<ExtArgs> | null
    where?: TourPlanReportWhereInput
    orderBy?: TourPlanReportOrderByWithRelationInput | TourPlanReportOrderByWithRelationInput[]
    cursor?: TourPlanReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TourPlanReportScalarFieldEnum | TourPlanReportScalarFieldEnum[]
  }

  /**
   * TourPlanTask.dcrReports
   */
  export type TourPlanTask$dcrReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DcrReport
     */
    select?: DcrReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DcrReport
     */
    omit?: DcrReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DcrReportInclude<ExtArgs> | null
    where?: DcrReportWhereInput
    orderBy?: DcrReportOrderByWithRelationInput | DcrReportOrderByWithRelationInput[]
    cursor?: DcrReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DcrReportScalarFieldEnum | DcrReportScalarFieldEnum[]
  }

  /**
   * TourPlanTask without action
   */
  export type TourPlanTaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlanTask
     */
    select?: TourPlanTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlanTask
     */
    omit?: TourPlanTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanTaskInclude<ExtArgs> | null
  }


  /**
   * Model TourPlan
   */

  export type AggregateTourPlan = {
    _count: TourPlanCountAggregateOutputType | null
    _min: TourPlanMinAggregateOutputType | null
    _max: TourPlanMaxAggregateOutputType | null
  }

  export type TourPlanMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TourPlanMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TourPlanCountAggregateOutputType = {
    id: number
    name: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TourPlanMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TourPlanMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TourPlanCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TourPlanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TourPlan to aggregate.
     */
    where?: TourPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TourPlans to fetch.
     */
    orderBy?: TourPlanOrderByWithRelationInput | TourPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TourPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TourPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TourPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TourPlans
    **/
    _count?: true | TourPlanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TourPlanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TourPlanMaxAggregateInputType
  }

  export type GetTourPlanAggregateType<T extends TourPlanAggregateArgs> = {
        [P in keyof T & keyof AggregateTourPlan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTourPlan[P]>
      : GetScalarType<T[P], AggregateTourPlan[P]>
  }




  export type TourPlanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TourPlanWhereInput
    orderBy?: TourPlanOrderByWithAggregationInput | TourPlanOrderByWithAggregationInput[]
    by: TourPlanScalarFieldEnum[] | TourPlanScalarFieldEnum
    having?: TourPlanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TourPlanCountAggregateInputType | true
    _min?: TourPlanMinAggregateInputType
    _max?: TourPlanMaxAggregateInputType
  }

  export type TourPlanGroupByOutputType = {
    id: string
    name: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: TourPlanCountAggregateOutputType | null
    _min: TourPlanMinAggregateOutputType | null
    _max: TourPlanMaxAggregateOutputType | null
  }

  type GetTourPlanGroupByPayload<T extends TourPlanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TourPlanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TourPlanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TourPlanGroupByOutputType[P]>
            : GetScalarType<T[P], TourPlanGroupByOutputType[P]>
        }
      >
    >


  export type TourPlanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tourTasks?: boolean | TourPlan$tourTasksArgs<ExtArgs>
    _count?: boolean | TourPlanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tourPlan"]>

  export type TourPlanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["tourPlan"]>

  export type TourPlanSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["tourPlan"]>

  export type TourPlanSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TourPlanOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "createdAt" | "updatedAt", ExtArgs["result"]["tourPlan"]>
  export type TourPlanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tourTasks?: boolean | TourPlan$tourTasksArgs<ExtArgs>
    _count?: boolean | TourPlanCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TourPlanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TourPlanIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TourPlanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TourPlan"
    objects: {
      tourTasks: Prisma.$TourPlanTaskPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tourPlan"]>
    composites: {}
  }

  type TourPlanGetPayload<S extends boolean | null | undefined | TourPlanDefaultArgs> = $Result.GetResult<Prisma.$TourPlanPayload, S>

  type TourPlanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TourPlanFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TourPlanCountAggregateInputType | true
    }

  export interface TourPlanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TourPlan'], meta: { name: 'TourPlan' } }
    /**
     * Find zero or one TourPlan that matches the filter.
     * @param {TourPlanFindUniqueArgs} args - Arguments to find a TourPlan
     * @example
     * // Get one TourPlan
     * const tourPlan = await prisma.tourPlan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TourPlanFindUniqueArgs>(args: SelectSubset<T, TourPlanFindUniqueArgs<ExtArgs>>): Prisma__TourPlanClient<$Result.GetResult<Prisma.$TourPlanPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TourPlan that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TourPlanFindUniqueOrThrowArgs} args - Arguments to find a TourPlan
     * @example
     * // Get one TourPlan
     * const tourPlan = await prisma.tourPlan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TourPlanFindUniqueOrThrowArgs>(args: SelectSubset<T, TourPlanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TourPlanClient<$Result.GetResult<Prisma.$TourPlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TourPlan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TourPlanFindFirstArgs} args - Arguments to find a TourPlan
     * @example
     * // Get one TourPlan
     * const tourPlan = await prisma.tourPlan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TourPlanFindFirstArgs>(args?: SelectSubset<T, TourPlanFindFirstArgs<ExtArgs>>): Prisma__TourPlanClient<$Result.GetResult<Prisma.$TourPlanPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TourPlan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TourPlanFindFirstOrThrowArgs} args - Arguments to find a TourPlan
     * @example
     * // Get one TourPlan
     * const tourPlan = await prisma.tourPlan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TourPlanFindFirstOrThrowArgs>(args?: SelectSubset<T, TourPlanFindFirstOrThrowArgs<ExtArgs>>): Prisma__TourPlanClient<$Result.GetResult<Prisma.$TourPlanPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TourPlans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TourPlanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TourPlans
     * const tourPlans = await prisma.tourPlan.findMany()
     * 
     * // Get first 10 TourPlans
     * const tourPlans = await prisma.tourPlan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tourPlanWithIdOnly = await prisma.tourPlan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TourPlanFindManyArgs>(args?: SelectSubset<T, TourPlanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TourPlanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TourPlan.
     * @param {TourPlanCreateArgs} args - Arguments to create a TourPlan.
     * @example
     * // Create one TourPlan
     * const TourPlan = await prisma.tourPlan.create({
     *   data: {
     *     // ... data to create a TourPlan
     *   }
     * })
     * 
     */
    create<T extends TourPlanCreateArgs>(args: SelectSubset<T, TourPlanCreateArgs<ExtArgs>>): Prisma__TourPlanClient<$Result.GetResult<Prisma.$TourPlanPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TourPlans.
     * @param {TourPlanCreateManyArgs} args - Arguments to create many TourPlans.
     * @example
     * // Create many TourPlans
     * const tourPlan = await prisma.tourPlan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TourPlanCreateManyArgs>(args?: SelectSubset<T, TourPlanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TourPlans and returns the data saved in the database.
     * @param {TourPlanCreateManyAndReturnArgs} args - Arguments to create many TourPlans.
     * @example
     * // Create many TourPlans
     * const tourPlan = await prisma.tourPlan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TourPlans and only return the `id`
     * const tourPlanWithIdOnly = await prisma.tourPlan.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TourPlanCreateManyAndReturnArgs>(args?: SelectSubset<T, TourPlanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TourPlanPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TourPlan.
     * @param {TourPlanDeleteArgs} args - Arguments to delete one TourPlan.
     * @example
     * // Delete one TourPlan
     * const TourPlan = await prisma.tourPlan.delete({
     *   where: {
     *     // ... filter to delete one TourPlan
     *   }
     * })
     * 
     */
    delete<T extends TourPlanDeleteArgs>(args: SelectSubset<T, TourPlanDeleteArgs<ExtArgs>>): Prisma__TourPlanClient<$Result.GetResult<Prisma.$TourPlanPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TourPlan.
     * @param {TourPlanUpdateArgs} args - Arguments to update one TourPlan.
     * @example
     * // Update one TourPlan
     * const tourPlan = await prisma.tourPlan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TourPlanUpdateArgs>(args: SelectSubset<T, TourPlanUpdateArgs<ExtArgs>>): Prisma__TourPlanClient<$Result.GetResult<Prisma.$TourPlanPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TourPlans.
     * @param {TourPlanDeleteManyArgs} args - Arguments to filter TourPlans to delete.
     * @example
     * // Delete a few TourPlans
     * const { count } = await prisma.tourPlan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TourPlanDeleteManyArgs>(args?: SelectSubset<T, TourPlanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TourPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TourPlanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TourPlans
     * const tourPlan = await prisma.tourPlan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TourPlanUpdateManyArgs>(args: SelectSubset<T, TourPlanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TourPlans and returns the data updated in the database.
     * @param {TourPlanUpdateManyAndReturnArgs} args - Arguments to update many TourPlans.
     * @example
     * // Update many TourPlans
     * const tourPlan = await prisma.tourPlan.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TourPlans and only return the `id`
     * const tourPlanWithIdOnly = await prisma.tourPlan.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TourPlanUpdateManyAndReturnArgs>(args: SelectSubset<T, TourPlanUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TourPlanPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TourPlan.
     * @param {TourPlanUpsertArgs} args - Arguments to update or create a TourPlan.
     * @example
     * // Update or create a TourPlan
     * const tourPlan = await prisma.tourPlan.upsert({
     *   create: {
     *     // ... data to create a TourPlan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TourPlan we want to update
     *   }
     * })
     */
    upsert<T extends TourPlanUpsertArgs>(args: SelectSubset<T, TourPlanUpsertArgs<ExtArgs>>): Prisma__TourPlanClient<$Result.GetResult<Prisma.$TourPlanPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TourPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TourPlanCountArgs} args - Arguments to filter TourPlans to count.
     * @example
     * // Count the number of TourPlans
     * const count = await prisma.tourPlan.count({
     *   where: {
     *     // ... the filter for the TourPlans we want to count
     *   }
     * })
    **/
    count<T extends TourPlanCountArgs>(
      args?: Subset<T, TourPlanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TourPlanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TourPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TourPlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TourPlanAggregateArgs>(args: Subset<T, TourPlanAggregateArgs>): Prisma.PrismaPromise<GetTourPlanAggregateType<T>>

    /**
     * Group by TourPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TourPlanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TourPlanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TourPlanGroupByArgs['orderBy'] }
        : { orderBy?: TourPlanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TourPlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTourPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TourPlan model
   */
  readonly fields: TourPlanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TourPlan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TourPlanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tourTasks<T extends TourPlan$tourTasksArgs<ExtArgs> = {}>(args?: Subset<T, TourPlan$tourTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TourPlanTaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TourPlan model
   */
  interface TourPlanFieldRefs {
    readonly id: FieldRef<"TourPlan", 'String'>
    readonly name: FieldRef<"TourPlan", 'String'>
    readonly description: FieldRef<"TourPlan", 'String'>
    readonly createdAt: FieldRef<"TourPlan", 'DateTime'>
    readonly updatedAt: FieldRef<"TourPlan", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TourPlan findUnique
   */
  export type TourPlanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlan
     */
    select?: TourPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlan
     */
    omit?: TourPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanInclude<ExtArgs> | null
    /**
     * Filter, which TourPlan to fetch.
     */
    where: TourPlanWhereUniqueInput
  }

  /**
   * TourPlan findUniqueOrThrow
   */
  export type TourPlanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlan
     */
    select?: TourPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlan
     */
    omit?: TourPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanInclude<ExtArgs> | null
    /**
     * Filter, which TourPlan to fetch.
     */
    where: TourPlanWhereUniqueInput
  }

  /**
   * TourPlan findFirst
   */
  export type TourPlanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlan
     */
    select?: TourPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlan
     */
    omit?: TourPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanInclude<ExtArgs> | null
    /**
     * Filter, which TourPlan to fetch.
     */
    where?: TourPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TourPlans to fetch.
     */
    orderBy?: TourPlanOrderByWithRelationInput | TourPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TourPlans.
     */
    cursor?: TourPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TourPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TourPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TourPlans.
     */
    distinct?: TourPlanScalarFieldEnum | TourPlanScalarFieldEnum[]
  }

  /**
   * TourPlan findFirstOrThrow
   */
  export type TourPlanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlan
     */
    select?: TourPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlan
     */
    omit?: TourPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanInclude<ExtArgs> | null
    /**
     * Filter, which TourPlan to fetch.
     */
    where?: TourPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TourPlans to fetch.
     */
    orderBy?: TourPlanOrderByWithRelationInput | TourPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TourPlans.
     */
    cursor?: TourPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TourPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TourPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TourPlans.
     */
    distinct?: TourPlanScalarFieldEnum | TourPlanScalarFieldEnum[]
  }

  /**
   * TourPlan findMany
   */
  export type TourPlanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlan
     */
    select?: TourPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlan
     */
    omit?: TourPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanInclude<ExtArgs> | null
    /**
     * Filter, which TourPlans to fetch.
     */
    where?: TourPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TourPlans to fetch.
     */
    orderBy?: TourPlanOrderByWithRelationInput | TourPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TourPlans.
     */
    cursor?: TourPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TourPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TourPlans.
     */
    skip?: number
    distinct?: TourPlanScalarFieldEnum | TourPlanScalarFieldEnum[]
  }

  /**
   * TourPlan create
   */
  export type TourPlanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlan
     */
    select?: TourPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlan
     */
    omit?: TourPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanInclude<ExtArgs> | null
    /**
     * The data needed to create a TourPlan.
     */
    data: XOR<TourPlanCreateInput, TourPlanUncheckedCreateInput>
  }

  /**
   * TourPlan createMany
   */
  export type TourPlanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TourPlans.
     */
    data: TourPlanCreateManyInput | TourPlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TourPlan createManyAndReturn
   */
  export type TourPlanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlan
     */
    select?: TourPlanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlan
     */
    omit?: TourPlanOmit<ExtArgs> | null
    /**
     * The data used to create many TourPlans.
     */
    data: TourPlanCreateManyInput | TourPlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TourPlan update
   */
  export type TourPlanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlan
     */
    select?: TourPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlan
     */
    omit?: TourPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanInclude<ExtArgs> | null
    /**
     * The data needed to update a TourPlan.
     */
    data: XOR<TourPlanUpdateInput, TourPlanUncheckedUpdateInput>
    /**
     * Choose, which TourPlan to update.
     */
    where: TourPlanWhereUniqueInput
  }

  /**
   * TourPlan updateMany
   */
  export type TourPlanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TourPlans.
     */
    data: XOR<TourPlanUpdateManyMutationInput, TourPlanUncheckedUpdateManyInput>
    /**
     * Filter which TourPlans to update
     */
    where?: TourPlanWhereInput
    /**
     * Limit how many TourPlans to update.
     */
    limit?: number
  }

  /**
   * TourPlan updateManyAndReturn
   */
  export type TourPlanUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlan
     */
    select?: TourPlanSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlan
     */
    omit?: TourPlanOmit<ExtArgs> | null
    /**
     * The data used to update TourPlans.
     */
    data: XOR<TourPlanUpdateManyMutationInput, TourPlanUncheckedUpdateManyInput>
    /**
     * Filter which TourPlans to update
     */
    where?: TourPlanWhereInput
    /**
     * Limit how many TourPlans to update.
     */
    limit?: number
  }

  /**
   * TourPlan upsert
   */
  export type TourPlanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlan
     */
    select?: TourPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlan
     */
    omit?: TourPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanInclude<ExtArgs> | null
    /**
     * The filter to search for the TourPlan to update in case it exists.
     */
    where: TourPlanWhereUniqueInput
    /**
     * In case the TourPlan found by the `where` argument doesn't exist, create a new TourPlan with this data.
     */
    create: XOR<TourPlanCreateInput, TourPlanUncheckedCreateInput>
    /**
     * In case the TourPlan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TourPlanUpdateInput, TourPlanUncheckedUpdateInput>
  }

  /**
   * TourPlan delete
   */
  export type TourPlanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlan
     */
    select?: TourPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlan
     */
    omit?: TourPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanInclude<ExtArgs> | null
    /**
     * Filter which TourPlan to delete.
     */
    where: TourPlanWhereUniqueInput
  }

  /**
   * TourPlan deleteMany
   */
  export type TourPlanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TourPlans to delete
     */
    where?: TourPlanWhereInput
    /**
     * Limit how many TourPlans to delete.
     */
    limit?: number
  }

  /**
   * TourPlan.tourTasks
   */
  export type TourPlan$tourTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlanTask
     */
    select?: TourPlanTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlanTask
     */
    omit?: TourPlanTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanTaskInclude<ExtArgs> | null
    where?: TourPlanTaskWhereInput
    orderBy?: TourPlanTaskOrderByWithRelationInput | TourPlanTaskOrderByWithRelationInput[]
    cursor?: TourPlanTaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TourPlanTaskScalarFieldEnum | TourPlanTaskScalarFieldEnum[]
  }

  /**
   * TourPlan without action
   */
  export type TourPlanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlan
     */
    select?: TourPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlan
     */
    omit?: TourPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanInclude<ExtArgs> | null
  }


  /**
   * Model TourPlanReport
   */

  export type AggregateTourPlanReport = {
    _count: TourPlanReportCountAggregateOutputType | null
    _min: TourPlanReportMinAggregateOutputType | null
    _max: TourPlanReportMaxAggregateOutputType | null
  }

  export type TourPlanReportMinAggregateOutputType = {
    id: string | null
    tourTaskId: string | null
    interactionTime: Date | null
    purpose: string | null
    outcome: string | null
    comments: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TourPlanReportMaxAggregateOutputType = {
    id: string | null
    tourTaskId: string | null
    interactionTime: Date | null
    purpose: string | null
    outcome: string | null
    comments: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TourPlanReportCountAggregateOutputType = {
    id: number
    tourTaskId: number
    interactionTime: number
    purpose: number
    outcome: number
    comments: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TourPlanReportMinAggregateInputType = {
    id?: true
    tourTaskId?: true
    interactionTime?: true
    purpose?: true
    outcome?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TourPlanReportMaxAggregateInputType = {
    id?: true
    tourTaskId?: true
    interactionTime?: true
    purpose?: true
    outcome?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TourPlanReportCountAggregateInputType = {
    id?: true
    tourTaskId?: true
    interactionTime?: true
    purpose?: true
    outcome?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TourPlanReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TourPlanReport to aggregate.
     */
    where?: TourPlanReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TourPlanReports to fetch.
     */
    orderBy?: TourPlanReportOrderByWithRelationInput | TourPlanReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TourPlanReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TourPlanReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TourPlanReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TourPlanReports
    **/
    _count?: true | TourPlanReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TourPlanReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TourPlanReportMaxAggregateInputType
  }

  export type GetTourPlanReportAggregateType<T extends TourPlanReportAggregateArgs> = {
        [P in keyof T & keyof AggregateTourPlanReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTourPlanReport[P]>
      : GetScalarType<T[P], AggregateTourPlanReport[P]>
  }




  export type TourPlanReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TourPlanReportWhereInput
    orderBy?: TourPlanReportOrderByWithAggregationInput | TourPlanReportOrderByWithAggregationInput[]
    by: TourPlanReportScalarFieldEnum[] | TourPlanReportScalarFieldEnum
    having?: TourPlanReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TourPlanReportCountAggregateInputType | true
    _min?: TourPlanReportMinAggregateInputType
    _max?: TourPlanReportMaxAggregateInputType
  }

  export type TourPlanReportGroupByOutputType = {
    id: string
    tourTaskId: string
    interactionTime: Date
    purpose: string | null
    outcome: string | null
    comments: string | null
    createdAt: Date
    updatedAt: Date
    _count: TourPlanReportCountAggregateOutputType | null
    _min: TourPlanReportMinAggregateOutputType | null
    _max: TourPlanReportMaxAggregateOutputType | null
  }

  type GetTourPlanReportGroupByPayload<T extends TourPlanReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TourPlanReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TourPlanReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TourPlanReportGroupByOutputType[P]>
            : GetScalarType<T[P], TourPlanReportGroupByOutputType[P]>
        }
      >
    >


  export type TourPlanReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tourTaskId?: boolean
    interactionTime?: boolean
    purpose?: boolean
    outcome?: boolean
    comments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tourTask?: boolean | TourPlanTaskDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tourPlanReport"]>

  export type TourPlanReportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tourTaskId?: boolean
    interactionTime?: boolean
    purpose?: boolean
    outcome?: boolean
    comments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tourTask?: boolean | TourPlanTaskDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tourPlanReport"]>

  export type TourPlanReportSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tourTaskId?: boolean
    interactionTime?: boolean
    purpose?: boolean
    outcome?: boolean
    comments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tourTask?: boolean | TourPlanTaskDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tourPlanReport"]>

  export type TourPlanReportSelectScalar = {
    id?: boolean
    tourTaskId?: boolean
    interactionTime?: boolean
    purpose?: boolean
    outcome?: boolean
    comments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TourPlanReportOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tourTaskId" | "interactionTime" | "purpose" | "outcome" | "comments" | "createdAt" | "updatedAt", ExtArgs["result"]["tourPlanReport"]>
  export type TourPlanReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tourTask?: boolean | TourPlanTaskDefaultArgs<ExtArgs>
  }
  export type TourPlanReportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tourTask?: boolean | TourPlanTaskDefaultArgs<ExtArgs>
  }
  export type TourPlanReportIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tourTask?: boolean | TourPlanTaskDefaultArgs<ExtArgs>
  }

  export type $TourPlanReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TourPlanReport"
    objects: {
      tourTask: Prisma.$TourPlanTaskPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tourTaskId: string
      interactionTime: Date
      purpose: string | null
      outcome: string | null
      comments: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tourPlanReport"]>
    composites: {}
  }

  type TourPlanReportGetPayload<S extends boolean | null | undefined | TourPlanReportDefaultArgs> = $Result.GetResult<Prisma.$TourPlanReportPayload, S>

  type TourPlanReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TourPlanReportFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TourPlanReportCountAggregateInputType | true
    }

  export interface TourPlanReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TourPlanReport'], meta: { name: 'TourPlanReport' } }
    /**
     * Find zero or one TourPlanReport that matches the filter.
     * @param {TourPlanReportFindUniqueArgs} args - Arguments to find a TourPlanReport
     * @example
     * // Get one TourPlanReport
     * const tourPlanReport = await prisma.tourPlanReport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TourPlanReportFindUniqueArgs>(args: SelectSubset<T, TourPlanReportFindUniqueArgs<ExtArgs>>): Prisma__TourPlanReportClient<$Result.GetResult<Prisma.$TourPlanReportPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TourPlanReport that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TourPlanReportFindUniqueOrThrowArgs} args - Arguments to find a TourPlanReport
     * @example
     * // Get one TourPlanReport
     * const tourPlanReport = await prisma.tourPlanReport.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TourPlanReportFindUniqueOrThrowArgs>(args: SelectSubset<T, TourPlanReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TourPlanReportClient<$Result.GetResult<Prisma.$TourPlanReportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TourPlanReport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TourPlanReportFindFirstArgs} args - Arguments to find a TourPlanReport
     * @example
     * // Get one TourPlanReport
     * const tourPlanReport = await prisma.tourPlanReport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TourPlanReportFindFirstArgs>(args?: SelectSubset<T, TourPlanReportFindFirstArgs<ExtArgs>>): Prisma__TourPlanReportClient<$Result.GetResult<Prisma.$TourPlanReportPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TourPlanReport that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TourPlanReportFindFirstOrThrowArgs} args - Arguments to find a TourPlanReport
     * @example
     * // Get one TourPlanReport
     * const tourPlanReport = await prisma.tourPlanReport.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TourPlanReportFindFirstOrThrowArgs>(args?: SelectSubset<T, TourPlanReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__TourPlanReportClient<$Result.GetResult<Prisma.$TourPlanReportPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TourPlanReports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TourPlanReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TourPlanReports
     * const tourPlanReports = await prisma.tourPlanReport.findMany()
     * 
     * // Get first 10 TourPlanReports
     * const tourPlanReports = await prisma.tourPlanReport.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tourPlanReportWithIdOnly = await prisma.tourPlanReport.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TourPlanReportFindManyArgs>(args?: SelectSubset<T, TourPlanReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TourPlanReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TourPlanReport.
     * @param {TourPlanReportCreateArgs} args - Arguments to create a TourPlanReport.
     * @example
     * // Create one TourPlanReport
     * const TourPlanReport = await prisma.tourPlanReport.create({
     *   data: {
     *     // ... data to create a TourPlanReport
     *   }
     * })
     * 
     */
    create<T extends TourPlanReportCreateArgs>(args: SelectSubset<T, TourPlanReportCreateArgs<ExtArgs>>): Prisma__TourPlanReportClient<$Result.GetResult<Prisma.$TourPlanReportPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TourPlanReports.
     * @param {TourPlanReportCreateManyArgs} args - Arguments to create many TourPlanReports.
     * @example
     * // Create many TourPlanReports
     * const tourPlanReport = await prisma.tourPlanReport.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TourPlanReportCreateManyArgs>(args?: SelectSubset<T, TourPlanReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TourPlanReports and returns the data saved in the database.
     * @param {TourPlanReportCreateManyAndReturnArgs} args - Arguments to create many TourPlanReports.
     * @example
     * // Create many TourPlanReports
     * const tourPlanReport = await prisma.tourPlanReport.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TourPlanReports and only return the `id`
     * const tourPlanReportWithIdOnly = await prisma.tourPlanReport.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TourPlanReportCreateManyAndReturnArgs>(args?: SelectSubset<T, TourPlanReportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TourPlanReportPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TourPlanReport.
     * @param {TourPlanReportDeleteArgs} args - Arguments to delete one TourPlanReport.
     * @example
     * // Delete one TourPlanReport
     * const TourPlanReport = await prisma.tourPlanReport.delete({
     *   where: {
     *     // ... filter to delete one TourPlanReport
     *   }
     * })
     * 
     */
    delete<T extends TourPlanReportDeleteArgs>(args: SelectSubset<T, TourPlanReportDeleteArgs<ExtArgs>>): Prisma__TourPlanReportClient<$Result.GetResult<Prisma.$TourPlanReportPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TourPlanReport.
     * @param {TourPlanReportUpdateArgs} args - Arguments to update one TourPlanReport.
     * @example
     * // Update one TourPlanReport
     * const tourPlanReport = await prisma.tourPlanReport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TourPlanReportUpdateArgs>(args: SelectSubset<T, TourPlanReportUpdateArgs<ExtArgs>>): Prisma__TourPlanReportClient<$Result.GetResult<Prisma.$TourPlanReportPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TourPlanReports.
     * @param {TourPlanReportDeleteManyArgs} args - Arguments to filter TourPlanReports to delete.
     * @example
     * // Delete a few TourPlanReports
     * const { count } = await prisma.tourPlanReport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TourPlanReportDeleteManyArgs>(args?: SelectSubset<T, TourPlanReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TourPlanReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TourPlanReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TourPlanReports
     * const tourPlanReport = await prisma.tourPlanReport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TourPlanReportUpdateManyArgs>(args: SelectSubset<T, TourPlanReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TourPlanReports and returns the data updated in the database.
     * @param {TourPlanReportUpdateManyAndReturnArgs} args - Arguments to update many TourPlanReports.
     * @example
     * // Update many TourPlanReports
     * const tourPlanReport = await prisma.tourPlanReport.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TourPlanReports and only return the `id`
     * const tourPlanReportWithIdOnly = await prisma.tourPlanReport.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TourPlanReportUpdateManyAndReturnArgs>(args: SelectSubset<T, TourPlanReportUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TourPlanReportPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TourPlanReport.
     * @param {TourPlanReportUpsertArgs} args - Arguments to update or create a TourPlanReport.
     * @example
     * // Update or create a TourPlanReport
     * const tourPlanReport = await prisma.tourPlanReport.upsert({
     *   create: {
     *     // ... data to create a TourPlanReport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TourPlanReport we want to update
     *   }
     * })
     */
    upsert<T extends TourPlanReportUpsertArgs>(args: SelectSubset<T, TourPlanReportUpsertArgs<ExtArgs>>): Prisma__TourPlanReportClient<$Result.GetResult<Prisma.$TourPlanReportPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TourPlanReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TourPlanReportCountArgs} args - Arguments to filter TourPlanReports to count.
     * @example
     * // Count the number of TourPlanReports
     * const count = await prisma.tourPlanReport.count({
     *   where: {
     *     // ... the filter for the TourPlanReports we want to count
     *   }
     * })
    **/
    count<T extends TourPlanReportCountArgs>(
      args?: Subset<T, TourPlanReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TourPlanReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TourPlanReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TourPlanReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TourPlanReportAggregateArgs>(args: Subset<T, TourPlanReportAggregateArgs>): Prisma.PrismaPromise<GetTourPlanReportAggregateType<T>>

    /**
     * Group by TourPlanReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TourPlanReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TourPlanReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TourPlanReportGroupByArgs['orderBy'] }
        : { orderBy?: TourPlanReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TourPlanReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTourPlanReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TourPlanReport model
   */
  readonly fields: TourPlanReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TourPlanReport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TourPlanReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tourTask<T extends TourPlanTaskDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TourPlanTaskDefaultArgs<ExtArgs>>): Prisma__TourPlanTaskClient<$Result.GetResult<Prisma.$TourPlanTaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TourPlanReport model
   */
  interface TourPlanReportFieldRefs {
    readonly id: FieldRef<"TourPlanReport", 'String'>
    readonly tourTaskId: FieldRef<"TourPlanReport", 'String'>
    readonly interactionTime: FieldRef<"TourPlanReport", 'DateTime'>
    readonly purpose: FieldRef<"TourPlanReport", 'String'>
    readonly outcome: FieldRef<"TourPlanReport", 'String'>
    readonly comments: FieldRef<"TourPlanReport", 'String'>
    readonly createdAt: FieldRef<"TourPlanReport", 'DateTime'>
    readonly updatedAt: FieldRef<"TourPlanReport", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TourPlanReport findUnique
   */
  export type TourPlanReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlanReport
     */
    select?: TourPlanReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlanReport
     */
    omit?: TourPlanReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanReportInclude<ExtArgs> | null
    /**
     * Filter, which TourPlanReport to fetch.
     */
    where: TourPlanReportWhereUniqueInput
  }

  /**
   * TourPlanReport findUniqueOrThrow
   */
  export type TourPlanReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlanReport
     */
    select?: TourPlanReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlanReport
     */
    omit?: TourPlanReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanReportInclude<ExtArgs> | null
    /**
     * Filter, which TourPlanReport to fetch.
     */
    where: TourPlanReportWhereUniqueInput
  }

  /**
   * TourPlanReport findFirst
   */
  export type TourPlanReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlanReport
     */
    select?: TourPlanReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlanReport
     */
    omit?: TourPlanReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanReportInclude<ExtArgs> | null
    /**
     * Filter, which TourPlanReport to fetch.
     */
    where?: TourPlanReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TourPlanReports to fetch.
     */
    orderBy?: TourPlanReportOrderByWithRelationInput | TourPlanReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TourPlanReports.
     */
    cursor?: TourPlanReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TourPlanReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TourPlanReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TourPlanReports.
     */
    distinct?: TourPlanReportScalarFieldEnum | TourPlanReportScalarFieldEnum[]
  }

  /**
   * TourPlanReport findFirstOrThrow
   */
  export type TourPlanReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlanReport
     */
    select?: TourPlanReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlanReport
     */
    omit?: TourPlanReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanReportInclude<ExtArgs> | null
    /**
     * Filter, which TourPlanReport to fetch.
     */
    where?: TourPlanReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TourPlanReports to fetch.
     */
    orderBy?: TourPlanReportOrderByWithRelationInput | TourPlanReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TourPlanReports.
     */
    cursor?: TourPlanReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TourPlanReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TourPlanReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TourPlanReports.
     */
    distinct?: TourPlanReportScalarFieldEnum | TourPlanReportScalarFieldEnum[]
  }

  /**
   * TourPlanReport findMany
   */
  export type TourPlanReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlanReport
     */
    select?: TourPlanReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlanReport
     */
    omit?: TourPlanReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanReportInclude<ExtArgs> | null
    /**
     * Filter, which TourPlanReports to fetch.
     */
    where?: TourPlanReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TourPlanReports to fetch.
     */
    orderBy?: TourPlanReportOrderByWithRelationInput | TourPlanReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TourPlanReports.
     */
    cursor?: TourPlanReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TourPlanReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TourPlanReports.
     */
    skip?: number
    distinct?: TourPlanReportScalarFieldEnum | TourPlanReportScalarFieldEnum[]
  }

  /**
   * TourPlanReport create
   */
  export type TourPlanReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlanReport
     */
    select?: TourPlanReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlanReport
     */
    omit?: TourPlanReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanReportInclude<ExtArgs> | null
    /**
     * The data needed to create a TourPlanReport.
     */
    data: XOR<TourPlanReportCreateInput, TourPlanReportUncheckedCreateInput>
  }

  /**
   * TourPlanReport createMany
   */
  export type TourPlanReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TourPlanReports.
     */
    data: TourPlanReportCreateManyInput | TourPlanReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TourPlanReport createManyAndReturn
   */
  export type TourPlanReportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlanReport
     */
    select?: TourPlanReportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlanReport
     */
    omit?: TourPlanReportOmit<ExtArgs> | null
    /**
     * The data used to create many TourPlanReports.
     */
    data: TourPlanReportCreateManyInput | TourPlanReportCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanReportIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TourPlanReport update
   */
  export type TourPlanReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlanReport
     */
    select?: TourPlanReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlanReport
     */
    omit?: TourPlanReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanReportInclude<ExtArgs> | null
    /**
     * The data needed to update a TourPlanReport.
     */
    data: XOR<TourPlanReportUpdateInput, TourPlanReportUncheckedUpdateInput>
    /**
     * Choose, which TourPlanReport to update.
     */
    where: TourPlanReportWhereUniqueInput
  }

  /**
   * TourPlanReport updateMany
   */
  export type TourPlanReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TourPlanReports.
     */
    data: XOR<TourPlanReportUpdateManyMutationInput, TourPlanReportUncheckedUpdateManyInput>
    /**
     * Filter which TourPlanReports to update
     */
    where?: TourPlanReportWhereInput
    /**
     * Limit how many TourPlanReports to update.
     */
    limit?: number
  }

  /**
   * TourPlanReport updateManyAndReturn
   */
  export type TourPlanReportUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlanReport
     */
    select?: TourPlanReportSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlanReport
     */
    omit?: TourPlanReportOmit<ExtArgs> | null
    /**
     * The data used to update TourPlanReports.
     */
    data: XOR<TourPlanReportUpdateManyMutationInput, TourPlanReportUncheckedUpdateManyInput>
    /**
     * Filter which TourPlanReports to update
     */
    where?: TourPlanReportWhereInput
    /**
     * Limit how many TourPlanReports to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanReportIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TourPlanReport upsert
   */
  export type TourPlanReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlanReport
     */
    select?: TourPlanReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlanReport
     */
    omit?: TourPlanReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanReportInclude<ExtArgs> | null
    /**
     * The filter to search for the TourPlanReport to update in case it exists.
     */
    where: TourPlanReportWhereUniqueInput
    /**
     * In case the TourPlanReport found by the `where` argument doesn't exist, create a new TourPlanReport with this data.
     */
    create: XOR<TourPlanReportCreateInput, TourPlanReportUncheckedCreateInput>
    /**
     * In case the TourPlanReport was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TourPlanReportUpdateInput, TourPlanReportUncheckedUpdateInput>
  }

  /**
   * TourPlanReport delete
   */
  export type TourPlanReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlanReport
     */
    select?: TourPlanReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlanReport
     */
    omit?: TourPlanReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanReportInclude<ExtArgs> | null
    /**
     * Filter which TourPlanReport to delete.
     */
    where: TourPlanReportWhereUniqueInput
  }

  /**
   * TourPlanReport deleteMany
   */
  export type TourPlanReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TourPlanReports to delete
     */
    where?: TourPlanReportWhereInput
    /**
     * Limit how many TourPlanReports to delete.
     */
    limit?: number
  }

  /**
   * TourPlanReport without action
   */
  export type TourPlanReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TourPlanReport
     */
    select?: TourPlanReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TourPlanReport
     */
    omit?: TourPlanReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TourPlanReportInclude<ExtArgs> | null
  }


  /**
   * Model ExpenseType
   */

  export type AggregateExpenseType = {
    _count: ExpenseTypeCountAggregateOutputType | null
    _min: ExpenseTypeMinAggregateOutputType | null
    _max: ExpenseTypeMaxAggregateOutputType | null
  }

  export type ExpenseTypeMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    icon: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ExpenseTypeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    icon: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ExpenseTypeCountAggregateOutputType = {
    id: number
    name: number
    description: number
    icon: number
    formFields: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ExpenseTypeMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    icon?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ExpenseTypeMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    icon?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ExpenseTypeCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    icon?: true
    formFields?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ExpenseTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExpenseType to aggregate.
     */
    where?: ExpenseTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExpenseTypes to fetch.
     */
    orderBy?: ExpenseTypeOrderByWithRelationInput | ExpenseTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExpenseTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExpenseTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExpenseTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExpenseTypes
    **/
    _count?: true | ExpenseTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExpenseTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExpenseTypeMaxAggregateInputType
  }

  export type GetExpenseTypeAggregateType<T extends ExpenseTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateExpenseType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExpenseType[P]>
      : GetScalarType<T[P], AggregateExpenseType[P]>
  }




  export type ExpenseTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExpenseTypeWhereInput
    orderBy?: ExpenseTypeOrderByWithAggregationInput | ExpenseTypeOrderByWithAggregationInput[]
    by: ExpenseTypeScalarFieldEnum[] | ExpenseTypeScalarFieldEnum
    having?: ExpenseTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExpenseTypeCountAggregateInputType | true
    _min?: ExpenseTypeMinAggregateInputType
    _max?: ExpenseTypeMaxAggregateInputType
  }

  export type ExpenseTypeGroupByOutputType = {
    id: string
    name: string
    description: string | null
    icon: string | null
    formFields: JsonValue
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: ExpenseTypeCountAggregateOutputType | null
    _min: ExpenseTypeMinAggregateOutputType | null
    _max: ExpenseTypeMaxAggregateOutputType | null
  }

  type GetExpenseTypeGroupByPayload<T extends ExpenseTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExpenseTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExpenseTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExpenseTypeGroupByOutputType[P]>
            : GetScalarType<T[P], ExpenseTypeGroupByOutputType[P]>
        }
      >
    >


  export type ExpenseTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    formFields?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    roleConfigs?: boolean | ExpenseType$roleConfigsArgs<ExtArgs>
    expenseClaims?: boolean | ExpenseType$expenseClaimsArgs<ExtArgs>
    _count?: boolean | ExpenseTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["expenseType"]>

  export type ExpenseTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    formFields?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["expenseType"]>

  export type ExpenseTypeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    formFields?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["expenseType"]>

  export type ExpenseTypeSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    formFields?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ExpenseTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "icon" | "formFields" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["expenseType"]>
  export type ExpenseTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roleConfigs?: boolean | ExpenseType$roleConfigsArgs<ExtArgs>
    expenseClaims?: boolean | ExpenseType$expenseClaimsArgs<ExtArgs>
    _count?: boolean | ExpenseTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ExpenseTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ExpenseTypeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ExpenseTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ExpenseType"
    objects: {
      roleConfigs: Prisma.$ExpenseRoleConfigPayload<ExtArgs>[]
      expenseClaims: Prisma.$ExpenseClaimPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      icon: string | null
      formFields: Prisma.JsonValue
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["expenseType"]>
    composites: {}
  }

  type ExpenseTypeGetPayload<S extends boolean | null | undefined | ExpenseTypeDefaultArgs> = $Result.GetResult<Prisma.$ExpenseTypePayload, S>

  type ExpenseTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ExpenseTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExpenseTypeCountAggregateInputType | true
    }

  export interface ExpenseTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExpenseType'], meta: { name: 'ExpenseType' } }
    /**
     * Find zero or one ExpenseType that matches the filter.
     * @param {ExpenseTypeFindUniqueArgs} args - Arguments to find a ExpenseType
     * @example
     * // Get one ExpenseType
     * const expenseType = await prisma.expenseType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExpenseTypeFindUniqueArgs>(args: SelectSubset<T, ExpenseTypeFindUniqueArgs<ExtArgs>>): Prisma__ExpenseTypeClient<$Result.GetResult<Prisma.$ExpenseTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ExpenseType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ExpenseTypeFindUniqueOrThrowArgs} args - Arguments to find a ExpenseType
     * @example
     * // Get one ExpenseType
     * const expenseType = await prisma.expenseType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExpenseTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, ExpenseTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExpenseTypeClient<$Result.GetResult<Prisma.$ExpenseTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ExpenseType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseTypeFindFirstArgs} args - Arguments to find a ExpenseType
     * @example
     * // Get one ExpenseType
     * const expenseType = await prisma.expenseType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExpenseTypeFindFirstArgs>(args?: SelectSubset<T, ExpenseTypeFindFirstArgs<ExtArgs>>): Prisma__ExpenseTypeClient<$Result.GetResult<Prisma.$ExpenseTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ExpenseType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseTypeFindFirstOrThrowArgs} args - Arguments to find a ExpenseType
     * @example
     * // Get one ExpenseType
     * const expenseType = await prisma.expenseType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExpenseTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, ExpenseTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExpenseTypeClient<$Result.GetResult<Prisma.$ExpenseTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ExpenseTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExpenseTypes
     * const expenseTypes = await prisma.expenseType.findMany()
     * 
     * // Get first 10 ExpenseTypes
     * const expenseTypes = await prisma.expenseType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const expenseTypeWithIdOnly = await prisma.expenseType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExpenseTypeFindManyArgs>(args?: SelectSubset<T, ExpenseTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpenseTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ExpenseType.
     * @param {ExpenseTypeCreateArgs} args - Arguments to create a ExpenseType.
     * @example
     * // Create one ExpenseType
     * const ExpenseType = await prisma.expenseType.create({
     *   data: {
     *     // ... data to create a ExpenseType
     *   }
     * })
     * 
     */
    create<T extends ExpenseTypeCreateArgs>(args: SelectSubset<T, ExpenseTypeCreateArgs<ExtArgs>>): Prisma__ExpenseTypeClient<$Result.GetResult<Prisma.$ExpenseTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ExpenseTypes.
     * @param {ExpenseTypeCreateManyArgs} args - Arguments to create many ExpenseTypes.
     * @example
     * // Create many ExpenseTypes
     * const expenseType = await prisma.expenseType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExpenseTypeCreateManyArgs>(args?: SelectSubset<T, ExpenseTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ExpenseTypes and returns the data saved in the database.
     * @param {ExpenseTypeCreateManyAndReturnArgs} args - Arguments to create many ExpenseTypes.
     * @example
     * // Create many ExpenseTypes
     * const expenseType = await prisma.expenseType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ExpenseTypes and only return the `id`
     * const expenseTypeWithIdOnly = await prisma.expenseType.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExpenseTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, ExpenseTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpenseTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ExpenseType.
     * @param {ExpenseTypeDeleteArgs} args - Arguments to delete one ExpenseType.
     * @example
     * // Delete one ExpenseType
     * const ExpenseType = await prisma.expenseType.delete({
     *   where: {
     *     // ... filter to delete one ExpenseType
     *   }
     * })
     * 
     */
    delete<T extends ExpenseTypeDeleteArgs>(args: SelectSubset<T, ExpenseTypeDeleteArgs<ExtArgs>>): Prisma__ExpenseTypeClient<$Result.GetResult<Prisma.$ExpenseTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ExpenseType.
     * @param {ExpenseTypeUpdateArgs} args - Arguments to update one ExpenseType.
     * @example
     * // Update one ExpenseType
     * const expenseType = await prisma.expenseType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExpenseTypeUpdateArgs>(args: SelectSubset<T, ExpenseTypeUpdateArgs<ExtArgs>>): Prisma__ExpenseTypeClient<$Result.GetResult<Prisma.$ExpenseTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ExpenseTypes.
     * @param {ExpenseTypeDeleteManyArgs} args - Arguments to filter ExpenseTypes to delete.
     * @example
     * // Delete a few ExpenseTypes
     * const { count } = await prisma.expenseType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExpenseTypeDeleteManyArgs>(args?: SelectSubset<T, ExpenseTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExpenseTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExpenseTypes
     * const expenseType = await prisma.expenseType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExpenseTypeUpdateManyArgs>(args: SelectSubset<T, ExpenseTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExpenseTypes and returns the data updated in the database.
     * @param {ExpenseTypeUpdateManyAndReturnArgs} args - Arguments to update many ExpenseTypes.
     * @example
     * // Update many ExpenseTypes
     * const expenseType = await prisma.expenseType.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ExpenseTypes and only return the `id`
     * const expenseTypeWithIdOnly = await prisma.expenseType.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ExpenseTypeUpdateManyAndReturnArgs>(args: SelectSubset<T, ExpenseTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpenseTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ExpenseType.
     * @param {ExpenseTypeUpsertArgs} args - Arguments to update or create a ExpenseType.
     * @example
     * // Update or create a ExpenseType
     * const expenseType = await prisma.expenseType.upsert({
     *   create: {
     *     // ... data to create a ExpenseType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExpenseType we want to update
     *   }
     * })
     */
    upsert<T extends ExpenseTypeUpsertArgs>(args: SelectSubset<T, ExpenseTypeUpsertArgs<ExtArgs>>): Prisma__ExpenseTypeClient<$Result.GetResult<Prisma.$ExpenseTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ExpenseTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseTypeCountArgs} args - Arguments to filter ExpenseTypes to count.
     * @example
     * // Count the number of ExpenseTypes
     * const count = await prisma.expenseType.count({
     *   where: {
     *     // ... the filter for the ExpenseTypes we want to count
     *   }
     * })
    **/
    count<T extends ExpenseTypeCountArgs>(
      args?: Subset<T, ExpenseTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExpenseTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExpenseType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExpenseTypeAggregateArgs>(args: Subset<T, ExpenseTypeAggregateArgs>): Prisma.PrismaPromise<GetExpenseTypeAggregateType<T>>

    /**
     * Group by ExpenseType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExpenseTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExpenseTypeGroupByArgs['orderBy'] }
        : { orderBy?: ExpenseTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExpenseTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExpenseTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ExpenseType model
   */
  readonly fields: ExpenseTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ExpenseType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExpenseTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    roleConfigs<T extends ExpenseType$roleConfigsArgs<ExtArgs> = {}>(args?: Subset<T, ExpenseType$roleConfigsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpenseRoleConfigPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    expenseClaims<T extends ExpenseType$expenseClaimsArgs<ExtArgs> = {}>(args?: Subset<T, ExpenseType$expenseClaimsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpenseClaimPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ExpenseType model
   */
  interface ExpenseTypeFieldRefs {
    readonly id: FieldRef<"ExpenseType", 'String'>
    readonly name: FieldRef<"ExpenseType", 'String'>
    readonly description: FieldRef<"ExpenseType", 'String'>
    readonly icon: FieldRef<"ExpenseType", 'String'>
    readonly formFields: FieldRef<"ExpenseType", 'Json'>
    readonly isActive: FieldRef<"ExpenseType", 'Boolean'>
    readonly createdAt: FieldRef<"ExpenseType", 'DateTime'>
    readonly updatedAt: FieldRef<"ExpenseType", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ExpenseType findUnique
   */
  export type ExpenseTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseType
     */
    select?: ExpenseTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseType
     */
    omit?: ExpenseTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseTypeInclude<ExtArgs> | null
    /**
     * Filter, which ExpenseType to fetch.
     */
    where: ExpenseTypeWhereUniqueInput
  }

  /**
   * ExpenseType findUniqueOrThrow
   */
  export type ExpenseTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseType
     */
    select?: ExpenseTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseType
     */
    omit?: ExpenseTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseTypeInclude<ExtArgs> | null
    /**
     * Filter, which ExpenseType to fetch.
     */
    where: ExpenseTypeWhereUniqueInput
  }

  /**
   * ExpenseType findFirst
   */
  export type ExpenseTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseType
     */
    select?: ExpenseTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseType
     */
    omit?: ExpenseTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseTypeInclude<ExtArgs> | null
    /**
     * Filter, which ExpenseType to fetch.
     */
    where?: ExpenseTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExpenseTypes to fetch.
     */
    orderBy?: ExpenseTypeOrderByWithRelationInput | ExpenseTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExpenseTypes.
     */
    cursor?: ExpenseTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExpenseTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExpenseTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExpenseTypes.
     */
    distinct?: ExpenseTypeScalarFieldEnum | ExpenseTypeScalarFieldEnum[]
  }

  /**
   * ExpenseType findFirstOrThrow
   */
  export type ExpenseTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseType
     */
    select?: ExpenseTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseType
     */
    omit?: ExpenseTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseTypeInclude<ExtArgs> | null
    /**
     * Filter, which ExpenseType to fetch.
     */
    where?: ExpenseTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExpenseTypes to fetch.
     */
    orderBy?: ExpenseTypeOrderByWithRelationInput | ExpenseTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExpenseTypes.
     */
    cursor?: ExpenseTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExpenseTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExpenseTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExpenseTypes.
     */
    distinct?: ExpenseTypeScalarFieldEnum | ExpenseTypeScalarFieldEnum[]
  }

  /**
   * ExpenseType findMany
   */
  export type ExpenseTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseType
     */
    select?: ExpenseTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseType
     */
    omit?: ExpenseTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseTypeInclude<ExtArgs> | null
    /**
     * Filter, which ExpenseTypes to fetch.
     */
    where?: ExpenseTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExpenseTypes to fetch.
     */
    orderBy?: ExpenseTypeOrderByWithRelationInput | ExpenseTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExpenseTypes.
     */
    cursor?: ExpenseTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExpenseTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExpenseTypes.
     */
    skip?: number
    distinct?: ExpenseTypeScalarFieldEnum | ExpenseTypeScalarFieldEnum[]
  }

  /**
   * ExpenseType create
   */
  export type ExpenseTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseType
     */
    select?: ExpenseTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseType
     */
    omit?: ExpenseTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a ExpenseType.
     */
    data: XOR<ExpenseTypeCreateInput, ExpenseTypeUncheckedCreateInput>
  }

  /**
   * ExpenseType createMany
   */
  export type ExpenseTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ExpenseTypes.
     */
    data: ExpenseTypeCreateManyInput | ExpenseTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ExpenseType createManyAndReturn
   */
  export type ExpenseTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseType
     */
    select?: ExpenseTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseType
     */
    omit?: ExpenseTypeOmit<ExtArgs> | null
    /**
     * The data used to create many ExpenseTypes.
     */
    data: ExpenseTypeCreateManyInput | ExpenseTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ExpenseType update
   */
  export type ExpenseTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseType
     */
    select?: ExpenseTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseType
     */
    omit?: ExpenseTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a ExpenseType.
     */
    data: XOR<ExpenseTypeUpdateInput, ExpenseTypeUncheckedUpdateInput>
    /**
     * Choose, which ExpenseType to update.
     */
    where: ExpenseTypeWhereUniqueInput
  }

  /**
   * ExpenseType updateMany
   */
  export type ExpenseTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ExpenseTypes.
     */
    data: XOR<ExpenseTypeUpdateManyMutationInput, ExpenseTypeUncheckedUpdateManyInput>
    /**
     * Filter which ExpenseTypes to update
     */
    where?: ExpenseTypeWhereInput
    /**
     * Limit how many ExpenseTypes to update.
     */
    limit?: number
  }

  /**
   * ExpenseType updateManyAndReturn
   */
  export type ExpenseTypeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseType
     */
    select?: ExpenseTypeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseType
     */
    omit?: ExpenseTypeOmit<ExtArgs> | null
    /**
     * The data used to update ExpenseTypes.
     */
    data: XOR<ExpenseTypeUpdateManyMutationInput, ExpenseTypeUncheckedUpdateManyInput>
    /**
     * Filter which ExpenseTypes to update
     */
    where?: ExpenseTypeWhereInput
    /**
     * Limit how many ExpenseTypes to update.
     */
    limit?: number
  }

  /**
   * ExpenseType upsert
   */
  export type ExpenseTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseType
     */
    select?: ExpenseTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseType
     */
    omit?: ExpenseTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the ExpenseType to update in case it exists.
     */
    where: ExpenseTypeWhereUniqueInput
    /**
     * In case the ExpenseType found by the `where` argument doesn't exist, create a new ExpenseType with this data.
     */
    create: XOR<ExpenseTypeCreateInput, ExpenseTypeUncheckedCreateInput>
    /**
     * In case the ExpenseType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExpenseTypeUpdateInput, ExpenseTypeUncheckedUpdateInput>
  }

  /**
   * ExpenseType delete
   */
  export type ExpenseTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseType
     */
    select?: ExpenseTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseType
     */
    omit?: ExpenseTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseTypeInclude<ExtArgs> | null
    /**
     * Filter which ExpenseType to delete.
     */
    where: ExpenseTypeWhereUniqueInput
  }

  /**
   * ExpenseType deleteMany
   */
  export type ExpenseTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExpenseTypes to delete
     */
    where?: ExpenseTypeWhereInput
    /**
     * Limit how many ExpenseTypes to delete.
     */
    limit?: number
  }

  /**
   * ExpenseType.roleConfigs
   */
  export type ExpenseType$roleConfigsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseRoleConfig
     */
    select?: ExpenseRoleConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseRoleConfig
     */
    omit?: ExpenseRoleConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseRoleConfigInclude<ExtArgs> | null
    where?: ExpenseRoleConfigWhereInput
    orderBy?: ExpenseRoleConfigOrderByWithRelationInput | ExpenseRoleConfigOrderByWithRelationInput[]
    cursor?: ExpenseRoleConfigWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExpenseRoleConfigScalarFieldEnum | ExpenseRoleConfigScalarFieldEnum[]
  }

  /**
   * ExpenseType.expenseClaims
   */
  export type ExpenseType$expenseClaimsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseClaim
     */
    select?: ExpenseClaimSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseClaim
     */
    omit?: ExpenseClaimOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseClaimInclude<ExtArgs> | null
    where?: ExpenseClaimWhereInput
    orderBy?: ExpenseClaimOrderByWithRelationInput | ExpenseClaimOrderByWithRelationInput[]
    cursor?: ExpenseClaimWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExpenseClaimScalarFieldEnum | ExpenseClaimScalarFieldEnum[]
  }

  /**
   * ExpenseType without action
   */
  export type ExpenseTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseType
     */
    select?: ExpenseTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseType
     */
    omit?: ExpenseTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseTypeInclude<ExtArgs> | null
  }


  /**
   * Model ExpenseRoleConfig
   */

  export type AggregateExpenseRoleConfig = {
    _count: ExpenseRoleConfigCountAggregateOutputType | null
    _min: ExpenseRoleConfigMinAggregateOutputType | null
    _max: ExpenseRoleConfigMaxAggregateOutputType | null
  }

  export type ExpenseRoleConfigMinAggregateOutputType = {
    id: string | null
    expenseTypeId: string | null
    role: $Enums.EmployeeRole | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ExpenseRoleConfigMaxAggregateOutputType = {
    id: string | null
    expenseTypeId: string | null
    role: $Enums.EmployeeRole | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ExpenseRoleConfigCountAggregateOutputType = {
    id: number
    expenseTypeId: number
    role: number
    limits: number
    rates: number
    validationRules: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ExpenseRoleConfigMinAggregateInputType = {
    id?: true
    expenseTypeId?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ExpenseRoleConfigMaxAggregateInputType = {
    id?: true
    expenseTypeId?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ExpenseRoleConfigCountAggregateInputType = {
    id?: true
    expenseTypeId?: true
    role?: true
    limits?: true
    rates?: true
    validationRules?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ExpenseRoleConfigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExpenseRoleConfig to aggregate.
     */
    where?: ExpenseRoleConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExpenseRoleConfigs to fetch.
     */
    orderBy?: ExpenseRoleConfigOrderByWithRelationInput | ExpenseRoleConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExpenseRoleConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExpenseRoleConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExpenseRoleConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExpenseRoleConfigs
    **/
    _count?: true | ExpenseRoleConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExpenseRoleConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExpenseRoleConfigMaxAggregateInputType
  }

  export type GetExpenseRoleConfigAggregateType<T extends ExpenseRoleConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateExpenseRoleConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExpenseRoleConfig[P]>
      : GetScalarType<T[P], AggregateExpenseRoleConfig[P]>
  }




  export type ExpenseRoleConfigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExpenseRoleConfigWhereInput
    orderBy?: ExpenseRoleConfigOrderByWithAggregationInput | ExpenseRoleConfigOrderByWithAggregationInput[]
    by: ExpenseRoleConfigScalarFieldEnum[] | ExpenseRoleConfigScalarFieldEnum
    having?: ExpenseRoleConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExpenseRoleConfigCountAggregateInputType | true
    _min?: ExpenseRoleConfigMinAggregateInputType
    _max?: ExpenseRoleConfigMaxAggregateInputType
  }

  export type ExpenseRoleConfigGroupByOutputType = {
    id: string
    expenseTypeId: string
    role: $Enums.EmployeeRole
    limits: JsonValue
    rates: JsonValue | null
    validationRules: JsonValue
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: ExpenseRoleConfigCountAggregateOutputType | null
    _min: ExpenseRoleConfigMinAggregateOutputType | null
    _max: ExpenseRoleConfigMaxAggregateOutputType | null
  }

  type GetExpenseRoleConfigGroupByPayload<T extends ExpenseRoleConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExpenseRoleConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExpenseRoleConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExpenseRoleConfigGroupByOutputType[P]>
            : GetScalarType<T[P], ExpenseRoleConfigGroupByOutputType[P]>
        }
      >
    >


  export type ExpenseRoleConfigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expenseTypeId?: boolean
    role?: boolean
    limits?: boolean
    rates?: boolean
    validationRules?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    expenseType?: boolean | ExpenseTypeDefaultArgs<ExtArgs>
    expenseClaims?: boolean | ExpenseRoleConfig$expenseClaimsArgs<ExtArgs>
    _count?: boolean | ExpenseRoleConfigCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["expenseRoleConfig"]>

  export type ExpenseRoleConfigSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expenseTypeId?: boolean
    role?: boolean
    limits?: boolean
    rates?: boolean
    validationRules?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    expenseType?: boolean | ExpenseTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["expenseRoleConfig"]>

  export type ExpenseRoleConfigSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expenseTypeId?: boolean
    role?: boolean
    limits?: boolean
    rates?: boolean
    validationRules?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    expenseType?: boolean | ExpenseTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["expenseRoleConfig"]>

  export type ExpenseRoleConfigSelectScalar = {
    id?: boolean
    expenseTypeId?: boolean
    role?: boolean
    limits?: boolean
    rates?: boolean
    validationRules?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ExpenseRoleConfigOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "expenseTypeId" | "role" | "limits" | "rates" | "validationRules" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["expenseRoleConfig"]>
  export type ExpenseRoleConfigInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    expenseType?: boolean | ExpenseTypeDefaultArgs<ExtArgs>
    expenseClaims?: boolean | ExpenseRoleConfig$expenseClaimsArgs<ExtArgs>
    _count?: boolean | ExpenseRoleConfigCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ExpenseRoleConfigIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    expenseType?: boolean | ExpenseTypeDefaultArgs<ExtArgs>
  }
  export type ExpenseRoleConfigIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    expenseType?: boolean | ExpenseTypeDefaultArgs<ExtArgs>
  }

  export type $ExpenseRoleConfigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ExpenseRoleConfig"
    objects: {
      expenseType: Prisma.$ExpenseTypePayload<ExtArgs>
      expenseClaims: Prisma.$ExpenseClaimPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      expenseTypeId: string
      role: $Enums.EmployeeRole
      limits: Prisma.JsonValue
      rates: Prisma.JsonValue | null
      validationRules: Prisma.JsonValue
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["expenseRoleConfig"]>
    composites: {}
  }

  type ExpenseRoleConfigGetPayload<S extends boolean | null | undefined | ExpenseRoleConfigDefaultArgs> = $Result.GetResult<Prisma.$ExpenseRoleConfigPayload, S>

  type ExpenseRoleConfigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ExpenseRoleConfigFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExpenseRoleConfigCountAggregateInputType | true
    }

  export interface ExpenseRoleConfigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExpenseRoleConfig'], meta: { name: 'ExpenseRoleConfig' } }
    /**
     * Find zero or one ExpenseRoleConfig that matches the filter.
     * @param {ExpenseRoleConfigFindUniqueArgs} args - Arguments to find a ExpenseRoleConfig
     * @example
     * // Get one ExpenseRoleConfig
     * const expenseRoleConfig = await prisma.expenseRoleConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExpenseRoleConfigFindUniqueArgs>(args: SelectSubset<T, ExpenseRoleConfigFindUniqueArgs<ExtArgs>>): Prisma__ExpenseRoleConfigClient<$Result.GetResult<Prisma.$ExpenseRoleConfigPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ExpenseRoleConfig that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ExpenseRoleConfigFindUniqueOrThrowArgs} args - Arguments to find a ExpenseRoleConfig
     * @example
     * // Get one ExpenseRoleConfig
     * const expenseRoleConfig = await prisma.expenseRoleConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExpenseRoleConfigFindUniqueOrThrowArgs>(args: SelectSubset<T, ExpenseRoleConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExpenseRoleConfigClient<$Result.GetResult<Prisma.$ExpenseRoleConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ExpenseRoleConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseRoleConfigFindFirstArgs} args - Arguments to find a ExpenseRoleConfig
     * @example
     * // Get one ExpenseRoleConfig
     * const expenseRoleConfig = await prisma.expenseRoleConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExpenseRoleConfigFindFirstArgs>(args?: SelectSubset<T, ExpenseRoleConfigFindFirstArgs<ExtArgs>>): Prisma__ExpenseRoleConfigClient<$Result.GetResult<Prisma.$ExpenseRoleConfigPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ExpenseRoleConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseRoleConfigFindFirstOrThrowArgs} args - Arguments to find a ExpenseRoleConfig
     * @example
     * // Get one ExpenseRoleConfig
     * const expenseRoleConfig = await prisma.expenseRoleConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExpenseRoleConfigFindFirstOrThrowArgs>(args?: SelectSubset<T, ExpenseRoleConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExpenseRoleConfigClient<$Result.GetResult<Prisma.$ExpenseRoleConfigPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ExpenseRoleConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseRoleConfigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExpenseRoleConfigs
     * const expenseRoleConfigs = await prisma.expenseRoleConfig.findMany()
     * 
     * // Get first 10 ExpenseRoleConfigs
     * const expenseRoleConfigs = await prisma.expenseRoleConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const expenseRoleConfigWithIdOnly = await prisma.expenseRoleConfig.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExpenseRoleConfigFindManyArgs>(args?: SelectSubset<T, ExpenseRoleConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpenseRoleConfigPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ExpenseRoleConfig.
     * @param {ExpenseRoleConfigCreateArgs} args - Arguments to create a ExpenseRoleConfig.
     * @example
     * // Create one ExpenseRoleConfig
     * const ExpenseRoleConfig = await prisma.expenseRoleConfig.create({
     *   data: {
     *     // ... data to create a ExpenseRoleConfig
     *   }
     * })
     * 
     */
    create<T extends ExpenseRoleConfigCreateArgs>(args: SelectSubset<T, ExpenseRoleConfigCreateArgs<ExtArgs>>): Prisma__ExpenseRoleConfigClient<$Result.GetResult<Prisma.$ExpenseRoleConfigPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ExpenseRoleConfigs.
     * @param {ExpenseRoleConfigCreateManyArgs} args - Arguments to create many ExpenseRoleConfigs.
     * @example
     * // Create many ExpenseRoleConfigs
     * const expenseRoleConfig = await prisma.expenseRoleConfig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExpenseRoleConfigCreateManyArgs>(args?: SelectSubset<T, ExpenseRoleConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ExpenseRoleConfigs and returns the data saved in the database.
     * @param {ExpenseRoleConfigCreateManyAndReturnArgs} args - Arguments to create many ExpenseRoleConfigs.
     * @example
     * // Create many ExpenseRoleConfigs
     * const expenseRoleConfig = await prisma.expenseRoleConfig.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ExpenseRoleConfigs and only return the `id`
     * const expenseRoleConfigWithIdOnly = await prisma.expenseRoleConfig.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExpenseRoleConfigCreateManyAndReturnArgs>(args?: SelectSubset<T, ExpenseRoleConfigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpenseRoleConfigPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ExpenseRoleConfig.
     * @param {ExpenseRoleConfigDeleteArgs} args - Arguments to delete one ExpenseRoleConfig.
     * @example
     * // Delete one ExpenseRoleConfig
     * const ExpenseRoleConfig = await prisma.expenseRoleConfig.delete({
     *   where: {
     *     // ... filter to delete one ExpenseRoleConfig
     *   }
     * })
     * 
     */
    delete<T extends ExpenseRoleConfigDeleteArgs>(args: SelectSubset<T, ExpenseRoleConfigDeleteArgs<ExtArgs>>): Prisma__ExpenseRoleConfigClient<$Result.GetResult<Prisma.$ExpenseRoleConfigPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ExpenseRoleConfig.
     * @param {ExpenseRoleConfigUpdateArgs} args - Arguments to update one ExpenseRoleConfig.
     * @example
     * // Update one ExpenseRoleConfig
     * const expenseRoleConfig = await prisma.expenseRoleConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExpenseRoleConfigUpdateArgs>(args: SelectSubset<T, ExpenseRoleConfigUpdateArgs<ExtArgs>>): Prisma__ExpenseRoleConfigClient<$Result.GetResult<Prisma.$ExpenseRoleConfigPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ExpenseRoleConfigs.
     * @param {ExpenseRoleConfigDeleteManyArgs} args - Arguments to filter ExpenseRoleConfigs to delete.
     * @example
     * // Delete a few ExpenseRoleConfigs
     * const { count } = await prisma.expenseRoleConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExpenseRoleConfigDeleteManyArgs>(args?: SelectSubset<T, ExpenseRoleConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExpenseRoleConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseRoleConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExpenseRoleConfigs
     * const expenseRoleConfig = await prisma.expenseRoleConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExpenseRoleConfigUpdateManyArgs>(args: SelectSubset<T, ExpenseRoleConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExpenseRoleConfigs and returns the data updated in the database.
     * @param {ExpenseRoleConfigUpdateManyAndReturnArgs} args - Arguments to update many ExpenseRoleConfigs.
     * @example
     * // Update many ExpenseRoleConfigs
     * const expenseRoleConfig = await prisma.expenseRoleConfig.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ExpenseRoleConfigs and only return the `id`
     * const expenseRoleConfigWithIdOnly = await prisma.expenseRoleConfig.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ExpenseRoleConfigUpdateManyAndReturnArgs>(args: SelectSubset<T, ExpenseRoleConfigUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpenseRoleConfigPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ExpenseRoleConfig.
     * @param {ExpenseRoleConfigUpsertArgs} args - Arguments to update or create a ExpenseRoleConfig.
     * @example
     * // Update or create a ExpenseRoleConfig
     * const expenseRoleConfig = await prisma.expenseRoleConfig.upsert({
     *   create: {
     *     // ... data to create a ExpenseRoleConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExpenseRoleConfig we want to update
     *   }
     * })
     */
    upsert<T extends ExpenseRoleConfigUpsertArgs>(args: SelectSubset<T, ExpenseRoleConfigUpsertArgs<ExtArgs>>): Prisma__ExpenseRoleConfigClient<$Result.GetResult<Prisma.$ExpenseRoleConfigPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ExpenseRoleConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseRoleConfigCountArgs} args - Arguments to filter ExpenseRoleConfigs to count.
     * @example
     * // Count the number of ExpenseRoleConfigs
     * const count = await prisma.expenseRoleConfig.count({
     *   where: {
     *     // ... the filter for the ExpenseRoleConfigs we want to count
     *   }
     * })
    **/
    count<T extends ExpenseRoleConfigCountArgs>(
      args?: Subset<T, ExpenseRoleConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExpenseRoleConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExpenseRoleConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseRoleConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExpenseRoleConfigAggregateArgs>(args: Subset<T, ExpenseRoleConfigAggregateArgs>): Prisma.PrismaPromise<GetExpenseRoleConfigAggregateType<T>>

    /**
     * Group by ExpenseRoleConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseRoleConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExpenseRoleConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExpenseRoleConfigGroupByArgs['orderBy'] }
        : { orderBy?: ExpenseRoleConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExpenseRoleConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExpenseRoleConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ExpenseRoleConfig model
   */
  readonly fields: ExpenseRoleConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ExpenseRoleConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExpenseRoleConfigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    expenseType<T extends ExpenseTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExpenseTypeDefaultArgs<ExtArgs>>): Prisma__ExpenseTypeClient<$Result.GetResult<Prisma.$ExpenseTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    expenseClaims<T extends ExpenseRoleConfig$expenseClaimsArgs<ExtArgs> = {}>(args?: Subset<T, ExpenseRoleConfig$expenseClaimsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpenseClaimPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ExpenseRoleConfig model
   */
  interface ExpenseRoleConfigFieldRefs {
    readonly id: FieldRef<"ExpenseRoleConfig", 'String'>
    readonly expenseTypeId: FieldRef<"ExpenseRoleConfig", 'String'>
    readonly role: FieldRef<"ExpenseRoleConfig", 'EmployeeRole'>
    readonly limits: FieldRef<"ExpenseRoleConfig", 'Json'>
    readonly rates: FieldRef<"ExpenseRoleConfig", 'Json'>
    readonly validationRules: FieldRef<"ExpenseRoleConfig", 'Json'>
    readonly isActive: FieldRef<"ExpenseRoleConfig", 'Boolean'>
    readonly createdAt: FieldRef<"ExpenseRoleConfig", 'DateTime'>
    readonly updatedAt: FieldRef<"ExpenseRoleConfig", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ExpenseRoleConfig findUnique
   */
  export type ExpenseRoleConfigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseRoleConfig
     */
    select?: ExpenseRoleConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseRoleConfig
     */
    omit?: ExpenseRoleConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseRoleConfigInclude<ExtArgs> | null
    /**
     * Filter, which ExpenseRoleConfig to fetch.
     */
    where: ExpenseRoleConfigWhereUniqueInput
  }

  /**
   * ExpenseRoleConfig findUniqueOrThrow
   */
  export type ExpenseRoleConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseRoleConfig
     */
    select?: ExpenseRoleConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseRoleConfig
     */
    omit?: ExpenseRoleConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseRoleConfigInclude<ExtArgs> | null
    /**
     * Filter, which ExpenseRoleConfig to fetch.
     */
    where: ExpenseRoleConfigWhereUniqueInput
  }

  /**
   * ExpenseRoleConfig findFirst
   */
  export type ExpenseRoleConfigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseRoleConfig
     */
    select?: ExpenseRoleConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseRoleConfig
     */
    omit?: ExpenseRoleConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseRoleConfigInclude<ExtArgs> | null
    /**
     * Filter, which ExpenseRoleConfig to fetch.
     */
    where?: ExpenseRoleConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExpenseRoleConfigs to fetch.
     */
    orderBy?: ExpenseRoleConfigOrderByWithRelationInput | ExpenseRoleConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExpenseRoleConfigs.
     */
    cursor?: ExpenseRoleConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExpenseRoleConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExpenseRoleConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExpenseRoleConfigs.
     */
    distinct?: ExpenseRoleConfigScalarFieldEnum | ExpenseRoleConfigScalarFieldEnum[]
  }

  /**
   * ExpenseRoleConfig findFirstOrThrow
   */
  export type ExpenseRoleConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseRoleConfig
     */
    select?: ExpenseRoleConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseRoleConfig
     */
    omit?: ExpenseRoleConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseRoleConfigInclude<ExtArgs> | null
    /**
     * Filter, which ExpenseRoleConfig to fetch.
     */
    where?: ExpenseRoleConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExpenseRoleConfigs to fetch.
     */
    orderBy?: ExpenseRoleConfigOrderByWithRelationInput | ExpenseRoleConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExpenseRoleConfigs.
     */
    cursor?: ExpenseRoleConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExpenseRoleConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExpenseRoleConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExpenseRoleConfigs.
     */
    distinct?: ExpenseRoleConfigScalarFieldEnum | ExpenseRoleConfigScalarFieldEnum[]
  }

  /**
   * ExpenseRoleConfig findMany
   */
  export type ExpenseRoleConfigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseRoleConfig
     */
    select?: ExpenseRoleConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseRoleConfig
     */
    omit?: ExpenseRoleConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseRoleConfigInclude<ExtArgs> | null
    /**
     * Filter, which ExpenseRoleConfigs to fetch.
     */
    where?: ExpenseRoleConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExpenseRoleConfigs to fetch.
     */
    orderBy?: ExpenseRoleConfigOrderByWithRelationInput | ExpenseRoleConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExpenseRoleConfigs.
     */
    cursor?: ExpenseRoleConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExpenseRoleConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExpenseRoleConfigs.
     */
    skip?: number
    distinct?: ExpenseRoleConfigScalarFieldEnum | ExpenseRoleConfigScalarFieldEnum[]
  }

  /**
   * ExpenseRoleConfig create
   */
  export type ExpenseRoleConfigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseRoleConfig
     */
    select?: ExpenseRoleConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseRoleConfig
     */
    omit?: ExpenseRoleConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseRoleConfigInclude<ExtArgs> | null
    /**
     * The data needed to create a ExpenseRoleConfig.
     */
    data: XOR<ExpenseRoleConfigCreateInput, ExpenseRoleConfigUncheckedCreateInput>
  }

  /**
   * ExpenseRoleConfig createMany
   */
  export type ExpenseRoleConfigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ExpenseRoleConfigs.
     */
    data: ExpenseRoleConfigCreateManyInput | ExpenseRoleConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ExpenseRoleConfig createManyAndReturn
   */
  export type ExpenseRoleConfigCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseRoleConfig
     */
    select?: ExpenseRoleConfigSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseRoleConfig
     */
    omit?: ExpenseRoleConfigOmit<ExtArgs> | null
    /**
     * The data used to create many ExpenseRoleConfigs.
     */
    data: ExpenseRoleConfigCreateManyInput | ExpenseRoleConfigCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseRoleConfigIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ExpenseRoleConfig update
   */
  export type ExpenseRoleConfigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseRoleConfig
     */
    select?: ExpenseRoleConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseRoleConfig
     */
    omit?: ExpenseRoleConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseRoleConfigInclude<ExtArgs> | null
    /**
     * The data needed to update a ExpenseRoleConfig.
     */
    data: XOR<ExpenseRoleConfigUpdateInput, ExpenseRoleConfigUncheckedUpdateInput>
    /**
     * Choose, which ExpenseRoleConfig to update.
     */
    where: ExpenseRoleConfigWhereUniqueInput
  }

  /**
   * ExpenseRoleConfig updateMany
   */
  export type ExpenseRoleConfigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ExpenseRoleConfigs.
     */
    data: XOR<ExpenseRoleConfigUpdateManyMutationInput, ExpenseRoleConfigUncheckedUpdateManyInput>
    /**
     * Filter which ExpenseRoleConfigs to update
     */
    where?: ExpenseRoleConfigWhereInput
    /**
     * Limit how many ExpenseRoleConfigs to update.
     */
    limit?: number
  }

  /**
   * ExpenseRoleConfig updateManyAndReturn
   */
  export type ExpenseRoleConfigUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseRoleConfig
     */
    select?: ExpenseRoleConfigSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseRoleConfig
     */
    omit?: ExpenseRoleConfigOmit<ExtArgs> | null
    /**
     * The data used to update ExpenseRoleConfigs.
     */
    data: XOR<ExpenseRoleConfigUpdateManyMutationInput, ExpenseRoleConfigUncheckedUpdateManyInput>
    /**
     * Filter which ExpenseRoleConfigs to update
     */
    where?: ExpenseRoleConfigWhereInput
    /**
     * Limit how many ExpenseRoleConfigs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseRoleConfigIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ExpenseRoleConfig upsert
   */
  export type ExpenseRoleConfigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseRoleConfig
     */
    select?: ExpenseRoleConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseRoleConfig
     */
    omit?: ExpenseRoleConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseRoleConfigInclude<ExtArgs> | null
    /**
     * The filter to search for the ExpenseRoleConfig to update in case it exists.
     */
    where: ExpenseRoleConfigWhereUniqueInput
    /**
     * In case the ExpenseRoleConfig found by the `where` argument doesn't exist, create a new ExpenseRoleConfig with this data.
     */
    create: XOR<ExpenseRoleConfigCreateInput, ExpenseRoleConfigUncheckedCreateInput>
    /**
     * In case the ExpenseRoleConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExpenseRoleConfigUpdateInput, ExpenseRoleConfigUncheckedUpdateInput>
  }

  /**
   * ExpenseRoleConfig delete
   */
  export type ExpenseRoleConfigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseRoleConfig
     */
    select?: ExpenseRoleConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseRoleConfig
     */
    omit?: ExpenseRoleConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseRoleConfigInclude<ExtArgs> | null
    /**
     * Filter which ExpenseRoleConfig to delete.
     */
    where: ExpenseRoleConfigWhereUniqueInput
  }

  /**
   * ExpenseRoleConfig deleteMany
   */
  export type ExpenseRoleConfigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExpenseRoleConfigs to delete
     */
    where?: ExpenseRoleConfigWhereInput
    /**
     * Limit how many ExpenseRoleConfigs to delete.
     */
    limit?: number
  }

  /**
   * ExpenseRoleConfig.expenseClaims
   */
  export type ExpenseRoleConfig$expenseClaimsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseClaim
     */
    select?: ExpenseClaimSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseClaim
     */
    omit?: ExpenseClaimOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseClaimInclude<ExtArgs> | null
    where?: ExpenseClaimWhereInput
    orderBy?: ExpenseClaimOrderByWithRelationInput | ExpenseClaimOrderByWithRelationInput[]
    cursor?: ExpenseClaimWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExpenseClaimScalarFieldEnum | ExpenseClaimScalarFieldEnum[]
  }

  /**
   * ExpenseRoleConfig without action
   */
  export type ExpenseRoleConfigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseRoleConfig
     */
    select?: ExpenseRoleConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseRoleConfig
     */
    omit?: ExpenseRoleConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseRoleConfigInclude<ExtArgs> | null
  }


  /**
   * Model ExpenseClaim
   */

  export type AggregateExpenseClaim = {
    _count: ExpenseClaimCountAggregateOutputType | null
    _min: ExpenseClaimMinAggregateOutputType | null
    _max: ExpenseClaimMaxAggregateOutputType | null
  }

  export type ExpenseClaimMinAggregateOutputType = {
    id: string | null
    claimNumber: string | null
    employeeId: string | null
    expenseTypeId: string | null
    expenseRoleConfigId: string | null
    status: $Enums.ExpenseClaimStatus | null
    submittedAt: Date | null
    approvedAt: Date | null
    approvedBy: string | null
    approvalComments: string | null
    rejectionReason: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ExpenseClaimMaxAggregateOutputType = {
    id: string | null
    claimNumber: string | null
    employeeId: string | null
    expenseTypeId: string | null
    expenseRoleConfigId: string | null
    status: $Enums.ExpenseClaimStatus | null
    submittedAt: Date | null
    approvedAt: Date | null
    approvedBy: string | null
    approvalComments: string | null
    rejectionReason: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ExpenseClaimCountAggregateOutputType = {
    id: number
    claimNumber: number
    employeeId: number
    expenseTypeId: number
    expenseRoleConfigId: number
    expenseData: number
    status: number
    submittedAt: number
    approvedAt: number
    approvedBy: number
    approvalComments: number
    rejectionReason: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ExpenseClaimMinAggregateInputType = {
    id?: true
    claimNumber?: true
    employeeId?: true
    expenseTypeId?: true
    expenseRoleConfigId?: true
    status?: true
    submittedAt?: true
    approvedAt?: true
    approvedBy?: true
    approvalComments?: true
    rejectionReason?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ExpenseClaimMaxAggregateInputType = {
    id?: true
    claimNumber?: true
    employeeId?: true
    expenseTypeId?: true
    expenseRoleConfigId?: true
    status?: true
    submittedAt?: true
    approvedAt?: true
    approvedBy?: true
    approvalComments?: true
    rejectionReason?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ExpenseClaimCountAggregateInputType = {
    id?: true
    claimNumber?: true
    employeeId?: true
    expenseTypeId?: true
    expenseRoleConfigId?: true
    expenseData?: true
    status?: true
    submittedAt?: true
    approvedAt?: true
    approvedBy?: true
    approvalComments?: true
    rejectionReason?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ExpenseClaimAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExpenseClaim to aggregate.
     */
    where?: ExpenseClaimWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExpenseClaims to fetch.
     */
    orderBy?: ExpenseClaimOrderByWithRelationInput | ExpenseClaimOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExpenseClaimWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExpenseClaims from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExpenseClaims.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExpenseClaims
    **/
    _count?: true | ExpenseClaimCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExpenseClaimMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExpenseClaimMaxAggregateInputType
  }

  export type GetExpenseClaimAggregateType<T extends ExpenseClaimAggregateArgs> = {
        [P in keyof T & keyof AggregateExpenseClaim]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExpenseClaim[P]>
      : GetScalarType<T[P], AggregateExpenseClaim[P]>
  }




  export type ExpenseClaimGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExpenseClaimWhereInput
    orderBy?: ExpenseClaimOrderByWithAggregationInput | ExpenseClaimOrderByWithAggregationInput[]
    by: ExpenseClaimScalarFieldEnum[] | ExpenseClaimScalarFieldEnum
    having?: ExpenseClaimScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExpenseClaimCountAggregateInputType | true
    _min?: ExpenseClaimMinAggregateInputType
    _max?: ExpenseClaimMaxAggregateInputType
  }

  export type ExpenseClaimGroupByOutputType = {
    id: string
    claimNumber: string
    employeeId: string
    expenseTypeId: string
    expenseRoleConfigId: string
    expenseData: JsonValue
    status: $Enums.ExpenseClaimStatus
    submittedAt: Date
    approvedAt: Date | null
    approvedBy: string | null
    approvalComments: string | null
    rejectionReason: string | null
    createdAt: Date
    updatedAt: Date
    _count: ExpenseClaimCountAggregateOutputType | null
    _min: ExpenseClaimMinAggregateOutputType | null
    _max: ExpenseClaimMaxAggregateOutputType | null
  }

  type GetExpenseClaimGroupByPayload<T extends ExpenseClaimGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExpenseClaimGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExpenseClaimGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExpenseClaimGroupByOutputType[P]>
            : GetScalarType<T[P], ExpenseClaimGroupByOutputType[P]>
        }
      >
    >


  export type ExpenseClaimSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    claimNumber?: boolean
    employeeId?: boolean
    expenseTypeId?: boolean
    expenseRoleConfigId?: boolean
    expenseData?: boolean
    status?: boolean
    submittedAt?: boolean
    approvedAt?: boolean
    approvedBy?: boolean
    approvalComments?: boolean
    rejectionReason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    expenseType?: boolean | ExpenseTypeDefaultArgs<ExtArgs>
    expenseRoleConfig?: boolean | ExpenseRoleConfigDefaultArgs<ExtArgs>
    approver?: boolean | ExpenseClaim$approverArgs<ExtArgs>
  }, ExtArgs["result"]["expenseClaim"]>

  export type ExpenseClaimSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    claimNumber?: boolean
    employeeId?: boolean
    expenseTypeId?: boolean
    expenseRoleConfigId?: boolean
    expenseData?: boolean
    status?: boolean
    submittedAt?: boolean
    approvedAt?: boolean
    approvedBy?: boolean
    approvalComments?: boolean
    rejectionReason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    expenseType?: boolean | ExpenseTypeDefaultArgs<ExtArgs>
    expenseRoleConfig?: boolean | ExpenseRoleConfigDefaultArgs<ExtArgs>
    approver?: boolean | ExpenseClaim$approverArgs<ExtArgs>
  }, ExtArgs["result"]["expenseClaim"]>

  export type ExpenseClaimSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    claimNumber?: boolean
    employeeId?: boolean
    expenseTypeId?: boolean
    expenseRoleConfigId?: boolean
    expenseData?: boolean
    status?: boolean
    submittedAt?: boolean
    approvedAt?: boolean
    approvedBy?: boolean
    approvalComments?: boolean
    rejectionReason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    expenseType?: boolean | ExpenseTypeDefaultArgs<ExtArgs>
    expenseRoleConfig?: boolean | ExpenseRoleConfigDefaultArgs<ExtArgs>
    approver?: boolean | ExpenseClaim$approverArgs<ExtArgs>
  }, ExtArgs["result"]["expenseClaim"]>

  export type ExpenseClaimSelectScalar = {
    id?: boolean
    claimNumber?: boolean
    employeeId?: boolean
    expenseTypeId?: boolean
    expenseRoleConfigId?: boolean
    expenseData?: boolean
    status?: boolean
    submittedAt?: boolean
    approvedAt?: boolean
    approvedBy?: boolean
    approvalComments?: boolean
    rejectionReason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ExpenseClaimOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "claimNumber" | "employeeId" | "expenseTypeId" | "expenseRoleConfigId" | "expenseData" | "status" | "submittedAt" | "approvedAt" | "approvedBy" | "approvalComments" | "rejectionReason" | "createdAt" | "updatedAt", ExtArgs["result"]["expenseClaim"]>
  export type ExpenseClaimInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    expenseType?: boolean | ExpenseTypeDefaultArgs<ExtArgs>
    expenseRoleConfig?: boolean | ExpenseRoleConfigDefaultArgs<ExtArgs>
    approver?: boolean | ExpenseClaim$approverArgs<ExtArgs>
  }
  export type ExpenseClaimIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    expenseType?: boolean | ExpenseTypeDefaultArgs<ExtArgs>
    expenseRoleConfig?: boolean | ExpenseRoleConfigDefaultArgs<ExtArgs>
    approver?: boolean | ExpenseClaim$approverArgs<ExtArgs>
  }
  export type ExpenseClaimIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    expenseType?: boolean | ExpenseTypeDefaultArgs<ExtArgs>
    expenseRoleConfig?: boolean | ExpenseRoleConfigDefaultArgs<ExtArgs>
    approver?: boolean | ExpenseClaim$approverArgs<ExtArgs>
  }

  export type $ExpenseClaimPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ExpenseClaim"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
      expenseType: Prisma.$ExpenseTypePayload<ExtArgs>
      expenseRoleConfig: Prisma.$ExpenseRoleConfigPayload<ExtArgs>
      approver: Prisma.$EmployeePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      claimNumber: string
      employeeId: string
      expenseTypeId: string
      expenseRoleConfigId: string
      expenseData: Prisma.JsonValue
      status: $Enums.ExpenseClaimStatus
      submittedAt: Date
      approvedAt: Date | null
      approvedBy: string | null
      approvalComments: string | null
      rejectionReason: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["expenseClaim"]>
    composites: {}
  }

  type ExpenseClaimGetPayload<S extends boolean | null | undefined | ExpenseClaimDefaultArgs> = $Result.GetResult<Prisma.$ExpenseClaimPayload, S>

  type ExpenseClaimCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ExpenseClaimFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExpenseClaimCountAggregateInputType | true
    }

  export interface ExpenseClaimDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExpenseClaim'], meta: { name: 'ExpenseClaim' } }
    /**
     * Find zero or one ExpenseClaim that matches the filter.
     * @param {ExpenseClaimFindUniqueArgs} args - Arguments to find a ExpenseClaim
     * @example
     * // Get one ExpenseClaim
     * const expenseClaim = await prisma.expenseClaim.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExpenseClaimFindUniqueArgs>(args: SelectSubset<T, ExpenseClaimFindUniqueArgs<ExtArgs>>): Prisma__ExpenseClaimClient<$Result.GetResult<Prisma.$ExpenseClaimPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ExpenseClaim that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ExpenseClaimFindUniqueOrThrowArgs} args - Arguments to find a ExpenseClaim
     * @example
     * // Get one ExpenseClaim
     * const expenseClaim = await prisma.expenseClaim.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExpenseClaimFindUniqueOrThrowArgs>(args: SelectSubset<T, ExpenseClaimFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExpenseClaimClient<$Result.GetResult<Prisma.$ExpenseClaimPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ExpenseClaim that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseClaimFindFirstArgs} args - Arguments to find a ExpenseClaim
     * @example
     * // Get one ExpenseClaim
     * const expenseClaim = await prisma.expenseClaim.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExpenseClaimFindFirstArgs>(args?: SelectSubset<T, ExpenseClaimFindFirstArgs<ExtArgs>>): Prisma__ExpenseClaimClient<$Result.GetResult<Prisma.$ExpenseClaimPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ExpenseClaim that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseClaimFindFirstOrThrowArgs} args - Arguments to find a ExpenseClaim
     * @example
     * // Get one ExpenseClaim
     * const expenseClaim = await prisma.expenseClaim.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExpenseClaimFindFirstOrThrowArgs>(args?: SelectSubset<T, ExpenseClaimFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExpenseClaimClient<$Result.GetResult<Prisma.$ExpenseClaimPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ExpenseClaims that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseClaimFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExpenseClaims
     * const expenseClaims = await prisma.expenseClaim.findMany()
     * 
     * // Get first 10 ExpenseClaims
     * const expenseClaims = await prisma.expenseClaim.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const expenseClaimWithIdOnly = await prisma.expenseClaim.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExpenseClaimFindManyArgs>(args?: SelectSubset<T, ExpenseClaimFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpenseClaimPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ExpenseClaim.
     * @param {ExpenseClaimCreateArgs} args - Arguments to create a ExpenseClaim.
     * @example
     * // Create one ExpenseClaim
     * const ExpenseClaim = await prisma.expenseClaim.create({
     *   data: {
     *     // ... data to create a ExpenseClaim
     *   }
     * })
     * 
     */
    create<T extends ExpenseClaimCreateArgs>(args: SelectSubset<T, ExpenseClaimCreateArgs<ExtArgs>>): Prisma__ExpenseClaimClient<$Result.GetResult<Prisma.$ExpenseClaimPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ExpenseClaims.
     * @param {ExpenseClaimCreateManyArgs} args - Arguments to create many ExpenseClaims.
     * @example
     * // Create many ExpenseClaims
     * const expenseClaim = await prisma.expenseClaim.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExpenseClaimCreateManyArgs>(args?: SelectSubset<T, ExpenseClaimCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ExpenseClaims and returns the data saved in the database.
     * @param {ExpenseClaimCreateManyAndReturnArgs} args - Arguments to create many ExpenseClaims.
     * @example
     * // Create many ExpenseClaims
     * const expenseClaim = await prisma.expenseClaim.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ExpenseClaims and only return the `id`
     * const expenseClaimWithIdOnly = await prisma.expenseClaim.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExpenseClaimCreateManyAndReturnArgs>(args?: SelectSubset<T, ExpenseClaimCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpenseClaimPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ExpenseClaim.
     * @param {ExpenseClaimDeleteArgs} args - Arguments to delete one ExpenseClaim.
     * @example
     * // Delete one ExpenseClaim
     * const ExpenseClaim = await prisma.expenseClaim.delete({
     *   where: {
     *     // ... filter to delete one ExpenseClaim
     *   }
     * })
     * 
     */
    delete<T extends ExpenseClaimDeleteArgs>(args: SelectSubset<T, ExpenseClaimDeleteArgs<ExtArgs>>): Prisma__ExpenseClaimClient<$Result.GetResult<Prisma.$ExpenseClaimPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ExpenseClaim.
     * @param {ExpenseClaimUpdateArgs} args - Arguments to update one ExpenseClaim.
     * @example
     * // Update one ExpenseClaim
     * const expenseClaim = await prisma.expenseClaim.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExpenseClaimUpdateArgs>(args: SelectSubset<T, ExpenseClaimUpdateArgs<ExtArgs>>): Prisma__ExpenseClaimClient<$Result.GetResult<Prisma.$ExpenseClaimPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ExpenseClaims.
     * @param {ExpenseClaimDeleteManyArgs} args - Arguments to filter ExpenseClaims to delete.
     * @example
     * // Delete a few ExpenseClaims
     * const { count } = await prisma.expenseClaim.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExpenseClaimDeleteManyArgs>(args?: SelectSubset<T, ExpenseClaimDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExpenseClaims.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseClaimUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExpenseClaims
     * const expenseClaim = await prisma.expenseClaim.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExpenseClaimUpdateManyArgs>(args: SelectSubset<T, ExpenseClaimUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExpenseClaims and returns the data updated in the database.
     * @param {ExpenseClaimUpdateManyAndReturnArgs} args - Arguments to update many ExpenseClaims.
     * @example
     * // Update many ExpenseClaims
     * const expenseClaim = await prisma.expenseClaim.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ExpenseClaims and only return the `id`
     * const expenseClaimWithIdOnly = await prisma.expenseClaim.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ExpenseClaimUpdateManyAndReturnArgs>(args: SelectSubset<T, ExpenseClaimUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpenseClaimPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ExpenseClaim.
     * @param {ExpenseClaimUpsertArgs} args - Arguments to update or create a ExpenseClaim.
     * @example
     * // Update or create a ExpenseClaim
     * const expenseClaim = await prisma.expenseClaim.upsert({
     *   create: {
     *     // ... data to create a ExpenseClaim
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExpenseClaim we want to update
     *   }
     * })
     */
    upsert<T extends ExpenseClaimUpsertArgs>(args: SelectSubset<T, ExpenseClaimUpsertArgs<ExtArgs>>): Prisma__ExpenseClaimClient<$Result.GetResult<Prisma.$ExpenseClaimPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ExpenseClaims.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseClaimCountArgs} args - Arguments to filter ExpenseClaims to count.
     * @example
     * // Count the number of ExpenseClaims
     * const count = await prisma.expenseClaim.count({
     *   where: {
     *     // ... the filter for the ExpenseClaims we want to count
     *   }
     * })
    **/
    count<T extends ExpenseClaimCountArgs>(
      args?: Subset<T, ExpenseClaimCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExpenseClaimCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExpenseClaim.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseClaimAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExpenseClaimAggregateArgs>(args: Subset<T, ExpenseClaimAggregateArgs>): Prisma.PrismaPromise<GetExpenseClaimAggregateType<T>>

    /**
     * Group by ExpenseClaim.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseClaimGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExpenseClaimGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExpenseClaimGroupByArgs['orderBy'] }
        : { orderBy?: ExpenseClaimGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExpenseClaimGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExpenseClaimGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ExpenseClaim model
   */
  readonly fields: ExpenseClaimFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ExpenseClaim.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExpenseClaimClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    expenseType<T extends ExpenseTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExpenseTypeDefaultArgs<ExtArgs>>): Prisma__ExpenseTypeClient<$Result.GetResult<Prisma.$ExpenseTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    expenseRoleConfig<T extends ExpenseRoleConfigDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExpenseRoleConfigDefaultArgs<ExtArgs>>): Prisma__ExpenseRoleConfigClient<$Result.GetResult<Prisma.$ExpenseRoleConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    approver<T extends ExpenseClaim$approverArgs<ExtArgs> = {}>(args?: Subset<T, ExpenseClaim$approverArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ExpenseClaim model
   */
  interface ExpenseClaimFieldRefs {
    readonly id: FieldRef<"ExpenseClaim", 'String'>
    readonly claimNumber: FieldRef<"ExpenseClaim", 'String'>
    readonly employeeId: FieldRef<"ExpenseClaim", 'String'>
    readonly expenseTypeId: FieldRef<"ExpenseClaim", 'String'>
    readonly expenseRoleConfigId: FieldRef<"ExpenseClaim", 'String'>
    readonly expenseData: FieldRef<"ExpenseClaim", 'Json'>
    readonly status: FieldRef<"ExpenseClaim", 'ExpenseClaimStatus'>
    readonly submittedAt: FieldRef<"ExpenseClaim", 'DateTime'>
    readonly approvedAt: FieldRef<"ExpenseClaim", 'DateTime'>
    readonly approvedBy: FieldRef<"ExpenseClaim", 'String'>
    readonly approvalComments: FieldRef<"ExpenseClaim", 'String'>
    readonly rejectionReason: FieldRef<"ExpenseClaim", 'String'>
    readonly createdAt: FieldRef<"ExpenseClaim", 'DateTime'>
    readonly updatedAt: FieldRef<"ExpenseClaim", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ExpenseClaim findUnique
   */
  export type ExpenseClaimFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseClaim
     */
    select?: ExpenseClaimSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseClaim
     */
    omit?: ExpenseClaimOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseClaimInclude<ExtArgs> | null
    /**
     * Filter, which ExpenseClaim to fetch.
     */
    where: ExpenseClaimWhereUniqueInput
  }

  /**
   * ExpenseClaim findUniqueOrThrow
   */
  export type ExpenseClaimFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseClaim
     */
    select?: ExpenseClaimSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseClaim
     */
    omit?: ExpenseClaimOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseClaimInclude<ExtArgs> | null
    /**
     * Filter, which ExpenseClaim to fetch.
     */
    where: ExpenseClaimWhereUniqueInput
  }

  /**
   * ExpenseClaim findFirst
   */
  export type ExpenseClaimFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseClaim
     */
    select?: ExpenseClaimSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseClaim
     */
    omit?: ExpenseClaimOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseClaimInclude<ExtArgs> | null
    /**
     * Filter, which ExpenseClaim to fetch.
     */
    where?: ExpenseClaimWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExpenseClaims to fetch.
     */
    orderBy?: ExpenseClaimOrderByWithRelationInput | ExpenseClaimOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExpenseClaims.
     */
    cursor?: ExpenseClaimWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExpenseClaims from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExpenseClaims.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExpenseClaims.
     */
    distinct?: ExpenseClaimScalarFieldEnum | ExpenseClaimScalarFieldEnum[]
  }

  /**
   * ExpenseClaim findFirstOrThrow
   */
  export type ExpenseClaimFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseClaim
     */
    select?: ExpenseClaimSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseClaim
     */
    omit?: ExpenseClaimOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseClaimInclude<ExtArgs> | null
    /**
     * Filter, which ExpenseClaim to fetch.
     */
    where?: ExpenseClaimWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExpenseClaims to fetch.
     */
    orderBy?: ExpenseClaimOrderByWithRelationInput | ExpenseClaimOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExpenseClaims.
     */
    cursor?: ExpenseClaimWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExpenseClaims from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExpenseClaims.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExpenseClaims.
     */
    distinct?: ExpenseClaimScalarFieldEnum | ExpenseClaimScalarFieldEnum[]
  }

  /**
   * ExpenseClaim findMany
   */
  export type ExpenseClaimFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseClaim
     */
    select?: ExpenseClaimSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseClaim
     */
    omit?: ExpenseClaimOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseClaimInclude<ExtArgs> | null
    /**
     * Filter, which ExpenseClaims to fetch.
     */
    where?: ExpenseClaimWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExpenseClaims to fetch.
     */
    orderBy?: ExpenseClaimOrderByWithRelationInput | ExpenseClaimOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExpenseClaims.
     */
    cursor?: ExpenseClaimWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExpenseClaims from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExpenseClaims.
     */
    skip?: number
    distinct?: ExpenseClaimScalarFieldEnum | ExpenseClaimScalarFieldEnum[]
  }

  /**
   * ExpenseClaim create
   */
  export type ExpenseClaimCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseClaim
     */
    select?: ExpenseClaimSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseClaim
     */
    omit?: ExpenseClaimOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseClaimInclude<ExtArgs> | null
    /**
     * The data needed to create a ExpenseClaim.
     */
    data: XOR<ExpenseClaimCreateInput, ExpenseClaimUncheckedCreateInput>
  }

  /**
   * ExpenseClaim createMany
   */
  export type ExpenseClaimCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ExpenseClaims.
     */
    data: ExpenseClaimCreateManyInput | ExpenseClaimCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ExpenseClaim createManyAndReturn
   */
  export type ExpenseClaimCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseClaim
     */
    select?: ExpenseClaimSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseClaim
     */
    omit?: ExpenseClaimOmit<ExtArgs> | null
    /**
     * The data used to create many ExpenseClaims.
     */
    data: ExpenseClaimCreateManyInput | ExpenseClaimCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseClaimIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ExpenseClaim update
   */
  export type ExpenseClaimUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseClaim
     */
    select?: ExpenseClaimSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseClaim
     */
    omit?: ExpenseClaimOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseClaimInclude<ExtArgs> | null
    /**
     * The data needed to update a ExpenseClaim.
     */
    data: XOR<ExpenseClaimUpdateInput, ExpenseClaimUncheckedUpdateInput>
    /**
     * Choose, which ExpenseClaim to update.
     */
    where: ExpenseClaimWhereUniqueInput
  }

  /**
   * ExpenseClaim updateMany
   */
  export type ExpenseClaimUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ExpenseClaims.
     */
    data: XOR<ExpenseClaimUpdateManyMutationInput, ExpenseClaimUncheckedUpdateManyInput>
    /**
     * Filter which ExpenseClaims to update
     */
    where?: ExpenseClaimWhereInput
    /**
     * Limit how many ExpenseClaims to update.
     */
    limit?: number
  }

  /**
   * ExpenseClaim updateManyAndReturn
   */
  export type ExpenseClaimUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseClaim
     */
    select?: ExpenseClaimSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseClaim
     */
    omit?: ExpenseClaimOmit<ExtArgs> | null
    /**
     * The data used to update ExpenseClaims.
     */
    data: XOR<ExpenseClaimUpdateManyMutationInput, ExpenseClaimUncheckedUpdateManyInput>
    /**
     * Filter which ExpenseClaims to update
     */
    where?: ExpenseClaimWhereInput
    /**
     * Limit how many ExpenseClaims to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseClaimIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ExpenseClaim upsert
   */
  export type ExpenseClaimUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseClaim
     */
    select?: ExpenseClaimSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseClaim
     */
    omit?: ExpenseClaimOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseClaimInclude<ExtArgs> | null
    /**
     * The filter to search for the ExpenseClaim to update in case it exists.
     */
    where: ExpenseClaimWhereUniqueInput
    /**
     * In case the ExpenseClaim found by the `where` argument doesn't exist, create a new ExpenseClaim with this data.
     */
    create: XOR<ExpenseClaimCreateInput, ExpenseClaimUncheckedCreateInput>
    /**
     * In case the ExpenseClaim was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExpenseClaimUpdateInput, ExpenseClaimUncheckedUpdateInput>
  }

  /**
   * ExpenseClaim delete
   */
  export type ExpenseClaimDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseClaim
     */
    select?: ExpenseClaimSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseClaim
     */
    omit?: ExpenseClaimOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseClaimInclude<ExtArgs> | null
    /**
     * Filter which ExpenseClaim to delete.
     */
    where: ExpenseClaimWhereUniqueInput
  }

  /**
   * ExpenseClaim deleteMany
   */
  export type ExpenseClaimDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExpenseClaims to delete
     */
    where?: ExpenseClaimWhereInput
    /**
     * Limit how many ExpenseClaims to delete.
     */
    limit?: number
  }

  /**
   * ExpenseClaim.approver
   */
  export type ExpenseClaim$approverArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
  }

  /**
   * ExpenseClaim without action
   */
  export type ExpenseClaimDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpenseClaim
     */
    select?: ExpenseClaimSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExpenseClaim
     */
    omit?: ExpenseClaimOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseClaimInclude<ExtArgs> | null
  }


  /**
   * Model Gift
   */

  export type AggregateGift = {
    _count: GiftCountAggregateOutputType | null
    _avg: GiftAvgAggregateOutputType | null
    _sum: GiftSumAggregateOutputType | null
    _min: GiftMinAggregateOutputType | null
    _max: GiftMaxAggregateOutputType | null
  }

  export type GiftAvgAggregateOutputType = {
    unitCost: Decimal | null
  }

  export type GiftSumAggregateOutputType = {
    unitCost: Decimal | null
  }

  export type GiftMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    unitCost: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    isActive: boolean | null
  }

  export type GiftMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    unitCost: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    isActive: boolean | null
  }

  export type GiftCountAggregateOutputType = {
    id: number
    name: number
    description: number
    unitCost: number
    specifications: number
    giftImages: number
    createdAt: number
    updatedAt: number
    createdById: number
    isActive: number
    _all: number
  }


  export type GiftAvgAggregateInputType = {
    unitCost?: true
  }

  export type GiftSumAggregateInputType = {
    unitCost?: true
  }

  export type GiftMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    unitCost?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    isActive?: true
  }

  export type GiftMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    unitCost?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    isActive?: true
  }

  export type GiftCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    unitCost?: true
    specifications?: true
    giftImages?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    isActive?: true
    _all?: true
  }

  export type GiftAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Gift to aggregate.
     */
    where?: GiftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gifts to fetch.
     */
    orderBy?: GiftOrderByWithRelationInput | GiftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GiftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gifts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gifts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Gifts
    **/
    _count?: true | GiftCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GiftAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GiftSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GiftMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GiftMaxAggregateInputType
  }

  export type GetGiftAggregateType<T extends GiftAggregateArgs> = {
        [P in keyof T & keyof AggregateGift]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGift[P]>
      : GetScalarType<T[P], AggregateGift[P]>
  }




  export type GiftGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GiftWhereInput
    orderBy?: GiftOrderByWithAggregationInput | GiftOrderByWithAggregationInput[]
    by: GiftScalarFieldEnum[] | GiftScalarFieldEnum
    having?: GiftScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GiftCountAggregateInputType | true
    _avg?: GiftAvgAggregateInputType
    _sum?: GiftSumAggregateInputType
    _min?: GiftMinAggregateInputType
    _max?: GiftMaxAggregateInputType
  }

  export type GiftGroupByOutputType = {
    id: string
    name: string
    description: string | null
    unitCost: Decimal
    specifications: JsonValue | null
    giftImages: JsonValue | null
    createdAt: Date
    updatedAt: Date
    createdById: string
    isActive: boolean
    _count: GiftCountAggregateOutputType | null
    _avg: GiftAvgAggregateOutputType | null
    _sum: GiftSumAggregateOutputType | null
    _min: GiftMinAggregateOutputType | null
    _max: GiftMaxAggregateOutputType | null
  }

  type GetGiftGroupByPayload<T extends GiftGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GiftGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GiftGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GiftGroupByOutputType[P]>
            : GetScalarType<T[P], GiftGroupByOutputType[P]>
        }
      >
    >


  export type GiftSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    unitCost?: boolean
    specifications?: boolean
    giftImages?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    isActive?: boolean
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    userGiftInventories?: boolean | Gift$userGiftInventoriesArgs<ExtArgs>
    doctorDistributionGiftItems?: boolean | Gift$doctorDistributionGiftItemsArgs<ExtArgs>
    _count?: boolean | GiftCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gift"]>

  export type GiftSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    unitCost?: boolean
    specifications?: boolean
    giftImages?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    isActive?: boolean
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gift"]>

  export type GiftSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    unitCost?: boolean
    specifications?: boolean
    giftImages?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    isActive?: boolean
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gift"]>

  export type GiftSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    unitCost?: boolean
    specifications?: boolean
    giftImages?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    isActive?: boolean
  }

  export type GiftOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "unitCost" | "specifications" | "giftImages" | "createdAt" | "updatedAt" | "createdById" | "isActive", ExtArgs["result"]["gift"]>
  export type GiftInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    userGiftInventories?: boolean | Gift$userGiftInventoriesArgs<ExtArgs>
    doctorDistributionGiftItems?: boolean | Gift$doctorDistributionGiftItemsArgs<ExtArgs>
    _count?: boolean | GiftCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GiftIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type GiftIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $GiftPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Gift"
    objects: {
      createdBy: Prisma.$EmployeePayload<ExtArgs>
      userGiftInventories: Prisma.$UserGiftInventoryPayload<ExtArgs>[]
      doctorDistributionGiftItems: Prisma.$DoctorDistributionGiftItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      unitCost: Prisma.Decimal
      specifications: Prisma.JsonValue | null
      giftImages: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      createdById: string
      isActive: boolean
    }, ExtArgs["result"]["gift"]>
    composites: {}
  }

  type GiftGetPayload<S extends boolean | null | undefined | GiftDefaultArgs> = $Result.GetResult<Prisma.$GiftPayload, S>

  type GiftCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GiftFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GiftCountAggregateInputType | true
    }

  export interface GiftDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Gift'], meta: { name: 'Gift' } }
    /**
     * Find zero or one Gift that matches the filter.
     * @param {GiftFindUniqueArgs} args - Arguments to find a Gift
     * @example
     * // Get one Gift
     * const gift = await prisma.gift.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GiftFindUniqueArgs>(args: SelectSubset<T, GiftFindUniqueArgs<ExtArgs>>): Prisma__GiftClient<$Result.GetResult<Prisma.$GiftPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Gift that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GiftFindUniqueOrThrowArgs} args - Arguments to find a Gift
     * @example
     * // Get one Gift
     * const gift = await prisma.gift.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GiftFindUniqueOrThrowArgs>(args: SelectSubset<T, GiftFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GiftClient<$Result.GetResult<Prisma.$GiftPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Gift that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GiftFindFirstArgs} args - Arguments to find a Gift
     * @example
     * // Get one Gift
     * const gift = await prisma.gift.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GiftFindFirstArgs>(args?: SelectSubset<T, GiftFindFirstArgs<ExtArgs>>): Prisma__GiftClient<$Result.GetResult<Prisma.$GiftPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Gift that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GiftFindFirstOrThrowArgs} args - Arguments to find a Gift
     * @example
     * // Get one Gift
     * const gift = await prisma.gift.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GiftFindFirstOrThrowArgs>(args?: SelectSubset<T, GiftFindFirstOrThrowArgs<ExtArgs>>): Prisma__GiftClient<$Result.GetResult<Prisma.$GiftPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Gifts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GiftFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Gifts
     * const gifts = await prisma.gift.findMany()
     * 
     * // Get first 10 Gifts
     * const gifts = await prisma.gift.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const giftWithIdOnly = await prisma.gift.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GiftFindManyArgs>(args?: SelectSubset<T, GiftFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GiftPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Gift.
     * @param {GiftCreateArgs} args - Arguments to create a Gift.
     * @example
     * // Create one Gift
     * const Gift = await prisma.gift.create({
     *   data: {
     *     // ... data to create a Gift
     *   }
     * })
     * 
     */
    create<T extends GiftCreateArgs>(args: SelectSubset<T, GiftCreateArgs<ExtArgs>>): Prisma__GiftClient<$Result.GetResult<Prisma.$GiftPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Gifts.
     * @param {GiftCreateManyArgs} args - Arguments to create many Gifts.
     * @example
     * // Create many Gifts
     * const gift = await prisma.gift.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GiftCreateManyArgs>(args?: SelectSubset<T, GiftCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Gifts and returns the data saved in the database.
     * @param {GiftCreateManyAndReturnArgs} args - Arguments to create many Gifts.
     * @example
     * // Create many Gifts
     * const gift = await prisma.gift.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Gifts and only return the `id`
     * const giftWithIdOnly = await prisma.gift.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GiftCreateManyAndReturnArgs>(args?: SelectSubset<T, GiftCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GiftPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Gift.
     * @param {GiftDeleteArgs} args - Arguments to delete one Gift.
     * @example
     * // Delete one Gift
     * const Gift = await prisma.gift.delete({
     *   where: {
     *     // ... filter to delete one Gift
     *   }
     * })
     * 
     */
    delete<T extends GiftDeleteArgs>(args: SelectSubset<T, GiftDeleteArgs<ExtArgs>>): Prisma__GiftClient<$Result.GetResult<Prisma.$GiftPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Gift.
     * @param {GiftUpdateArgs} args - Arguments to update one Gift.
     * @example
     * // Update one Gift
     * const gift = await prisma.gift.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GiftUpdateArgs>(args: SelectSubset<T, GiftUpdateArgs<ExtArgs>>): Prisma__GiftClient<$Result.GetResult<Prisma.$GiftPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Gifts.
     * @param {GiftDeleteManyArgs} args - Arguments to filter Gifts to delete.
     * @example
     * // Delete a few Gifts
     * const { count } = await prisma.gift.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GiftDeleteManyArgs>(args?: SelectSubset<T, GiftDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Gifts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GiftUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Gifts
     * const gift = await prisma.gift.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GiftUpdateManyArgs>(args: SelectSubset<T, GiftUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Gifts and returns the data updated in the database.
     * @param {GiftUpdateManyAndReturnArgs} args - Arguments to update many Gifts.
     * @example
     * // Update many Gifts
     * const gift = await prisma.gift.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Gifts and only return the `id`
     * const giftWithIdOnly = await prisma.gift.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GiftUpdateManyAndReturnArgs>(args: SelectSubset<T, GiftUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GiftPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Gift.
     * @param {GiftUpsertArgs} args - Arguments to update or create a Gift.
     * @example
     * // Update or create a Gift
     * const gift = await prisma.gift.upsert({
     *   create: {
     *     // ... data to create a Gift
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Gift we want to update
     *   }
     * })
     */
    upsert<T extends GiftUpsertArgs>(args: SelectSubset<T, GiftUpsertArgs<ExtArgs>>): Prisma__GiftClient<$Result.GetResult<Prisma.$GiftPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Gifts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GiftCountArgs} args - Arguments to filter Gifts to count.
     * @example
     * // Count the number of Gifts
     * const count = await prisma.gift.count({
     *   where: {
     *     // ... the filter for the Gifts we want to count
     *   }
     * })
    **/
    count<T extends GiftCountArgs>(
      args?: Subset<T, GiftCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GiftCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Gift.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GiftAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GiftAggregateArgs>(args: Subset<T, GiftAggregateArgs>): Prisma.PrismaPromise<GetGiftAggregateType<T>>

    /**
     * Group by Gift.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GiftGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GiftGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GiftGroupByArgs['orderBy'] }
        : { orderBy?: GiftGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GiftGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGiftGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Gift model
   */
  readonly fields: GiftFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Gift.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GiftClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    userGiftInventories<T extends Gift$userGiftInventoriesArgs<ExtArgs> = {}>(args?: Subset<T, Gift$userGiftInventoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserGiftInventoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    doctorDistributionGiftItems<T extends Gift$doctorDistributionGiftItemsArgs<ExtArgs> = {}>(args?: Subset<T, Gift$doctorDistributionGiftItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorDistributionGiftItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Gift model
   */
  interface GiftFieldRefs {
    readonly id: FieldRef<"Gift", 'String'>
    readonly name: FieldRef<"Gift", 'String'>
    readonly description: FieldRef<"Gift", 'String'>
    readonly unitCost: FieldRef<"Gift", 'Decimal'>
    readonly specifications: FieldRef<"Gift", 'Json'>
    readonly giftImages: FieldRef<"Gift", 'Json'>
    readonly createdAt: FieldRef<"Gift", 'DateTime'>
    readonly updatedAt: FieldRef<"Gift", 'DateTime'>
    readonly createdById: FieldRef<"Gift", 'String'>
    readonly isActive: FieldRef<"Gift", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Gift findUnique
   */
  export type GiftFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gift
     */
    select?: GiftSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gift
     */
    omit?: GiftOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GiftInclude<ExtArgs> | null
    /**
     * Filter, which Gift to fetch.
     */
    where: GiftWhereUniqueInput
  }

  /**
   * Gift findUniqueOrThrow
   */
  export type GiftFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gift
     */
    select?: GiftSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gift
     */
    omit?: GiftOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GiftInclude<ExtArgs> | null
    /**
     * Filter, which Gift to fetch.
     */
    where: GiftWhereUniqueInput
  }

  /**
   * Gift findFirst
   */
  export type GiftFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gift
     */
    select?: GiftSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gift
     */
    omit?: GiftOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GiftInclude<ExtArgs> | null
    /**
     * Filter, which Gift to fetch.
     */
    where?: GiftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gifts to fetch.
     */
    orderBy?: GiftOrderByWithRelationInput | GiftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Gifts.
     */
    cursor?: GiftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gifts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gifts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Gifts.
     */
    distinct?: GiftScalarFieldEnum | GiftScalarFieldEnum[]
  }

  /**
   * Gift findFirstOrThrow
   */
  export type GiftFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gift
     */
    select?: GiftSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gift
     */
    omit?: GiftOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GiftInclude<ExtArgs> | null
    /**
     * Filter, which Gift to fetch.
     */
    where?: GiftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gifts to fetch.
     */
    orderBy?: GiftOrderByWithRelationInput | GiftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Gifts.
     */
    cursor?: GiftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gifts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gifts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Gifts.
     */
    distinct?: GiftScalarFieldEnum | GiftScalarFieldEnum[]
  }

  /**
   * Gift findMany
   */
  export type GiftFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gift
     */
    select?: GiftSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gift
     */
    omit?: GiftOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GiftInclude<ExtArgs> | null
    /**
     * Filter, which Gifts to fetch.
     */
    where?: GiftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gifts to fetch.
     */
    orderBy?: GiftOrderByWithRelationInput | GiftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Gifts.
     */
    cursor?: GiftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gifts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gifts.
     */
    skip?: number
    distinct?: GiftScalarFieldEnum | GiftScalarFieldEnum[]
  }

  /**
   * Gift create
   */
  export type GiftCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gift
     */
    select?: GiftSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gift
     */
    omit?: GiftOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GiftInclude<ExtArgs> | null
    /**
     * The data needed to create a Gift.
     */
    data: XOR<GiftCreateInput, GiftUncheckedCreateInput>
  }

  /**
   * Gift createMany
   */
  export type GiftCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Gifts.
     */
    data: GiftCreateManyInput | GiftCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Gift createManyAndReturn
   */
  export type GiftCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gift
     */
    select?: GiftSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Gift
     */
    omit?: GiftOmit<ExtArgs> | null
    /**
     * The data used to create many Gifts.
     */
    data: GiftCreateManyInput | GiftCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GiftIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Gift update
   */
  export type GiftUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gift
     */
    select?: GiftSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gift
     */
    omit?: GiftOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GiftInclude<ExtArgs> | null
    /**
     * The data needed to update a Gift.
     */
    data: XOR<GiftUpdateInput, GiftUncheckedUpdateInput>
    /**
     * Choose, which Gift to update.
     */
    where: GiftWhereUniqueInput
  }

  /**
   * Gift updateMany
   */
  export type GiftUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Gifts.
     */
    data: XOR<GiftUpdateManyMutationInput, GiftUncheckedUpdateManyInput>
    /**
     * Filter which Gifts to update
     */
    where?: GiftWhereInput
    /**
     * Limit how many Gifts to update.
     */
    limit?: number
  }

  /**
   * Gift updateManyAndReturn
   */
  export type GiftUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gift
     */
    select?: GiftSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Gift
     */
    omit?: GiftOmit<ExtArgs> | null
    /**
     * The data used to update Gifts.
     */
    data: XOR<GiftUpdateManyMutationInput, GiftUncheckedUpdateManyInput>
    /**
     * Filter which Gifts to update
     */
    where?: GiftWhereInput
    /**
     * Limit how many Gifts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GiftIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Gift upsert
   */
  export type GiftUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gift
     */
    select?: GiftSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gift
     */
    omit?: GiftOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GiftInclude<ExtArgs> | null
    /**
     * The filter to search for the Gift to update in case it exists.
     */
    where: GiftWhereUniqueInput
    /**
     * In case the Gift found by the `where` argument doesn't exist, create a new Gift with this data.
     */
    create: XOR<GiftCreateInput, GiftUncheckedCreateInput>
    /**
     * In case the Gift was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GiftUpdateInput, GiftUncheckedUpdateInput>
  }

  /**
   * Gift delete
   */
  export type GiftDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gift
     */
    select?: GiftSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gift
     */
    omit?: GiftOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GiftInclude<ExtArgs> | null
    /**
     * Filter which Gift to delete.
     */
    where: GiftWhereUniqueInput
  }

  /**
   * Gift deleteMany
   */
  export type GiftDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Gifts to delete
     */
    where?: GiftWhereInput
    /**
     * Limit how many Gifts to delete.
     */
    limit?: number
  }

  /**
   * Gift.userGiftInventories
   */
  export type Gift$userGiftInventoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGiftInventory
     */
    select?: UserGiftInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserGiftInventory
     */
    omit?: UserGiftInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGiftInventoryInclude<ExtArgs> | null
    where?: UserGiftInventoryWhereInput
    orderBy?: UserGiftInventoryOrderByWithRelationInput | UserGiftInventoryOrderByWithRelationInput[]
    cursor?: UserGiftInventoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserGiftInventoryScalarFieldEnum | UserGiftInventoryScalarFieldEnum[]
  }

  /**
   * Gift.doctorDistributionGiftItems
   */
  export type Gift$doctorDistributionGiftItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistributionGiftItem
     */
    select?: DoctorDistributionGiftItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistributionGiftItem
     */
    omit?: DoctorDistributionGiftItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionGiftItemInclude<ExtArgs> | null
    where?: DoctorDistributionGiftItemWhereInput
    orderBy?: DoctorDistributionGiftItemOrderByWithRelationInput | DoctorDistributionGiftItemOrderByWithRelationInput[]
    cursor?: DoctorDistributionGiftItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorDistributionGiftItemScalarFieldEnum | DoctorDistributionGiftItemScalarFieldEnum[]
  }

  /**
   * Gift without action
   */
  export type GiftDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gift
     */
    select?: GiftSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gift
     */
    omit?: GiftOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GiftInclude<ExtArgs> | null
  }


  /**
   * Model UserDrugInventory
   */

  export type AggregateUserDrugInventory = {
    _count: UserDrugInventoryCountAggregateOutputType | null
    _avg: UserDrugInventoryAvgAggregateOutputType | null
    _sum: UserDrugInventorySumAggregateOutputType | null
    _min: UserDrugInventoryMinAggregateOutputType | null
    _max: UserDrugInventoryMaxAggregateOutputType | null
  }

  export type UserDrugInventoryAvgAggregateOutputType = {
    quantity: number | null
  }

  export type UserDrugInventorySumAggregateOutputType = {
    quantity: number | null
  }

  export type UserDrugInventoryMinAggregateOutputType = {
    id: string | null
    employeeId: string | null
    drugId: string | null
    quantity: number | null
    lastRestockedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserDrugInventoryMaxAggregateOutputType = {
    id: string | null
    employeeId: string | null
    drugId: string | null
    quantity: number | null
    lastRestockedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserDrugInventoryCountAggregateOutputType = {
    id: number
    employeeId: number
    drugId: number
    quantity: number
    lastRestockedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserDrugInventoryAvgAggregateInputType = {
    quantity?: true
  }

  export type UserDrugInventorySumAggregateInputType = {
    quantity?: true
  }

  export type UserDrugInventoryMinAggregateInputType = {
    id?: true
    employeeId?: true
    drugId?: true
    quantity?: true
    lastRestockedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserDrugInventoryMaxAggregateInputType = {
    id?: true
    employeeId?: true
    drugId?: true
    quantity?: true
    lastRestockedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserDrugInventoryCountAggregateInputType = {
    id?: true
    employeeId?: true
    drugId?: true
    quantity?: true
    lastRestockedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserDrugInventoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserDrugInventory to aggregate.
     */
    where?: UserDrugInventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserDrugInventories to fetch.
     */
    orderBy?: UserDrugInventoryOrderByWithRelationInput | UserDrugInventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserDrugInventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserDrugInventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserDrugInventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserDrugInventories
    **/
    _count?: true | UserDrugInventoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserDrugInventoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserDrugInventorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserDrugInventoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserDrugInventoryMaxAggregateInputType
  }

  export type GetUserDrugInventoryAggregateType<T extends UserDrugInventoryAggregateArgs> = {
        [P in keyof T & keyof AggregateUserDrugInventory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserDrugInventory[P]>
      : GetScalarType<T[P], AggregateUserDrugInventory[P]>
  }




  export type UserDrugInventoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserDrugInventoryWhereInput
    orderBy?: UserDrugInventoryOrderByWithAggregationInput | UserDrugInventoryOrderByWithAggregationInput[]
    by: UserDrugInventoryScalarFieldEnum[] | UserDrugInventoryScalarFieldEnum
    having?: UserDrugInventoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserDrugInventoryCountAggregateInputType | true
    _avg?: UserDrugInventoryAvgAggregateInputType
    _sum?: UserDrugInventorySumAggregateInputType
    _min?: UserDrugInventoryMinAggregateInputType
    _max?: UserDrugInventoryMaxAggregateInputType
  }

  export type UserDrugInventoryGroupByOutputType = {
    id: string
    employeeId: string
    drugId: string
    quantity: number
    lastRestockedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserDrugInventoryCountAggregateOutputType | null
    _avg: UserDrugInventoryAvgAggregateOutputType | null
    _sum: UserDrugInventorySumAggregateOutputType | null
    _min: UserDrugInventoryMinAggregateOutputType | null
    _max: UserDrugInventoryMaxAggregateOutputType | null
  }

  type GetUserDrugInventoryGroupByPayload<T extends UserDrugInventoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserDrugInventoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserDrugInventoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserDrugInventoryGroupByOutputType[P]>
            : GetScalarType<T[P], UserDrugInventoryGroupByOutputType[P]>
        }
      >
    >


  export type UserDrugInventorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    drugId?: boolean
    quantity?: boolean
    lastRestockedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    drug?: boolean | DrugDefaultArgs<ExtArgs>
    doctorDistributionDrugItems?: boolean | UserDrugInventory$doctorDistributionDrugItemsArgs<ExtArgs>
    _count?: boolean | UserDrugInventoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userDrugInventory"]>

  export type UserDrugInventorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    drugId?: boolean
    quantity?: boolean
    lastRestockedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    drug?: boolean | DrugDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userDrugInventory"]>

  export type UserDrugInventorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    drugId?: boolean
    quantity?: boolean
    lastRestockedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    drug?: boolean | DrugDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userDrugInventory"]>

  export type UserDrugInventorySelectScalar = {
    id?: boolean
    employeeId?: boolean
    drugId?: boolean
    quantity?: boolean
    lastRestockedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserDrugInventoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "employeeId" | "drugId" | "quantity" | "lastRestockedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["userDrugInventory"]>
  export type UserDrugInventoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    drug?: boolean | DrugDefaultArgs<ExtArgs>
    doctorDistributionDrugItems?: boolean | UserDrugInventory$doctorDistributionDrugItemsArgs<ExtArgs>
    _count?: boolean | UserDrugInventoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserDrugInventoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    drug?: boolean | DrugDefaultArgs<ExtArgs>
  }
  export type UserDrugInventoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    drug?: boolean | DrugDefaultArgs<ExtArgs>
  }

  export type $UserDrugInventoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserDrugInventory"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
      drug: Prisma.$DrugPayload<ExtArgs>
      doctorDistributionDrugItems: Prisma.$DoctorDistributionDrugItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      employeeId: string
      drugId: string
      quantity: number
      lastRestockedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userDrugInventory"]>
    composites: {}
  }

  type UserDrugInventoryGetPayload<S extends boolean | null | undefined | UserDrugInventoryDefaultArgs> = $Result.GetResult<Prisma.$UserDrugInventoryPayload, S>

  type UserDrugInventoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserDrugInventoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserDrugInventoryCountAggregateInputType | true
    }

  export interface UserDrugInventoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserDrugInventory'], meta: { name: 'UserDrugInventory' } }
    /**
     * Find zero or one UserDrugInventory that matches the filter.
     * @param {UserDrugInventoryFindUniqueArgs} args - Arguments to find a UserDrugInventory
     * @example
     * // Get one UserDrugInventory
     * const userDrugInventory = await prisma.userDrugInventory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserDrugInventoryFindUniqueArgs>(args: SelectSubset<T, UserDrugInventoryFindUniqueArgs<ExtArgs>>): Prisma__UserDrugInventoryClient<$Result.GetResult<Prisma.$UserDrugInventoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserDrugInventory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserDrugInventoryFindUniqueOrThrowArgs} args - Arguments to find a UserDrugInventory
     * @example
     * // Get one UserDrugInventory
     * const userDrugInventory = await prisma.userDrugInventory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserDrugInventoryFindUniqueOrThrowArgs>(args: SelectSubset<T, UserDrugInventoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserDrugInventoryClient<$Result.GetResult<Prisma.$UserDrugInventoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserDrugInventory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDrugInventoryFindFirstArgs} args - Arguments to find a UserDrugInventory
     * @example
     * // Get one UserDrugInventory
     * const userDrugInventory = await prisma.userDrugInventory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserDrugInventoryFindFirstArgs>(args?: SelectSubset<T, UserDrugInventoryFindFirstArgs<ExtArgs>>): Prisma__UserDrugInventoryClient<$Result.GetResult<Prisma.$UserDrugInventoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserDrugInventory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDrugInventoryFindFirstOrThrowArgs} args - Arguments to find a UserDrugInventory
     * @example
     * // Get one UserDrugInventory
     * const userDrugInventory = await prisma.userDrugInventory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserDrugInventoryFindFirstOrThrowArgs>(args?: SelectSubset<T, UserDrugInventoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserDrugInventoryClient<$Result.GetResult<Prisma.$UserDrugInventoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserDrugInventories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDrugInventoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserDrugInventories
     * const userDrugInventories = await prisma.userDrugInventory.findMany()
     * 
     * // Get first 10 UserDrugInventories
     * const userDrugInventories = await prisma.userDrugInventory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userDrugInventoryWithIdOnly = await prisma.userDrugInventory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserDrugInventoryFindManyArgs>(args?: SelectSubset<T, UserDrugInventoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserDrugInventoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserDrugInventory.
     * @param {UserDrugInventoryCreateArgs} args - Arguments to create a UserDrugInventory.
     * @example
     * // Create one UserDrugInventory
     * const UserDrugInventory = await prisma.userDrugInventory.create({
     *   data: {
     *     // ... data to create a UserDrugInventory
     *   }
     * })
     * 
     */
    create<T extends UserDrugInventoryCreateArgs>(args: SelectSubset<T, UserDrugInventoryCreateArgs<ExtArgs>>): Prisma__UserDrugInventoryClient<$Result.GetResult<Prisma.$UserDrugInventoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserDrugInventories.
     * @param {UserDrugInventoryCreateManyArgs} args - Arguments to create many UserDrugInventories.
     * @example
     * // Create many UserDrugInventories
     * const userDrugInventory = await prisma.userDrugInventory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserDrugInventoryCreateManyArgs>(args?: SelectSubset<T, UserDrugInventoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserDrugInventories and returns the data saved in the database.
     * @param {UserDrugInventoryCreateManyAndReturnArgs} args - Arguments to create many UserDrugInventories.
     * @example
     * // Create many UserDrugInventories
     * const userDrugInventory = await prisma.userDrugInventory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserDrugInventories and only return the `id`
     * const userDrugInventoryWithIdOnly = await prisma.userDrugInventory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserDrugInventoryCreateManyAndReturnArgs>(args?: SelectSubset<T, UserDrugInventoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserDrugInventoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserDrugInventory.
     * @param {UserDrugInventoryDeleteArgs} args - Arguments to delete one UserDrugInventory.
     * @example
     * // Delete one UserDrugInventory
     * const UserDrugInventory = await prisma.userDrugInventory.delete({
     *   where: {
     *     // ... filter to delete one UserDrugInventory
     *   }
     * })
     * 
     */
    delete<T extends UserDrugInventoryDeleteArgs>(args: SelectSubset<T, UserDrugInventoryDeleteArgs<ExtArgs>>): Prisma__UserDrugInventoryClient<$Result.GetResult<Prisma.$UserDrugInventoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserDrugInventory.
     * @param {UserDrugInventoryUpdateArgs} args - Arguments to update one UserDrugInventory.
     * @example
     * // Update one UserDrugInventory
     * const userDrugInventory = await prisma.userDrugInventory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserDrugInventoryUpdateArgs>(args: SelectSubset<T, UserDrugInventoryUpdateArgs<ExtArgs>>): Prisma__UserDrugInventoryClient<$Result.GetResult<Prisma.$UserDrugInventoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserDrugInventories.
     * @param {UserDrugInventoryDeleteManyArgs} args - Arguments to filter UserDrugInventories to delete.
     * @example
     * // Delete a few UserDrugInventories
     * const { count } = await prisma.userDrugInventory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDrugInventoryDeleteManyArgs>(args?: SelectSubset<T, UserDrugInventoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserDrugInventories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDrugInventoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserDrugInventories
     * const userDrugInventory = await prisma.userDrugInventory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserDrugInventoryUpdateManyArgs>(args: SelectSubset<T, UserDrugInventoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserDrugInventories and returns the data updated in the database.
     * @param {UserDrugInventoryUpdateManyAndReturnArgs} args - Arguments to update many UserDrugInventories.
     * @example
     * // Update many UserDrugInventories
     * const userDrugInventory = await prisma.userDrugInventory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserDrugInventories and only return the `id`
     * const userDrugInventoryWithIdOnly = await prisma.userDrugInventory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserDrugInventoryUpdateManyAndReturnArgs>(args: SelectSubset<T, UserDrugInventoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserDrugInventoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserDrugInventory.
     * @param {UserDrugInventoryUpsertArgs} args - Arguments to update or create a UserDrugInventory.
     * @example
     * // Update or create a UserDrugInventory
     * const userDrugInventory = await prisma.userDrugInventory.upsert({
     *   create: {
     *     // ... data to create a UserDrugInventory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserDrugInventory we want to update
     *   }
     * })
     */
    upsert<T extends UserDrugInventoryUpsertArgs>(args: SelectSubset<T, UserDrugInventoryUpsertArgs<ExtArgs>>): Prisma__UserDrugInventoryClient<$Result.GetResult<Prisma.$UserDrugInventoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserDrugInventories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDrugInventoryCountArgs} args - Arguments to filter UserDrugInventories to count.
     * @example
     * // Count the number of UserDrugInventories
     * const count = await prisma.userDrugInventory.count({
     *   where: {
     *     // ... the filter for the UserDrugInventories we want to count
     *   }
     * })
    **/
    count<T extends UserDrugInventoryCountArgs>(
      args?: Subset<T, UserDrugInventoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserDrugInventoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserDrugInventory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDrugInventoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserDrugInventoryAggregateArgs>(args: Subset<T, UserDrugInventoryAggregateArgs>): Prisma.PrismaPromise<GetUserDrugInventoryAggregateType<T>>

    /**
     * Group by UserDrugInventory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDrugInventoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserDrugInventoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserDrugInventoryGroupByArgs['orderBy'] }
        : { orderBy?: UserDrugInventoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserDrugInventoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserDrugInventoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserDrugInventory model
   */
  readonly fields: UserDrugInventoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserDrugInventory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserDrugInventoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    drug<T extends DrugDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DrugDefaultArgs<ExtArgs>>): Prisma__DrugClient<$Result.GetResult<Prisma.$DrugPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    doctorDistributionDrugItems<T extends UserDrugInventory$doctorDistributionDrugItemsArgs<ExtArgs> = {}>(args?: Subset<T, UserDrugInventory$doctorDistributionDrugItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorDistributionDrugItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserDrugInventory model
   */
  interface UserDrugInventoryFieldRefs {
    readonly id: FieldRef<"UserDrugInventory", 'String'>
    readonly employeeId: FieldRef<"UserDrugInventory", 'String'>
    readonly drugId: FieldRef<"UserDrugInventory", 'String'>
    readonly quantity: FieldRef<"UserDrugInventory", 'Int'>
    readonly lastRestockedAt: FieldRef<"UserDrugInventory", 'DateTime'>
    readonly createdAt: FieldRef<"UserDrugInventory", 'DateTime'>
    readonly updatedAt: FieldRef<"UserDrugInventory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserDrugInventory findUnique
   */
  export type UserDrugInventoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDrugInventory
     */
    select?: UserDrugInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDrugInventory
     */
    omit?: UserDrugInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDrugInventoryInclude<ExtArgs> | null
    /**
     * Filter, which UserDrugInventory to fetch.
     */
    where: UserDrugInventoryWhereUniqueInput
  }

  /**
   * UserDrugInventory findUniqueOrThrow
   */
  export type UserDrugInventoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDrugInventory
     */
    select?: UserDrugInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDrugInventory
     */
    omit?: UserDrugInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDrugInventoryInclude<ExtArgs> | null
    /**
     * Filter, which UserDrugInventory to fetch.
     */
    where: UserDrugInventoryWhereUniqueInput
  }

  /**
   * UserDrugInventory findFirst
   */
  export type UserDrugInventoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDrugInventory
     */
    select?: UserDrugInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDrugInventory
     */
    omit?: UserDrugInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDrugInventoryInclude<ExtArgs> | null
    /**
     * Filter, which UserDrugInventory to fetch.
     */
    where?: UserDrugInventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserDrugInventories to fetch.
     */
    orderBy?: UserDrugInventoryOrderByWithRelationInput | UserDrugInventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserDrugInventories.
     */
    cursor?: UserDrugInventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserDrugInventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserDrugInventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserDrugInventories.
     */
    distinct?: UserDrugInventoryScalarFieldEnum | UserDrugInventoryScalarFieldEnum[]
  }

  /**
   * UserDrugInventory findFirstOrThrow
   */
  export type UserDrugInventoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDrugInventory
     */
    select?: UserDrugInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDrugInventory
     */
    omit?: UserDrugInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDrugInventoryInclude<ExtArgs> | null
    /**
     * Filter, which UserDrugInventory to fetch.
     */
    where?: UserDrugInventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserDrugInventories to fetch.
     */
    orderBy?: UserDrugInventoryOrderByWithRelationInput | UserDrugInventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserDrugInventories.
     */
    cursor?: UserDrugInventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserDrugInventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserDrugInventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserDrugInventories.
     */
    distinct?: UserDrugInventoryScalarFieldEnum | UserDrugInventoryScalarFieldEnum[]
  }

  /**
   * UserDrugInventory findMany
   */
  export type UserDrugInventoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDrugInventory
     */
    select?: UserDrugInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDrugInventory
     */
    omit?: UserDrugInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDrugInventoryInclude<ExtArgs> | null
    /**
     * Filter, which UserDrugInventories to fetch.
     */
    where?: UserDrugInventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserDrugInventories to fetch.
     */
    orderBy?: UserDrugInventoryOrderByWithRelationInput | UserDrugInventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserDrugInventories.
     */
    cursor?: UserDrugInventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserDrugInventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserDrugInventories.
     */
    skip?: number
    distinct?: UserDrugInventoryScalarFieldEnum | UserDrugInventoryScalarFieldEnum[]
  }

  /**
   * UserDrugInventory create
   */
  export type UserDrugInventoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDrugInventory
     */
    select?: UserDrugInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDrugInventory
     */
    omit?: UserDrugInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDrugInventoryInclude<ExtArgs> | null
    /**
     * The data needed to create a UserDrugInventory.
     */
    data: XOR<UserDrugInventoryCreateInput, UserDrugInventoryUncheckedCreateInput>
  }

  /**
   * UserDrugInventory createMany
   */
  export type UserDrugInventoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserDrugInventories.
     */
    data: UserDrugInventoryCreateManyInput | UserDrugInventoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserDrugInventory createManyAndReturn
   */
  export type UserDrugInventoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDrugInventory
     */
    select?: UserDrugInventorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserDrugInventory
     */
    omit?: UserDrugInventoryOmit<ExtArgs> | null
    /**
     * The data used to create many UserDrugInventories.
     */
    data: UserDrugInventoryCreateManyInput | UserDrugInventoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDrugInventoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserDrugInventory update
   */
  export type UserDrugInventoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDrugInventory
     */
    select?: UserDrugInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDrugInventory
     */
    omit?: UserDrugInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDrugInventoryInclude<ExtArgs> | null
    /**
     * The data needed to update a UserDrugInventory.
     */
    data: XOR<UserDrugInventoryUpdateInput, UserDrugInventoryUncheckedUpdateInput>
    /**
     * Choose, which UserDrugInventory to update.
     */
    where: UserDrugInventoryWhereUniqueInput
  }

  /**
   * UserDrugInventory updateMany
   */
  export type UserDrugInventoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserDrugInventories.
     */
    data: XOR<UserDrugInventoryUpdateManyMutationInput, UserDrugInventoryUncheckedUpdateManyInput>
    /**
     * Filter which UserDrugInventories to update
     */
    where?: UserDrugInventoryWhereInput
    /**
     * Limit how many UserDrugInventories to update.
     */
    limit?: number
  }

  /**
   * UserDrugInventory updateManyAndReturn
   */
  export type UserDrugInventoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDrugInventory
     */
    select?: UserDrugInventorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserDrugInventory
     */
    omit?: UserDrugInventoryOmit<ExtArgs> | null
    /**
     * The data used to update UserDrugInventories.
     */
    data: XOR<UserDrugInventoryUpdateManyMutationInput, UserDrugInventoryUncheckedUpdateManyInput>
    /**
     * Filter which UserDrugInventories to update
     */
    where?: UserDrugInventoryWhereInput
    /**
     * Limit how many UserDrugInventories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDrugInventoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserDrugInventory upsert
   */
  export type UserDrugInventoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDrugInventory
     */
    select?: UserDrugInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDrugInventory
     */
    omit?: UserDrugInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDrugInventoryInclude<ExtArgs> | null
    /**
     * The filter to search for the UserDrugInventory to update in case it exists.
     */
    where: UserDrugInventoryWhereUniqueInput
    /**
     * In case the UserDrugInventory found by the `where` argument doesn't exist, create a new UserDrugInventory with this data.
     */
    create: XOR<UserDrugInventoryCreateInput, UserDrugInventoryUncheckedCreateInput>
    /**
     * In case the UserDrugInventory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserDrugInventoryUpdateInput, UserDrugInventoryUncheckedUpdateInput>
  }

  /**
   * UserDrugInventory delete
   */
  export type UserDrugInventoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDrugInventory
     */
    select?: UserDrugInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDrugInventory
     */
    omit?: UserDrugInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDrugInventoryInclude<ExtArgs> | null
    /**
     * Filter which UserDrugInventory to delete.
     */
    where: UserDrugInventoryWhereUniqueInput
  }

  /**
   * UserDrugInventory deleteMany
   */
  export type UserDrugInventoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserDrugInventories to delete
     */
    where?: UserDrugInventoryWhereInput
    /**
     * Limit how many UserDrugInventories to delete.
     */
    limit?: number
  }

  /**
   * UserDrugInventory.doctorDistributionDrugItems
   */
  export type UserDrugInventory$doctorDistributionDrugItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistributionDrugItem
     */
    select?: DoctorDistributionDrugItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistributionDrugItem
     */
    omit?: DoctorDistributionDrugItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionDrugItemInclude<ExtArgs> | null
    where?: DoctorDistributionDrugItemWhereInput
    orderBy?: DoctorDistributionDrugItemOrderByWithRelationInput | DoctorDistributionDrugItemOrderByWithRelationInput[]
    cursor?: DoctorDistributionDrugItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorDistributionDrugItemScalarFieldEnum | DoctorDistributionDrugItemScalarFieldEnum[]
  }

  /**
   * UserDrugInventory without action
   */
  export type UserDrugInventoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDrugInventory
     */
    select?: UserDrugInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDrugInventory
     */
    omit?: UserDrugInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDrugInventoryInclude<ExtArgs> | null
  }


  /**
   * Model UserGiftInventory
   */

  export type AggregateUserGiftInventory = {
    _count: UserGiftInventoryCountAggregateOutputType | null
    _avg: UserGiftInventoryAvgAggregateOutputType | null
    _sum: UserGiftInventorySumAggregateOutputType | null
    _min: UserGiftInventoryMinAggregateOutputType | null
    _max: UserGiftInventoryMaxAggregateOutputType | null
  }

  export type UserGiftInventoryAvgAggregateOutputType = {
    quantity: number | null
  }

  export type UserGiftInventorySumAggregateOutputType = {
    quantity: number | null
  }

  export type UserGiftInventoryMinAggregateOutputType = {
    id: string | null
    employeeId: string | null
    giftId: string | null
    quantity: number | null
    lastRestockedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserGiftInventoryMaxAggregateOutputType = {
    id: string | null
    employeeId: string | null
    giftId: string | null
    quantity: number | null
    lastRestockedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserGiftInventoryCountAggregateOutputType = {
    id: number
    employeeId: number
    giftId: number
    quantity: number
    lastRestockedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserGiftInventoryAvgAggregateInputType = {
    quantity?: true
  }

  export type UserGiftInventorySumAggregateInputType = {
    quantity?: true
  }

  export type UserGiftInventoryMinAggregateInputType = {
    id?: true
    employeeId?: true
    giftId?: true
    quantity?: true
    lastRestockedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserGiftInventoryMaxAggregateInputType = {
    id?: true
    employeeId?: true
    giftId?: true
    quantity?: true
    lastRestockedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserGiftInventoryCountAggregateInputType = {
    id?: true
    employeeId?: true
    giftId?: true
    quantity?: true
    lastRestockedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserGiftInventoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserGiftInventory to aggregate.
     */
    where?: UserGiftInventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserGiftInventories to fetch.
     */
    orderBy?: UserGiftInventoryOrderByWithRelationInput | UserGiftInventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserGiftInventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserGiftInventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserGiftInventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserGiftInventories
    **/
    _count?: true | UserGiftInventoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserGiftInventoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserGiftInventorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserGiftInventoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserGiftInventoryMaxAggregateInputType
  }

  export type GetUserGiftInventoryAggregateType<T extends UserGiftInventoryAggregateArgs> = {
        [P in keyof T & keyof AggregateUserGiftInventory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserGiftInventory[P]>
      : GetScalarType<T[P], AggregateUserGiftInventory[P]>
  }




  export type UserGiftInventoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserGiftInventoryWhereInput
    orderBy?: UserGiftInventoryOrderByWithAggregationInput | UserGiftInventoryOrderByWithAggregationInput[]
    by: UserGiftInventoryScalarFieldEnum[] | UserGiftInventoryScalarFieldEnum
    having?: UserGiftInventoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserGiftInventoryCountAggregateInputType | true
    _avg?: UserGiftInventoryAvgAggregateInputType
    _sum?: UserGiftInventorySumAggregateInputType
    _min?: UserGiftInventoryMinAggregateInputType
    _max?: UserGiftInventoryMaxAggregateInputType
  }

  export type UserGiftInventoryGroupByOutputType = {
    id: string
    employeeId: string
    giftId: string
    quantity: number
    lastRestockedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserGiftInventoryCountAggregateOutputType | null
    _avg: UserGiftInventoryAvgAggregateOutputType | null
    _sum: UserGiftInventorySumAggregateOutputType | null
    _min: UserGiftInventoryMinAggregateOutputType | null
    _max: UserGiftInventoryMaxAggregateOutputType | null
  }

  type GetUserGiftInventoryGroupByPayload<T extends UserGiftInventoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGiftInventoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGiftInventoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGiftInventoryGroupByOutputType[P]>
            : GetScalarType<T[P], UserGiftInventoryGroupByOutputType[P]>
        }
      >
    >


  export type UserGiftInventorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    giftId?: boolean
    quantity?: boolean
    lastRestockedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    gift?: boolean | GiftDefaultArgs<ExtArgs>
    doctorDistributionGiftItems?: boolean | UserGiftInventory$doctorDistributionGiftItemsArgs<ExtArgs>
    _count?: boolean | UserGiftInventoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userGiftInventory"]>

  export type UserGiftInventorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    giftId?: boolean
    quantity?: boolean
    lastRestockedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    gift?: boolean | GiftDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userGiftInventory"]>

  export type UserGiftInventorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    giftId?: boolean
    quantity?: boolean
    lastRestockedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    gift?: boolean | GiftDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userGiftInventory"]>

  export type UserGiftInventorySelectScalar = {
    id?: boolean
    employeeId?: boolean
    giftId?: boolean
    quantity?: boolean
    lastRestockedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserGiftInventoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "employeeId" | "giftId" | "quantity" | "lastRestockedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["userGiftInventory"]>
  export type UserGiftInventoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    gift?: boolean | GiftDefaultArgs<ExtArgs>
    doctorDistributionGiftItems?: boolean | UserGiftInventory$doctorDistributionGiftItemsArgs<ExtArgs>
    _count?: boolean | UserGiftInventoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserGiftInventoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    gift?: boolean | GiftDefaultArgs<ExtArgs>
  }
  export type UserGiftInventoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    gift?: boolean | GiftDefaultArgs<ExtArgs>
  }

  export type $UserGiftInventoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserGiftInventory"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
      gift: Prisma.$GiftPayload<ExtArgs>
      doctorDistributionGiftItems: Prisma.$DoctorDistributionGiftItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      employeeId: string
      giftId: string
      quantity: number
      lastRestockedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userGiftInventory"]>
    composites: {}
  }

  type UserGiftInventoryGetPayload<S extends boolean | null | undefined | UserGiftInventoryDefaultArgs> = $Result.GetResult<Prisma.$UserGiftInventoryPayload, S>

  type UserGiftInventoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserGiftInventoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserGiftInventoryCountAggregateInputType | true
    }

  export interface UserGiftInventoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserGiftInventory'], meta: { name: 'UserGiftInventory' } }
    /**
     * Find zero or one UserGiftInventory that matches the filter.
     * @param {UserGiftInventoryFindUniqueArgs} args - Arguments to find a UserGiftInventory
     * @example
     * // Get one UserGiftInventory
     * const userGiftInventory = await prisma.userGiftInventory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserGiftInventoryFindUniqueArgs>(args: SelectSubset<T, UserGiftInventoryFindUniqueArgs<ExtArgs>>): Prisma__UserGiftInventoryClient<$Result.GetResult<Prisma.$UserGiftInventoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserGiftInventory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserGiftInventoryFindUniqueOrThrowArgs} args - Arguments to find a UserGiftInventory
     * @example
     * // Get one UserGiftInventory
     * const userGiftInventory = await prisma.userGiftInventory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserGiftInventoryFindUniqueOrThrowArgs>(args: SelectSubset<T, UserGiftInventoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserGiftInventoryClient<$Result.GetResult<Prisma.$UserGiftInventoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserGiftInventory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGiftInventoryFindFirstArgs} args - Arguments to find a UserGiftInventory
     * @example
     * // Get one UserGiftInventory
     * const userGiftInventory = await prisma.userGiftInventory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserGiftInventoryFindFirstArgs>(args?: SelectSubset<T, UserGiftInventoryFindFirstArgs<ExtArgs>>): Prisma__UserGiftInventoryClient<$Result.GetResult<Prisma.$UserGiftInventoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserGiftInventory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGiftInventoryFindFirstOrThrowArgs} args - Arguments to find a UserGiftInventory
     * @example
     * // Get one UserGiftInventory
     * const userGiftInventory = await prisma.userGiftInventory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserGiftInventoryFindFirstOrThrowArgs>(args?: SelectSubset<T, UserGiftInventoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserGiftInventoryClient<$Result.GetResult<Prisma.$UserGiftInventoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserGiftInventories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGiftInventoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserGiftInventories
     * const userGiftInventories = await prisma.userGiftInventory.findMany()
     * 
     * // Get first 10 UserGiftInventories
     * const userGiftInventories = await prisma.userGiftInventory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userGiftInventoryWithIdOnly = await prisma.userGiftInventory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserGiftInventoryFindManyArgs>(args?: SelectSubset<T, UserGiftInventoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserGiftInventoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserGiftInventory.
     * @param {UserGiftInventoryCreateArgs} args - Arguments to create a UserGiftInventory.
     * @example
     * // Create one UserGiftInventory
     * const UserGiftInventory = await prisma.userGiftInventory.create({
     *   data: {
     *     // ... data to create a UserGiftInventory
     *   }
     * })
     * 
     */
    create<T extends UserGiftInventoryCreateArgs>(args: SelectSubset<T, UserGiftInventoryCreateArgs<ExtArgs>>): Prisma__UserGiftInventoryClient<$Result.GetResult<Prisma.$UserGiftInventoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserGiftInventories.
     * @param {UserGiftInventoryCreateManyArgs} args - Arguments to create many UserGiftInventories.
     * @example
     * // Create many UserGiftInventories
     * const userGiftInventory = await prisma.userGiftInventory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserGiftInventoryCreateManyArgs>(args?: SelectSubset<T, UserGiftInventoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserGiftInventories and returns the data saved in the database.
     * @param {UserGiftInventoryCreateManyAndReturnArgs} args - Arguments to create many UserGiftInventories.
     * @example
     * // Create many UserGiftInventories
     * const userGiftInventory = await prisma.userGiftInventory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserGiftInventories and only return the `id`
     * const userGiftInventoryWithIdOnly = await prisma.userGiftInventory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserGiftInventoryCreateManyAndReturnArgs>(args?: SelectSubset<T, UserGiftInventoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserGiftInventoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserGiftInventory.
     * @param {UserGiftInventoryDeleteArgs} args - Arguments to delete one UserGiftInventory.
     * @example
     * // Delete one UserGiftInventory
     * const UserGiftInventory = await prisma.userGiftInventory.delete({
     *   where: {
     *     // ... filter to delete one UserGiftInventory
     *   }
     * })
     * 
     */
    delete<T extends UserGiftInventoryDeleteArgs>(args: SelectSubset<T, UserGiftInventoryDeleteArgs<ExtArgs>>): Prisma__UserGiftInventoryClient<$Result.GetResult<Prisma.$UserGiftInventoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserGiftInventory.
     * @param {UserGiftInventoryUpdateArgs} args - Arguments to update one UserGiftInventory.
     * @example
     * // Update one UserGiftInventory
     * const userGiftInventory = await prisma.userGiftInventory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserGiftInventoryUpdateArgs>(args: SelectSubset<T, UserGiftInventoryUpdateArgs<ExtArgs>>): Prisma__UserGiftInventoryClient<$Result.GetResult<Prisma.$UserGiftInventoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserGiftInventories.
     * @param {UserGiftInventoryDeleteManyArgs} args - Arguments to filter UserGiftInventories to delete.
     * @example
     * // Delete a few UserGiftInventories
     * const { count } = await prisma.userGiftInventory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserGiftInventoryDeleteManyArgs>(args?: SelectSubset<T, UserGiftInventoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserGiftInventories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGiftInventoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserGiftInventories
     * const userGiftInventory = await prisma.userGiftInventory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserGiftInventoryUpdateManyArgs>(args: SelectSubset<T, UserGiftInventoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserGiftInventories and returns the data updated in the database.
     * @param {UserGiftInventoryUpdateManyAndReturnArgs} args - Arguments to update many UserGiftInventories.
     * @example
     * // Update many UserGiftInventories
     * const userGiftInventory = await prisma.userGiftInventory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserGiftInventories and only return the `id`
     * const userGiftInventoryWithIdOnly = await prisma.userGiftInventory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserGiftInventoryUpdateManyAndReturnArgs>(args: SelectSubset<T, UserGiftInventoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserGiftInventoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserGiftInventory.
     * @param {UserGiftInventoryUpsertArgs} args - Arguments to update or create a UserGiftInventory.
     * @example
     * // Update or create a UserGiftInventory
     * const userGiftInventory = await prisma.userGiftInventory.upsert({
     *   create: {
     *     // ... data to create a UserGiftInventory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserGiftInventory we want to update
     *   }
     * })
     */
    upsert<T extends UserGiftInventoryUpsertArgs>(args: SelectSubset<T, UserGiftInventoryUpsertArgs<ExtArgs>>): Prisma__UserGiftInventoryClient<$Result.GetResult<Prisma.$UserGiftInventoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserGiftInventories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGiftInventoryCountArgs} args - Arguments to filter UserGiftInventories to count.
     * @example
     * // Count the number of UserGiftInventories
     * const count = await prisma.userGiftInventory.count({
     *   where: {
     *     // ... the filter for the UserGiftInventories we want to count
     *   }
     * })
    **/
    count<T extends UserGiftInventoryCountArgs>(
      args?: Subset<T, UserGiftInventoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserGiftInventoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserGiftInventory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGiftInventoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserGiftInventoryAggregateArgs>(args: Subset<T, UserGiftInventoryAggregateArgs>): Prisma.PrismaPromise<GetUserGiftInventoryAggregateType<T>>

    /**
     * Group by UserGiftInventory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGiftInventoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGiftInventoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGiftInventoryGroupByArgs['orderBy'] }
        : { orderBy?: UserGiftInventoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGiftInventoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGiftInventoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserGiftInventory model
   */
  readonly fields: UserGiftInventoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserGiftInventory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserGiftInventoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    gift<T extends GiftDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GiftDefaultArgs<ExtArgs>>): Prisma__GiftClient<$Result.GetResult<Prisma.$GiftPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    doctorDistributionGiftItems<T extends UserGiftInventory$doctorDistributionGiftItemsArgs<ExtArgs> = {}>(args?: Subset<T, UserGiftInventory$doctorDistributionGiftItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorDistributionGiftItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserGiftInventory model
   */
  interface UserGiftInventoryFieldRefs {
    readonly id: FieldRef<"UserGiftInventory", 'String'>
    readonly employeeId: FieldRef<"UserGiftInventory", 'String'>
    readonly giftId: FieldRef<"UserGiftInventory", 'String'>
    readonly quantity: FieldRef<"UserGiftInventory", 'Int'>
    readonly lastRestockedAt: FieldRef<"UserGiftInventory", 'DateTime'>
    readonly createdAt: FieldRef<"UserGiftInventory", 'DateTime'>
    readonly updatedAt: FieldRef<"UserGiftInventory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserGiftInventory findUnique
   */
  export type UserGiftInventoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGiftInventory
     */
    select?: UserGiftInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserGiftInventory
     */
    omit?: UserGiftInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGiftInventoryInclude<ExtArgs> | null
    /**
     * Filter, which UserGiftInventory to fetch.
     */
    where: UserGiftInventoryWhereUniqueInput
  }

  /**
   * UserGiftInventory findUniqueOrThrow
   */
  export type UserGiftInventoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGiftInventory
     */
    select?: UserGiftInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserGiftInventory
     */
    omit?: UserGiftInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGiftInventoryInclude<ExtArgs> | null
    /**
     * Filter, which UserGiftInventory to fetch.
     */
    where: UserGiftInventoryWhereUniqueInput
  }

  /**
   * UserGiftInventory findFirst
   */
  export type UserGiftInventoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGiftInventory
     */
    select?: UserGiftInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserGiftInventory
     */
    omit?: UserGiftInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGiftInventoryInclude<ExtArgs> | null
    /**
     * Filter, which UserGiftInventory to fetch.
     */
    where?: UserGiftInventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserGiftInventories to fetch.
     */
    orderBy?: UserGiftInventoryOrderByWithRelationInput | UserGiftInventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserGiftInventories.
     */
    cursor?: UserGiftInventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserGiftInventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserGiftInventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserGiftInventories.
     */
    distinct?: UserGiftInventoryScalarFieldEnum | UserGiftInventoryScalarFieldEnum[]
  }

  /**
   * UserGiftInventory findFirstOrThrow
   */
  export type UserGiftInventoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGiftInventory
     */
    select?: UserGiftInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserGiftInventory
     */
    omit?: UserGiftInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGiftInventoryInclude<ExtArgs> | null
    /**
     * Filter, which UserGiftInventory to fetch.
     */
    where?: UserGiftInventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserGiftInventories to fetch.
     */
    orderBy?: UserGiftInventoryOrderByWithRelationInput | UserGiftInventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserGiftInventories.
     */
    cursor?: UserGiftInventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserGiftInventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserGiftInventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserGiftInventories.
     */
    distinct?: UserGiftInventoryScalarFieldEnum | UserGiftInventoryScalarFieldEnum[]
  }

  /**
   * UserGiftInventory findMany
   */
  export type UserGiftInventoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGiftInventory
     */
    select?: UserGiftInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserGiftInventory
     */
    omit?: UserGiftInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGiftInventoryInclude<ExtArgs> | null
    /**
     * Filter, which UserGiftInventories to fetch.
     */
    where?: UserGiftInventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserGiftInventories to fetch.
     */
    orderBy?: UserGiftInventoryOrderByWithRelationInput | UserGiftInventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserGiftInventories.
     */
    cursor?: UserGiftInventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserGiftInventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserGiftInventories.
     */
    skip?: number
    distinct?: UserGiftInventoryScalarFieldEnum | UserGiftInventoryScalarFieldEnum[]
  }

  /**
   * UserGiftInventory create
   */
  export type UserGiftInventoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGiftInventory
     */
    select?: UserGiftInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserGiftInventory
     */
    omit?: UserGiftInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGiftInventoryInclude<ExtArgs> | null
    /**
     * The data needed to create a UserGiftInventory.
     */
    data: XOR<UserGiftInventoryCreateInput, UserGiftInventoryUncheckedCreateInput>
  }

  /**
   * UserGiftInventory createMany
   */
  export type UserGiftInventoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserGiftInventories.
     */
    data: UserGiftInventoryCreateManyInput | UserGiftInventoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserGiftInventory createManyAndReturn
   */
  export type UserGiftInventoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGiftInventory
     */
    select?: UserGiftInventorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserGiftInventory
     */
    omit?: UserGiftInventoryOmit<ExtArgs> | null
    /**
     * The data used to create many UserGiftInventories.
     */
    data: UserGiftInventoryCreateManyInput | UserGiftInventoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGiftInventoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserGiftInventory update
   */
  export type UserGiftInventoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGiftInventory
     */
    select?: UserGiftInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserGiftInventory
     */
    omit?: UserGiftInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGiftInventoryInclude<ExtArgs> | null
    /**
     * The data needed to update a UserGiftInventory.
     */
    data: XOR<UserGiftInventoryUpdateInput, UserGiftInventoryUncheckedUpdateInput>
    /**
     * Choose, which UserGiftInventory to update.
     */
    where: UserGiftInventoryWhereUniqueInput
  }

  /**
   * UserGiftInventory updateMany
   */
  export type UserGiftInventoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserGiftInventories.
     */
    data: XOR<UserGiftInventoryUpdateManyMutationInput, UserGiftInventoryUncheckedUpdateManyInput>
    /**
     * Filter which UserGiftInventories to update
     */
    where?: UserGiftInventoryWhereInput
    /**
     * Limit how many UserGiftInventories to update.
     */
    limit?: number
  }

  /**
   * UserGiftInventory updateManyAndReturn
   */
  export type UserGiftInventoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGiftInventory
     */
    select?: UserGiftInventorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserGiftInventory
     */
    omit?: UserGiftInventoryOmit<ExtArgs> | null
    /**
     * The data used to update UserGiftInventories.
     */
    data: XOR<UserGiftInventoryUpdateManyMutationInput, UserGiftInventoryUncheckedUpdateManyInput>
    /**
     * Filter which UserGiftInventories to update
     */
    where?: UserGiftInventoryWhereInput
    /**
     * Limit how many UserGiftInventories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGiftInventoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserGiftInventory upsert
   */
  export type UserGiftInventoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGiftInventory
     */
    select?: UserGiftInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserGiftInventory
     */
    omit?: UserGiftInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGiftInventoryInclude<ExtArgs> | null
    /**
     * The filter to search for the UserGiftInventory to update in case it exists.
     */
    where: UserGiftInventoryWhereUniqueInput
    /**
     * In case the UserGiftInventory found by the `where` argument doesn't exist, create a new UserGiftInventory with this data.
     */
    create: XOR<UserGiftInventoryCreateInput, UserGiftInventoryUncheckedCreateInput>
    /**
     * In case the UserGiftInventory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserGiftInventoryUpdateInput, UserGiftInventoryUncheckedUpdateInput>
  }

  /**
   * UserGiftInventory delete
   */
  export type UserGiftInventoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGiftInventory
     */
    select?: UserGiftInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserGiftInventory
     */
    omit?: UserGiftInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGiftInventoryInclude<ExtArgs> | null
    /**
     * Filter which UserGiftInventory to delete.
     */
    where: UserGiftInventoryWhereUniqueInput
  }

  /**
   * UserGiftInventory deleteMany
   */
  export type UserGiftInventoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserGiftInventories to delete
     */
    where?: UserGiftInventoryWhereInput
    /**
     * Limit how many UserGiftInventories to delete.
     */
    limit?: number
  }

  /**
   * UserGiftInventory.doctorDistributionGiftItems
   */
  export type UserGiftInventory$doctorDistributionGiftItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistributionGiftItem
     */
    select?: DoctorDistributionGiftItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistributionGiftItem
     */
    omit?: DoctorDistributionGiftItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionGiftItemInclude<ExtArgs> | null
    where?: DoctorDistributionGiftItemWhereInput
    orderBy?: DoctorDistributionGiftItemOrderByWithRelationInput | DoctorDistributionGiftItemOrderByWithRelationInput[]
    cursor?: DoctorDistributionGiftItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorDistributionGiftItemScalarFieldEnum | DoctorDistributionGiftItemScalarFieldEnum[]
  }

  /**
   * UserGiftInventory without action
   */
  export type UserGiftInventoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGiftInventory
     */
    select?: UserGiftInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserGiftInventory
     */
    omit?: UserGiftInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGiftInventoryInclude<ExtArgs> | null
  }


  /**
   * Model DoctorDistribution
   */

  export type AggregateDoctorDistribution = {
    _count: DoctorDistributionCountAggregateOutputType | null
    _min: DoctorDistributionMinAggregateOutputType | null
    _max: DoctorDistributionMaxAggregateOutputType | null
  }

  export type DoctorDistributionMinAggregateOutputType = {
    id: string | null
    doctorInteractionId: string | null
    employeeId: string | null
    distributedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DoctorDistributionMaxAggregateOutputType = {
    id: string | null
    doctorInteractionId: string | null
    employeeId: string | null
    distributedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DoctorDistributionCountAggregateOutputType = {
    id: number
    doctorInteractionId: number
    employeeId: number
    distributedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DoctorDistributionMinAggregateInputType = {
    id?: true
    doctorInteractionId?: true
    employeeId?: true
    distributedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DoctorDistributionMaxAggregateInputType = {
    id?: true
    doctorInteractionId?: true
    employeeId?: true
    distributedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DoctorDistributionCountAggregateInputType = {
    id?: true
    doctorInteractionId?: true
    employeeId?: true
    distributedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DoctorDistributionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DoctorDistribution to aggregate.
     */
    where?: DoctorDistributionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorDistributions to fetch.
     */
    orderBy?: DoctorDistributionOrderByWithRelationInput | DoctorDistributionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DoctorDistributionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorDistributions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorDistributions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DoctorDistributions
    **/
    _count?: true | DoctorDistributionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoctorDistributionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoctorDistributionMaxAggregateInputType
  }

  export type GetDoctorDistributionAggregateType<T extends DoctorDistributionAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctorDistribution]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctorDistribution[P]>
      : GetScalarType<T[P], AggregateDoctorDistribution[P]>
  }




  export type DoctorDistributionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorDistributionWhereInput
    orderBy?: DoctorDistributionOrderByWithAggregationInput | DoctorDistributionOrderByWithAggregationInput[]
    by: DoctorDistributionScalarFieldEnum[] | DoctorDistributionScalarFieldEnum
    having?: DoctorDistributionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoctorDistributionCountAggregateInputType | true
    _min?: DoctorDistributionMinAggregateInputType
    _max?: DoctorDistributionMaxAggregateInputType
  }

  export type DoctorDistributionGroupByOutputType = {
    id: string
    doctorInteractionId: string
    employeeId: string
    distributedAt: Date
    createdAt: Date
    updatedAt: Date
    _count: DoctorDistributionCountAggregateOutputType | null
    _min: DoctorDistributionMinAggregateOutputType | null
    _max: DoctorDistributionMaxAggregateOutputType | null
  }

  type GetDoctorDistributionGroupByPayload<T extends DoctorDistributionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DoctorDistributionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoctorDistributionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoctorDistributionGroupByOutputType[P]>
            : GetScalarType<T[P], DoctorDistributionGroupByOutputType[P]>
        }
      >
    >


  export type DoctorDistributionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorInteractionId?: boolean
    employeeId?: boolean
    distributedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctorInteraction?: boolean | DoctorInteractionDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    drugItems?: boolean | DoctorDistribution$drugItemsArgs<ExtArgs>
    giftItems?: boolean | DoctorDistribution$giftItemsArgs<ExtArgs>
    _count?: boolean | DoctorDistributionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorDistribution"]>

  export type DoctorDistributionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorInteractionId?: boolean
    employeeId?: boolean
    distributedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctorInteraction?: boolean | DoctorInteractionDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorDistribution"]>

  export type DoctorDistributionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorInteractionId?: boolean
    employeeId?: boolean
    distributedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctorInteraction?: boolean | DoctorInteractionDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorDistribution"]>

  export type DoctorDistributionSelectScalar = {
    id?: boolean
    doctorInteractionId?: boolean
    employeeId?: boolean
    distributedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DoctorDistributionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "doctorInteractionId" | "employeeId" | "distributedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["doctorDistribution"]>
  export type DoctorDistributionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctorInteraction?: boolean | DoctorInteractionDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    drugItems?: boolean | DoctorDistribution$drugItemsArgs<ExtArgs>
    giftItems?: boolean | DoctorDistribution$giftItemsArgs<ExtArgs>
    _count?: boolean | DoctorDistributionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DoctorDistributionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctorInteraction?: boolean | DoctorInteractionDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type DoctorDistributionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctorInteraction?: boolean | DoctorInteractionDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $DoctorDistributionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DoctorDistribution"
    objects: {
      doctorInteraction: Prisma.$DoctorInteractionPayload<ExtArgs>
      employee: Prisma.$EmployeePayload<ExtArgs>
      drugItems: Prisma.$DoctorDistributionDrugItemPayload<ExtArgs>[]
      giftItems: Prisma.$DoctorDistributionGiftItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      doctorInteractionId: string
      employeeId: string
      distributedAt: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["doctorDistribution"]>
    composites: {}
  }

  type DoctorDistributionGetPayload<S extends boolean | null | undefined | DoctorDistributionDefaultArgs> = $Result.GetResult<Prisma.$DoctorDistributionPayload, S>

  type DoctorDistributionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DoctorDistributionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DoctorDistributionCountAggregateInputType | true
    }

  export interface DoctorDistributionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DoctorDistribution'], meta: { name: 'DoctorDistribution' } }
    /**
     * Find zero or one DoctorDistribution that matches the filter.
     * @param {DoctorDistributionFindUniqueArgs} args - Arguments to find a DoctorDistribution
     * @example
     * // Get one DoctorDistribution
     * const doctorDistribution = await prisma.doctorDistribution.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DoctorDistributionFindUniqueArgs>(args: SelectSubset<T, DoctorDistributionFindUniqueArgs<ExtArgs>>): Prisma__DoctorDistributionClient<$Result.GetResult<Prisma.$DoctorDistributionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DoctorDistribution that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DoctorDistributionFindUniqueOrThrowArgs} args - Arguments to find a DoctorDistribution
     * @example
     * // Get one DoctorDistribution
     * const doctorDistribution = await prisma.doctorDistribution.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DoctorDistributionFindUniqueOrThrowArgs>(args: SelectSubset<T, DoctorDistributionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DoctorDistributionClient<$Result.GetResult<Prisma.$DoctorDistributionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DoctorDistribution that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorDistributionFindFirstArgs} args - Arguments to find a DoctorDistribution
     * @example
     * // Get one DoctorDistribution
     * const doctorDistribution = await prisma.doctorDistribution.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DoctorDistributionFindFirstArgs>(args?: SelectSubset<T, DoctorDistributionFindFirstArgs<ExtArgs>>): Prisma__DoctorDistributionClient<$Result.GetResult<Prisma.$DoctorDistributionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DoctorDistribution that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorDistributionFindFirstOrThrowArgs} args - Arguments to find a DoctorDistribution
     * @example
     * // Get one DoctorDistribution
     * const doctorDistribution = await prisma.doctorDistribution.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DoctorDistributionFindFirstOrThrowArgs>(args?: SelectSubset<T, DoctorDistributionFindFirstOrThrowArgs<ExtArgs>>): Prisma__DoctorDistributionClient<$Result.GetResult<Prisma.$DoctorDistributionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DoctorDistributions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorDistributionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DoctorDistributions
     * const doctorDistributions = await prisma.doctorDistribution.findMany()
     * 
     * // Get first 10 DoctorDistributions
     * const doctorDistributions = await prisma.doctorDistribution.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doctorDistributionWithIdOnly = await prisma.doctorDistribution.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DoctorDistributionFindManyArgs>(args?: SelectSubset<T, DoctorDistributionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorDistributionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DoctorDistribution.
     * @param {DoctorDistributionCreateArgs} args - Arguments to create a DoctorDistribution.
     * @example
     * // Create one DoctorDistribution
     * const DoctorDistribution = await prisma.doctorDistribution.create({
     *   data: {
     *     // ... data to create a DoctorDistribution
     *   }
     * })
     * 
     */
    create<T extends DoctorDistributionCreateArgs>(args: SelectSubset<T, DoctorDistributionCreateArgs<ExtArgs>>): Prisma__DoctorDistributionClient<$Result.GetResult<Prisma.$DoctorDistributionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DoctorDistributions.
     * @param {DoctorDistributionCreateManyArgs} args - Arguments to create many DoctorDistributions.
     * @example
     * // Create many DoctorDistributions
     * const doctorDistribution = await prisma.doctorDistribution.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DoctorDistributionCreateManyArgs>(args?: SelectSubset<T, DoctorDistributionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DoctorDistributions and returns the data saved in the database.
     * @param {DoctorDistributionCreateManyAndReturnArgs} args - Arguments to create many DoctorDistributions.
     * @example
     * // Create many DoctorDistributions
     * const doctorDistribution = await prisma.doctorDistribution.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DoctorDistributions and only return the `id`
     * const doctorDistributionWithIdOnly = await prisma.doctorDistribution.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DoctorDistributionCreateManyAndReturnArgs>(args?: SelectSubset<T, DoctorDistributionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorDistributionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DoctorDistribution.
     * @param {DoctorDistributionDeleteArgs} args - Arguments to delete one DoctorDistribution.
     * @example
     * // Delete one DoctorDistribution
     * const DoctorDistribution = await prisma.doctorDistribution.delete({
     *   where: {
     *     // ... filter to delete one DoctorDistribution
     *   }
     * })
     * 
     */
    delete<T extends DoctorDistributionDeleteArgs>(args: SelectSubset<T, DoctorDistributionDeleteArgs<ExtArgs>>): Prisma__DoctorDistributionClient<$Result.GetResult<Prisma.$DoctorDistributionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DoctorDistribution.
     * @param {DoctorDistributionUpdateArgs} args - Arguments to update one DoctorDistribution.
     * @example
     * // Update one DoctorDistribution
     * const doctorDistribution = await prisma.doctorDistribution.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DoctorDistributionUpdateArgs>(args: SelectSubset<T, DoctorDistributionUpdateArgs<ExtArgs>>): Prisma__DoctorDistributionClient<$Result.GetResult<Prisma.$DoctorDistributionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DoctorDistributions.
     * @param {DoctorDistributionDeleteManyArgs} args - Arguments to filter DoctorDistributions to delete.
     * @example
     * // Delete a few DoctorDistributions
     * const { count } = await prisma.doctorDistribution.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DoctorDistributionDeleteManyArgs>(args?: SelectSubset<T, DoctorDistributionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DoctorDistributions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorDistributionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DoctorDistributions
     * const doctorDistribution = await prisma.doctorDistribution.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DoctorDistributionUpdateManyArgs>(args: SelectSubset<T, DoctorDistributionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DoctorDistributions and returns the data updated in the database.
     * @param {DoctorDistributionUpdateManyAndReturnArgs} args - Arguments to update many DoctorDistributions.
     * @example
     * // Update many DoctorDistributions
     * const doctorDistribution = await prisma.doctorDistribution.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DoctorDistributions and only return the `id`
     * const doctorDistributionWithIdOnly = await prisma.doctorDistribution.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DoctorDistributionUpdateManyAndReturnArgs>(args: SelectSubset<T, DoctorDistributionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorDistributionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DoctorDistribution.
     * @param {DoctorDistributionUpsertArgs} args - Arguments to update or create a DoctorDistribution.
     * @example
     * // Update or create a DoctorDistribution
     * const doctorDistribution = await prisma.doctorDistribution.upsert({
     *   create: {
     *     // ... data to create a DoctorDistribution
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DoctorDistribution we want to update
     *   }
     * })
     */
    upsert<T extends DoctorDistributionUpsertArgs>(args: SelectSubset<T, DoctorDistributionUpsertArgs<ExtArgs>>): Prisma__DoctorDistributionClient<$Result.GetResult<Prisma.$DoctorDistributionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DoctorDistributions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorDistributionCountArgs} args - Arguments to filter DoctorDistributions to count.
     * @example
     * // Count the number of DoctorDistributions
     * const count = await prisma.doctorDistribution.count({
     *   where: {
     *     // ... the filter for the DoctorDistributions we want to count
     *   }
     * })
    **/
    count<T extends DoctorDistributionCountArgs>(
      args?: Subset<T, DoctorDistributionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoctorDistributionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DoctorDistribution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorDistributionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoctorDistributionAggregateArgs>(args: Subset<T, DoctorDistributionAggregateArgs>): Prisma.PrismaPromise<GetDoctorDistributionAggregateType<T>>

    /**
     * Group by DoctorDistribution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorDistributionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DoctorDistributionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DoctorDistributionGroupByArgs['orderBy'] }
        : { orderBy?: DoctorDistributionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DoctorDistributionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctorDistributionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DoctorDistribution model
   */
  readonly fields: DoctorDistributionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DoctorDistribution.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DoctorDistributionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    doctorInteraction<T extends DoctorInteractionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DoctorInteractionDefaultArgs<ExtArgs>>): Prisma__DoctorInteractionClient<$Result.GetResult<Prisma.$DoctorInteractionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    drugItems<T extends DoctorDistribution$drugItemsArgs<ExtArgs> = {}>(args?: Subset<T, DoctorDistribution$drugItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorDistributionDrugItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    giftItems<T extends DoctorDistribution$giftItemsArgs<ExtArgs> = {}>(args?: Subset<T, DoctorDistribution$giftItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorDistributionGiftItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DoctorDistribution model
   */
  interface DoctorDistributionFieldRefs {
    readonly id: FieldRef<"DoctorDistribution", 'String'>
    readonly doctorInteractionId: FieldRef<"DoctorDistribution", 'String'>
    readonly employeeId: FieldRef<"DoctorDistribution", 'String'>
    readonly distributedAt: FieldRef<"DoctorDistribution", 'DateTime'>
    readonly createdAt: FieldRef<"DoctorDistribution", 'DateTime'>
    readonly updatedAt: FieldRef<"DoctorDistribution", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DoctorDistribution findUnique
   */
  export type DoctorDistributionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistribution
     */
    select?: DoctorDistributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistribution
     */
    omit?: DoctorDistributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionInclude<ExtArgs> | null
    /**
     * Filter, which DoctorDistribution to fetch.
     */
    where: DoctorDistributionWhereUniqueInput
  }

  /**
   * DoctorDistribution findUniqueOrThrow
   */
  export type DoctorDistributionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistribution
     */
    select?: DoctorDistributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistribution
     */
    omit?: DoctorDistributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionInclude<ExtArgs> | null
    /**
     * Filter, which DoctorDistribution to fetch.
     */
    where: DoctorDistributionWhereUniqueInput
  }

  /**
   * DoctorDistribution findFirst
   */
  export type DoctorDistributionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistribution
     */
    select?: DoctorDistributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistribution
     */
    omit?: DoctorDistributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionInclude<ExtArgs> | null
    /**
     * Filter, which DoctorDistribution to fetch.
     */
    where?: DoctorDistributionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorDistributions to fetch.
     */
    orderBy?: DoctorDistributionOrderByWithRelationInput | DoctorDistributionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DoctorDistributions.
     */
    cursor?: DoctorDistributionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorDistributions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorDistributions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DoctorDistributions.
     */
    distinct?: DoctorDistributionScalarFieldEnum | DoctorDistributionScalarFieldEnum[]
  }

  /**
   * DoctorDistribution findFirstOrThrow
   */
  export type DoctorDistributionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistribution
     */
    select?: DoctorDistributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistribution
     */
    omit?: DoctorDistributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionInclude<ExtArgs> | null
    /**
     * Filter, which DoctorDistribution to fetch.
     */
    where?: DoctorDistributionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorDistributions to fetch.
     */
    orderBy?: DoctorDistributionOrderByWithRelationInput | DoctorDistributionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DoctorDistributions.
     */
    cursor?: DoctorDistributionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorDistributions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorDistributions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DoctorDistributions.
     */
    distinct?: DoctorDistributionScalarFieldEnum | DoctorDistributionScalarFieldEnum[]
  }

  /**
   * DoctorDistribution findMany
   */
  export type DoctorDistributionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistribution
     */
    select?: DoctorDistributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistribution
     */
    omit?: DoctorDistributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionInclude<ExtArgs> | null
    /**
     * Filter, which DoctorDistributions to fetch.
     */
    where?: DoctorDistributionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorDistributions to fetch.
     */
    orderBy?: DoctorDistributionOrderByWithRelationInput | DoctorDistributionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DoctorDistributions.
     */
    cursor?: DoctorDistributionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorDistributions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorDistributions.
     */
    skip?: number
    distinct?: DoctorDistributionScalarFieldEnum | DoctorDistributionScalarFieldEnum[]
  }

  /**
   * DoctorDistribution create
   */
  export type DoctorDistributionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistribution
     */
    select?: DoctorDistributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistribution
     */
    omit?: DoctorDistributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionInclude<ExtArgs> | null
    /**
     * The data needed to create a DoctorDistribution.
     */
    data: XOR<DoctorDistributionCreateInput, DoctorDistributionUncheckedCreateInput>
  }

  /**
   * DoctorDistribution createMany
   */
  export type DoctorDistributionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DoctorDistributions.
     */
    data: DoctorDistributionCreateManyInput | DoctorDistributionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DoctorDistribution createManyAndReturn
   */
  export type DoctorDistributionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistribution
     */
    select?: DoctorDistributionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistribution
     */
    omit?: DoctorDistributionOmit<ExtArgs> | null
    /**
     * The data used to create many DoctorDistributions.
     */
    data: DoctorDistributionCreateManyInput | DoctorDistributionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DoctorDistribution update
   */
  export type DoctorDistributionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistribution
     */
    select?: DoctorDistributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistribution
     */
    omit?: DoctorDistributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionInclude<ExtArgs> | null
    /**
     * The data needed to update a DoctorDistribution.
     */
    data: XOR<DoctorDistributionUpdateInput, DoctorDistributionUncheckedUpdateInput>
    /**
     * Choose, which DoctorDistribution to update.
     */
    where: DoctorDistributionWhereUniqueInput
  }

  /**
   * DoctorDistribution updateMany
   */
  export type DoctorDistributionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DoctorDistributions.
     */
    data: XOR<DoctorDistributionUpdateManyMutationInput, DoctorDistributionUncheckedUpdateManyInput>
    /**
     * Filter which DoctorDistributions to update
     */
    where?: DoctorDistributionWhereInput
    /**
     * Limit how many DoctorDistributions to update.
     */
    limit?: number
  }

  /**
   * DoctorDistribution updateManyAndReturn
   */
  export type DoctorDistributionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistribution
     */
    select?: DoctorDistributionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistribution
     */
    omit?: DoctorDistributionOmit<ExtArgs> | null
    /**
     * The data used to update DoctorDistributions.
     */
    data: XOR<DoctorDistributionUpdateManyMutationInput, DoctorDistributionUncheckedUpdateManyInput>
    /**
     * Filter which DoctorDistributions to update
     */
    where?: DoctorDistributionWhereInput
    /**
     * Limit how many DoctorDistributions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DoctorDistribution upsert
   */
  export type DoctorDistributionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistribution
     */
    select?: DoctorDistributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistribution
     */
    omit?: DoctorDistributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionInclude<ExtArgs> | null
    /**
     * The filter to search for the DoctorDistribution to update in case it exists.
     */
    where: DoctorDistributionWhereUniqueInput
    /**
     * In case the DoctorDistribution found by the `where` argument doesn't exist, create a new DoctorDistribution with this data.
     */
    create: XOR<DoctorDistributionCreateInput, DoctorDistributionUncheckedCreateInput>
    /**
     * In case the DoctorDistribution was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DoctorDistributionUpdateInput, DoctorDistributionUncheckedUpdateInput>
  }

  /**
   * DoctorDistribution delete
   */
  export type DoctorDistributionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistribution
     */
    select?: DoctorDistributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistribution
     */
    omit?: DoctorDistributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionInclude<ExtArgs> | null
    /**
     * Filter which DoctorDistribution to delete.
     */
    where: DoctorDistributionWhereUniqueInput
  }

  /**
   * DoctorDistribution deleteMany
   */
  export type DoctorDistributionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DoctorDistributions to delete
     */
    where?: DoctorDistributionWhereInput
    /**
     * Limit how many DoctorDistributions to delete.
     */
    limit?: number
  }

  /**
   * DoctorDistribution.drugItems
   */
  export type DoctorDistribution$drugItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistributionDrugItem
     */
    select?: DoctorDistributionDrugItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistributionDrugItem
     */
    omit?: DoctorDistributionDrugItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionDrugItemInclude<ExtArgs> | null
    where?: DoctorDistributionDrugItemWhereInput
    orderBy?: DoctorDistributionDrugItemOrderByWithRelationInput | DoctorDistributionDrugItemOrderByWithRelationInput[]
    cursor?: DoctorDistributionDrugItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorDistributionDrugItemScalarFieldEnum | DoctorDistributionDrugItemScalarFieldEnum[]
  }

  /**
   * DoctorDistribution.giftItems
   */
  export type DoctorDistribution$giftItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistributionGiftItem
     */
    select?: DoctorDistributionGiftItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistributionGiftItem
     */
    omit?: DoctorDistributionGiftItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionGiftItemInclude<ExtArgs> | null
    where?: DoctorDistributionGiftItemWhereInput
    orderBy?: DoctorDistributionGiftItemOrderByWithRelationInput | DoctorDistributionGiftItemOrderByWithRelationInput[]
    cursor?: DoctorDistributionGiftItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorDistributionGiftItemScalarFieldEnum | DoctorDistributionGiftItemScalarFieldEnum[]
  }

  /**
   * DoctorDistribution without action
   */
  export type DoctorDistributionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistribution
     */
    select?: DoctorDistributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistribution
     */
    omit?: DoctorDistributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionInclude<ExtArgs> | null
  }


  /**
   * Model DoctorDistributionDrugItem
   */

  export type AggregateDoctorDistributionDrugItem = {
    _count: DoctorDistributionDrugItemCountAggregateOutputType | null
    _avg: DoctorDistributionDrugItemAvgAggregateOutputType | null
    _sum: DoctorDistributionDrugItemSumAggregateOutputType | null
    _min: DoctorDistributionDrugItemMinAggregateOutputType | null
    _max: DoctorDistributionDrugItemMaxAggregateOutputType | null
  }

  export type DoctorDistributionDrugItemAvgAggregateOutputType = {
    quantity: number | null
    unitCost: Decimal | null
    totalCost: Decimal | null
  }

  export type DoctorDistributionDrugItemSumAggregateOutputType = {
    quantity: number | null
    unitCost: Decimal | null
    totalCost: Decimal | null
  }

  export type DoctorDistributionDrugItemMinAggregateOutputType = {
    id: string | null
    doctorDistributionId: string | null
    drugId: string | null
    fromInventoryId: string | null
    quantity: number | null
    unitCost: Decimal | null
    totalCost: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DoctorDistributionDrugItemMaxAggregateOutputType = {
    id: string | null
    doctorDistributionId: string | null
    drugId: string | null
    fromInventoryId: string | null
    quantity: number | null
    unitCost: Decimal | null
    totalCost: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DoctorDistributionDrugItemCountAggregateOutputType = {
    id: number
    doctorDistributionId: number
    drugId: number
    fromInventoryId: number
    quantity: number
    unitCost: number
    totalCost: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DoctorDistributionDrugItemAvgAggregateInputType = {
    quantity?: true
    unitCost?: true
    totalCost?: true
  }

  export type DoctorDistributionDrugItemSumAggregateInputType = {
    quantity?: true
    unitCost?: true
    totalCost?: true
  }

  export type DoctorDistributionDrugItemMinAggregateInputType = {
    id?: true
    doctorDistributionId?: true
    drugId?: true
    fromInventoryId?: true
    quantity?: true
    unitCost?: true
    totalCost?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DoctorDistributionDrugItemMaxAggregateInputType = {
    id?: true
    doctorDistributionId?: true
    drugId?: true
    fromInventoryId?: true
    quantity?: true
    unitCost?: true
    totalCost?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DoctorDistributionDrugItemCountAggregateInputType = {
    id?: true
    doctorDistributionId?: true
    drugId?: true
    fromInventoryId?: true
    quantity?: true
    unitCost?: true
    totalCost?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DoctorDistributionDrugItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DoctorDistributionDrugItem to aggregate.
     */
    where?: DoctorDistributionDrugItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorDistributionDrugItems to fetch.
     */
    orderBy?: DoctorDistributionDrugItemOrderByWithRelationInput | DoctorDistributionDrugItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DoctorDistributionDrugItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorDistributionDrugItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorDistributionDrugItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DoctorDistributionDrugItems
    **/
    _count?: true | DoctorDistributionDrugItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DoctorDistributionDrugItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DoctorDistributionDrugItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoctorDistributionDrugItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoctorDistributionDrugItemMaxAggregateInputType
  }

  export type GetDoctorDistributionDrugItemAggregateType<T extends DoctorDistributionDrugItemAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctorDistributionDrugItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctorDistributionDrugItem[P]>
      : GetScalarType<T[P], AggregateDoctorDistributionDrugItem[P]>
  }




  export type DoctorDistributionDrugItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorDistributionDrugItemWhereInput
    orderBy?: DoctorDistributionDrugItemOrderByWithAggregationInput | DoctorDistributionDrugItemOrderByWithAggregationInput[]
    by: DoctorDistributionDrugItemScalarFieldEnum[] | DoctorDistributionDrugItemScalarFieldEnum
    having?: DoctorDistributionDrugItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoctorDistributionDrugItemCountAggregateInputType | true
    _avg?: DoctorDistributionDrugItemAvgAggregateInputType
    _sum?: DoctorDistributionDrugItemSumAggregateInputType
    _min?: DoctorDistributionDrugItemMinAggregateInputType
    _max?: DoctorDistributionDrugItemMaxAggregateInputType
  }

  export type DoctorDistributionDrugItemGroupByOutputType = {
    id: string
    doctorDistributionId: string
    drugId: string
    fromInventoryId: string
    quantity: number
    unitCost: Decimal
    totalCost: Decimal
    createdAt: Date
    updatedAt: Date
    _count: DoctorDistributionDrugItemCountAggregateOutputType | null
    _avg: DoctorDistributionDrugItemAvgAggregateOutputType | null
    _sum: DoctorDistributionDrugItemSumAggregateOutputType | null
    _min: DoctorDistributionDrugItemMinAggregateOutputType | null
    _max: DoctorDistributionDrugItemMaxAggregateOutputType | null
  }

  type GetDoctorDistributionDrugItemGroupByPayload<T extends DoctorDistributionDrugItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DoctorDistributionDrugItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoctorDistributionDrugItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoctorDistributionDrugItemGroupByOutputType[P]>
            : GetScalarType<T[P], DoctorDistributionDrugItemGroupByOutputType[P]>
        }
      >
    >


  export type DoctorDistributionDrugItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorDistributionId?: boolean
    drugId?: boolean
    fromInventoryId?: boolean
    quantity?: boolean
    unitCost?: boolean
    totalCost?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctorDistribution?: boolean | DoctorDistributionDefaultArgs<ExtArgs>
    drug?: boolean | DrugDefaultArgs<ExtArgs>
    fromInventory?: boolean | UserDrugInventoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorDistributionDrugItem"]>

  export type DoctorDistributionDrugItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorDistributionId?: boolean
    drugId?: boolean
    fromInventoryId?: boolean
    quantity?: boolean
    unitCost?: boolean
    totalCost?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctorDistribution?: boolean | DoctorDistributionDefaultArgs<ExtArgs>
    drug?: boolean | DrugDefaultArgs<ExtArgs>
    fromInventory?: boolean | UserDrugInventoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorDistributionDrugItem"]>

  export type DoctorDistributionDrugItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorDistributionId?: boolean
    drugId?: boolean
    fromInventoryId?: boolean
    quantity?: boolean
    unitCost?: boolean
    totalCost?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctorDistribution?: boolean | DoctorDistributionDefaultArgs<ExtArgs>
    drug?: boolean | DrugDefaultArgs<ExtArgs>
    fromInventory?: boolean | UserDrugInventoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorDistributionDrugItem"]>

  export type DoctorDistributionDrugItemSelectScalar = {
    id?: boolean
    doctorDistributionId?: boolean
    drugId?: boolean
    fromInventoryId?: boolean
    quantity?: boolean
    unitCost?: boolean
    totalCost?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DoctorDistributionDrugItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "doctorDistributionId" | "drugId" | "fromInventoryId" | "quantity" | "unitCost" | "totalCost" | "createdAt" | "updatedAt", ExtArgs["result"]["doctorDistributionDrugItem"]>
  export type DoctorDistributionDrugItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctorDistribution?: boolean | DoctorDistributionDefaultArgs<ExtArgs>
    drug?: boolean | DrugDefaultArgs<ExtArgs>
    fromInventory?: boolean | UserDrugInventoryDefaultArgs<ExtArgs>
  }
  export type DoctorDistributionDrugItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctorDistribution?: boolean | DoctorDistributionDefaultArgs<ExtArgs>
    drug?: boolean | DrugDefaultArgs<ExtArgs>
    fromInventory?: boolean | UserDrugInventoryDefaultArgs<ExtArgs>
  }
  export type DoctorDistributionDrugItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctorDistribution?: boolean | DoctorDistributionDefaultArgs<ExtArgs>
    drug?: boolean | DrugDefaultArgs<ExtArgs>
    fromInventory?: boolean | UserDrugInventoryDefaultArgs<ExtArgs>
  }

  export type $DoctorDistributionDrugItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DoctorDistributionDrugItem"
    objects: {
      doctorDistribution: Prisma.$DoctorDistributionPayload<ExtArgs>
      drug: Prisma.$DrugPayload<ExtArgs>
      fromInventory: Prisma.$UserDrugInventoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      doctorDistributionId: string
      drugId: string
      fromInventoryId: string
      quantity: number
      unitCost: Prisma.Decimal
      totalCost: Prisma.Decimal
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["doctorDistributionDrugItem"]>
    composites: {}
  }

  type DoctorDistributionDrugItemGetPayload<S extends boolean | null | undefined | DoctorDistributionDrugItemDefaultArgs> = $Result.GetResult<Prisma.$DoctorDistributionDrugItemPayload, S>

  type DoctorDistributionDrugItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DoctorDistributionDrugItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DoctorDistributionDrugItemCountAggregateInputType | true
    }

  export interface DoctorDistributionDrugItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DoctorDistributionDrugItem'], meta: { name: 'DoctorDistributionDrugItem' } }
    /**
     * Find zero or one DoctorDistributionDrugItem that matches the filter.
     * @param {DoctorDistributionDrugItemFindUniqueArgs} args - Arguments to find a DoctorDistributionDrugItem
     * @example
     * // Get one DoctorDistributionDrugItem
     * const doctorDistributionDrugItem = await prisma.doctorDistributionDrugItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DoctorDistributionDrugItemFindUniqueArgs>(args: SelectSubset<T, DoctorDistributionDrugItemFindUniqueArgs<ExtArgs>>): Prisma__DoctorDistributionDrugItemClient<$Result.GetResult<Prisma.$DoctorDistributionDrugItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DoctorDistributionDrugItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DoctorDistributionDrugItemFindUniqueOrThrowArgs} args - Arguments to find a DoctorDistributionDrugItem
     * @example
     * // Get one DoctorDistributionDrugItem
     * const doctorDistributionDrugItem = await prisma.doctorDistributionDrugItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DoctorDistributionDrugItemFindUniqueOrThrowArgs>(args: SelectSubset<T, DoctorDistributionDrugItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DoctorDistributionDrugItemClient<$Result.GetResult<Prisma.$DoctorDistributionDrugItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DoctorDistributionDrugItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorDistributionDrugItemFindFirstArgs} args - Arguments to find a DoctorDistributionDrugItem
     * @example
     * // Get one DoctorDistributionDrugItem
     * const doctorDistributionDrugItem = await prisma.doctorDistributionDrugItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DoctorDistributionDrugItemFindFirstArgs>(args?: SelectSubset<T, DoctorDistributionDrugItemFindFirstArgs<ExtArgs>>): Prisma__DoctorDistributionDrugItemClient<$Result.GetResult<Prisma.$DoctorDistributionDrugItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DoctorDistributionDrugItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorDistributionDrugItemFindFirstOrThrowArgs} args - Arguments to find a DoctorDistributionDrugItem
     * @example
     * // Get one DoctorDistributionDrugItem
     * const doctorDistributionDrugItem = await prisma.doctorDistributionDrugItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DoctorDistributionDrugItemFindFirstOrThrowArgs>(args?: SelectSubset<T, DoctorDistributionDrugItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__DoctorDistributionDrugItemClient<$Result.GetResult<Prisma.$DoctorDistributionDrugItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DoctorDistributionDrugItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorDistributionDrugItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DoctorDistributionDrugItems
     * const doctorDistributionDrugItems = await prisma.doctorDistributionDrugItem.findMany()
     * 
     * // Get first 10 DoctorDistributionDrugItems
     * const doctorDistributionDrugItems = await prisma.doctorDistributionDrugItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doctorDistributionDrugItemWithIdOnly = await prisma.doctorDistributionDrugItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DoctorDistributionDrugItemFindManyArgs>(args?: SelectSubset<T, DoctorDistributionDrugItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorDistributionDrugItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DoctorDistributionDrugItem.
     * @param {DoctorDistributionDrugItemCreateArgs} args - Arguments to create a DoctorDistributionDrugItem.
     * @example
     * // Create one DoctorDistributionDrugItem
     * const DoctorDistributionDrugItem = await prisma.doctorDistributionDrugItem.create({
     *   data: {
     *     // ... data to create a DoctorDistributionDrugItem
     *   }
     * })
     * 
     */
    create<T extends DoctorDistributionDrugItemCreateArgs>(args: SelectSubset<T, DoctorDistributionDrugItemCreateArgs<ExtArgs>>): Prisma__DoctorDistributionDrugItemClient<$Result.GetResult<Prisma.$DoctorDistributionDrugItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DoctorDistributionDrugItems.
     * @param {DoctorDistributionDrugItemCreateManyArgs} args - Arguments to create many DoctorDistributionDrugItems.
     * @example
     * // Create many DoctorDistributionDrugItems
     * const doctorDistributionDrugItem = await prisma.doctorDistributionDrugItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DoctorDistributionDrugItemCreateManyArgs>(args?: SelectSubset<T, DoctorDistributionDrugItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DoctorDistributionDrugItems and returns the data saved in the database.
     * @param {DoctorDistributionDrugItemCreateManyAndReturnArgs} args - Arguments to create many DoctorDistributionDrugItems.
     * @example
     * // Create many DoctorDistributionDrugItems
     * const doctorDistributionDrugItem = await prisma.doctorDistributionDrugItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DoctorDistributionDrugItems and only return the `id`
     * const doctorDistributionDrugItemWithIdOnly = await prisma.doctorDistributionDrugItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DoctorDistributionDrugItemCreateManyAndReturnArgs>(args?: SelectSubset<T, DoctorDistributionDrugItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorDistributionDrugItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DoctorDistributionDrugItem.
     * @param {DoctorDistributionDrugItemDeleteArgs} args - Arguments to delete one DoctorDistributionDrugItem.
     * @example
     * // Delete one DoctorDistributionDrugItem
     * const DoctorDistributionDrugItem = await prisma.doctorDistributionDrugItem.delete({
     *   where: {
     *     // ... filter to delete one DoctorDistributionDrugItem
     *   }
     * })
     * 
     */
    delete<T extends DoctorDistributionDrugItemDeleteArgs>(args: SelectSubset<T, DoctorDistributionDrugItemDeleteArgs<ExtArgs>>): Prisma__DoctorDistributionDrugItemClient<$Result.GetResult<Prisma.$DoctorDistributionDrugItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DoctorDistributionDrugItem.
     * @param {DoctorDistributionDrugItemUpdateArgs} args - Arguments to update one DoctorDistributionDrugItem.
     * @example
     * // Update one DoctorDistributionDrugItem
     * const doctorDistributionDrugItem = await prisma.doctorDistributionDrugItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DoctorDistributionDrugItemUpdateArgs>(args: SelectSubset<T, DoctorDistributionDrugItemUpdateArgs<ExtArgs>>): Prisma__DoctorDistributionDrugItemClient<$Result.GetResult<Prisma.$DoctorDistributionDrugItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DoctorDistributionDrugItems.
     * @param {DoctorDistributionDrugItemDeleteManyArgs} args - Arguments to filter DoctorDistributionDrugItems to delete.
     * @example
     * // Delete a few DoctorDistributionDrugItems
     * const { count } = await prisma.doctorDistributionDrugItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DoctorDistributionDrugItemDeleteManyArgs>(args?: SelectSubset<T, DoctorDistributionDrugItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DoctorDistributionDrugItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorDistributionDrugItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DoctorDistributionDrugItems
     * const doctorDistributionDrugItem = await prisma.doctorDistributionDrugItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DoctorDistributionDrugItemUpdateManyArgs>(args: SelectSubset<T, DoctorDistributionDrugItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DoctorDistributionDrugItems and returns the data updated in the database.
     * @param {DoctorDistributionDrugItemUpdateManyAndReturnArgs} args - Arguments to update many DoctorDistributionDrugItems.
     * @example
     * // Update many DoctorDistributionDrugItems
     * const doctorDistributionDrugItem = await prisma.doctorDistributionDrugItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DoctorDistributionDrugItems and only return the `id`
     * const doctorDistributionDrugItemWithIdOnly = await prisma.doctorDistributionDrugItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DoctorDistributionDrugItemUpdateManyAndReturnArgs>(args: SelectSubset<T, DoctorDistributionDrugItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorDistributionDrugItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DoctorDistributionDrugItem.
     * @param {DoctorDistributionDrugItemUpsertArgs} args - Arguments to update or create a DoctorDistributionDrugItem.
     * @example
     * // Update or create a DoctorDistributionDrugItem
     * const doctorDistributionDrugItem = await prisma.doctorDistributionDrugItem.upsert({
     *   create: {
     *     // ... data to create a DoctorDistributionDrugItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DoctorDistributionDrugItem we want to update
     *   }
     * })
     */
    upsert<T extends DoctorDistributionDrugItemUpsertArgs>(args: SelectSubset<T, DoctorDistributionDrugItemUpsertArgs<ExtArgs>>): Prisma__DoctorDistributionDrugItemClient<$Result.GetResult<Prisma.$DoctorDistributionDrugItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DoctorDistributionDrugItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorDistributionDrugItemCountArgs} args - Arguments to filter DoctorDistributionDrugItems to count.
     * @example
     * // Count the number of DoctorDistributionDrugItems
     * const count = await prisma.doctorDistributionDrugItem.count({
     *   where: {
     *     // ... the filter for the DoctorDistributionDrugItems we want to count
     *   }
     * })
    **/
    count<T extends DoctorDistributionDrugItemCountArgs>(
      args?: Subset<T, DoctorDistributionDrugItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoctorDistributionDrugItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DoctorDistributionDrugItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorDistributionDrugItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoctorDistributionDrugItemAggregateArgs>(args: Subset<T, DoctorDistributionDrugItemAggregateArgs>): Prisma.PrismaPromise<GetDoctorDistributionDrugItemAggregateType<T>>

    /**
     * Group by DoctorDistributionDrugItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorDistributionDrugItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DoctorDistributionDrugItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DoctorDistributionDrugItemGroupByArgs['orderBy'] }
        : { orderBy?: DoctorDistributionDrugItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DoctorDistributionDrugItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctorDistributionDrugItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DoctorDistributionDrugItem model
   */
  readonly fields: DoctorDistributionDrugItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DoctorDistributionDrugItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DoctorDistributionDrugItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    doctorDistribution<T extends DoctorDistributionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DoctorDistributionDefaultArgs<ExtArgs>>): Prisma__DoctorDistributionClient<$Result.GetResult<Prisma.$DoctorDistributionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    drug<T extends DrugDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DrugDefaultArgs<ExtArgs>>): Prisma__DrugClient<$Result.GetResult<Prisma.$DrugPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    fromInventory<T extends UserDrugInventoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDrugInventoryDefaultArgs<ExtArgs>>): Prisma__UserDrugInventoryClient<$Result.GetResult<Prisma.$UserDrugInventoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DoctorDistributionDrugItem model
   */
  interface DoctorDistributionDrugItemFieldRefs {
    readonly id: FieldRef<"DoctorDistributionDrugItem", 'String'>
    readonly doctorDistributionId: FieldRef<"DoctorDistributionDrugItem", 'String'>
    readonly drugId: FieldRef<"DoctorDistributionDrugItem", 'String'>
    readonly fromInventoryId: FieldRef<"DoctorDistributionDrugItem", 'String'>
    readonly quantity: FieldRef<"DoctorDistributionDrugItem", 'Int'>
    readonly unitCost: FieldRef<"DoctorDistributionDrugItem", 'Decimal'>
    readonly totalCost: FieldRef<"DoctorDistributionDrugItem", 'Decimal'>
    readonly createdAt: FieldRef<"DoctorDistributionDrugItem", 'DateTime'>
    readonly updatedAt: FieldRef<"DoctorDistributionDrugItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DoctorDistributionDrugItem findUnique
   */
  export type DoctorDistributionDrugItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistributionDrugItem
     */
    select?: DoctorDistributionDrugItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistributionDrugItem
     */
    omit?: DoctorDistributionDrugItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionDrugItemInclude<ExtArgs> | null
    /**
     * Filter, which DoctorDistributionDrugItem to fetch.
     */
    where: DoctorDistributionDrugItemWhereUniqueInput
  }

  /**
   * DoctorDistributionDrugItem findUniqueOrThrow
   */
  export type DoctorDistributionDrugItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistributionDrugItem
     */
    select?: DoctorDistributionDrugItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistributionDrugItem
     */
    omit?: DoctorDistributionDrugItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionDrugItemInclude<ExtArgs> | null
    /**
     * Filter, which DoctorDistributionDrugItem to fetch.
     */
    where: DoctorDistributionDrugItemWhereUniqueInput
  }

  /**
   * DoctorDistributionDrugItem findFirst
   */
  export type DoctorDistributionDrugItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistributionDrugItem
     */
    select?: DoctorDistributionDrugItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistributionDrugItem
     */
    omit?: DoctorDistributionDrugItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionDrugItemInclude<ExtArgs> | null
    /**
     * Filter, which DoctorDistributionDrugItem to fetch.
     */
    where?: DoctorDistributionDrugItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorDistributionDrugItems to fetch.
     */
    orderBy?: DoctorDistributionDrugItemOrderByWithRelationInput | DoctorDistributionDrugItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DoctorDistributionDrugItems.
     */
    cursor?: DoctorDistributionDrugItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorDistributionDrugItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorDistributionDrugItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DoctorDistributionDrugItems.
     */
    distinct?: DoctorDistributionDrugItemScalarFieldEnum | DoctorDistributionDrugItemScalarFieldEnum[]
  }

  /**
   * DoctorDistributionDrugItem findFirstOrThrow
   */
  export type DoctorDistributionDrugItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistributionDrugItem
     */
    select?: DoctorDistributionDrugItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistributionDrugItem
     */
    omit?: DoctorDistributionDrugItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionDrugItemInclude<ExtArgs> | null
    /**
     * Filter, which DoctorDistributionDrugItem to fetch.
     */
    where?: DoctorDistributionDrugItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorDistributionDrugItems to fetch.
     */
    orderBy?: DoctorDistributionDrugItemOrderByWithRelationInput | DoctorDistributionDrugItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DoctorDistributionDrugItems.
     */
    cursor?: DoctorDistributionDrugItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorDistributionDrugItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorDistributionDrugItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DoctorDistributionDrugItems.
     */
    distinct?: DoctorDistributionDrugItemScalarFieldEnum | DoctorDistributionDrugItemScalarFieldEnum[]
  }

  /**
   * DoctorDistributionDrugItem findMany
   */
  export type DoctorDistributionDrugItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistributionDrugItem
     */
    select?: DoctorDistributionDrugItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistributionDrugItem
     */
    omit?: DoctorDistributionDrugItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionDrugItemInclude<ExtArgs> | null
    /**
     * Filter, which DoctorDistributionDrugItems to fetch.
     */
    where?: DoctorDistributionDrugItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorDistributionDrugItems to fetch.
     */
    orderBy?: DoctorDistributionDrugItemOrderByWithRelationInput | DoctorDistributionDrugItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DoctorDistributionDrugItems.
     */
    cursor?: DoctorDistributionDrugItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorDistributionDrugItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorDistributionDrugItems.
     */
    skip?: number
    distinct?: DoctorDistributionDrugItemScalarFieldEnum | DoctorDistributionDrugItemScalarFieldEnum[]
  }

  /**
   * DoctorDistributionDrugItem create
   */
  export type DoctorDistributionDrugItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistributionDrugItem
     */
    select?: DoctorDistributionDrugItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistributionDrugItem
     */
    omit?: DoctorDistributionDrugItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionDrugItemInclude<ExtArgs> | null
    /**
     * The data needed to create a DoctorDistributionDrugItem.
     */
    data: XOR<DoctorDistributionDrugItemCreateInput, DoctorDistributionDrugItemUncheckedCreateInput>
  }

  /**
   * DoctorDistributionDrugItem createMany
   */
  export type DoctorDistributionDrugItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DoctorDistributionDrugItems.
     */
    data: DoctorDistributionDrugItemCreateManyInput | DoctorDistributionDrugItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DoctorDistributionDrugItem createManyAndReturn
   */
  export type DoctorDistributionDrugItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistributionDrugItem
     */
    select?: DoctorDistributionDrugItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistributionDrugItem
     */
    omit?: DoctorDistributionDrugItemOmit<ExtArgs> | null
    /**
     * The data used to create many DoctorDistributionDrugItems.
     */
    data: DoctorDistributionDrugItemCreateManyInput | DoctorDistributionDrugItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionDrugItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DoctorDistributionDrugItem update
   */
  export type DoctorDistributionDrugItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistributionDrugItem
     */
    select?: DoctorDistributionDrugItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistributionDrugItem
     */
    omit?: DoctorDistributionDrugItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionDrugItemInclude<ExtArgs> | null
    /**
     * The data needed to update a DoctorDistributionDrugItem.
     */
    data: XOR<DoctorDistributionDrugItemUpdateInput, DoctorDistributionDrugItemUncheckedUpdateInput>
    /**
     * Choose, which DoctorDistributionDrugItem to update.
     */
    where: DoctorDistributionDrugItemWhereUniqueInput
  }

  /**
   * DoctorDistributionDrugItem updateMany
   */
  export type DoctorDistributionDrugItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DoctorDistributionDrugItems.
     */
    data: XOR<DoctorDistributionDrugItemUpdateManyMutationInput, DoctorDistributionDrugItemUncheckedUpdateManyInput>
    /**
     * Filter which DoctorDistributionDrugItems to update
     */
    where?: DoctorDistributionDrugItemWhereInput
    /**
     * Limit how many DoctorDistributionDrugItems to update.
     */
    limit?: number
  }

  /**
   * DoctorDistributionDrugItem updateManyAndReturn
   */
  export type DoctorDistributionDrugItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistributionDrugItem
     */
    select?: DoctorDistributionDrugItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistributionDrugItem
     */
    omit?: DoctorDistributionDrugItemOmit<ExtArgs> | null
    /**
     * The data used to update DoctorDistributionDrugItems.
     */
    data: XOR<DoctorDistributionDrugItemUpdateManyMutationInput, DoctorDistributionDrugItemUncheckedUpdateManyInput>
    /**
     * Filter which DoctorDistributionDrugItems to update
     */
    where?: DoctorDistributionDrugItemWhereInput
    /**
     * Limit how many DoctorDistributionDrugItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionDrugItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DoctorDistributionDrugItem upsert
   */
  export type DoctorDistributionDrugItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistributionDrugItem
     */
    select?: DoctorDistributionDrugItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistributionDrugItem
     */
    omit?: DoctorDistributionDrugItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionDrugItemInclude<ExtArgs> | null
    /**
     * The filter to search for the DoctorDistributionDrugItem to update in case it exists.
     */
    where: DoctorDistributionDrugItemWhereUniqueInput
    /**
     * In case the DoctorDistributionDrugItem found by the `where` argument doesn't exist, create a new DoctorDistributionDrugItem with this data.
     */
    create: XOR<DoctorDistributionDrugItemCreateInput, DoctorDistributionDrugItemUncheckedCreateInput>
    /**
     * In case the DoctorDistributionDrugItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DoctorDistributionDrugItemUpdateInput, DoctorDistributionDrugItemUncheckedUpdateInput>
  }

  /**
   * DoctorDistributionDrugItem delete
   */
  export type DoctorDistributionDrugItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistributionDrugItem
     */
    select?: DoctorDistributionDrugItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistributionDrugItem
     */
    omit?: DoctorDistributionDrugItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionDrugItemInclude<ExtArgs> | null
    /**
     * Filter which DoctorDistributionDrugItem to delete.
     */
    where: DoctorDistributionDrugItemWhereUniqueInput
  }

  /**
   * DoctorDistributionDrugItem deleteMany
   */
  export type DoctorDistributionDrugItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DoctorDistributionDrugItems to delete
     */
    where?: DoctorDistributionDrugItemWhereInput
    /**
     * Limit how many DoctorDistributionDrugItems to delete.
     */
    limit?: number
  }

  /**
   * DoctorDistributionDrugItem without action
   */
  export type DoctorDistributionDrugItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistributionDrugItem
     */
    select?: DoctorDistributionDrugItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistributionDrugItem
     */
    omit?: DoctorDistributionDrugItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionDrugItemInclude<ExtArgs> | null
  }


  /**
   * Model DoctorDistributionGiftItem
   */

  export type AggregateDoctorDistributionGiftItem = {
    _count: DoctorDistributionGiftItemCountAggregateOutputType | null
    _avg: DoctorDistributionGiftItemAvgAggregateOutputType | null
    _sum: DoctorDistributionGiftItemSumAggregateOutputType | null
    _min: DoctorDistributionGiftItemMinAggregateOutputType | null
    _max: DoctorDistributionGiftItemMaxAggregateOutputType | null
  }

  export type DoctorDistributionGiftItemAvgAggregateOutputType = {
    quantity: number | null
    unitCost: Decimal | null
    totalCost: Decimal | null
  }

  export type DoctorDistributionGiftItemSumAggregateOutputType = {
    quantity: number | null
    unitCost: Decimal | null
    totalCost: Decimal | null
  }

  export type DoctorDistributionGiftItemMinAggregateOutputType = {
    id: string | null
    doctorDistributionId: string | null
    giftId: string | null
    fromInventoryId: string | null
    quantity: number | null
    unitCost: Decimal | null
    totalCost: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DoctorDistributionGiftItemMaxAggregateOutputType = {
    id: string | null
    doctorDistributionId: string | null
    giftId: string | null
    fromInventoryId: string | null
    quantity: number | null
    unitCost: Decimal | null
    totalCost: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DoctorDistributionGiftItemCountAggregateOutputType = {
    id: number
    doctorDistributionId: number
    giftId: number
    fromInventoryId: number
    quantity: number
    unitCost: number
    totalCost: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DoctorDistributionGiftItemAvgAggregateInputType = {
    quantity?: true
    unitCost?: true
    totalCost?: true
  }

  export type DoctorDistributionGiftItemSumAggregateInputType = {
    quantity?: true
    unitCost?: true
    totalCost?: true
  }

  export type DoctorDistributionGiftItemMinAggregateInputType = {
    id?: true
    doctorDistributionId?: true
    giftId?: true
    fromInventoryId?: true
    quantity?: true
    unitCost?: true
    totalCost?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DoctorDistributionGiftItemMaxAggregateInputType = {
    id?: true
    doctorDistributionId?: true
    giftId?: true
    fromInventoryId?: true
    quantity?: true
    unitCost?: true
    totalCost?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DoctorDistributionGiftItemCountAggregateInputType = {
    id?: true
    doctorDistributionId?: true
    giftId?: true
    fromInventoryId?: true
    quantity?: true
    unitCost?: true
    totalCost?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DoctorDistributionGiftItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DoctorDistributionGiftItem to aggregate.
     */
    where?: DoctorDistributionGiftItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorDistributionGiftItems to fetch.
     */
    orderBy?: DoctorDistributionGiftItemOrderByWithRelationInput | DoctorDistributionGiftItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DoctorDistributionGiftItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorDistributionGiftItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorDistributionGiftItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DoctorDistributionGiftItems
    **/
    _count?: true | DoctorDistributionGiftItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DoctorDistributionGiftItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DoctorDistributionGiftItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoctorDistributionGiftItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoctorDistributionGiftItemMaxAggregateInputType
  }

  export type GetDoctorDistributionGiftItemAggregateType<T extends DoctorDistributionGiftItemAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctorDistributionGiftItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctorDistributionGiftItem[P]>
      : GetScalarType<T[P], AggregateDoctorDistributionGiftItem[P]>
  }




  export type DoctorDistributionGiftItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorDistributionGiftItemWhereInput
    orderBy?: DoctorDistributionGiftItemOrderByWithAggregationInput | DoctorDistributionGiftItemOrderByWithAggregationInput[]
    by: DoctorDistributionGiftItemScalarFieldEnum[] | DoctorDistributionGiftItemScalarFieldEnum
    having?: DoctorDistributionGiftItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoctorDistributionGiftItemCountAggregateInputType | true
    _avg?: DoctorDistributionGiftItemAvgAggregateInputType
    _sum?: DoctorDistributionGiftItemSumAggregateInputType
    _min?: DoctorDistributionGiftItemMinAggregateInputType
    _max?: DoctorDistributionGiftItemMaxAggregateInputType
  }

  export type DoctorDistributionGiftItemGroupByOutputType = {
    id: string
    doctorDistributionId: string
    giftId: string
    fromInventoryId: string
    quantity: number
    unitCost: Decimal
    totalCost: Decimal
    createdAt: Date
    updatedAt: Date
    _count: DoctorDistributionGiftItemCountAggregateOutputType | null
    _avg: DoctorDistributionGiftItemAvgAggregateOutputType | null
    _sum: DoctorDistributionGiftItemSumAggregateOutputType | null
    _min: DoctorDistributionGiftItemMinAggregateOutputType | null
    _max: DoctorDistributionGiftItemMaxAggregateOutputType | null
  }

  type GetDoctorDistributionGiftItemGroupByPayload<T extends DoctorDistributionGiftItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DoctorDistributionGiftItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoctorDistributionGiftItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoctorDistributionGiftItemGroupByOutputType[P]>
            : GetScalarType<T[P], DoctorDistributionGiftItemGroupByOutputType[P]>
        }
      >
    >


  export type DoctorDistributionGiftItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorDistributionId?: boolean
    giftId?: boolean
    fromInventoryId?: boolean
    quantity?: boolean
    unitCost?: boolean
    totalCost?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctorDistribution?: boolean | DoctorDistributionDefaultArgs<ExtArgs>
    gift?: boolean | GiftDefaultArgs<ExtArgs>
    fromInventory?: boolean | UserGiftInventoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorDistributionGiftItem"]>

  export type DoctorDistributionGiftItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorDistributionId?: boolean
    giftId?: boolean
    fromInventoryId?: boolean
    quantity?: boolean
    unitCost?: boolean
    totalCost?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctorDistribution?: boolean | DoctorDistributionDefaultArgs<ExtArgs>
    gift?: boolean | GiftDefaultArgs<ExtArgs>
    fromInventory?: boolean | UserGiftInventoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorDistributionGiftItem"]>

  export type DoctorDistributionGiftItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorDistributionId?: boolean
    giftId?: boolean
    fromInventoryId?: boolean
    quantity?: boolean
    unitCost?: boolean
    totalCost?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctorDistribution?: boolean | DoctorDistributionDefaultArgs<ExtArgs>
    gift?: boolean | GiftDefaultArgs<ExtArgs>
    fromInventory?: boolean | UserGiftInventoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorDistributionGiftItem"]>

  export type DoctorDistributionGiftItemSelectScalar = {
    id?: boolean
    doctorDistributionId?: boolean
    giftId?: boolean
    fromInventoryId?: boolean
    quantity?: boolean
    unitCost?: boolean
    totalCost?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DoctorDistributionGiftItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "doctorDistributionId" | "giftId" | "fromInventoryId" | "quantity" | "unitCost" | "totalCost" | "createdAt" | "updatedAt", ExtArgs["result"]["doctorDistributionGiftItem"]>
  export type DoctorDistributionGiftItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctorDistribution?: boolean | DoctorDistributionDefaultArgs<ExtArgs>
    gift?: boolean | GiftDefaultArgs<ExtArgs>
    fromInventory?: boolean | UserGiftInventoryDefaultArgs<ExtArgs>
  }
  export type DoctorDistributionGiftItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctorDistribution?: boolean | DoctorDistributionDefaultArgs<ExtArgs>
    gift?: boolean | GiftDefaultArgs<ExtArgs>
    fromInventory?: boolean | UserGiftInventoryDefaultArgs<ExtArgs>
  }
  export type DoctorDistributionGiftItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctorDistribution?: boolean | DoctorDistributionDefaultArgs<ExtArgs>
    gift?: boolean | GiftDefaultArgs<ExtArgs>
    fromInventory?: boolean | UserGiftInventoryDefaultArgs<ExtArgs>
  }

  export type $DoctorDistributionGiftItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DoctorDistributionGiftItem"
    objects: {
      doctorDistribution: Prisma.$DoctorDistributionPayload<ExtArgs>
      gift: Prisma.$GiftPayload<ExtArgs>
      fromInventory: Prisma.$UserGiftInventoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      doctorDistributionId: string
      giftId: string
      fromInventoryId: string
      quantity: number
      unitCost: Prisma.Decimal
      totalCost: Prisma.Decimal
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["doctorDistributionGiftItem"]>
    composites: {}
  }

  type DoctorDistributionGiftItemGetPayload<S extends boolean | null | undefined | DoctorDistributionGiftItemDefaultArgs> = $Result.GetResult<Prisma.$DoctorDistributionGiftItemPayload, S>

  type DoctorDistributionGiftItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DoctorDistributionGiftItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DoctorDistributionGiftItemCountAggregateInputType | true
    }

  export interface DoctorDistributionGiftItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DoctorDistributionGiftItem'], meta: { name: 'DoctorDistributionGiftItem' } }
    /**
     * Find zero or one DoctorDistributionGiftItem that matches the filter.
     * @param {DoctorDistributionGiftItemFindUniqueArgs} args - Arguments to find a DoctorDistributionGiftItem
     * @example
     * // Get one DoctorDistributionGiftItem
     * const doctorDistributionGiftItem = await prisma.doctorDistributionGiftItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DoctorDistributionGiftItemFindUniqueArgs>(args: SelectSubset<T, DoctorDistributionGiftItemFindUniqueArgs<ExtArgs>>): Prisma__DoctorDistributionGiftItemClient<$Result.GetResult<Prisma.$DoctorDistributionGiftItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DoctorDistributionGiftItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DoctorDistributionGiftItemFindUniqueOrThrowArgs} args - Arguments to find a DoctorDistributionGiftItem
     * @example
     * // Get one DoctorDistributionGiftItem
     * const doctorDistributionGiftItem = await prisma.doctorDistributionGiftItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DoctorDistributionGiftItemFindUniqueOrThrowArgs>(args: SelectSubset<T, DoctorDistributionGiftItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DoctorDistributionGiftItemClient<$Result.GetResult<Prisma.$DoctorDistributionGiftItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DoctorDistributionGiftItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorDistributionGiftItemFindFirstArgs} args - Arguments to find a DoctorDistributionGiftItem
     * @example
     * // Get one DoctorDistributionGiftItem
     * const doctorDistributionGiftItem = await prisma.doctorDistributionGiftItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DoctorDistributionGiftItemFindFirstArgs>(args?: SelectSubset<T, DoctorDistributionGiftItemFindFirstArgs<ExtArgs>>): Prisma__DoctorDistributionGiftItemClient<$Result.GetResult<Prisma.$DoctorDistributionGiftItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DoctorDistributionGiftItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorDistributionGiftItemFindFirstOrThrowArgs} args - Arguments to find a DoctorDistributionGiftItem
     * @example
     * // Get one DoctorDistributionGiftItem
     * const doctorDistributionGiftItem = await prisma.doctorDistributionGiftItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DoctorDistributionGiftItemFindFirstOrThrowArgs>(args?: SelectSubset<T, DoctorDistributionGiftItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__DoctorDistributionGiftItemClient<$Result.GetResult<Prisma.$DoctorDistributionGiftItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DoctorDistributionGiftItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorDistributionGiftItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DoctorDistributionGiftItems
     * const doctorDistributionGiftItems = await prisma.doctorDistributionGiftItem.findMany()
     * 
     * // Get first 10 DoctorDistributionGiftItems
     * const doctorDistributionGiftItems = await prisma.doctorDistributionGiftItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doctorDistributionGiftItemWithIdOnly = await prisma.doctorDistributionGiftItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DoctorDistributionGiftItemFindManyArgs>(args?: SelectSubset<T, DoctorDistributionGiftItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorDistributionGiftItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DoctorDistributionGiftItem.
     * @param {DoctorDistributionGiftItemCreateArgs} args - Arguments to create a DoctorDistributionGiftItem.
     * @example
     * // Create one DoctorDistributionGiftItem
     * const DoctorDistributionGiftItem = await prisma.doctorDistributionGiftItem.create({
     *   data: {
     *     // ... data to create a DoctorDistributionGiftItem
     *   }
     * })
     * 
     */
    create<T extends DoctorDistributionGiftItemCreateArgs>(args: SelectSubset<T, DoctorDistributionGiftItemCreateArgs<ExtArgs>>): Prisma__DoctorDistributionGiftItemClient<$Result.GetResult<Prisma.$DoctorDistributionGiftItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DoctorDistributionGiftItems.
     * @param {DoctorDistributionGiftItemCreateManyArgs} args - Arguments to create many DoctorDistributionGiftItems.
     * @example
     * // Create many DoctorDistributionGiftItems
     * const doctorDistributionGiftItem = await prisma.doctorDistributionGiftItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DoctorDistributionGiftItemCreateManyArgs>(args?: SelectSubset<T, DoctorDistributionGiftItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DoctorDistributionGiftItems and returns the data saved in the database.
     * @param {DoctorDistributionGiftItemCreateManyAndReturnArgs} args - Arguments to create many DoctorDistributionGiftItems.
     * @example
     * // Create many DoctorDistributionGiftItems
     * const doctorDistributionGiftItem = await prisma.doctorDistributionGiftItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DoctorDistributionGiftItems and only return the `id`
     * const doctorDistributionGiftItemWithIdOnly = await prisma.doctorDistributionGiftItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DoctorDistributionGiftItemCreateManyAndReturnArgs>(args?: SelectSubset<T, DoctorDistributionGiftItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorDistributionGiftItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DoctorDistributionGiftItem.
     * @param {DoctorDistributionGiftItemDeleteArgs} args - Arguments to delete one DoctorDistributionGiftItem.
     * @example
     * // Delete one DoctorDistributionGiftItem
     * const DoctorDistributionGiftItem = await prisma.doctorDistributionGiftItem.delete({
     *   where: {
     *     // ... filter to delete one DoctorDistributionGiftItem
     *   }
     * })
     * 
     */
    delete<T extends DoctorDistributionGiftItemDeleteArgs>(args: SelectSubset<T, DoctorDistributionGiftItemDeleteArgs<ExtArgs>>): Prisma__DoctorDistributionGiftItemClient<$Result.GetResult<Prisma.$DoctorDistributionGiftItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DoctorDistributionGiftItem.
     * @param {DoctorDistributionGiftItemUpdateArgs} args - Arguments to update one DoctorDistributionGiftItem.
     * @example
     * // Update one DoctorDistributionGiftItem
     * const doctorDistributionGiftItem = await prisma.doctorDistributionGiftItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DoctorDistributionGiftItemUpdateArgs>(args: SelectSubset<T, DoctorDistributionGiftItemUpdateArgs<ExtArgs>>): Prisma__DoctorDistributionGiftItemClient<$Result.GetResult<Prisma.$DoctorDistributionGiftItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DoctorDistributionGiftItems.
     * @param {DoctorDistributionGiftItemDeleteManyArgs} args - Arguments to filter DoctorDistributionGiftItems to delete.
     * @example
     * // Delete a few DoctorDistributionGiftItems
     * const { count } = await prisma.doctorDistributionGiftItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DoctorDistributionGiftItemDeleteManyArgs>(args?: SelectSubset<T, DoctorDistributionGiftItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DoctorDistributionGiftItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorDistributionGiftItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DoctorDistributionGiftItems
     * const doctorDistributionGiftItem = await prisma.doctorDistributionGiftItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DoctorDistributionGiftItemUpdateManyArgs>(args: SelectSubset<T, DoctorDistributionGiftItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DoctorDistributionGiftItems and returns the data updated in the database.
     * @param {DoctorDistributionGiftItemUpdateManyAndReturnArgs} args - Arguments to update many DoctorDistributionGiftItems.
     * @example
     * // Update many DoctorDistributionGiftItems
     * const doctorDistributionGiftItem = await prisma.doctorDistributionGiftItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DoctorDistributionGiftItems and only return the `id`
     * const doctorDistributionGiftItemWithIdOnly = await prisma.doctorDistributionGiftItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DoctorDistributionGiftItemUpdateManyAndReturnArgs>(args: SelectSubset<T, DoctorDistributionGiftItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorDistributionGiftItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DoctorDistributionGiftItem.
     * @param {DoctorDistributionGiftItemUpsertArgs} args - Arguments to update or create a DoctorDistributionGiftItem.
     * @example
     * // Update or create a DoctorDistributionGiftItem
     * const doctorDistributionGiftItem = await prisma.doctorDistributionGiftItem.upsert({
     *   create: {
     *     // ... data to create a DoctorDistributionGiftItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DoctorDistributionGiftItem we want to update
     *   }
     * })
     */
    upsert<T extends DoctorDistributionGiftItemUpsertArgs>(args: SelectSubset<T, DoctorDistributionGiftItemUpsertArgs<ExtArgs>>): Prisma__DoctorDistributionGiftItemClient<$Result.GetResult<Prisma.$DoctorDistributionGiftItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DoctorDistributionGiftItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorDistributionGiftItemCountArgs} args - Arguments to filter DoctorDistributionGiftItems to count.
     * @example
     * // Count the number of DoctorDistributionGiftItems
     * const count = await prisma.doctorDistributionGiftItem.count({
     *   where: {
     *     // ... the filter for the DoctorDistributionGiftItems we want to count
     *   }
     * })
    **/
    count<T extends DoctorDistributionGiftItemCountArgs>(
      args?: Subset<T, DoctorDistributionGiftItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoctorDistributionGiftItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DoctorDistributionGiftItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorDistributionGiftItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoctorDistributionGiftItemAggregateArgs>(args: Subset<T, DoctorDistributionGiftItemAggregateArgs>): Prisma.PrismaPromise<GetDoctorDistributionGiftItemAggregateType<T>>

    /**
     * Group by DoctorDistributionGiftItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorDistributionGiftItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DoctorDistributionGiftItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DoctorDistributionGiftItemGroupByArgs['orderBy'] }
        : { orderBy?: DoctorDistributionGiftItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DoctorDistributionGiftItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctorDistributionGiftItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DoctorDistributionGiftItem model
   */
  readonly fields: DoctorDistributionGiftItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DoctorDistributionGiftItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DoctorDistributionGiftItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    doctorDistribution<T extends DoctorDistributionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DoctorDistributionDefaultArgs<ExtArgs>>): Prisma__DoctorDistributionClient<$Result.GetResult<Prisma.$DoctorDistributionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    gift<T extends GiftDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GiftDefaultArgs<ExtArgs>>): Prisma__GiftClient<$Result.GetResult<Prisma.$GiftPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    fromInventory<T extends UserGiftInventoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserGiftInventoryDefaultArgs<ExtArgs>>): Prisma__UserGiftInventoryClient<$Result.GetResult<Prisma.$UserGiftInventoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DoctorDistributionGiftItem model
   */
  interface DoctorDistributionGiftItemFieldRefs {
    readonly id: FieldRef<"DoctorDistributionGiftItem", 'String'>
    readonly doctorDistributionId: FieldRef<"DoctorDistributionGiftItem", 'String'>
    readonly giftId: FieldRef<"DoctorDistributionGiftItem", 'String'>
    readonly fromInventoryId: FieldRef<"DoctorDistributionGiftItem", 'String'>
    readonly quantity: FieldRef<"DoctorDistributionGiftItem", 'Int'>
    readonly unitCost: FieldRef<"DoctorDistributionGiftItem", 'Decimal'>
    readonly totalCost: FieldRef<"DoctorDistributionGiftItem", 'Decimal'>
    readonly createdAt: FieldRef<"DoctorDistributionGiftItem", 'DateTime'>
    readonly updatedAt: FieldRef<"DoctorDistributionGiftItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DoctorDistributionGiftItem findUnique
   */
  export type DoctorDistributionGiftItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistributionGiftItem
     */
    select?: DoctorDistributionGiftItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistributionGiftItem
     */
    omit?: DoctorDistributionGiftItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionGiftItemInclude<ExtArgs> | null
    /**
     * Filter, which DoctorDistributionGiftItem to fetch.
     */
    where: DoctorDistributionGiftItemWhereUniqueInput
  }

  /**
   * DoctorDistributionGiftItem findUniqueOrThrow
   */
  export type DoctorDistributionGiftItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistributionGiftItem
     */
    select?: DoctorDistributionGiftItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistributionGiftItem
     */
    omit?: DoctorDistributionGiftItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionGiftItemInclude<ExtArgs> | null
    /**
     * Filter, which DoctorDistributionGiftItem to fetch.
     */
    where: DoctorDistributionGiftItemWhereUniqueInput
  }

  /**
   * DoctorDistributionGiftItem findFirst
   */
  export type DoctorDistributionGiftItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistributionGiftItem
     */
    select?: DoctorDistributionGiftItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistributionGiftItem
     */
    omit?: DoctorDistributionGiftItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionGiftItemInclude<ExtArgs> | null
    /**
     * Filter, which DoctorDistributionGiftItem to fetch.
     */
    where?: DoctorDistributionGiftItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorDistributionGiftItems to fetch.
     */
    orderBy?: DoctorDistributionGiftItemOrderByWithRelationInput | DoctorDistributionGiftItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DoctorDistributionGiftItems.
     */
    cursor?: DoctorDistributionGiftItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorDistributionGiftItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorDistributionGiftItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DoctorDistributionGiftItems.
     */
    distinct?: DoctorDistributionGiftItemScalarFieldEnum | DoctorDistributionGiftItemScalarFieldEnum[]
  }

  /**
   * DoctorDistributionGiftItem findFirstOrThrow
   */
  export type DoctorDistributionGiftItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistributionGiftItem
     */
    select?: DoctorDistributionGiftItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistributionGiftItem
     */
    omit?: DoctorDistributionGiftItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionGiftItemInclude<ExtArgs> | null
    /**
     * Filter, which DoctorDistributionGiftItem to fetch.
     */
    where?: DoctorDistributionGiftItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorDistributionGiftItems to fetch.
     */
    orderBy?: DoctorDistributionGiftItemOrderByWithRelationInput | DoctorDistributionGiftItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DoctorDistributionGiftItems.
     */
    cursor?: DoctorDistributionGiftItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorDistributionGiftItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorDistributionGiftItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DoctorDistributionGiftItems.
     */
    distinct?: DoctorDistributionGiftItemScalarFieldEnum | DoctorDistributionGiftItemScalarFieldEnum[]
  }

  /**
   * DoctorDistributionGiftItem findMany
   */
  export type DoctorDistributionGiftItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistributionGiftItem
     */
    select?: DoctorDistributionGiftItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistributionGiftItem
     */
    omit?: DoctorDistributionGiftItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionGiftItemInclude<ExtArgs> | null
    /**
     * Filter, which DoctorDistributionGiftItems to fetch.
     */
    where?: DoctorDistributionGiftItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorDistributionGiftItems to fetch.
     */
    orderBy?: DoctorDistributionGiftItemOrderByWithRelationInput | DoctorDistributionGiftItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DoctorDistributionGiftItems.
     */
    cursor?: DoctorDistributionGiftItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorDistributionGiftItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorDistributionGiftItems.
     */
    skip?: number
    distinct?: DoctorDistributionGiftItemScalarFieldEnum | DoctorDistributionGiftItemScalarFieldEnum[]
  }

  /**
   * DoctorDistributionGiftItem create
   */
  export type DoctorDistributionGiftItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistributionGiftItem
     */
    select?: DoctorDistributionGiftItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistributionGiftItem
     */
    omit?: DoctorDistributionGiftItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionGiftItemInclude<ExtArgs> | null
    /**
     * The data needed to create a DoctorDistributionGiftItem.
     */
    data: XOR<DoctorDistributionGiftItemCreateInput, DoctorDistributionGiftItemUncheckedCreateInput>
  }

  /**
   * DoctorDistributionGiftItem createMany
   */
  export type DoctorDistributionGiftItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DoctorDistributionGiftItems.
     */
    data: DoctorDistributionGiftItemCreateManyInput | DoctorDistributionGiftItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DoctorDistributionGiftItem createManyAndReturn
   */
  export type DoctorDistributionGiftItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistributionGiftItem
     */
    select?: DoctorDistributionGiftItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistributionGiftItem
     */
    omit?: DoctorDistributionGiftItemOmit<ExtArgs> | null
    /**
     * The data used to create many DoctorDistributionGiftItems.
     */
    data: DoctorDistributionGiftItemCreateManyInput | DoctorDistributionGiftItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionGiftItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DoctorDistributionGiftItem update
   */
  export type DoctorDistributionGiftItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistributionGiftItem
     */
    select?: DoctorDistributionGiftItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistributionGiftItem
     */
    omit?: DoctorDistributionGiftItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionGiftItemInclude<ExtArgs> | null
    /**
     * The data needed to update a DoctorDistributionGiftItem.
     */
    data: XOR<DoctorDistributionGiftItemUpdateInput, DoctorDistributionGiftItemUncheckedUpdateInput>
    /**
     * Choose, which DoctorDistributionGiftItem to update.
     */
    where: DoctorDistributionGiftItemWhereUniqueInput
  }

  /**
   * DoctorDistributionGiftItem updateMany
   */
  export type DoctorDistributionGiftItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DoctorDistributionGiftItems.
     */
    data: XOR<DoctorDistributionGiftItemUpdateManyMutationInput, DoctorDistributionGiftItemUncheckedUpdateManyInput>
    /**
     * Filter which DoctorDistributionGiftItems to update
     */
    where?: DoctorDistributionGiftItemWhereInput
    /**
     * Limit how many DoctorDistributionGiftItems to update.
     */
    limit?: number
  }

  /**
   * DoctorDistributionGiftItem updateManyAndReturn
   */
  export type DoctorDistributionGiftItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistributionGiftItem
     */
    select?: DoctorDistributionGiftItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistributionGiftItem
     */
    omit?: DoctorDistributionGiftItemOmit<ExtArgs> | null
    /**
     * The data used to update DoctorDistributionGiftItems.
     */
    data: XOR<DoctorDistributionGiftItemUpdateManyMutationInput, DoctorDistributionGiftItemUncheckedUpdateManyInput>
    /**
     * Filter which DoctorDistributionGiftItems to update
     */
    where?: DoctorDistributionGiftItemWhereInput
    /**
     * Limit how many DoctorDistributionGiftItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionGiftItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DoctorDistributionGiftItem upsert
   */
  export type DoctorDistributionGiftItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistributionGiftItem
     */
    select?: DoctorDistributionGiftItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistributionGiftItem
     */
    omit?: DoctorDistributionGiftItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionGiftItemInclude<ExtArgs> | null
    /**
     * The filter to search for the DoctorDistributionGiftItem to update in case it exists.
     */
    where: DoctorDistributionGiftItemWhereUniqueInput
    /**
     * In case the DoctorDistributionGiftItem found by the `where` argument doesn't exist, create a new DoctorDistributionGiftItem with this data.
     */
    create: XOR<DoctorDistributionGiftItemCreateInput, DoctorDistributionGiftItemUncheckedCreateInput>
    /**
     * In case the DoctorDistributionGiftItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DoctorDistributionGiftItemUpdateInput, DoctorDistributionGiftItemUncheckedUpdateInput>
  }

  /**
   * DoctorDistributionGiftItem delete
   */
  export type DoctorDistributionGiftItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistributionGiftItem
     */
    select?: DoctorDistributionGiftItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistributionGiftItem
     */
    omit?: DoctorDistributionGiftItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionGiftItemInclude<ExtArgs> | null
    /**
     * Filter which DoctorDistributionGiftItem to delete.
     */
    where: DoctorDistributionGiftItemWhereUniqueInput
  }

  /**
   * DoctorDistributionGiftItem deleteMany
   */
  export type DoctorDistributionGiftItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DoctorDistributionGiftItems to delete
     */
    where?: DoctorDistributionGiftItemWhereInput
    /**
     * Limit how many DoctorDistributionGiftItems to delete.
     */
    limit?: number
  }

  /**
   * DoctorDistributionGiftItem without action
   */
  export type DoctorDistributionGiftItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorDistributionGiftItem
     */
    select?: DoctorDistributionGiftItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorDistributionGiftItem
     */
    omit?: DoctorDistributionGiftItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorDistributionGiftItemInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    employeeId: string | null
    tableName: string | null
    actionType: string | null
    recordId: string | null
    ipAddress: string | null
    createdAt: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    employeeId: string | null
    tableName: string | null
    actionType: string | null
    recordId: string | null
    ipAddress: string | null
    createdAt: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    organizationId: number
    employeeId: number
    tableName: number
    actionType: number
    recordId: number
    oldValues: number
    newValues: number
    ipAddress: number
    createdAt: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    organizationId?: true
    employeeId?: true
    tableName?: true
    actionType?: true
    recordId?: true
    ipAddress?: true
    createdAt?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    organizationId?: true
    employeeId?: true
    tableName?: true
    actionType?: true
    recordId?: true
    ipAddress?: true
    createdAt?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    organizationId?: true
    employeeId?: true
    tableName?: true
    actionType?: true
    recordId?: true
    oldValues?: true
    newValues?: true
    ipAddress?: true
    createdAt?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    organizationId: string
    employeeId: string | null
    tableName: string
    actionType: string
    recordId: string
    oldValues: JsonValue | null
    newValues: JsonValue | null
    ipAddress: string | null
    createdAt: Date
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    employeeId?: boolean
    tableName?: boolean
    actionType?: boolean
    recordId?: boolean
    oldValues?: boolean
    newValues?: boolean
    ipAddress?: boolean
    createdAt?: boolean
    employee?: boolean | AuditLog$employeeArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    employeeId?: boolean
    tableName?: boolean
    actionType?: boolean
    recordId?: boolean
    oldValues?: boolean
    newValues?: boolean
    ipAddress?: boolean
    createdAt?: boolean
    employee?: boolean | AuditLog$employeeArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    employeeId?: boolean
    tableName?: boolean
    actionType?: boolean
    recordId?: boolean
    oldValues?: boolean
    newValues?: boolean
    ipAddress?: boolean
    createdAt?: boolean
    employee?: boolean | AuditLog$employeeArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    organizationId?: boolean
    employeeId?: boolean
    tableName?: boolean
    actionType?: boolean
    recordId?: boolean
    oldValues?: boolean
    newValues?: boolean
    ipAddress?: boolean
    createdAt?: boolean
  }

  export type AuditLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "employeeId" | "tableName" | "actionType" | "recordId" | "oldValues" | "newValues" | "ipAddress" | "createdAt", ExtArgs["result"]["auditLog"]>
  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | AuditLog$employeeArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | AuditLog$employeeArgs<ExtArgs>
  }
  export type AuditLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | AuditLog$employeeArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      employeeId: string | null
      tableName: string
      actionType: string
      recordId: string
      oldValues: Prisma.JsonValue | null
      newValues: Prisma.JsonValue | null
      ipAddress: string | null
      createdAt: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs and returns the data updated in the database.
     * @param {AuditLogUpdateManyAndReturnArgs} args - Arguments to update many AuditLogs.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AuditLogUpdateManyAndReturnArgs>(args: SelectSubset<T, AuditLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends AuditLog$employeeArgs<ExtArgs> = {}>(args?: Subset<T, AuditLog$employeeArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly organizationId: FieldRef<"AuditLog", 'String'>
    readonly employeeId: FieldRef<"AuditLog", 'String'>
    readonly tableName: FieldRef<"AuditLog", 'String'>
    readonly actionType: FieldRef<"AuditLog", 'String'>
    readonly recordId: FieldRef<"AuditLog", 'String'>
    readonly oldValues: FieldRef<"AuditLog", 'Json'>
    readonly newValues: FieldRef<"AuditLog", 'Json'>
    readonly ipAddress: FieldRef<"AuditLog", 'String'>
    readonly createdAt: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
  }

  /**
   * AuditLog updateManyAndReturn
   */
  export type AuditLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to delete.
     */
    limit?: number
  }

  /**
   * AuditLog.employee
   */
  export type AuditLog$employeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const EmployeeScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    email: 'email',
    passwordHash: 'passwordHash',
    firstName: 'firstName',
    lastName: 'lastName',
    phone: 'phone',
    profilePic: 'profilePic',
    role: 'role',
    reportingManagerId: 'reportingManagerId',
    teamId: 'teamId',
    employeeCode: 'employeeCode',
    city: 'city',
    state: 'state',
    assignedLatitude: 'assignedLatitude',
    assignedLongitude: 'assignedLongitude',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    lastLoginAt: 'lastLoginAt',
    isActive: 'isActive'
  };

  export type EmployeeScalarFieldEnum = (typeof EmployeeScalarFieldEnum)[keyof typeof EmployeeScalarFieldEnum]


  export const TeamScalarFieldEnum: {
    id: 'id',
    teamName: 'teamName',
    leadId: 'leadId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isActive: 'isActive'
  };

  export type TeamScalarFieldEnum = (typeof TeamScalarFieldEnum)[keyof typeof TeamScalarFieldEnum]


  export const TerritoryScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    name: 'name',
    type: 'type',
    parentTerritoryId: 'parentTerritoryId',
    boundaries: 'boundaries',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TerritoryScalarFieldEnum = (typeof TerritoryScalarFieldEnum)[keyof typeof TerritoryScalarFieldEnum]


  export const EmployeeTerritoryScalarFieldEnum: {
    id: 'id',
    employeeId: 'employeeId',
    territoryId: 'territoryId',
    assignedAt: 'assignedAt',
    unassignedAt: 'unassignedAt',
    isPrimary: 'isPrimary'
  };

  export type EmployeeTerritoryScalarFieldEnum = (typeof EmployeeTerritoryScalarFieldEnum)[keyof typeof EmployeeTerritoryScalarFieldEnum]


  export const EmployeeTrainingRecordScalarFieldEnum: {
    id: 'id',
    employeeId: 'employeeId',
    trainingName: 'trainingName',
    description: 'description',
    completionDate: 'completionDate',
    createdAt: 'createdAt'
  };

  export type EmployeeTrainingRecordScalarFieldEnum = (typeof EmployeeTrainingRecordScalarFieldEnum)[keyof typeof EmployeeTrainingRecordScalarFieldEnum]


  export const HospitalChainScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    name: 'name',
    headquartersAddress: 'headquartersAddress',
    contactEmail: 'contactEmail',
    contactPhone: 'contactPhone',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isActive: 'isActive'
  };

  export type HospitalChainScalarFieldEnum = (typeof HospitalChainScalarFieldEnum)[keyof typeof HospitalChainScalarFieldEnum]


  export const ChemistChainScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    name: 'name',
    headquartersAddress: 'headquartersAddress',
    contactEmail: 'contactEmail',
    contactPhone: 'contactPhone',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isActive: 'isActive'
  };

  export type ChemistChainScalarFieldEnum = (typeof ChemistChainScalarFieldEnum)[keyof typeof ChemistChainScalarFieldEnum]


  export const HospitalScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    hospitalChainId: 'hospitalChainId',
    territoryId: 'territoryId',
    name: 'name',
    type: 'type',
    address: 'address',
    city: 'city',
    state: 'state',
    pincode: 'pincode',
    latitude: 'latitude',
    longitude: 'longitude',
    phone: 'phone',
    email: 'email',
    website: 'website',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isActive: 'isActive'
  };

  export type HospitalScalarFieldEnum = (typeof HospitalScalarFieldEnum)[keyof typeof HospitalScalarFieldEnum]


  export const DoctorScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    name: 'name',
    designation: 'designation',
    specialization: 'specialization',
    email: 'email',
    phone: 'phone',
    description: 'description',
    profilePictureUrl: 'profilePictureUrl',
    qualification: 'qualification',
    experienceYears: 'experienceYears',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    isActive: 'isActive'
  };

  export type DoctorScalarFieldEnum = (typeof DoctorScalarFieldEnum)[keyof typeof DoctorScalarFieldEnum]


  export const DoctorHospitalAssociationScalarFieldEnum: {
    id: 'id',
    doctorId: 'doctorId',
    hospitalId: 'hospitalId',
    department: 'department',
    position: 'position',
    isPrimary: 'isPrimary',
    associationStartDate: 'associationStartDate',
    associationEndDate: 'associationEndDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DoctorHospitalAssociationScalarFieldEnum = (typeof DoctorHospitalAssociationScalarFieldEnum)[keyof typeof DoctorHospitalAssociationScalarFieldEnum]


  export const DoctorConsultationScheduleScalarFieldEnum: {
    id: 'id',
    doctorId: 'doctorId',
    hospitalId: 'hospitalId',
    dayOfWeek: 'dayOfWeek',
    startTime: 'startTime',
    endTime: 'endTime',
    consultationType: 'consultationType',
    isActive: 'isActive',
    effectiveFrom: 'effectiveFrom',
    effectiveTo: 'effectiveTo',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DoctorConsultationScheduleScalarFieldEnum = (typeof DoctorConsultationScheduleScalarFieldEnum)[keyof typeof DoctorConsultationScheduleScalarFieldEnum]


  export const DoctorNoteScalarFieldEnum: {
    id: 'id',
    doctorId: 'doctorId',
    createdById: 'createdById',
    content: 'content',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DoctorNoteScalarFieldEnum = (typeof DoctorNoteScalarFieldEnum)[keyof typeof DoctorNoteScalarFieldEnum]


  export const DoctorInteractionScalarFieldEnum: {
    id: 'id',
    doctorId: 'doctorId',
    employeeId: 'employeeId',
    hospitalId: 'hospitalId',
    interactionType: 'interactionType',
    startTime: 'startTime',
    endTime: 'endTime',
    purpose: 'purpose',
    outcome: 'outcome',
    comments: 'comments',
    rating: 'rating',
    createdAt: 'createdAt',
    doctorTaskId: 'doctorTaskId'
  };

  export type DoctorInteractionScalarFieldEnum = (typeof DoctorInteractionScalarFieldEnum)[keyof typeof DoctorInteractionScalarFieldEnum]


  export const DrugScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    name: 'name',
    composition: 'composition',
    manufacturer: 'manufacturer',
    indications: 'indications',
    sideEffects: 'sideEffects',
    safetyAdvice: 'safetyAdvice',
    dosageForms: 'dosageForms',
    price: 'price',
    schedule: 'schedule',
    regulatoryApprovals: 'regulatoryApprovals',
    category: 'category',
    isAvailable: 'isAvailable',
    images: 'images',
    marketingMaterials: 'marketingMaterials',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    isActive: 'isActive'
  };

  export type DrugScalarFieldEnum = (typeof DrugScalarFieldEnum)[keyof typeof DrugScalarFieldEnum]


  export const ChemistScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    chemistChainId: 'chemistChainId',
    territoryId: 'territoryId',
    name: 'name',
    type: 'type',
    email: 'email',
    phone: 'phone',
    address: 'address',
    city: 'city',
    state: 'state',
    pincode: 'pincode',
    latitude: 'latitude',
    longitude: 'longitude',
    description: 'description',
    profilePictureUrl: 'profilePictureUrl',
    visitingHours: 'visitingHours',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    isActive: 'isActive'
  };

  export type ChemistScalarFieldEnum = (typeof ChemistScalarFieldEnum)[keyof typeof ChemistScalarFieldEnum]


  export const ChemistNoteScalarFieldEnum: {
    id: 'id',
    chemistId: 'chemistId',
    createdById: 'createdById',
    content: 'content',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ChemistNoteScalarFieldEnum = (typeof ChemistNoteScalarFieldEnum)[keyof typeof ChemistNoteScalarFieldEnum]


  export const ChemistInteractionScalarFieldEnum: {
    id: 'id',
    chemistId: 'chemistId',
    employeeId: 'employeeId',
    interactionType: 'interactionType',
    startTime: 'startTime',
    endTime: 'endTime',
    purpose: 'purpose',
    outcome: 'outcome',
    comments: 'comments',
    rating: 'rating',
    createdAt: 'createdAt',
    chemistTaskId: 'chemistTaskId'
  };

  export type ChemistInteractionScalarFieldEnum = (typeof ChemistInteractionScalarFieldEnum)[keyof typeof ChemistInteractionScalarFieldEnum]


  export const DoctorChemistRelationScalarFieldEnum: {
    id: 'id',
    doctorId: 'doctorId',
    chemistId: 'chemistId',
    createdAt: 'createdAt',
    createdById: 'createdById'
  };

  export type DoctorChemistRelationScalarFieldEnum = (typeof DoctorChemistRelationScalarFieldEnum)[keyof typeof DoctorChemistRelationScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    chemistId: 'chemistId',
    totalAmount: 'totalAmount',
    status: 'status',
    orderDate: 'orderDate',
    deliveryDate: 'deliveryDate',
    specialInstructions: 'specialInstructions',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const OrderItemScalarFieldEnum: {
    orderId: 'orderId',
    drugId: 'drugId',
    quantity: 'quantity',
    unitPrice: 'unitPrice',
    subtotal: 'subtotal',
    createdAt: 'createdAt'
  };

  export type OrderItemScalarFieldEnum = (typeof OrderItemScalarFieldEnum)[keyof typeof OrderItemScalarFieldEnum]


  export const DcrReportScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    employeeId: 'employeeId',
    taskId: 'taskId',
    taskType: 'taskType',
    reportDate: 'reportDate',
    productsDiscussed: 'productsDiscussed',
    comments: 'comments',
    isDraft: 'isDraft',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DcrReportScalarFieldEnum = (typeof DcrReportScalarFieldEnum)[keyof typeof DcrReportScalarFieldEnum]


  export const RcpaReportScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    employeeId: 'employeeId',
    chemistId: 'chemistId',
    remarks: 'remarks',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RcpaReportScalarFieldEnum = (typeof RcpaReportScalarFieldEnum)[keyof typeof RcpaReportScalarFieldEnum]


  export const RcpaDrugDataScalarFieldEnum: {
    id: 'id',
    rcpaReportId: 'rcpaReportId',
    drugId: 'drugId',
    competitorDrugName: 'competitorDrugName',
    ownQuantity: 'ownQuantity',
    competitorQuantity: 'competitorQuantity',
    createdAt: 'createdAt'
  };

  export type RcpaDrugDataScalarFieldEnum = (typeof RcpaDrugDataScalarFieldEnum)[keyof typeof RcpaDrugDataScalarFieldEnum]


  export const CheckInScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    employeeId: 'employeeId',
    checkInTime: 'checkInTime',
    checkOutTime: 'checkOutTime',
    checkInLatitude: 'checkInLatitude',
    checkInLongitude: 'checkInLongitude',
    checkOutLatitude: 'checkOutLatitude',
    checkOutLongitude: 'checkOutLongitude',
    createdAt: 'createdAt'
  };

  export type CheckInScalarFieldEnum = (typeof CheckInScalarFieldEnum)[keyof typeof CheckInScalarFieldEnum]


  export const TaskPlannerScalarFieldEnum: {
    id: 'id',
    employeeId: 'employeeId',
    startDate: 'startDate',
    endDate: 'endDate',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TaskPlannerScalarFieldEnum = (typeof TaskPlannerScalarFieldEnum)[keyof typeof TaskPlannerScalarFieldEnum]


  export const DoctorTaskScalarFieldEnum: {
    id: 'id',
    plannerId: 'plannerId',
    employeeId: 'employeeId',
    doctorId: 'doctorId',
    taskDate: 'taskDate',
    startTime: 'startTime',
    endTime: 'endTime',
    taskStatus: 'taskStatus',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DoctorTaskScalarFieldEnum = (typeof DoctorTaskScalarFieldEnum)[keyof typeof DoctorTaskScalarFieldEnum]


  export const ChemistTaskScalarFieldEnum: {
    id: 'id',
    plannerId: 'plannerId',
    employeeId: 'employeeId',
    chemistId: 'chemistId',
    taskDate: 'taskDate',
    startTime: 'startTime',
    endTime: 'endTime',
    taskStatus: 'taskStatus',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ChemistTaskScalarFieldEnum = (typeof ChemistTaskScalarFieldEnum)[keyof typeof ChemistTaskScalarFieldEnum]


  export const TourPlanTaskScalarFieldEnum: {
    id: 'id',
    plannerId: 'plannerId',
    employeeId: 'employeeId',
    tourPlanId: 'tourPlanId',
    location: 'location',
    taskDate: 'taskDate',
    startTime: 'startTime',
    endTime: 'endTime',
    taskStatus: 'taskStatus',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TourPlanTaskScalarFieldEnum = (typeof TourPlanTaskScalarFieldEnum)[keyof typeof TourPlanTaskScalarFieldEnum]


  export const TourPlanScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TourPlanScalarFieldEnum = (typeof TourPlanScalarFieldEnum)[keyof typeof TourPlanScalarFieldEnum]


  export const TourPlanReportScalarFieldEnum: {
    id: 'id',
    tourTaskId: 'tourTaskId',
    interactionTime: 'interactionTime',
    purpose: 'purpose',
    outcome: 'outcome',
    comments: 'comments',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TourPlanReportScalarFieldEnum = (typeof TourPlanReportScalarFieldEnum)[keyof typeof TourPlanReportScalarFieldEnum]


  export const ExpenseTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    icon: 'icon',
    formFields: 'formFields',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ExpenseTypeScalarFieldEnum = (typeof ExpenseTypeScalarFieldEnum)[keyof typeof ExpenseTypeScalarFieldEnum]


  export const ExpenseRoleConfigScalarFieldEnum: {
    id: 'id',
    expenseTypeId: 'expenseTypeId',
    role: 'role',
    limits: 'limits',
    rates: 'rates',
    validationRules: 'validationRules',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ExpenseRoleConfigScalarFieldEnum = (typeof ExpenseRoleConfigScalarFieldEnum)[keyof typeof ExpenseRoleConfigScalarFieldEnum]


  export const ExpenseClaimScalarFieldEnum: {
    id: 'id',
    claimNumber: 'claimNumber',
    employeeId: 'employeeId',
    expenseTypeId: 'expenseTypeId',
    expenseRoleConfigId: 'expenseRoleConfigId',
    expenseData: 'expenseData',
    status: 'status',
    submittedAt: 'submittedAt',
    approvedAt: 'approvedAt',
    approvedBy: 'approvedBy',
    approvalComments: 'approvalComments',
    rejectionReason: 'rejectionReason',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ExpenseClaimScalarFieldEnum = (typeof ExpenseClaimScalarFieldEnum)[keyof typeof ExpenseClaimScalarFieldEnum]


  export const GiftScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    unitCost: 'unitCost',
    specifications: 'specifications',
    giftImages: 'giftImages',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    isActive: 'isActive'
  };

  export type GiftScalarFieldEnum = (typeof GiftScalarFieldEnum)[keyof typeof GiftScalarFieldEnum]


  export const UserDrugInventoryScalarFieldEnum: {
    id: 'id',
    employeeId: 'employeeId',
    drugId: 'drugId',
    quantity: 'quantity',
    lastRestockedAt: 'lastRestockedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserDrugInventoryScalarFieldEnum = (typeof UserDrugInventoryScalarFieldEnum)[keyof typeof UserDrugInventoryScalarFieldEnum]


  export const UserGiftInventoryScalarFieldEnum: {
    id: 'id',
    employeeId: 'employeeId',
    giftId: 'giftId',
    quantity: 'quantity',
    lastRestockedAt: 'lastRestockedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserGiftInventoryScalarFieldEnum = (typeof UserGiftInventoryScalarFieldEnum)[keyof typeof UserGiftInventoryScalarFieldEnum]


  export const DoctorDistributionScalarFieldEnum: {
    id: 'id',
    doctorInteractionId: 'doctorInteractionId',
    employeeId: 'employeeId',
    distributedAt: 'distributedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DoctorDistributionScalarFieldEnum = (typeof DoctorDistributionScalarFieldEnum)[keyof typeof DoctorDistributionScalarFieldEnum]


  export const DoctorDistributionDrugItemScalarFieldEnum: {
    id: 'id',
    doctorDistributionId: 'doctorDistributionId',
    drugId: 'drugId',
    fromInventoryId: 'fromInventoryId',
    quantity: 'quantity',
    unitCost: 'unitCost',
    totalCost: 'totalCost',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DoctorDistributionDrugItemScalarFieldEnum = (typeof DoctorDistributionDrugItemScalarFieldEnum)[keyof typeof DoctorDistributionDrugItemScalarFieldEnum]


  export const DoctorDistributionGiftItemScalarFieldEnum: {
    id: 'id',
    doctorDistributionId: 'doctorDistributionId',
    giftId: 'giftId',
    fromInventoryId: 'fromInventoryId',
    quantity: 'quantity',
    unitCost: 'unitCost',
    totalCost: 'totalCost',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DoctorDistributionGiftItemScalarFieldEnum = (typeof DoctorDistributionGiftItemScalarFieldEnum)[keyof typeof DoctorDistributionGiftItemScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    employeeId: 'employeeId',
    tableName: 'tableName',
    actionType: 'actionType',
    recordId: 'recordId',
    oldValues: 'oldValues',
    newValues: 'newValues',
    ipAddress: 'ipAddress',
    createdAt: 'createdAt'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'EmployeeRole'
   */
  export type EnumEmployeeRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EmployeeRole'>
    


  /**
   * Reference to a field of type 'EmployeeRole[]'
   */
  export type ListEnumEmployeeRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EmployeeRole[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DayOfWeek'
   */
  export type EnumDayOfWeekFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DayOfWeek'>
    


  /**
   * Reference to a field of type 'DayOfWeek[]'
   */
  export type ListEnumDayOfWeekFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DayOfWeek[]'>
    


  /**
   * Reference to a field of type 'ConsultationType'
   */
  export type EnumConsultationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ConsultationType'>
    


  /**
   * Reference to a field of type 'ConsultationType[]'
   */
  export type ListEnumConsultationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ConsultationType[]'>
    


  /**
   * Reference to a field of type 'InteractionType'
   */
  export type EnumInteractionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InteractionType'>
    


  /**
   * Reference to a field of type 'InteractionType[]'
   */
  export type ListEnumInteractionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InteractionType[]'>
    


  /**
   * Reference to a field of type 'ChemistType'
   */
  export type EnumChemistTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ChemistType'>
    


  /**
   * Reference to a field of type 'ChemistType[]'
   */
  export type ListEnumChemistTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ChemistType[]'>
    


  /**
   * Reference to a field of type 'OrderStatus'
   */
  export type EnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus'>
    


  /**
   * Reference to a field of type 'OrderStatus[]'
   */
  export type ListEnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus[]'>
    


  /**
   * Reference to a field of type 'TaskTypeReference'
   */
  export type EnumTaskTypeReferenceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskTypeReference'>
    


  /**
   * Reference to a field of type 'TaskTypeReference[]'
   */
  export type ListEnumTaskTypeReferenceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskTypeReference[]'>
    


  /**
   * Reference to a field of type 'TaskPlannerStatus'
   */
  export type EnumTaskPlannerStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskPlannerStatus'>
    


  /**
   * Reference to a field of type 'TaskPlannerStatus[]'
   */
  export type ListEnumTaskPlannerStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskPlannerStatus[]'>
    


  /**
   * Reference to a field of type 'TaskStatus'
   */
  export type EnumTaskStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskStatus'>
    


  /**
   * Reference to a field of type 'TaskStatus[]'
   */
  export type ListEnumTaskStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskStatus[]'>
    


  /**
   * Reference to a field of type 'ExpenseClaimStatus'
   */
  export type EnumExpenseClaimStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ExpenseClaimStatus'>
    


  /**
   * Reference to a field of type 'ExpenseClaimStatus[]'
   */
  export type ListEnumExpenseClaimStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ExpenseClaimStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type EmployeeWhereInput = {
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    id?: StringFilter<"Employee"> | string
    organizationId?: StringFilter<"Employee"> | string
    email?: StringFilter<"Employee"> | string
    passwordHash?: StringFilter<"Employee"> | string
    firstName?: StringFilter<"Employee"> | string
    lastName?: StringNullableFilter<"Employee"> | string | null
    phone?: StringNullableFilter<"Employee"> | string | null
    profilePic?: StringNullableFilter<"Employee"> | string | null
    role?: EnumEmployeeRoleFilter<"Employee"> | $Enums.EmployeeRole
    reportingManagerId?: StringNullableFilter<"Employee"> | string | null
    teamId?: StringNullableFilter<"Employee"> | string | null
    employeeCode?: StringNullableFilter<"Employee"> | string | null
    city?: StringNullableFilter<"Employee"> | string | null
    state?: StringNullableFilter<"Employee"> | string | null
    assignedLatitude?: DecimalNullableFilter<"Employee"> | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: DecimalNullableFilter<"Employee"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"Employee"> | Date | string
    updatedAt?: DateTimeFilter<"Employee"> | Date | string
    lastLoginAt?: DateTimeNullableFilter<"Employee"> | Date | string | null
    isActive?: BoolFilter<"Employee"> | boolean
    reportingManager?: XOR<EmployeeNullableScalarRelationFilter, EmployeeWhereInput> | null
    subordinates?: EmployeeListRelationFilter
    team?: XOR<TeamNullableScalarRelationFilter, TeamWhereInput> | null
    leadsTeam?: XOR<TeamNullableScalarRelationFilter, TeamWhereInput> | null
    territories?: EmployeeTerritoryListRelationFilter
    trainingRecords?: EmployeeTrainingRecordListRelationFilter
    doctorNotes?: DoctorNoteListRelationFilter
    chemistNotes?: ChemistNoteListRelationFilter
    doctorInteractions?: DoctorInteractionListRelationFilter
    chemistInteractions?: ChemistInteractionListRelationFilter
    dcrReports?: DcrReportListRelationFilter
    rcpaReports?: RcpaReportListRelationFilter
    checkIns?: CheckInListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    ordersCreated?: OrderListRelationFilter
    doctorsCreated?: DoctorListRelationFilter
    drugsCreated?: DrugListRelationFilter
    chemistsCreated?: ChemistListRelationFilter
    doctorChemistRelations?: DoctorChemistRelationListRelationFilter
    expenseClaims?: ExpenseClaimListRelationFilter
    approvedClaims?: ExpenseClaimListRelationFilter
    drugInventories?: UserDrugInventoryListRelationFilter
    giftInventories?: UserGiftInventoryListRelationFilter
    giftsCreated?: GiftListRelationFilter
    doctorDistributions?: DoctorDistributionListRelationFilter
    taskPlans?: TaskPlannerListRelationFilter
    doctorTasks?: DoctorTaskListRelationFilter
    chemistTasks?: ChemistTaskListRelationFilter
    tourPlanTasks?: TourPlanTaskListRelationFilter
  }

  export type EmployeeOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    profilePic?: SortOrderInput | SortOrder
    role?: SortOrder
    reportingManagerId?: SortOrderInput | SortOrder
    teamId?: SortOrderInput | SortOrder
    employeeCode?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    assignedLatitude?: SortOrderInput | SortOrder
    assignedLongitude?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    reportingManager?: EmployeeOrderByWithRelationInput
    subordinates?: EmployeeOrderByRelationAggregateInput
    team?: TeamOrderByWithRelationInput
    leadsTeam?: TeamOrderByWithRelationInput
    territories?: EmployeeTerritoryOrderByRelationAggregateInput
    trainingRecords?: EmployeeTrainingRecordOrderByRelationAggregateInput
    doctorNotes?: DoctorNoteOrderByRelationAggregateInput
    chemistNotes?: ChemistNoteOrderByRelationAggregateInput
    doctorInteractions?: DoctorInteractionOrderByRelationAggregateInput
    chemistInteractions?: ChemistInteractionOrderByRelationAggregateInput
    dcrReports?: DcrReportOrderByRelationAggregateInput
    rcpaReports?: RcpaReportOrderByRelationAggregateInput
    checkIns?: CheckInOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
    ordersCreated?: OrderOrderByRelationAggregateInput
    doctorsCreated?: DoctorOrderByRelationAggregateInput
    drugsCreated?: DrugOrderByRelationAggregateInput
    chemistsCreated?: ChemistOrderByRelationAggregateInput
    doctorChemistRelations?: DoctorChemistRelationOrderByRelationAggregateInput
    expenseClaims?: ExpenseClaimOrderByRelationAggregateInput
    approvedClaims?: ExpenseClaimOrderByRelationAggregateInput
    drugInventories?: UserDrugInventoryOrderByRelationAggregateInput
    giftInventories?: UserGiftInventoryOrderByRelationAggregateInput
    giftsCreated?: GiftOrderByRelationAggregateInput
    doctorDistributions?: DoctorDistributionOrderByRelationAggregateInput
    taskPlans?: TaskPlannerOrderByRelationAggregateInput
    doctorTasks?: DoctorTaskOrderByRelationAggregateInput
    chemistTasks?: ChemistTaskOrderByRelationAggregateInput
    tourPlanTasks?: TourPlanTaskOrderByRelationAggregateInput
  }

  export type EmployeeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    organizationId?: StringFilter<"Employee"> | string
    passwordHash?: StringFilter<"Employee"> | string
    firstName?: StringFilter<"Employee"> | string
    lastName?: StringNullableFilter<"Employee"> | string | null
    phone?: StringNullableFilter<"Employee"> | string | null
    profilePic?: StringNullableFilter<"Employee"> | string | null
    role?: EnumEmployeeRoleFilter<"Employee"> | $Enums.EmployeeRole
    reportingManagerId?: StringNullableFilter<"Employee"> | string | null
    teamId?: StringNullableFilter<"Employee"> | string | null
    employeeCode?: StringNullableFilter<"Employee"> | string | null
    city?: StringNullableFilter<"Employee"> | string | null
    state?: StringNullableFilter<"Employee"> | string | null
    assignedLatitude?: DecimalNullableFilter<"Employee"> | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: DecimalNullableFilter<"Employee"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"Employee"> | Date | string
    updatedAt?: DateTimeFilter<"Employee"> | Date | string
    lastLoginAt?: DateTimeNullableFilter<"Employee"> | Date | string | null
    isActive?: BoolFilter<"Employee"> | boolean
    reportingManager?: XOR<EmployeeNullableScalarRelationFilter, EmployeeWhereInput> | null
    subordinates?: EmployeeListRelationFilter
    team?: XOR<TeamNullableScalarRelationFilter, TeamWhereInput> | null
    leadsTeam?: XOR<TeamNullableScalarRelationFilter, TeamWhereInput> | null
    territories?: EmployeeTerritoryListRelationFilter
    trainingRecords?: EmployeeTrainingRecordListRelationFilter
    doctorNotes?: DoctorNoteListRelationFilter
    chemistNotes?: ChemistNoteListRelationFilter
    doctorInteractions?: DoctorInteractionListRelationFilter
    chemistInteractions?: ChemistInteractionListRelationFilter
    dcrReports?: DcrReportListRelationFilter
    rcpaReports?: RcpaReportListRelationFilter
    checkIns?: CheckInListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    ordersCreated?: OrderListRelationFilter
    doctorsCreated?: DoctorListRelationFilter
    drugsCreated?: DrugListRelationFilter
    chemistsCreated?: ChemistListRelationFilter
    doctorChemistRelations?: DoctorChemistRelationListRelationFilter
    expenseClaims?: ExpenseClaimListRelationFilter
    approvedClaims?: ExpenseClaimListRelationFilter
    drugInventories?: UserDrugInventoryListRelationFilter
    giftInventories?: UserGiftInventoryListRelationFilter
    giftsCreated?: GiftListRelationFilter
    doctorDistributions?: DoctorDistributionListRelationFilter
    taskPlans?: TaskPlannerListRelationFilter
    doctorTasks?: DoctorTaskListRelationFilter
    chemistTasks?: ChemistTaskListRelationFilter
    tourPlanTasks?: TourPlanTaskListRelationFilter
  }, "id" | "email">

  export type EmployeeOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    profilePic?: SortOrderInput | SortOrder
    role?: SortOrder
    reportingManagerId?: SortOrderInput | SortOrder
    teamId?: SortOrderInput | SortOrder
    employeeCode?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    assignedLatitude?: SortOrderInput | SortOrder
    assignedLongitude?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    _count?: EmployeeCountOrderByAggregateInput
    _avg?: EmployeeAvgOrderByAggregateInput
    _max?: EmployeeMaxOrderByAggregateInput
    _min?: EmployeeMinOrderByAggregateInput
    _sum?: EmployeeSumOrderByAggregateInput
  }

  export type EmployeeScalarWhereWithAggregatesInput = {
    AND?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    OR?: EmployeeScalarWhereWithAggregatesInput[]
    NOT?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Employee"> | string
    organizationId?: StringWithAggregatesFilter<"Employee"> | string
    email?: StringWithAggregatesFilter<"Employee"> | string
    passwordHash?: StringWithAggregatesFilter<"Employee"> | string
    firstName?: StringWithAggregatesFilter<"Employee"> | string
    lastName?: StringNullableWithAggregatesFilter<"Employee"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Employee"> | string | null
    profilePic?: StringNullableWithAggregatesFilter<"Employee"> | string | null
    role?: EnumEmployeeRoleWithAggregatesFilter<"Employee"> | $Enums.EmployeeRole
    reportingManagerId?: StringNullableWithAggregatesFilter<"Employee"> | string | null
    teamId?: StringNullableWithAggregatesFilter<"Employee"> | string | null
    employeeCode?: StringNullableWithAggregatesFilter<"Employee"> | string | null
    city?: StringNullableWithAggregatesFilter<"Employee"> | string | null
    state?: StringNullableWithAggregatesFilter<"Employee"> | string | null
    assignedLatitude?: DecimalNullableWithAggregatesFilter<"Employee"> | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: DecimalNullableWithAggregatesFilter<"Employee"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Employee"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Employee"> | Date | string
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"Employee"> | Date | string | null
    isActive?: BoolWithAggregatesFilter<"Employee"> | boolean
  }

  export type TeamWhereInput = {
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    id?: StringFilter<"Team"> | string
    teamName?: StringFilter<"Team"> | string
    leadId?: StringFilter<"Team"> | string
    createdAt?: DateTimeFilter<"Team"> | Date | string
    updatedAt?: DateTimeFilter<"Team"> | Date | string
    isActive?: BoolFilter<"Team"> | boolean
    leadName?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    teamMembers?: EmployeeListRelationFilter
  }

  export type TeamOrderByWithRelationInput = {
    id?: SortOrder
    teamName?: SortOrder
    leadId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    leadName?: EmployeeOrderByWithRelationInput
    teamMembers?: EmployeeOrderByRelationAggregateInput
  }

  export type TeamWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    leadId?: string
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    teamName?: StringFilter<"Team"> | string
    createdAt?: DateTimeFilter<"Team"> | Date | string
    updatedAt?: DateTimeFilter<"Team"> | Date | string
    isActive?: BoolFilter<"Team"> | boolean
    leadName?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    teamMembers?: EmployeeListRelationFilter
  }, "id" | "leadId">

  export type TeamOrderByWithAggregationInput = {
    id?: SortOrder
    teamName?: SortOrder
    leadId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    _count?: TeamCountOrderByAggregateInput
    _max?: TeamMaxOrderByAggregateInput
    _min?: TeamMinOrderByAggregateInput
  }

  export type TeamScalarWhereWithAggregatesInput = {
    AND?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    OR?: TeamScalarWhereWithAggregatesInput[]
    NOT?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Team"> | string
    teamName?: StringWithAggregatesFilter<"Team"> | string
    leadId?: StringWithAggregatesFilter<"Team"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Team"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Team"> | Date | string
    isActive?: BoolWithAggregatesFilter<"Team"> | boolean
  }

  export type TerritoryWhereInput = {
    AND?: TerritoryWhereInput | TerritoryWhereInput[]
    OR?: TerritoryWhereInput[]
    NOT?: TerritoryWhereInput | TerritoryWhereInput[]
    id?: StringFilter<"Territory"> | string
    organizationId?: StringFilter<"Territory"> | string
    name?: StringFilter<"Territory"> | string
    type?: StringFilter<"Territory"> | string
    parentTerritoryId?: StringNullableFilter<"Territory"> | string | null
    boundaries?: JsonNullableFilter<"Territory">
    createdAt?: DateTimeFilter<"Territory"> | Date | string
    updatedAt?: DateTimeFilter<"Territory"> | Date | string
    parentTerritory?: XOR<TerritoryNullableScalarRelationFilter, TerritoryWhereInput> | null
    childTerritories?: TerritoryListRelationFilter
    employees?: EmployeeTerritoryListRelationFilter
    hospitals?: HospitalListRelationFilter
    chemists?: ChemistListRelationFilter
  }

  export type TerritoryOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    parentTerritoryId?: SortOrderInput | SortOrder
    boundaries?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parentTerritory?: TerritoryOrderByWithRelationInput
    childTerritories?: TerritoryOrderByRelationAggregateInput
    employees?: EmployeeTerritoryOrderByRelationAggregateInput
    hospitals?: HospitalOrderByRelationAggregateInput
    chemists?: ChemistOrderByRelationAggregateInput
  }

  export type TerritoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TerritoryWhereInput | TerritoryWhereInput[]
    OR?: TerritoryWhereInput[]
    NOT?: TerritoryWhereInput | TerritoryWhereInput[]
    organizationId?: StringFilter<"Territory"> | string
    name?: StringFilter<"Territory"> | string
    type?: StringFilter<"Territory"> | string
    parentTerritoryId?: StringNullableFilter<"Territory"> | string | null
    boundaries?: JsonNullableFilter<"Territory">
    createdAt?: DateTimeFilter<"Territory"> | Date | string
    updatedAt?: DateTimeFilter<"Territory"> | Date | string
    parentTerritory?: XOR<TerritoryNullableScalarRelationFilter, TerritoryWhereInput> | null
    childTerritories?: TerritoryListRelationFilter
    employees?: EmployeeTerritoryListRelationFilter
    hospitals?: HospitalListRelationFilter
    chemists?: ChemistListRelationFilter
  }, "id">

  export type TerritoryOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    parentTerritoryId?: SortOrderInput | SortOrder
    boundaries?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TerritoryCountOrderByAggregateInput
    _max?: TerritoryMaxOrderByAggregateInput
    _min?: TerritoryMinOrderByAggregateInput
  }

  export type TerritoryScalarWhereWithAggregatesInput = {
    AND?: TerritoryScalarWhereWithAggregatesInput | TerritoryScalarWhereWithAggregatesInput[]
    OR?: TerritoryScalarWhereWithAggregatesInput[]
    NOT?: TerritoryScalarWhereWithAggregatesInput | TerritoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Territory"> | string
    organizationId?: StringWithAggregatesFilter<"Territory"> | string
    name?: StringWithAggregatesFilter<"Territory"> | string
    type?: StringWithAggregatesFilter<"Territory"> | string
    parentTerritoryId?: StringNullableWithAggregatesFilter<"Territory"> | string | null
    boundaries?: JsonNullableWithAggregatesFilter<"Territory">
    createdAt?: DateTimeWithAggregatesFilter<"Territory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Territory"> | Date | string
  }

  export type EmployeeTerritoryWhereInput = {
    AND?: EmployeeTerritoryWhereInput | EmployeeTerritoryWhereInput[]
    OR?: EmployeeTerritoryWhereInput[]
    NOT?: EmployeeTerritoryWhereInput | EmployeeTerritoryWhereInput[]
    id?: StringFilter<"EmployeeTerritory"> | string
    employeeId?: StringFilter<"EmployeeTerritory"> | string
    territoryId?: StringFilter<"EmployeeTerritory"> | string
    assignedAt?: DateTimeFilter<"EmployeeTerritory"> | Date | string
    unassignedAt?: DateTimeNullableFilter<"EmployeeTerritory"> | Date | string | null
    isPrimary?: BoolFilter<"EmployeeTerritory"> | boolean
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    territory?: XOR<TerritoryScalarRelationFilter, TerritoryWhereInput>
  }

  export type EmployeeTerritoryOrderByWithRelationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    territoryId?: SortOrder
    assignedAt?: SortOrder
    unassignedAt?: SortOrderInput | SortOrder
    isPrimary?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
    territory?: TerritoryOrderByWithRelationInput
  }

  export type EmployeeTerritoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EmployeeTerritoryWhereInput | EmployeeTerritoryWhereInput[]
    OR?: EmployeeTerritoryWhereInput[]
    NOT?: EmployeeTerritoryWhereInput | EmployeeTerritoryWhereInput[]
    employeeId?: StringFilter<"EmployeeTerritory"> | string
    territoryId?: StringFilter<"EmployeeTerritory"> | string
    assignedAt?: DateTimeFilter<"EmployeeTerritory"> | Date | string
    unassignedAt?: DateTimeNullableFilter<"EmployeeTerritory"> | Date | string | null
    isPrimary?: BoolFilter<"EmployeeTerritory"> | boolean
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    territory?: XOR<TerritoryScalarRelationFilter, TerritoryWhereInput>
  }, "id">

  export type EmployeeTerritoryOrderByWithAggregationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    territoryId?: SortOrder
    assignedAt?: SortOrder
    unassignedAt?: SortOrderInput | SortOrder
    isPrimary?: SortOrder
    _count?: EmployeeTerritoryCountOrderByAggregateInput
    _max?: EmployeeTerritoryMaxOrderByAggregateInput
    _min?: EmployeeTerritoryMinOrderByAggregateInput
  }

  export type EmployeeTerritoryScalarWhereWithAggregatesInput = {
    AND?: EmployeeTerritoryScalarWhereWithAggregatesInput | EmployeeTerritoryScalarWhereWithAggregatesInput[]
    OR?: EmployeeTerritoryScalarWhereWithAggregatesInput[]
    NOT?: EmployeeTerritoryScalarWhereWithAggregatesInput | EmployeeTerritoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EmployeeTerritory"> | string
    employeeId?: StringWithAggregatesFilter<"EmployeeTerritory"> | string
    territoryId?: StringWithAggregatesFilter<"EmployeeTerritory"> | string
    assignedAt?: DateTimeWithAggregatesFilter<"EmployeeTerritory"> | Date | string
    unassignedAt?: DateTimeNullableWithAggregatesFilter<"EmployeeTerritory"> | Date | string | null
    isPrimary?: BoolWithAggregatesFilter<"EmployeeTerritory"> | boolean
  }

  export type EmployeeTrainingRecordWhereInput = {
    AND?: EmployeeTrainingRecordWhereInput | EmployeeTrainingRecordWhereInput[]
    OR?: EmployeeTrainingRecordWhereInput[]
    NOT?: EmployeeTrainingRecordWhereInput | EmployeeTrainingRecordWhereInput[]
    id?: StringFilter<"EmployeeTrainingRecord"> | string
    employeeId?: StringFilter<"EmployeeTrainingRecord"> | string
    trainingName?: StringFilter<"EmployeeTrainingRecord"> | string
    description?: StringNullableFilter<"EmployeeTrainingRecord"> | string | null
    completionDate?: DateTimeFilter<"EmployeeTrainingRecord"> | Date | string
    createdAt?: DateTimeFilter<"EmployeeTrainingRecord"> | Date | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
  }

  export type EmployeeTrainingRecordOrderByWithRelationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    trainingName?: SortOrder
    description?: SortOrderInput | SortOrder
    completionDate?: SortOrder
    createdAt?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
  }

  export type EmployeeTrainingRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EmployeeTrainingRecordWhereInput | EmployeeTrainingRecordWhereInput[]
    OR?: EmployeeTrainingRecordWhereInput[]
    NOT?: EmployeeTrainingRecordWhereInput | EmployeeTrainingRecordWhereInput[]
    employeeId?: StringFilter<"EmployeeTrainingRecord"> | string
    trainingName?: StringFilter<"EmployeeTrainingRecord"> | string
    description?: StringNullableFilter<"EmployeeTrainingRecord"> | string | null
    completionDate?: DateTimeFilter<"EmployeeTrainingRecord"> | Date | string
    createdAt?: DateTimeFilter<"EmployeeTrainingRecord"> | Date | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
  }, "id">

  export type EmployeeTrainingRecordOrderByWithAggregationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    trainingName?: SortOrder
    description?: SortOrderInput | SortOrder
    completionDate?: SortOrder
    createdAt?: SortOrder
    _count?: EmployeeTrainingRecordCountOrderByAggregateInput
    _max?: EmployeeTrainingRecordMaxOrderByAggregateInput
    _min?: EmployeeTrainingRecordMinOrderByAggregateInput
  }

  export type EmployeeTrainingRecordScalarWhereWithAggregatesInput = {
    AND?: EmployeeTrainingRecordScalarWhereWithAggregatesInput | EmployeeTrainingRecordScalarWhereWithAggregatesInput[]
    OR?: EmployeeTrainingRecordScalarWhereWithAggregatesInput[]
    NOT?: EmployeeTrainingRecordScalarWhereWithAggregatesInput | EmployeeTrainingRecordScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EmployeeTrainingRecord"> | string
    employeeId?: StringWithAggregatesFilter<"EmployeeTrainingRecord"> | string
    trainingName?: StringWithAggregatesFilter<"EmployeeTrainingRecord"> | string
    description?: StringNullableWithAggregatesFilter<"EmployeeTrainingRecord"> | string | null
    completionDate?: DateTimeWithAggregatesFilter<"EmployeeTrainingRecord"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"EmployeeTrainingRecord"> | Date | string
  }

  export type HospitalChainWhereInput = {
    AND?: HospitalChainWhereInput | HospitalChainWhereInput[]
    OR?: HospitalChainWhereInput[]
    NOT?: HospitalChainWhereInput | HospitalChainWhereInput[]
    id?: StringFilter<"HospitalChain"> | string
    organizationId?: StringFilter<"HospitalChain"> | string
    name?: StringFilter<"HospitalChain"> | string
    headquartersAddress?: StringNullableFilter<"HospitalChain"> | string | null
    contactEmail?: StringNullableFilter<"HospitalChain"> | string | null
    contactPhone?: StringNullableFilter<"HospitalChain"> | string | null
    createdAt?: DateTimeFilter<"HospitalChain"> | Date | string
    updatedAt?: DateTimeFilter<"HospitalChain"> | Date | string
    isActive?: BoolFilter<"HospitalChain"> | boolean
    hospitals?: HospitalListRelationFilter
  }

  export type HospitalChainOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    headquartersAddress?: SortOrderInput | SortOrder
    contactEmail?: SortOrderInput | SortOrder
    contactPhone?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    hospitals?: HospitalOrderByRelationAggregateInput
  }

  export type HospitalChainWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: HospitalChainWhereInput | HospitalChainWhereInput[]
    OR?: HospitalChainWhereInput[]
    NOT?: HospitalChainWhereInput | HospitalChainWhereInput[]
    organizationId?: StringFilter<"HospitalChain"> | string
    name?: StringFilter<"HospitalChain"> | string
    headquartersAddress?: StringNullableFilter<"HospitalChain"> | string | null
    contactEmail?: StringNullableFilter<"HospitalChain"> | string | null
    contactPhone?: StringNullableFilter<"HospitalChain"> | string | null
    createdAt?: DateTimeFilter<"HospitalChain"> | Date | string
    updatedAt?: DateTimeFilter<"HospitalChain"> | Date | string
    isActive?: BoolFilter<"HospitalChain"> | boolean
    hospitals?: HospitalListRelationFilter
  }, "id">

  export type HospitalChainOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    headquartersAddress?: SortOrderInput | SortOrder
    contactEmail?: SortOrderInput | SortOrder
    contactPhone?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    _count?: HospitalChainCountOrderByAggregateInput
    _max?: HospitalChainMaxOrderByAggregateInput
    _min?: HospitalChainMinOrderByAggregateInput
  }

  export type HospitalChainScalarWhereWithAggregatesInput = {
    AND?: HospitalChainScalarWhereWithAggregatesInput | HospitalChainScalarWhereWithAggregatesInput[]
    OR?: HospitalChainScalarWhereWithAggregatesInput[]
    NOT?: HospitalChainScalarWhereWithAggregatesInput | HospitalChainScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"HospitalChain"> | string
    organizationId?: StringWithAggregatesFilter<"HospitalChain"> | string
    name?: StringWithAggregatesFilter<"HospitalChain"> | string
    headquartersAddress?: StringNullableWithAggregatesFilter<"HospitalChain"> | string | null
    contactEmail?: StringNullableWithAggregatesFilter<"HospitalChain"> | string | null
    contactPhone?: StringNullableWithAggregatesFilter<"HospitalChain"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"HospitalChain"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"HospitalChain"> | Date | string
    isActive?: BoolWithAggregatesFilter<"HospitalChain"> | boolean
  }

  export type ChemistChainWhereInput = {
    AND?: ChemistChainWhereInput | ChemistChainWhereInput[]
    OR?: ChemistChainWhereInput[]
    NOT?: ChemistChainWhereInput | ChemistChainWhereInput[]
    id?: StringFilter<"ChemistChain"> | string
    organizationId?: StringFilter<"ChemistChain"> | string
    name?: StringFilter<"ChemistChain"> | string
    headquartersAddress?: StringNullableFilter<"ChemistChain"> | string | null
    contactEmail?: StringNullableFilter<"ChemistChain"> | string | null
    contactPhone?: StringNullableFilter<"ChemistChain"> | string | null
    createdAt?: DateTimeFilter<"ChemistChain"> | Date | string
    updatedAt?: DateTimeFilter<"ChemistChain"> | Date | string
    isActive?: BoolFilter<"ChemistChain"> | boolean
    chemists?: ChemistListRelationFilter
  }

  export type ChemistChainOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    headquartersAddress?: SortOrderInput | SortOrder
    contactEmail?: SortOrderInput | SortOrder
    contactPhone?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    chemists?: ChemistOrderByRelationAggregateInput
  }

  export type ChemistChainWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChemistChainWhereInput | ChemistChainWhereInput[]
    OR?: ChemistChainWhereInput[]
    NOT?: ChemistChainWhereInput | ChemistChainWhereInput[]
    organizationId?: StringFilter<"ChemistChain"> | string
    name?: StringFilter<"ChemistChain"> | string
    headquartersAddress?: StringNullableFilter<"ChemistChain"> | string | null
    contactEmail?: StringNullableFilter<"ChemistChain"> | string | null
    contactPhone?: StringNullableFilter<"ChemistChain"> | string | null
    createdAt?: DateTimeFilter<"ChemistChain"> | Date | string
    updatedAt?: DateTimeFilter<"ChemistChain"> | Date | string
    isActive?: BoolFilter<"ChemistChain"> | boolean
    chemists?: ChemistListRelationFilter
  }, "id">

  export type ChemistChainOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    headquartersAddress?: SortOrderInput | SortOrder
    contactEmail?: SortOrderInput | SortOrder
    contactPhone?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    _count?: ChemistChainCountOrderByAggregateInput
    _max?: ChemistChainMaxOrderByAggregateInput
    _min?: ChemistChainMinOrderByAggregateInput
  }

  export type ChemistChainScalarWhereWithAggregatesInput = {
    AND?: ChemistChainScalarWhereWithAggregatesInput | ChemistChainScalarWhereWithAggregatesInput[]
    OR?: ChemistChainScalarWhereWithAggregatesInput[]
    NOT?: ChemistChainScalarWhereWithAggregatesInput | ChemistChainScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChemistChain"> | string
    organizationId?: StringWithAggregatesFilter<"ChemistChain"> | string
    name?: StringWithAggregatesFilter<"ChemistChain"> | string
    headquartersAddress?: StringNullableWithAggregatesFilter<"ChemistChain"> | string | null
    contactEmail?: StringNullableWithAggregatesFilter<"ChemistChain"> | string | null
    contactPhone?: StringNullableWithAggregatesFilter<"ChemistChain"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ChemistChain"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ChemistChain"> | Date | string
    isActive?: BoolWithAggregatesFilter<"ChemistChain"> | boolean
  }

  export type HospitalWhereInput = {
    AND?: HospitalWhereInput | HospitalWhereInput[]
    OR?: HospitalWhereInput[]
    NOT?: HospitalWhereInput | HospitalWhereInput[]
    id?: StringFilter<"Hospital"> | string
    organizationId?: StringFilter<"Hospital"> | string
    hospitalChainId?: StringNullableFilter<"Hospital"> | string | null
    territoryId?: StringFilter<"Hospital"> | string
    name?: StringFilter<"Hospital"> | string
    type?: StringFilter<"Hospital"> | string
    address?: StringFilter<"Hospital"> | string
    city?: StringNullableFilter<"Hospital"> | string | null
    state?: StringNullableFilter<"Hospital"> | string | null
    pincode?: StringNullableFilter<"Hospital"> | string | null
    latitude?: DecimalNullableFilter<"Hospital"> | Decimal | DecimalJsLike | number | string | null
    longitude?: DecimalNullableFilter<"Hospital"> | Decimal | DecimalJsLike | number | string | null
    phone?: StringNullableFilter<"Hospital"> | string | null
    email?: StringNullableFilter<"Hospital"> | string | null
    website?: StringNullableFilter<"Hospital"> | string | null
    description?: StringNullableFilter<"Hospital"> | string | null
    createdAt?: DateTimeFilter<"Hospital"> | Date | string
    updatedAt?: DateTimeFilter<"Hospital"> | Date | string
    isActive?: BoolFilter<"Hospital"> | boolean
    hospitalChain?: XOR<HospitalChainNullableScalarRelationFilter, HospitalChainWhereInput> | null
    territory?: XOR<TerritoryScalarRelationFilter, TerritoryWhereInput>
    doctorAssociations?: DoctorHospitalAssociationListRelationFilter
    consultationSchedules?: DoctorConsultationScheduleListRelationFilter
    doctorInteractions?: DoctorInteractionListRelationFilter
  }

  export type HospitalOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    hospitalChainId?: SortOrderInput | SortOrder
    territoryId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    address?: SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    pincode?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    hospitalChain?: HospitalChainOrderByWithRelationInput
    territory?: TerritoryOrderByWithRelationInput
    doctorAssociations?: DoctorHospitalAssociationOrderByRelationAggregateInput
    consultationSchedules?: DoctorConsultationScheduleOrderByRelationAggregateInput
    doctorInteractions?: DoctorInteractionOrderByRelationAggregateInput
  }

  export type HospitalWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: HospitalWhereInput | HospitalWhereInput[]
    OR?: HospitalWhereInput[]
    NOT?: HospitalWhereInput | HospitalWhereInput[]
    organizationId?: StringFilter<"Hospital"> | string
    hospitalChainId?: StringNullableFilter<"Hospital"> | string | null
    territoryId?: StringFilter<"Hospital"> | string
    name?: StringFilter<"Hospital"> | string
    type?: StringFilter<"Hospital"> | string
    address?: StringFilter<"Hospital"> | string
    city?: StringNullableFilter<"Hospital"> | string | null
    state?: StringNullableFilter<"Hospital"> | string | null
    pincode?: StringNullableFilter<"Hospital"> | string | null
    latitude?: DecimalNullableFilter<"Hospital"> | Decimal | DecimalJsLike | number | string | null
    longitude?: DecimalNullableFilter<"Hospital"> | Decimal | DecimalJsLike | number | string | null
    phone?: StringNullableFilter<"Hospital"> | string | null
    email?: StringNullableFilter<"Hospital"> | string | null
    website?: StringNullableFilter<"Hospital"> | string | null
    description?: StringNullableFilter<"Hospital"> | string | null
    createdAt?: DateTimeFilter<"Hospital"> | Date | string
    updatedAt?: DateTimeFilter<"Hospital"> | Date | string
    isActive?: BoolFilter<"Hospital"> | boolean
    hospitalChain?: XOR<HospitalChainNullableScalarRelationFilter, HospitalChainWhereInput> | null
    territory?: XOR<TerritoryScalarRelationFilter, TerritoryWhereInput>
    doctorAssociations?: DoctorHospitalAssociationListRelationFilter
    consultationSchedules?: DoctorConsultationScheduleListRelationFilter
    doctorInteractions?: DoctorInteractionListRelationFilter
  }, "id">

  export type HospitalOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    hospitalChainId?: SortOrderInput | SortOrder
    territoryId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    address?: SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    pincode?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    _count?: HospitalCountOrderByAggregateInput
    _avg?: HospitalAvgOrderByAggregateInput
    _max?: HospitalMaxOrderByAggregateInput
    _min?: HospitalMinOrderByAggregateInput
    _sum?: HospitalSumOrderByAggregateInput
  }

  export type HospitalScalarWhereWithAggregatesInput = {
    AND?: HospitalScalarWhereWithAggregatesInput | HospitalScalarWhereWithAggregatesInput[]
    OR?: HospitalScalarWhereWithAggregatesInput[]
    NOT?: HospitalScalarWhereWithAggregatesInput | HospitalScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Hospital"> | string
    organizationId?: StringWithAggregatesFilter<"Hospital"> | string
    hospitalChainId?: StringNullableWithAggregatesFilter<"Hospital"> | string | null
    territoryId?: StringWithAggregatesFilter<"Hospital"> | string
    name?: StringWithAggregatesFilter<"Hospital"> | string
    type?: StringWithAggregatesFilter<"Hospital"> | string
    address?: StringWithAggregatesFilter<"Hospital"> | string
    city?: StringNullableWithAggregatesFilter<"Hospital"> | string | null
    state?: StringNullableWithAggregatesFilter<"Hospital"> | string | null
    pincode?: StringNullableWithAggregatesFilter<"Hospital"> | string | null
    latitude?: DecimalNullableWithAggregatesFilter<"Hospital"> | Decimal | DecimalJsLike | number | string | null
    longitude?: DecimalNullableWithAggregatesFilter<"Hospital"> | Decimal | DecimalJsLike | number | string | null
    phone?: StringNullableWithAggregatesFilter<"Hospital"> | string | null
    email?: StringNullableWithAggregatesFilter<"Hospital"> | string | null
    website?: StringNullableWithAggregatesFilter<"Hospital"> | string | null
    description?: StringNullableWithAggregatesFilter<"Hospital"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Hospital"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Hospital"> | Date | string
    isActive?: BoolWithAggregatesFilter<"Hospital"> | boolean
  }

  export type DoctorWhereInput = {
    AND?: DoctorWhereInput | DoctorWhereInput[]
    OR?: DoctorWhereInput[]
    NOT?: DoctorWhereInput | DoctorWhereInput[]
    id?: StringFilter<"Doctor"> | string
    organizationId?: StringFilter<"Doctor"> | string
    name?: StringFilter<"Doctor"> | string
    designation?: StringNullableFilter<"Doctor"> | string | null
    specialization?: StringNullableFilter<"Doctor"> | string | null
    email?: StringNullableFilter<"Doctor"> | string | null
    phone?: StringNullableFilter<"Doctor"> | string | null
    description?: StringNullableFilter<"Doctor"> | string | null
    profilePictureUrl?: StringNullableFilter<"Doctor"> | string | null
    qualification?: StringNullableFilter<"Doctor"> | string | null
    experienceYears?: IntNullableFilter<"Doctor"> | number | null
    createdAt?: DateTimeFilter<"Doctor"> | Date | string
    updatedAt?: DateTimeFilter<"Doctor"> | Date | string
    createdById?: StringFilter<"Doctor"> | string
    isActive?: BoolFilter<"Doctor"> | boolean
    createdBy?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    hospitalAssociations?: DoctorHospitalAssociationListRelationFilter
    consultationSchedules?: DoctorConsultationScheduleListRelationFilter
    interactions?: DoctorInteractionListRelationFilter
    notes?: DoctorNoteListRelationFilter
    chemistRelations?: DoctorChemistRelationListRelationFilter
    DoctorTask?: DoctorTaskListRelationFilter
  }

  export type DoctorOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    designation?: SortOrderInput | SortOrder
    specialization?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    profilePictureUrl?: SortOrderInput | SortOrder
    qualification?: SortOrderInput | SortOrder
    experienceYears?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    isActive?: SortOrder
    createdBy?: EmployeeOrderByWithRelationInput
    hospitalAssociations?: DoctorHospitalAssociationOrderByRelationAggregateInput
    consultationSchedules?: DoctorConsultationScheduleOrderByRelationAggregateInput
    interactions?: DoctorInteractionOrderByRelationAggregateInput
    notes?: DoctorNoteOrderByRelationAggregateInput
    chemistRelations?: DoctorChemistRelationOrderByRelationAggregateInput
    DoctorTask?: DoctorTaskOrderByRelationAggregateInput
  }

  export type DoctorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DoctorWhereInput | DoctorWhereInput[]
    OR?: DoctorWhereInput[]
    NOT?: DoctorWhereInput | DoctorWhereInput[]
    organizationId?: StringFilter<"Doctor"> | string
    name?: StringFilter<"Doctor"> | string
    designation?: StringNullableFilter<"Doctor"> | string | null
    specialization?: StringNullableFilter<"Doctor"> | string | null
    email?: StringNullableFilter<"Doctor"> | string | null
    phone?: StringNullableFilter<"Doctor"> | string | null
    description?: StringNullableFilter<"Doctor"> | string | null
    profilePictureUrl?: StringNullableFilter<"Doctor"> | string | null
    qualification?: StringNullableFilter<"Doctor"> | string | null
    experienceYears?: IntNullableFilter<"Doctor"> | number | null
    createdAt?: DateTimeFilter<"Doctor"> | Date | string
    updatedAt?: DateTimeFilter<"Doctor"> | Date | string
    createdById?: StringFilter<"Doctor"> | string
    isActive?: BoolFilter<"Doctor"> | boolean
    createdBy?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    hospitalAssociations?: DoctorHospitalAssociationListRelationFilter
    consultationSchedules?: DoctorConsultationScheduleListRelationFilter
    interactions?: DoctorInteractionListRelationFilter
    notes?: DoctorNoteListRelationFilter
    chemistRelations?: DoctorChemistRelationListRelationFilter
    DoctorTask?: DoctorTaskListRelationFilter
  }, "id">

  export type DoctorOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    designation?: SortOrderInput | SortOrder
    specialization?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    profilePictureUrl?: SortOrderInput | SortOrder
    qualification?: SortOrderInput | SortOrder
    experienceYears?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    isActive?: SortOrder
    _count?: DoctorCountOrderByAggregateInput
    _avg?: DoctorAvgOrderByAggregateInput
    _max?: DoctorMaxOrderByAggregateInput
    _min?: DoctorMinOrderByAggregateInput
    _sum?: DoctorSumOrderByAggregateInput
  }

  export type DoctorScalarWhereWithAggregatesInput = {
    AND?: DoctorScalarWhereWithAggregatesInput | DoctorScalarWhereWithAggregatesInput[]
    OR?: DoctorScalarWhereWithAggregatesInput[]
    NOT?: DoctorScalarWhereWithAggregatesInput | DoctorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Doctor"> | string
    organizationId?: StringWithAggregatesFilter<"Doctor"> | string
    name?: StringWithAggregatesFilter<"Doctor"> | string
    designation?: StringNullableWithAggregatesFilter<"Doctor"> | string | null
    specialization?: StringNullableWithAggregatesFilter<"Doctor"> | string | null
    email?: StringNullableWithAggregatesFilter<"Doctor"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Doctor"> | string | null
    description?: StringNullableWithAggregatesFilter<"Doctor"> | string | null
    profilePictureUrl?: StringNullableWithAggregatesFilter<"Doctor"> | string | null
    qualification?: StringNullableWithAggregatesFilter<"Doctor"> | string | null
    experienceYears?: IntNullableWithAggregatesFilter<"Doctor"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Doctor"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Doctor"> | Date | string
    createdById?: StringWithAggregatesFilter<"Doctor"> | string
    isActive?: BoolWithAggregatesFilter<"Doctor"> | boolean
  }

  export type DoctorHospitalAssociationWhereInput = {
    AND?: DoctorHospitalAssociationWhereInput | DoctorHospitalAssociationWhereInput[]
    OR?: DoctorHospitalAssociationWhereInput[]
    NOT?: DoctorHospitalAssociationWhereInput | DoctorHospitalAssociationWhereInput[]
    id?: StringFilter<"DoctorHospitalAssociation"> | string
    doctorId?: StringFilter<"DoctorHospitalAssociation"> | string
    hospitalId?: StringFilter<"DoctorHospitalAssociation"> | string
    department?: StringNullableFilter<"DoctorHospitalAssociation"> | string | null
    position?: StringNullableFilter<"DoctorHospitalAssociation"> | string | null
    isPrimary?: BoolFilter<"DoctorHospitalAssociation"> | boolean
    associationStartDate?: DateTimeNullableFilter<"DoctorHospitalAssociation"> | Date | string | null
    associationEndDate?: DateTimeNullableFilter<"DoctorHospitalAssociation"> | Date | string | null
    createdAt?: DateTimeFilter<"DoctorHospitalAssociation"> | Date | string
    updatedAt?: DateTimeFilter<"DoctorHospitalAssociation"> | Date | string
    doctor?: XOR<DoctorScalarRelationFilter, DoctorWhereInput>
    hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
  }

  export type DoctorHospitalAssociationOrderByWithRelationInput = {
    id?: SortOrder
    doctorId?: SortOrder
    hospitalId?: SortOrder
    department?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    isPrimary?: SortOrder
    associationStartDate?: SortOrderInput | SortOrder
    associationEndDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    doctor?: DoctorOrderByWithRelationInput
    hospital?: HospitalOrderByWithRelationInput
  }

  export type DoctorHospitalAssociationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    doctorId_hospitalId?: DoctorHospitalAssociationDoctorIdHospitalIdCompoundUniqueInput
    AND?: DoctorHospitalAssociationWhereInput | DoctorHospitalAssociationWhereInput[]
    OR?: DoctorHospitalAssociationWhereInput[]
    NOT?: DoctorHospitalAssociationWhereInput | DoctorHospitalAssociationWhereInput[]
    doctorId?: StringFilter<"DoctorHospitalAssociation"> | string
    hospitalId?: StringFilter<"DoctorHospitalAssociation"> | string
    department?: StringNullableFilter<"DoctorHospitalAssociation"> | string | null
    position?: StringNullableFilter<"DoctorHospitalAssociation"> | string | null
    isPrimary?: BoolFilter<"DoctorHospitalAssociation"> | boolean
    associationStartDate?: DateTimeNullableFilter<"DoctorHospitalAssociation"> | Date | string | null
    associationEndDate?: DateTimeNullableFilter<"DoctorHospitalAssociation"> | Date | string | null
    createdAt?: DateTimeFilter<"DoctorHospitalAssociation"> | Date | string
    updatedAt?: DateTimeFilter<"DoctorHospitalAssociation"> | Date | string
    doctor?: XOR<DoctorScalarRelationFilter, DoctorWhereInput>
    hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
  }, "id" | "doctorId_hospitalId">

  export type DoctorHospitalAssociationOrderByWithAggregationInput = {
    id?: SortOrder
    doctorId?: SortOrder
    hospitalId?: SortOrder
    department?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    isPrimary?: SortOrder
    associationStartDate?: SortOrderInput | SortOrder
    associationEndDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DoctorHospitalAssociationCountOrderByAggregateInput
    _max?: DoctorHospitalAssociationMaxOrderByAggregateInput
    _min?: DoctorHospitalAssociationMinOrderByAggregateInput
  }

  export type DoctorHospitalAssociationScalarWhereWithAggregatesInput = {
    AND?: DoctorHospitalAssociationScalarWhereWithAggregatesInput | DoctorHospitalAssociationScalarWhereWithAggregatesInput[]
    OR?: DoctorHospitalAssociationScalarWhereWithAggregatesInput[]
    NOT?: DoctorHospitalAssociationScalarWhereWithAggregatesInput | DoctorHospitalAssociationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DoctorHospitalAssociation"> | string
    doctorId?: StringWithAggregatesFilter<"DoctorHospitalAssociation"> | string
    hospitalId?: StringWithAggregatesFilter<"DoctorHospitalAssociation"> | string
    department?: StringNullableWithAggregatesFilter<"DoctorHospitalAssociation"> | string | null
    position?: StringNullableWithAggregatesFilter<"DoctorHospitalAssociation"> | string | null
    isPrimary?: BoolWithAggregatesFilter<"DoctorHospitalAssociation"> | boolean
    associationStartDate?: DateTimeNullableWithAggregatesFilter<"DoctorHospitalAssociation"> | Date | string | null
    associationEndDate?: DateTimeNullableWithAggregatesFilter<"DoctorHospitalAssociation"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"DoctorHospitalAssociation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DoctorHospitalAssociation"> | Date | string
  }

  export type DoctorConsultationScheduleWhereInput = {
    AND?: DoctorConsultationScheduleWhereInput | DoctorConsultationScheduleWhereInput[]
    OR?: DoctorConsultationScheduleWhereInput[]
    NOT?: DoctorConsultationScheduleWhereInput | DoctorConsultationScheduleWhereInput[]
    id?: StringFilter<"DoctorConsultationSchedule"> | string
    doctorId?: StringFilter<"DoctorConsultationSchedule"> | string
    hospitalId?: StringFilter<"DoctorConsultationSchedule"> | string
    dayOfWeek?: EnumDayOfWeekFilter<"DoctorConsultationSchedule"> | $Enums.DayOfWeek
    startTime?: DateTimeFilter<"DoctorConsultationSchedule"> | Date | string
    endTime?: DateTimeFilter<"DoctorConsultationSchedule"> | Date | string
    consultationType?: EnumConsultationTypeFilter<"DoctorConsultationSchedule"> | $Enums.ConsultationType
    isActive?: BoolFilter<"DoctorConsultationSchedule"> | boolean
    effectiveFrom?: DateTimeNullableFilter<"DoctorConsultationSchedule"> | Date | string | null
    effectiveTo?: DateTimeNullableFilter<"DoctorConsultationSchedule"> | Date | string | null
    createdAt?: DateTimeFilter<"DoctorConsultationSchedule"> | Date | string
    updatedAt?: DateTimeFilter<"DoctorConsultationSchedule"> | Date | string
    doctor?: XOR<DoctorScalarRelationFilter, DoctorWhereInput>
    hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
  }

  export type DoctorConsultationScheduleOrderByWithRelationInput = {
    id?: SortOrder
    doctorId?: SortOrder
    hospitalId?: SortOrder
    dayOfWeek?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    consultationType?: SortOrder
    isActive?: SortOrder
    effectiveFrom?: SortOrderInput | SortOrder
    effectiveTo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    doctor?: DoctorOrderByWithRelationInput
    hospital?: HospitalOrderByWithRelationInput
  }

  export type DoctorConsultationScheduleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DoctorConsultationScheduleWhereInput | DoctorConsultationScheduleWhereInput[]
    OR?: DoctorConsultationScheduleWhereInput[]
    NOT?: DoctorConsultationScheduleWhereInput | DoctorConsultationScheduleWhereInput[]
    doctorId?: StringFilter<"DoctorConsultationSchedule"> | string
    hospitalId?: StringFilter<"DoctorConsultationSchedule"> | string
    dayOfWeek?: EnumDayOfWeekFilter<"DoctorConsultationSchedule"> | $Enums.DayOfWeek
    startTime?: DateTimeFilter<"DoctorConsultationSchedule"> | Date | string
    endTime?: DateTimeFilter<"DoctorConsultationSchedule"> | Date | string
    consultationType?: EnumConsultationTypeFilter<"DoctorConsultationSchedule"> | $Enums.ConsultationType
    isActive?: BoolFilter<"DoctorConsultationSchedule"> | boolean
    effectiveFrom?: DateTimeNullableFilter<"DoctorConsultationSchedule"> | Date | string | null
    effectiveTo?: DateTimeNullableFilter<"DoctorConsultationSchedule"> | Date | string | null
    createdAt?: DateTimeFilter<"DoctorConsultationSchedule"> | Date | string
    updatedAt?: DateTimeFilter<"DoctorConsultationSchedule"> | Date | string
    doctor?: XOR<DoctorScalarRelationFilter, DoctorWhereInput>
    hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
  }, "id">

  export type DoctorConsultationScheduleOrderByWithAggregationInput = {
    id?: SortOrder
    doctorId?: SortOrder
    hospitalId?: SortOrder
    dayOfWeek?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    consultationType?: SortOrder
    isActive?: SortOrder
    effectiveFrom?: SortOrderInput | SortOrder
    effectiveTo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DoctorConsultationScheduleCountOrderByAggregateInput
    _max?: DoctorConsultationScheduleMaxOrderByAggregateInput
    _min?: DoctorConsultationScheduleMinOrderByAggregateInput
  }

  export type DoctorConsultationScheduleScalarWhereWithAggregatesInput = {
    AND?: DoctorConsultationScheduleScalarWhereWithAggregatesInput | DoctorConsultationScheduleScalarWhereWithAggregatesInput[]
    OR?: DoctorConsultationScheduleScalarWhereWithAggregatesInput[]
    NOT?: DoctorConsultationScheduleScalarWhereWithAggregatesInput | DoctorConsultationScheduleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DoctorConsultationSchedule"> | string
    doctorId?: StringWithAggregatesFilter<"DoctorConsultationSchedule"> | string
    hospitalId?: StringWithAggregatesFilter<"DoctorConsultationSchedule"> | string
    dayOfWeek?: EnumDayOfWeekWithAggregatesFilter<"DoctorConsultationSchedule"> | $Enums.DayOfWeek
    startTime?: DateTimeWithAggregatesFilter<"DoctorConsultationSchedule"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"DoctorConsultationSchedule"> | Date | string
    consultationType?: EnumConsultationTypeWithAggregatesFilter<"DoctorConsultationSchedule"> | $Enums.ConsultationType
    isActive?: BoolWithAggregatesFilter<"DoctorConsultationSchedule"> | boolean
    effectiveFrom?: DateTimeNullableWithAggregatesFilter<"DoctorConsultationSchedule"> | Date | string | null
    effectiveTo?: DateTimeNullableWithAggregatesFilter<"DoctorConsultationSchedule"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"DoctorConsultationSchedule"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DoctorConsultationSchedule"> | Date | string
  }

  export type DoctorNoteWhereInput = {
    AND?: DoctorNoteWhereInput | DoctorNoteWhereInput[]
    OR?: DoctorNoteWhereInput[]
    NOT?: DoctorNoteWhereInput | DoctorNoteWhereInput[]
    id?: StringFilter<"DoctorNote"> | string
    doctorId?: StringFilter<"DoctorNote"> | string
    createdById?: StringFilter<"DoctorNote"> | string
    content?: StringFilter<"DoctorNote"> | string
    createdAt?: DateTimeFilter<"DoctorNote"> | Date | string
    updatedAt?: DateTimeFilter<"DoctorNote"> | Date | string
    doctor?: XOR<DoctorScalarRelationFilter, DoctorWhereInput>
    createdBy?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
  }

  export type DoctorNoteOrderByWithRelationInput = {
    id?: SortOrder
    doctorId?: SortOrder
    createdById?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    doctor?: DoctorOrderByWithRelationInput
    createdBy?: EmployeeOrderByWithRelationInput
  }

  export type DoctorNoteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DoctorNoteWhereInput | DoctorNoteWhereInput[]
    OR?: DoctorNoteWhereInput[]
    NOT?: DoctorNoteWhereInput | DoctorNoteWhereInput[]
    doctorId?: StringFilter<"DoctorNote"> | string
    createdById?: StringFilter<"DoctorNote"> | string
    content?: StringFilter<"DoctorNote"> | string
    createdAt?: DateTimeFilter<"DoctorNote"> | Date | string
    updatedAt?: DateTimeFilter<"DoctorNote"> | Date | string
    doctor?: XOR<DoctorScalarRelationFilter, DoctorWhereInput>
    createdBy?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
  }, "id">

  export type DoctorNoteOrderByWithAggregationInput = {
    id?: SortOrder
    doctorId?: SortOrder
    createdById?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DoctorNoteCountOrderByAggregateInput
    _max?: DoctorNoteMaxOrderByAggregateInput
    _min?: DoctorNoteMinOrderByAggregateInput
  }

  export type DoctorNoteScalarWhereWithAggregatesInput = {
    AND?: DoctorNoteScalarWhereWithAggregatesInput | DoctorNoteScalarWhereWithAggregatesInput[]
    OR?: DoctorNoteScalarWhereWithAggregatesInput[]
    NOT?: DoctorNoteScalarWhereWithAggregatesInput | DoctorNoteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DoctorNote"> | string
    doctorId?: StringWithAggregatesFilter<"DoctorNote"> | string
    createdById?: StringWithAggregatesFilter<"DoctorNote"> | string
    content?: StringWithAggregatesFilter<"DoctorNote"> | string
    createdAt?: DateTimeWithAggregatesFilter<"DoctorNote"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DoctorNote"> | Date | string
  }

  export type DoctorInteractionWhereInput = {
    AND?: DoctorInteractionWhereInput | DoctorInteractionWhereInput[]
    OR?: DoctorInteractionWhereInput[]
    NOT?: DoctorInteractionWhereInput | DoctorInteractionWhereInput[]
    id?: StringFilter<"DoctorInteraction"> | string
    doctorId?: StringFilter<"DoctorInteraction"> | string
    employeeId?: StringFilter<"DoctorInteraction"> | string
    hospitalId?: StringNullableFilter<"DoctorInteraction"> | string | null
    interactionType?: EnumInteractionTypeFilter<"DoctorInteraction"> | $Enums.InteractionType
    startTime?: DateTimeFilter<"DoctorInteraction"> | Date | string
    endTime?: DateTimeNullableFilter<"DoctorInteraction"> | Date | string | null
    purpose?: StringNullableFilter<"DoctorInteraction"> | string | null
    outcome?: StringNullableFilter<"DoctorInteraction"> | string | null
    comments?: StringNullableFilter<"DoctorInteraction"> | string | null
    rating?: IntNullableFilter<"DoctorInteraction"> | number | null
    createdAt?: DateTimeFilter<"DoctorInteraction"> | Date | string
    doctorTaskId?: StringNullableFilter<"DoctorInteraction"> | string | null
    doctor?: XOR<DoctorScalarRelationFilter, DoctorWhereInput>
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    hospital?: XOR<HospitalNullableScalarRelationFilter, HospitalWhereInput> | null
    DoctorDistribution?: DoctorDistributionListRelationFilter
    DoctorTask?: XOR<DoctorTaskNullableScalarRelationFilter, DoctorTaskWhereInput> | null
  }

  export type DoctorInteractionOrderByWithRelationInput = {
    id?: SortOrder
    doctorId?: SortOrder
    employeeId?: SortOrder
    hospitalId?: SortOrderInput | SortOrder
    interactionType?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    purpose?: SortOrderInput | SortOrder
    outcome?: SortOrderInput | SortOrder
    comments?: SortOrderInput | SortOrder
    rating?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    doctorTaskId?: SortOrderInput | SortOrder
    doctor?: DoctorOrderByWithRelationInput
    employee?: EmployeeOrderByWithRelationInput
    hospital?: HospitalOrderByWithRelationInput
    DoctorDistribution?: DoctorDistributionOrderByRelationAggregateInput
    DoctorTask?: DoctorTaskOrderByWithRelationInput
  }

  export type DoctorInteractionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DoctorInteractionWhereInput | DoctorInteractionWhereInput[]
    OR?: DoctorInteractionWhereInput[]
    NOT?: DoctorInteractionWhereInput | DoctorInteractionWhereInput[]
    doctorId?: StringFilter<"DoctorInteraction"> | string
    employeeId?: StringFilter<"DoctorInteraction"> | string
    hospitalId?: StringNullableFilter<"DoctorInteraction"> | string | null
    interactionType?: EnumInteractionTypeFilter<"DoctorInteraction"> | $Enums.InteractionType
    startTime?: DateTimeFilter<"DoctorInteraction"> | Date | string
    endTime?: DateTimeNullableFilter<"DoctorInteraction"> | Date | string | null
    purpose?: StringNullableFilter<"DoctorInteraction"> | string | null
    outcome?: StringNullableFilter<"DoctorInteraction"> | string | null
    comments?: StringNullableFilter<"DoctorInteraction"> | string | null
    rating?: IntNullableFilter<"DoctorInteraction"> | number | null
    createdAt?: DateTimeFilter<"DoctorInteraction"> | Date | string
    doctorTaskId?: StringNullableFilter<"DoctorInteraction"> | string | null
    doctor?: XOR<DoctorScalarRelationFilter, DoctorWhereInput>
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    hospital?: XOR<HospitalNullableScalarRelationFilter, HospitalWhereInput> | null
    DoctorDistribution?: DoctorDistributionListRelationFilter
    DoctorTask?: XOR<DoctorTaskNullableScalarRelationFilter, DoctorTaskWhereInput> | null
  }, "id">

  export type DoctorInteractionOrderByWithAggregationInput = {
    id?: SortOrder
    doctorId?: SortOrder
    employeeId?: SortOrder
    hospitalId?: SortOrderInput | SortOrder
    interactionType?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    purpose?: SortOrderInput | SortOrder
    outcome?: SortOrderInput | SortOrder
    comments?: SortOrderInput | SortOrder
    rating?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    doctorTaskId?: SortOrderInput | SortOrder
    _count?: DoctorInteractionCountOrderByAggregateInput
    _avg?: DoctorInteractionAvgOrderByAggregateInput
    _max?: DoctorInteractionMaxOrderByAggregateInput
    _min?: DoctorInteractionMinOrderByAggregateInput
    _sum?: DoctorInteractionSumOrderByAggregateInput
  }

  export type DoctorInteractionScalarWhereWithAggregatesInput = {
    AND?: DoctorInteractionScalarWhereWithAggregatesInput | DoctorInteractionScalarWhereWithAggregatesInput[]
    OR?: DoctorInteractionScalarWhereWithAggregatesInput[]
    NOT?: DoctorInteractionScalarWhereWithAggregatesInput | DoctorInteractionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DoctorInteraction"> | string
    doctorId?: StringWithAggregatesFilter<"DoctorInteraction"> | string
    employeeId?: StringWithAggregatesFilter<"DoctorInteraction"> | string
    hospitalId?: StringNullableWithAggregatesFilter<"DoctorInteraction"> | string | null
    interactionType?: EnumInteractionTypeWithAggregatesFilter<"DoctorInteraction"> | $Enums.InteractionType
    startTime?: DateTimeWithAggregatesFilter<"DoctorInteraction"> | Date | string
    endTime?: DateTimeNullableWithAggregatesFilter<"DoctorInteraction"> | Date | string | null
    purpose?: StringNullableWithAggregatesFilter<"DoctorInteraction"> | string | null
    outcome?: StringNullableWithAggregatesFilter<"DoctorInteraction"> | string | null
    comments?: StringNullableWithAggregatesFilter<"DoctorInteraction"> | string | null
    rating?: IntNullableWithAggregatesFilter<"DoctorInteraction"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"DoctorInteraction"> | Date | string
    doctorTaskId?: StringNullableWithAggregatesFilter<"DoctorInteraction"> | string | null
  }

  export type DrugWhereInput = {
    AND?: DrugWhereInput | DrugWhereInput[]
    OR?: DrugWhereInput[]
    NOT?: DrugWhereInput | DrugWhereInput[]
    id?: StringFilter<"Drug"> | string
    organizationId?: StringFilter<"Drug"> | string
    name?: StringFilter<"Drug"> | string
    composition?: StringNullableFilter<"Drug"> | string | null
    manufacturer?: StringNullableFilter<"Drug"> | string | null
    indications?: StringNullableFilter<"Drug"> | string | null
    sideEffects?: StringNullableFilter<"Drug"> | string | null
    safetyAdvice?: StringNullableFilter<"Drug"> | string | null
    dosageForms?: JsonNullableFilter<"Drug">
    price?: DecimalNullableFilter<"Drug"> | Decimal | DecimalJsLike | number | string | null
    schedule?: StringNullableFilter<"Drug"> | string | null
    regulatoryApprovals?: StringNullableFilter<"Drug"> | string | null
    category?: StringNullableFilter<"Drug"> | string | null
    isAvailable?: BoolFilter<"Drug"> | boolean
    images?: JsonNullableFilter<"Drug">
    marketingMaterials?: JsonNullableFilter<"Drug">
    createdAt?: DateTimeFilter<"Drug"> | Date | string
    updatedAt?: DateTimeFilter<"Drug"> | Date | string
    createdById?: StringFilter<"Drug"> | string
    isActive?: BoolFilter<"Drug"> | boolean
    createdBy?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    orderItems?: OrderItemListRelationFilter
    rcpaData?: RcpaDrugDataListRelationFilter
    UserDrugInventory?: UserDrugInventoryListRelationFilter
    DoctorDistributionDrugItem?: DoctorDistributionDrugItemListRelationFilter
  }

  export type DrugOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    composition?: SortOrderInput | SortOrder
    manufacturer?: SortOrderInput | SortOrder
    indications?: SortOrderInput | SortOrder
    sideEffects?: SortOrderInput | SortOrder
    safetyAdvice?: SortOrderInput | SortOrder
    dosageForms?: SortOrderInput | SortOrder
    price?: SortOrderInput | SortOrder
    schedule?: SortOrderInput | SortOrder
    regulatoryApprovals?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    isAvailable?: SortOrder
    images?: SortOrderInput | SortOrder
    marketingMaterials?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    isActive?: SortOrder
    createdBy?: EmployeeOrderByWithRelationInput
    orderItems?: OrderItemOrderByRelationAggregateInput
    rcpaData?: RcpaDrugDataOrderByRelationAggregateInput
    UserDrugInventory?: UserDrugInventoryOrderByRelationAggregateInput
    DoctorDistributionDrugItem?: DoctorDistributionDrugItemOrderByRelationAggregateInput
  }

  export type DrugWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DrugWhereInput | DrugWhereInput[]
    OR?: DrugWhereInput[]
    NOT?: DrugWhereInput | DrugWhereInput[]
    organizationId?: StringFilter<"Drug"> | string
    name?: StringFilter<"Drug"> | string
    composition?: StringNullableFilter<"Drug"> | string | null
    manufacturer?: StringNullableFilter<"Drug"> | string | null
    indications?: StringNullableFilter<"Drug"> | string | null
    sideEffects?: StringNullableFilter<"Drug"> | string | null
    safetyAdvice?: StringNullableFilter<"Drug"> | string | null
    dosageForms?: JsonNullableFilter<"Drug">
    price?: DecimalNullableFilter<"Drug"> | Decimal | DecimalJsLike | number | string | null
    schedule?: StringNullableFilter<"Drug"> | string | null
    regulatoryApprovals?: StringNullableFilter<"Drug"> | string | null
    category?: StringNullableFilter<"Drug"> | string | null
    isAvailable?: BoolFilter<"Drug"> | boolean
    images?: JsonNullableFilter<"Drug">
    marketingMaterials?: JsonNullableFilter<"Drug">
    createdAt?: DateTimeFilter<"Drug"> | Date | string
    updatedAt?: DateTimeFilter<"Drug"> | Date | string
    createdById?: StringFilter<"Drug"> | string
    isActive?: BoolFilter<"Drug"> | boolean
    createdBy?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    orderItems?: OrderItemListRelationFilter
    rcpaData?: RcpaDrugDataListRelationFilter
    UserDrugInventory?: UserDrugInventoryListRelationFilter
    DoctorDistributionDrugItem?: DoctorDistributionDrugItemListRelationFilter
  }, "id">

  export type DrugOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    composition?: SortOrderInput | SortOrder
    manufacturer?: SortOrderInput | SortOrder
    indications?: SortOrderInput | SortOrder
    sideEffects?: SortOrderInput | SortOrder
    safetyAdvice?: SortOrderInput | SortOrder
    dosageForms?: SortOrderInput | SortOrder
    price?: SortOrderInput | SortOrder
    schedule?: SortOrderInput | SortOrder
    regulatoryApprovals?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    isAvailable?: SortOrder
    images?: SortOrderInput | SortOrder
    marketingMaterials?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    isActive?: SortOrder
    _count?: DrugCountOrderByAggregateInput
    _avg?: DrugAvgOrderByAggregateInput
    _max?: DrugMaxOrderByAggregateInput
    _min?: DrugMinOrderByAggregateInput
    _sum?: DrugSumOrderByAggregateInput
  }

  export type DrugScalarWhereWithAggregatesInput = {
    AND?: DrugScalarWhereWithAggregatesInput | DrugScalarWhereWithAggregatesInput[]
    OR?: DrugScalarWhereWithAggregatesInput[]
    NOT?: DrugScalarWhereWithAggregatesInput | DrugScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Drug"> | string
    organizationId?: StringWithAggregatesFilter<"Drug"> | string
    name?: StringWithAggregatesFilter<"Drug"> | string
    composition?: StringNullableWithAggregatesFilter<"Drug"> | string | null
    manufacturer?: StringNullableWithAggregatesFilter<"Drug"> | string | null
    indications?: StringNullableWithAggregatesFilter<"Drug"> | string | null
    sideEffects?: StringNullableWithAggregatesFilter<"Drug"> | string | null
    safetyAdvice?: StringNullableWithAggregatesFilter<"Drug"> | string | null
    dosageForms?: JsonNullableWithAggregatesFilter<"Drug">
    price?: DecimalNullableWithAggregatesFilter<"Drug"> | Decimal | DecimalJsLike | number | string | null
    schedule?: StringNullableWithAggregatesFilter<"Drug"> | string | null
    regulatoryApprovals?: StringNullableWithAggregatesFilter<"Drug"> | string | null
    category?: StringNullableWithAggregatesFilter<"Drug"> | string | null
    isAvailable?: BoolWithAggregatesFilter<"Drug"> | boolean
    images?: JsonNullableWithAggregatesFilter<"Drug">
    marketingMaterials?: JsonNullableWithAggregatesFilter<"Drug">
    createdAt?: DateTimeWithAggregatesFilter<"Drug"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Drug"> | Date | string
    createdById?: StringWithAggregatesFilter<"Drug"> | string
    isActive?: BoolWithAggregatesFilter<"Drug"> | boolean
  }

  export type ChemistWhereInput = {
    AND?: ChemistWhereInput | ChemistWhereInput[]
    OR?: ChemistWhereInput[]
    NOT?: ChemistWhereInput | ChemistWhereInput[]
    id?: StringFilter<"Chemist"> | string
    organizationId?: StringFilter<"Chemist"> | string
    chemistChainId?: StringNullableFilter<"Chemist"> | string | null
    territoryId?: StringFilter<"Chemist"> | string
    name?: StringFilter<"Chemist"> | string
    type?: EnumChemistTypeFilter<"Chemist"> | $Enums.ChemistType
    email?: StringNullableFilter<"Chemist"> | string | null
    phone?: StringNullableFilter<"Chemist"> | string | null
    address?: StringNullableFilter<"Chemist"> | string | null
    city?: StringNullableFilter<"Chemist"> | string | null
    state?: StringNullableFilter<"Chemist"> | string | null
    pincode?: StringNullableFilter<"Chemist"> | string | null
    latitude?: DecimalNullableFilter<"Chemist"> | Decimal | DecimalJsLike | number | string | null
    longitude?: DecimalNullableFilter<"Chemist"> | Decimal | DecimalJsLike | number | string | null
    description?: StringNullableFilter<"Chemist"> | string | null
    profilePictureUrl?: StringNullableFilter<"Chemist"> | string | null
    visitingHours?: StringNullableFilter<"Chemist"> | string | null
    createdAt?: DateTimeFilter<"Chemist"> | Date | string
    updatedAt?: DateTimeFilter<"Chemist"> | Date | string
    createdById?: StringFilter<"Chemist"> | string
    isActive?: BoolFilter<"Chemist"> | boolean
    chemistChain?: XOR<ChemistChainNullableScalarRelationFilter, ChemistChainWhereInput> | null
    territory?: XOR<TerritoryScalarRelationFilter, TerritoryWhereInput>
    createdBy?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    notes?: ChemistNoteListRelationFilter
    interactions?: ChemistInteractionListRelationFilter
    doctorRelations?: DoctorChemistRelationListRelationFilter
    orders?: OrderListRelationFilter
    rcpaReports?: RcpaReportListRelationFilter
    chemistTasks?: ChemistTaskListRelationFilter
  }

  export type ChemistOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    chemistChainId?: SortOrderInput | SortOrder
    territoryId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    pincode?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    profilePictureUrl?: SortOrderInput | SortOrder
    visitingHours?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    isActive?: SortOrder
    chemistChain?: ChemistChainOrderByWithRelationInput
    territory?: TerritoryOrderByWithRelationInput
    createdBy?: EmployeeOrderByWithRelationInput
    notes?: ChemistNoteOrderByRelationAggregateInput
    interactions?: ChemistInteractionOrderByRelationAggregateInput
    doctorRelations?: DoctorChemistRelationOrderByRelationAggregateInput
    orders?: OrderOrderByRelationAggregateInput
    rcpaReports?: RcpaReportOrderByRelationAggregateInput
    chemistTasks?: ChemistTaskOrderByRelationAggregateInput
  }

  export type ChemistWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChemistWhereInput | ChemistWhereInput[]
    OR?: ChemistWhereInput[]
    NOT?: ChemistWhereInput | ChemistWhereInput[]
    organizationId?: StringFilter<"Chemist"> | string
    chemistChainId?: StringNullableFilter<"Chemist"> | string | null
    territoryId?: StringFilter<"Chemist"> | string
    name?: StringFilter<"Chemist"> | string
    type?: EnumChemistTypeFilter<"Chemist"> | $Enums.ChemistType
    email?: StringNullableFilter<"Chemist"> | string | null
    phone?: StringNullableFilter<"Chemist"> | string | null
    address?: StringNullableFilter<"Chemist"> | string | null
    city?: StringNullableFilter<"Chemist"> | string | null
    state?: StringNullableFilter<"Chemist"> | string | null
    pincode?: StringNullableFilter<"Chemist"> | string | null
    latitude?: DecimalNullableFilter<"Chemist"> | Decimal | DecimalJsLike | number | string | null
    longitude?: DecimalNullableFilter<"Chemist"> | Decimal | DecimalJsLike | number | string | null
    description?: StringNullableFilter<"Chemist"> | string | null
    profilePictureUrl?: StringNullableFilter<"Chemist"> | string | null
    visitingHours?: StringNullableFilter<"Chemist"> | string | null
    createdAt?: DateTimeFilter<"Chemist"> | Date | string
    updatedAt?: DateTimeFilter<"Chemist"> | Date | string
    createdById?: StringFilter<"Chemist"> | string
    isActive?: BoolFilter<"Chemist"> | boolean
    chemistChain?: XOR<ChemistChainNullableScalarRelationFilter, ChemistChainWhereInput> | null
    territory?: XOR<TerritoryScalarRelationFilter, TerritoryWhereInput>
    createdBy?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    notes?: ChemistNoteListRelationFilter
    interactions?: ChemistInteractionListRelationFilter
    doctorRelations?: DoctorChemistRelationListRelationFilter
    orders?: OrderListRelationFilter
    rcpaReports?: RcpaReportListRelationFilter
    chemistTasks?: ChemistTaskListRelationFilter
  }, "id">

  export type ChemistOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    chemistChainId?: SortOrderInput | SortOrder
    territoryId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    pincode?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    profilePictureUrl?: SortOrderInput | SortOrder
    visitingHours?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    isActive?: SortOrder
    _count?: ChemistCountOrderByAggregateInput
    _avg?: ChemistAvgOrderByAggregateInput
    _max?: ChemistMaxOrderByAggregateInput
    _min?: ChemistMinOrderByAggregateInput
    _sum?: ChemistSumOrderByAggregateInput
  }

  export type ChemistScalarWhereWithAggregatesInput = {
    AND?: ChemistScalarWhereWithAggregatesInput | ChemistScalarWhereWithAggregatesInput[]
    OR?: ChemistScalarWhereWithAggregatesInput[]
    NOT?: ChemistScalarWhereWithAggregatesInput | ChemistScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Chemist"> | string
    organizationId?: StringWithAggregatesFilter<"Chemist"> | string
    chemistChainId?: StringNullableWithAggregatesFilter<"Chemist"> | string | null
    territoryId?: StringWithAggregatesFilter<"Chemist"> | string
    name?: StringWithAggregatesFilter<"Chemist"> | string
    type?: EnumChemistTypeWithAggregatesFilter<"Chemist"> | $Enums.ChemistType
    email?: StringNullableWithAggregatesFilter<"Chemist"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Chemist"> | string | null
    address?: StringNullableWithAggregatesFilter<"Chemist"> | string | null
    city?: StringNullableWithAggregatesFilter<"Chemist"> | string | null
    state?: StringNullableWithAggregatesFilter<"Chemist"> | string | null
    pincode?: StringNullableWithAggregatesFilter<"Chemist"> | string | null
    latitude?: DecimalNullableWithAggregatesFilter<"Chemist"> | Decimal | DecimalJsLike | number | string | null
    longitude?: DecimalNullableWithAggregatesFilter<"Chemist"> | Decimal | DecimalJsLike | number | string | null
    description?: StringNullableWithAggregatesFilter<"Chemist"> | string | null
    profilePictureUrl?: StringNullableWithAggregatesFilter<"Chemist"> | string | null
    visitingHours?: StringNullableWithAggregatesFilter<"Chemist"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Chemist"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Chemist"> | Date | string
    createdById?: StringWithAggregatesFilter<"Chemist"> | string
    isActive?: BoolWithAggregatesFilter<"Chemist"> | boolean
  }

  export type ChemistNoteWhereInput = {
    AND?: ChemistNoteWhereInput | ChemistNoteWhereInput[]
    OR?: ChemistNoteWhereInput[]
    NOT?: ChemistNoteWhereInput | ChemistNoteWhereInput[]
    id?: StringFilter<"ChemistNote"> | string
    chemistId?: StringFilter<"ChemistNote"> | string
    createdById?: StringFilter<"ChemistNote"> | string
    content?: StringFilter<"ChemistNote"> | string
    createdAt?: DateTimeFilter<"ChemistNote"> | Date | string
    updatedAt?: DateTimeFilter<"ChemistNote"> | Date | string
    chemist?: XOR<ChemistScalarRelationFilter, ChemistWhereInput>
    createdBy?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
  }

  export type ChemistNoteOrderByWithRelationInput = {
    id?: SortOrder
    chemistId?: SortOrder
    createdById?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    chemist?: ChemistOrderByWithRelationInput
    createdBy?: EmployeeOrderByWithRelationInput
  }

  export type ChemistNoteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChemistNoteWhereInput | ChemistNoteWhereInput[]
    OR?: ChemistNoteWhereInput[]
    NOT?: ChemistNoteWhereInput | ChemistNoteWhereInput[]
    chemistId?: StringFilter<"ChemistNote"> | string
    createdById?: StringFilter<"ChemistNote"> | string
    content?: StringFilter<"ChemistNote"> | string
    createdAt?: DateTimeFilter<"ChemistNote"> | Date | string
    updatedAt?: DateTimeFilter<"ChemistNote"> | Date | string
    chemist?: XOR<ChemistScalarRelationFilter, ChemistWhereInput>
    createdBy?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
  }, "id">

  export type ChemistNoteOrderByWithAggregationInput = {
    id?: SortOrder
    chemistId?: SortOrder
    createdById?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ChemistNoteCountOrderByAggregateInput
    _max?: ChemistNoteMaxOrderByAggregateInput
    _min?: ChemistNoteMinOrderByAggregateInput
  }

  export type ChemistNoteScalarWhereWithAggregatesInput = {
    AND?: ChemistNoteScalarWhereWithAggregatesInput | ChemistNoteScalarWhereWithAggregatesInput[]
    OR?: ChemistNoteScalarWhereWithAggregatesInput[]
    NOT?: ChemistNoteScalarWhereWithAggregatesInput | ChemistNoteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChemistNote"> | string
    chemistId?: StringWithAggregatesFilter<"ChemistNote"> | string
    createdById?: StringWithAggregatesFilter<"ChemistNote"> | string
    content?: StringWithAggregatesFilter<"ChemistNote"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ChemistNote"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ChemistNote"> | Date | string
  }

  export type ChemistInteractionWhereInput = {
    AND?: ChemistInteractionWhereInput | ChemistInteractionWhereInput[]
    OR?: ChemistInteractionWhereInput[]
    NOT?: ChemistInteractionWhereInput | ChemistInteractionWhereInput[]
    id?: StringFilter<"ChemistInteraction"> | string
    chemistId?: StringFilter<"ChemistInteraction"> | string
    employeeId?: StringFilter<"ChemistInteraction"> | string
    interactionType?: EnumInteractionTypeFilter<"ChemistInteraction"> | $Enums.InteractionType
    startTime?: DateTimeFilter<"ChemistInteraction"> | Date | string
    endTime?: DateTimeNullableFilter<"ChemistInteraction"> | Date | string | null
    purpose?: StringNullableFilter<"ChemistInteraction"> | string | null
    outcome?: StringNullableFilter<"ChemistInteraction"> | string | null
    comments?: StringNullableFilter<"ChemistInteraction"> | string | null
    rating?: IntNullableFilter<"ChemistInteraction"> | number | null
    createdAt?: DateTimeFilter<"ChemistInteraction"> | Date | string
    chemistTaskId?: StringNullableFilter<"ChemistInteraction"> | string | null
    chemist?: XOR<ChemistScalarRelationFilter, ChemistWhereInput>
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    chemistTask?: XOR<ChemistTaskNullableScalarRelationFilter, ChemistTaskWhereInput> | null
  }

  export type ChemistInteractionOrderByWithRelationInput = {
    id?: SortOrder
    chemistId?: SortOrder
    employeeId?: SortOrder
    interactionType?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    purpose?: SortOrderInput | SortOrder
    outcome?: SortOrderInput | SortOrder
    comments?: SortOrderInput | SortOrder
    rating?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    chemistTaskId?: SortOrderInput | SortOrder
    chemist?: ChemistOrderByWithRelationInput
    employee?: EmployeeOrderByWithRelationInput
    chemistTask?: ChemistTaskOrderByWithRelationInput
  }

  export type ChemistInteractionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChemistInteractionWhereInput | ChemistInteractionWhereInput[]
    OR?: ChemistInteractionWhereInput[]
    NOT?: ChemistInteractionWhereInput | ChemistInteractionWhereInput[]
    chemistId?: StringFilter<"ChemistInteraction"> | string
    employeeId?: StringFilter<"ChemistInteraction"> | string
    interactionType?: EnumInteractionTypeFilter<"ChemistInteraction"> | $Enums.InteractionType
    startTime?: DateTimeFilter<"ChemistInteraction"> | Date | string
    endTime?: DateTimeNullableFilter<"ChemistInteraction"> | Date | string | null
    purpose?: StringNullableFilter<"ChemistInteraction"> | string | null
    outcome?: StringNullableFilter<"ChemistInteraction"> | string | null
    comments?: StringNullableFilter<"ChemistInteraction"> | string | null
    rating?: IntNullableFilter<"ChemistInteraction"> | number | null
    createdAt?: DateTimeFilter<"ChemistInteraction"> | Date | string
    chemistTaskId?: StringNullableFilter<"ChemistInteraction"> | string | null
    chemist?: XOR<ChemistScalarRelationFilter, ChemistWhereInput>
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    chemistTask?: XOR<ChemistTaskNullableScalarRelationFilter, ChemistTaskWhereInput> | null
  }, "id">

  export type ChemistInteractionOrderByWithAggregationInput = {
    id?: SortOrder
    chemistId?: SortOrder
    employeeId?: SortOrder
    interactionType?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    purpose?: SortOrderInput | SortOrder
    outcome?: SortOrderInput | SortOrder
    comments?: SortOrderInput | SortOrder
    rating?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    chemistTaskId?: SortOrderInput | SortOrder
    _count?: ChemistInteractionCountOrderByAggregateInput
    _avg?: ChemistInteractionAvgOrderByAggregateInput
    _max?: ChemistInteractionMaxOrderByAggregateInput
    _min?: ChemistInteractionMinOrderByAggregateInput
    _sum?: ChemistInteractionSumOrderByAggregateInput
  }

  export type ChemistInteractionScalarWhereWithAggregatesInput = {
    AND?: ChemistInteractionScalarWhereWithAggregatesInput | ChemistInteractionScalarWhereWithAggregatesInput[]
    OR?: ChemistInteractionScalarWhereWithAggregatesInput[]
    NOT?: ChemistInteractionScalarWhereWithAggregatesInput | ChemistInteractionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChemistInteraction"> | string
    chemistId?: StringWithAggregatesFilter<"ChemistInteraction"> | string
    employeeId?: StringWithAggregatesFilter<"ChemistInteraction"> | string
    interactionType?: EnumInteractionTypeWithAggregatesFilter<"ChemistInteraction"> | $Enums.InteractionType
    startTime?: DateTimeWithAggregatesFilter<"ChemistInteraction"> | Date | string
    endTime?: DateTimeNullableWithAggregatesFilter<"ChemistInteraction"> | Date | string | null
    purpose?: StringNullableWithAggregatesFilter<"ChemistInteraction"> | string | null
    outcome?: StringNullableWithAggregatesFilter<"ChemistInteraction"> | string | null
    comments?: StringNullableWithAggregatesFilter<"ChemistInteraction"> | string | null
    rating?: IntNullableWithAggregatesFilter<"ChemistInteraction"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"ChemistInteraction"> | Date | string
    chemistTaskId?: StringNullableWithAggregatesFilter<"ChemistInteraction"> | string | null
  }

  export type DoctorChemistRelationWhereInput = {
    AND?: DoctorChemistRelationWhereInput | DoctorChemistRelationWhereInput[]
    OR?: DoctorChemistRelationWhereInput[]
    NOT?: DoctorChemistRelationWhereInput | DoctorChemistRelationWhereInput[]
    id?: StringFilter<"DoctorChemistRelation"> | string
    doctorId?: StringFilter<"DoctorChemistRelation"> | string
    chemistId?: StringFilter<"DoctorChemistRelation"> | string
    createdAt?: DateTimeFilter<"DoctorChemistRelation"> | Date | string
    createdById?: StringFilter<"DoctorChemistRelation"> | string
    doctor?: XOR<DoctorScalarRelationFilter, DoctorWhereInput>
    chemist?: XOR<ChemistScalarRelationFilter, ChemistWhereInput>
    createdBy?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
  }

  export type DoctorChemistRelationOrderByWithRelationInput = {
    id?: SortOrder
    doctorId?: SortOrder
    chemistId?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    doctor?: DoctorOrderByWithRelationInput
    chemist?: ChemistOrderByWithRelationInput
    createdBy?: EmployeeOrderByWithRelationInput
  }

  export type DoctorChemistRelationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DoctorChemistRelationWhereInput | DoctorChemistRelationWhereInput[]
    OR?: DoctorChemistRelationWhereInput[]
    NOT?: DoctorChemistRelationWhereInput | DoctorChemistRelationWhereInput[]
    doctorId?: StringFilter<"DoctorChemistRelation"> | string
    chemistId?: StringFilter<"DoctorChemistRelation"> | string
    createdAt?: DateTimeFilter<"DoctorChemistRelation"> | Date | string
    createdById?: StringFilter<"DoctorChemistRelation"> | string
    doctor?: XOR<DoctorScalarRelationFilter, DoctorWhereInput>
    chemist?: XOR<ChemistScalarRelationFilter, ChemistWhereInput>
    createdBy?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
  }, "id">

  export type DoctorChemistRelationOrderByWithAggregationInput = {
    id?: SortOrder
    doctorId?: SortOrder
    chemistId?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    _count?: DoctorChemistRelationCountOrderByAggregateInput
    _max?: DoctorChemistRelationMaxOrderByAggregateInput
    _min?: DoctorChemistRelationMinOrderByAggregateInput
  }

  export type DoctorChemistRelationScalarWhereWithAggregatesInput = {
    AND?: DoctorChemistRelationScalarWhereWithAggregatesInput | DoctorChemistRelationScalarWhereWithAggregatesInput[]
    OR?: DoctorChemistRelationScalarWhereWithAggregatesInput[]
    NOT?: DoctorChemistRelationScalarWhereWithAggregatesInput | DoctorChemistRelationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DoctorChemistRelation"> | string
    doctorId?: StringWithAggregatesFilter<"DoctorChemistRelation"> | string
    chemistId?: StringWithAggregatesFilter<"DoctorChemistRelation"> | string
    createdAt?: DateTimeWithAggregatesFilter<"DoctorChemistRelation"> | Date | string
    createdById?: StringWithAggregatesFilter<"DoctorChemistRelation"> | string
  }

  export type OrderWhereInput = {
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    id?: StringFilter<"Order"> | string
    organizationId?: StringFilter<"Order"> | string
    chemistId?: StringNullableFilter<"Order"> | string | null
    totalAmount?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus
    orderDate?: DateTimeFilter<"Order"> | Date | string
    deliveryDate?: DateTimeNullableFilter<"Order"> | Date | string | null
    specialInstructions?: StringNullableFilter<"Order"> | string | null
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
    createdById?: StringFilter<"Order"> | string
    chemist?: XOR<ChemistNullableScalarRelationFilter, ChemistWhereInput> | null
    createdBy?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    items?: OrderItemListRelationFilter
  }

  export type OrderOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    chemistId?: SortOrderInput | SortOrder
    totalAmount?: SortOrder
    status?: SortOrder
    orderDate?: SortOrder
    deliveryDate?: SortOrderInput | SortOrder
    specialInstructions?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    chemist?: ChemistOrderByWithRelationInput
    createdBy?: EmployeeOrderByWithRelationInput
    items?: OrderItemOrderByRelationAggregateInput
  }

  export type OrderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    organizationId?: StringFilter<"Order"> | string
    chemistId?: StringNullableFilter<"Order"> | string | null
    totalAmount?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus
    orderDate?: DateTimeFilter<"Order"> | Date | string
    deliveryDate?: DateTimeNullableFilter<"Order"> | Date | string | null
    specialInstructions?: StringNullableFilter<"Order"> | string | null
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
    createdById?: StringFilter<"Order"> | string
    chemist?: XOR<ChemistNullableScalarRelationFilter, ChemistWhereInput> | null
    createdBy?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    items?: OrderItemListRelationFilter
  }, "id">

  export type OrderOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    chemistId?: SortOrderInput | SortOrder
    totalAmount?: SortOrder
    status?: SortOrder
    orderDate?: SortOrder
    deliveryDate?: SortOrderInput | SortOrder
    specialInstructions?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    _count?: OrderCountOrderByAggregateInput
    _avg?: OrderAvgOrderByAggregateInput
    _max?: OrderMaxOrderByAggregateInput
    _min?: OrderMinOrderByAggregateInput
    _sum?: OrderSumOrderByAggregateInput
  }

  export type OrderScalarWhereWithAggregatesInput = {
    AND?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    OR?: OrderScalarWhereWithAggregatesInput[]
    NOT?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Order"> | string
    organizationId?: StringWithAggregatesFilter<"Order"> | string
    chemistId?: StringNullableWithAggregatesFilter<"Order"> | string | null
    totalAmount?: DecimalWithAggregatesFilter<"Order"> | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusWithAggregatesFilter<"Order"> | $Enums.OrderStatus
    orderDate?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    deliveryDate?: DateTimeNullableWithAggregatesFilter<"Order"> | Date | string | null
    specialInstructions?: StringNullableWithAggregatesFilter<"Order"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    createdById?: StringWithAggregatesFilter<"Order"> | string
  }

  export type OrderItemWhereInput = {
    AND?: OrderItemWhereInput | OrderItemWhereInput[]
    OR?: OrderItemWhereInput[]
    NOT?: OrderItemWhereInput | OrderItemWhereInput[]
    orderId?: StringFilter<"OrderItem"> | string
    drugId?: StringFilter<"OrderItem"> | string
    quantity?: IntFilter<"OrderItem"> | number
    unitPrice?: DecimalFilter<"OrderItem"> | Decimal | DecimalJsLike | number | string
    subtotal?: DecimalFilter<"OrderItem"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"OrderItem"> | Date | string
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    drug?: XOR<DrugScalarRelationFilter, DrugWhereInput>
  }

  export type OrderItemOrderByWithRelationInput = {
    orderId?: SortOrder
    drugId?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    subtotal?: SortOrder
    createdAt?: SortOrder
    order?: OrderOrderByWithRelationInput
    drug?: DrugOrderByWithRelationInput
  }

  export type OrderItemWhereUniqueInput = Prisma.AtLeast<{
    orderId_drugId?: OrderItemOrderIdDrugIdCompoundUniqueInput
    AND?: OrderItemWhereInput | OrderItemWhereInput[]
    OR?: OrderItemWhereInput[]
    NOT?: OrderItemWhereInput | OrderItemWhereInput[]
    orderId?: StringFilter<"OrderItem"> | string
    drugId?: StringFilter<"OrderItem"> | string
    quantity?: IntFilter<"OrderItem"> | number
    unitPrice?: DecimalFilter<"OrderItem"> | Decimal | DecimalJsLike | number | string
    subtotal?: DecimalFilter<"OrderItem"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"OrderItem"> | Date | string
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    drug?: XOR<DrugScalarRelationFilter, DrugWhereInput>
  }, "orderId_drugId">

  export type OrderItemOrderByWithAggregationInput = {
    orderId?: SortOrder
    drugId?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    subtotal?: SortOrder
    createdAt?: SortOrder
    _count?: OrderItemCountOrderByAggregateInput
    _avg?: OrderItemAvgOrderByAggregateInput
    _max?: OrderItemMaxOrderByAggregateInput
    _min?: OrderItemMinOrderByAggregateInput
    _sum?: OrderItemSumOrderByAggregateInput
  }

  export type OrderItemScalarWhereWithAggregatesInput = {
    AND?: OrderItemScalarWhereWithAggregatesInput | OrderItemScalarWhereWithAggregatesInput[]
    OR?: OrderItemScalarWhereWithAggregatesInput[]
    NOT?: OrderItemScalarWhereWithAggregatesInput | OrderItemScalarWhereWithAggregatesInput[]
    orderId?: StringWithAggregatesFilter<"OrderItem"> | string
    drugId?: StringWithAggregatesFilter<"OrderItem"> | string
    quantity?: IntWithAggregatesFilter<"OrderItem"> | number
    unitPrice?: DecimalWithAggregatesFilter<"OrderItem"> | Decimal | DecimalJsLike | number | string
    subtotal?: DecimalWithAggregatesFilter<"OrderItem"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeWithAggregatesFilter<"OrderItem"> | Date | string
  }

  export type DcrReportWhereInput = {
    AND?: DcrReportWhereInput | DcrReportWhereInput[]
    OR?: DcrReportWhereInput[]
    NOT?: DcrReportWhereInput | DcrReportWhereInput[]
    id?: StringFilter<"DcrReport"> | string
    organizationId?: StringFilter<"DcrReport"> | string
    employeeId?: StringFilter<"DcrReport"> | string
    taskId?: StringNullableFilter<"DcrReport"> | string | null
    taskType?: EnumTaskTypeReferenceNullableFilter<"DcrReport"> | $Enums.TaskTypeReference | null
    reportDate?: DateTimeFilter<"DcrReport"> | Date | string
    productsDiscussed?: StringNullableFilter<"DcrReport"> | string | null
    comments?: StringNullableFilter<"DcrReport"> | string | null
    isDraft?: BoolFilter<"DcrReport"> | boolean
    createdAt?: DateTimeFilter<"DcrReport"> | Date | string
    updatedAt?: DateTimeFilter<"DcrReport"> | Date | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    doctorTask?: XOR<DoctorTaskNullableScalarRelationFilter, DoctorTaskWhereInput> | null
    chemistTask?: XOR<ChemistTaskNullableScalarRelationFilter, ChemistTaskWhereInput> | null
    tourPlanTask?: XOR<TourPlanTaskNullableScalarRelationFilter, TourPlanTaskWhereInput> | null
  }

  export type DcrReportOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    employeeId?: SortOrder
    taskId?: SortOrderInput | SortOrder
    taskType?: SortOrderInput | SortOrder
    reportDate?: SortOrder
    productsDiscussed?: SortOrderInput | SortOrder
    comments?: SortOrderInput | SortOrder
    isDraft?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
    doctorTask?: DoctorTaskOrderByWithRelationInput
    chemistTask?: ChemistTaskOrderByWithRelationInput
    tourPlanTask?: TourPlanTaskOrderByWithRelationInput
  }

  export type DcrReportWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DcrReportWhereInput | DcrReportWhereInput[]
    OR?: DcrReportWhereInput[]
    NOT?: DcrReportWhereInput | DcrReportWhereInput[]
    organizationId?: StringFilter<"DcrReport"> | string
    employeeId?: StringFilter<"DcrReport"> | string
    taskId?: StringNullableFilter<"DcrReport"> | string | null
    taskType?: EnumTaskTypeReferenceNullableFilter<"DcrReport"> | $Enums.TaskTypeReference | null
    reportDate?: DateTimeFilter<"DcrReport"> | Date | string
    productsDiscussed?: StringNullableFilter<"DcrReport"> | string | null
    comments?: StringNullableFilter<"DcrReport"> | string | null
    isDraft?: BoolFilter<"DcrReport"> | boolean
    createdAt?: DateTimeFilter<"DcrReport"> | Date | string
    updatedAt?: DateTimeFilter<"DcrReport"> | Date | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    doctorTask?: XOR<DoctorTaskNullableScalarRelationFilter, DoctorTaskWhereInput> | null
    chemistTask?: XOR<ChemistTaskNullableScalarRelationFilter, ChemistTaskWhereInput> | null
    tourPlanTask?: XOR<TourPlanTaskNullableScalarRelationFilter, TourPlanTaskWhereInput> | null
  }, "id">

  export type DcrReportOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    employeeId?: SortOrder
    taskId?: SortOrderInput | SortOrder
    taskType?: SortOrderInput | SortOrder
    reportDate?: SortOrder
    productsDiscussed?: SortOrderInput | SortOrder
    comments?: SortOrderInput | SortOrder
    isDraft?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DcrReportCountOrderByAggregateInput
    _max?: DcrReportMaxOrderByAggregateInput
    _min?: DcrReportMinOrderByAggregateInput
  }

  export type DcrReportScalarWhereWithAggregatesInput = {
    AND?: DcrReportScalarWhereWithAggregatesInput | DcrReportScalarWhereWithAggregatesInput[]
    OR?: DcrReportScalarWhereWithAggregatesInput[]
    NOT?: DcrReportScalarWhereWithAggregatesInput | DcrReportScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DcrReport"> | string
    organizationId?: StringWithAggregatesFilter<"DcrReport"> | string
    employeeId?: StringWithAggregatesFilter<"DcrReport"> | string
    taskId?: StringNullableWithAggregatesFilter<"DcrReport"> | string | null
    taskType?: EnumTaskTypeReferenceNullableWithAggregatesFilter<"DcrReport"> | $Enums.TaskTypeReference | null
    reportDate?: DateTimeWithAggregatesFilter<"DcrReport"> | Date | string
    productsDiscussed?: StringNullableWithAggregatesFilter<"DcrReport"> | string | null
    comments?: StringNullableWithAggregatesFilter<"DcrReport"> | string | null
    isDraft?: BoolWithAggregatesFilter<"DcrReport"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"DcrReport"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DcrReport"> | Date | string
  }

  export type RcpaReportWhereInput = {
    AND?: RcpaReportWhereInput | RcpaReportWhereInput[]
    OR?: RcpaReportWhereInput[]
    NOT?: RcpaReportWhereInput | RcpaReportWhereInput[]
    id?: StringFilter<"RcpaReport"> | string
    organizationId?: StringFilter<"RcpaReport"> | string
    employeeId?: StringFilter<"RcpaReport"> | string
    chemistId?: StringFilter<"RcpaReport"> | string
    remarks?: StringNullableFilter<"RcpaReport"> | string | null
    createdAt?: DateTimeFilter<"RcpaReport"> | Date | string
    updatedAt?: DateTimeFilter<"RcpaReport"> | Date | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    chemist?: XOR<ChemistScalarRelationFilter, ChemistWhereInput>
    drugData?: RcpaDrugDataListRelationFilter
  }

  export type RcpaReportOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    employeeId?: SortOrder
    chemistId?: SortOrder
    remarks?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
    chemist?: ChemistOrderByWithRelationInput
    drugData?: RcpaDrugDataOrderByRelationAggregateInput
  }

  export type RcpaReportWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RcpaReportWhereInput | RcpaReportWhereInput[]
    OR?: RcpaReportWhereInput[]
    NOT?: RcpaReportWhereInput | RcpaReportWhereInput[]
    organizationId?: StringFilter<"RcpaReport"> | string
    employeeId?: StringFilter<"RcpaReport"> | string
    chemistId?: StringFilter<"RcpaReport"> | string
    remarks?: StringNullableFilter<"RcpaReport"> | string | null
    createdAt?: DateTimeFilter<"RcpaReport"> | Date | string
    updatedAt?: DateTimeFilter<"RcpaReport"> | Date | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    chemist?: XOR<ChemistScalarRelationFilter, ChemistWhereInput>
    drugData?: RcpaDrugDataListRelationFilter
  }, "id">

  export type RcpaReportOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    employeeId?: SortOrder
    chemistId?: SortOrder
    remarks?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RcpaReportCountOrderByAggregateInput
    _max?: RcpaReportMaxOrderByAggregateInput
    _min?: RcpaReportMinOrderByAggregateInput
  }

  export type RcpaReportScalarWhereWithAggregatesInput = {
    AND?: RcpaReportScalarWhereWithAggregatesInput | RcpaReportScalarWhereWithAggregatesInput[]
    OR?: RcpaReportScalarWhereWithAggregatesInput[]
    NOT?: RcpaReportScalarWhereWithAggregatesInput | RcpaReportScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RcpaReport"> | string
    organizationId?: StringWithAggregatesFilter<"RcpaReport"> | string
    employeeId?: StringWithAggregatesFilter<"RcpaReport"> | string
    chemistId?: StringWithAggregatesFilter<"RcpaReport"> | string
    remarks?: StringNullableWithAggregatesFilter<"RcpaReport"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"RcpaReport"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RcpaReport"> | Date | string
  }

  export type RcpaDrugDataWhereInput = {
    AND?: RcpaDrugDataWhereInput | RcpaDrugDataWhereInput[]
    OR?: RcpaDrugDataWhereInput[]
    NOT?: RcpaDrugDataWhereInput | RcpaDrugDataWhereInput[]
    id?: StringFilter<"RcpaDrugData"> | string
    rcpaReportId?: StringFilter<"RcpaDrugData"> | string
    drugId?: StringNullableFilter<"RcpaDrugData"> | string | null
    competitorDrugName?: StringNullableFilter<"RcpaDrugData"> | string | null
    ownQuantity?: IntFilter<"RcpaDrugData"> | number
    competitorQuantity?: IntFilter<"RcpaDrugData"> | number
    createdAt?: DateTimeFilter<"RcpaDrugData"> | Date | string
    rcpaReport?: XOR<RcpaReportScalarRelationFilter, RcpaReportWhereInput>
    drug?: XOR<DrugNullableScalarRelationFilter, DrugWhereInput> | null
  }

  export type RcpaDrugDataOrderByWithRelationInput = {
    id?: SortOrder
    rcpaReportId?: SortOrder
    drugId?: SortOrderInput | SortOrder
    competitorDrugName?: SortOrderInput | SortOrder
    ownQuantity?: SortOrder
    competitorQuantity?: SortOrder
    createdAt?: SortOrder
    rcpaReport?: RcpaReportOrderByWithRelationInput
    drug?: DrugOrderByWithRelationInput
  }

  export type RcpaDrugDataWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RcpaDrugDataWhereInput | RcpaDrugDataWhereInput[]
    OR?: RcpaDrugDataWhereInput[]
    NOT?: RcpaDrugDataWhereInput | RcpaDrugDataWhereInput[]
    rcpaReportId?: StringFilter<"RcpaDrugData"> | string
    drugId?: StringNullableFilter<"RcpaDrugData"> | string | null
    competitorDrugName?: StringNullableFilter<"RcpaDrugData"> | string | null
    ownQuantity?: IntFilter<"RcpaDrugData"> | number
    competitorQuantity?: IntFilter<"RcpaDrugData"> | number
    createdAt?: DateTimeFilter<"RcpaDrugData"> | Date | string
    rcpaReport?: XOR<RcpaReportScalarRelationFilter, RcpaReportWhereInput>
    drug?: XOR<DrugNullableScalarRelationFilter, DrugWhereInput> | null
  }, "id">

  export type RcpaDrugDataOrderByWithAggregationInput = {
    id?: SortOrder
    rcpaReportId?: SortOrder
    drugId?: SortOrderInput | SortOrder
    competitorDrugName?: SortOrderInput | SortOrder
    ownQuantity?: SortOrder
    competitorQuantity?: SortOrder
    createdAt?: SortOrder
    _count?: RcpaDrugDataCountOrderByAggregateInput
    _avg?: RcpaDrugDataAvgOrderByAggregateInput
    _max?: RcpaDrugDataMaxOrderByAggregateInput
    _min?: RcpaDrugDataMinOrderByAggregateInput
    _sum?: RcpaDrugDataSumOrderByAggregateInput
  }

  export type RcpaDrugDataScalarWhereWithAggregatesInput = {
    AND?: RcpaDrugDataScalarWhereWithAggregatesInput | RcpaDrugDataScalarWhereWithAggregatesInput[]
    OR?: RcpaDrugDataScalarWhereWithAggregatesInput[]
    NOT?: RcpaDrugDataScalarWhereWithAggregatesInput | RcpaDrugDataScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RcpaDrugData"> | string
    rcpaReportId?: StringWithAggregatesFilter<"RcpaDrugData"> | string
    drugId?: StringNullableWithAggregatesFilter<"RcpaDrugData"> | string | null
    competitorDrugName?: StringNullableWithAggregatesFilter<"RcpaDrugData"> | string | null
    ownQuantity?: IntWithAggregatesFilter<"RcpaDrugData"> | number
    competitorQuantity?: IntWithAggregatesFilter<"RcpaDrugData"> | number
    createdAt?: DateTimeWithAggregatesFilter<"RcpaDrugData"> | Date | string
  }

  export type CheckInWhereInput = {
    AND?: CheckInWhereInput | CheckInWhereInput[]
    OR?: CheckInWhereInput[]
    NOT?: CheckInWhereInput | CheckInWhereInput[]
    id?: StringFilter<"CheckIn"> | string
    organizationId?: StringFilter<"CheckIn"> | string
    employeeId?: StringFilter<"CheckIn"> | string
    checkInTime?: DateTimeNullableFilter<"CheckIn"> | Date | string | null
    checkOutTime?: DateTimeNullableFilter<"CheckIn"> | Date | string | null
    checkInLatitude?: DecimalNullableFilter<"CheckIn"> | Decimal | DecimalJsLike | number | string | null
    checkInLongitude?: DecimalNullableFilter<"CheckIn"> | Decimal | DecimalJsLike | number | string | null
    checkOutLatitude?: DecimalNullableFilter<"CheckIn"> | Decimal | DecimalJsLike | number | string | null
    checkOutLongitude?: DecimalNullableFilter<"CheckIn"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"CheckIn"> | Date | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
  }

  export type CheckInOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    employeeId?: SortOrder
    checkInTime?: SortOrderInput | SortOrder
    checkOutTime?: SortOrderInput | SortOrder
    checkInLatitude?: SortOrderInput | SortOrder
    checkInLongitude?: SortOrderInput | SortOrder
    checkOutLatitude?: SortOrderInput | SortOrder
    checkOutLongitude?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
  }

  export type CheckInWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CheckInWhereInput | CheckInWhereInput[]
    OR?: CheckInWhereInput[]
    NOT?: CheckInWhereInput | CheckInWhereInput[]
    organizationId?: StringFilter<"CheckIn"> | string
    employeeId?: StringFilter<"CheckIn"> | string
    checkInTime?: DateTimeNullableFilter<"CheckIn"> | Date | string | null
    checkOutTime?: DateTimeNullableFilter<"CheckIn"> | Date | string | null
    checkInLatitude?: DecimalNullableFilter<"CheckIn"> | Decimal | DecimalJsLike | number | string | null
    checkInLongitude?: DecimalNullableFilter<"CheckIn"> | Decimal | DecimalJsLike | number | string | null
    checkOutLatitude?: DecimalNullableFilter<"CheckIn"> | Decimal | DecimalJsLike | number | string | null
    checkOutLongitude?: DecimalNullableFilter<"CheckIn"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"CheckIn"> | Date | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
  }, "id">

  export type CheckInOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    employeeId?: SortOrder
    checkInTime?: SortOrderInput | SortOrder
    checkOutTime?: SortOrderInput | SortOrder
    checkInLatitude?: SortOrderInput | SortOrder
    checkInLongitude?: SortOrderInput | SortOrder
    checkOutLatitude?: SortOrderInput | SortOrder
    checkOutLongitude?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: CheckInCountOrderByAggregateInput
    _avg?: CheckInAvgOrderByAggregateInput
    _max?: CheckInMaxOrderByAggregateInput
    _min?: CheckInMinOrderByAggregateInput
    _sum?: CheckInSumOrderByAggregateInput
  }

  export type CheckInScalarWhereWithAggregatesInput = {
    AND?: CheckInScalarWhereWithAggregatesInput | CheckInScalarWhereWithAggregatesInput[]
    OR?: CheckInScalarWhereWithAggregatesInput[]
    NOT?: CheckInScalarWhereWithAggregatesInput | CheckInScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CheckIn"> | string
    organizationId?: StringWithAggregatesFilter<"CheckIn"> | string
    employeeId?: StringWithAggregatesFilter<"CheckIn"> | string
    checkInTime?: DateTimeNullableWithAggregatesFilter<"CheckIn"> | Date | string | null
    checkOutTime?: DateTimeNullableWithAggregatesFilter<"CheckIn"> | Date | string | null
    checkInLatitude?: DecimalNullableWithAggregatesFilter<"CheckIn"> | Decimal | DecimalJsLike | number | string | null
    checkInLongitude?: DecimalNullableWithAggregatesFilter<"CheckIn"> | Decimal | DecimalJsLike | number | string | null
    checkOutLatitude?: DecimalNullableWithAggregatesFilter<"CheckIn"> | Decimal | DecimalJsLike | number | string | null
    checkOutLongitude?: DecimalNullableWithAggregatesFilter<"CheckIn"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CheckIn"> | Date | string
  }

  export type TaskPlannerWhereInput = {
    AND?: TaskPlannerWhereInput | TaskPlannerWhereInput[]
    OR?: TaskPlannerWhereInput[]
    NOT?: TaskPlannerWhereInput | TaskPlannerWhereInput[]
    id?: StringFilter<"TaskPlanner"> | string
    employeeId?: StringFilter<"TaskPlanner"> | string
    startDate?: DateTimeFilter<"TaskPlanner"> | Date | string
    endDate?: DateTimeFilter<"TaskPlanner"> | Date | string
    status?: EnumTaskPlannerStatusFilter<"TaskPlanner"> | $Enums.TaskPlannerStatus
    createdAt?: DateTimeFilter<"TaskPlanner"> | Date | string
    updatedAt?: DateTimeFilter<"TaskPlanner"> | Date | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    doctorTasks?: DoctorTaskListRelationFilter
    chemistTasks?: ChemistTaskListRelationFilter
    tourPlanTasks?: TourPlanTaskListRelationFilter
  }

  export type TaskPlannerOrderByWithRelationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
    doctorTasks?: DoctorTaskOrderByRelationAggregateInput
    chemistTasks?: ChemistTaskOrderByRelationAggregateInput
    tourPlanTasks?: TourPlanTaskOrderByRelationAggregateInput
  }

  export type TaskPlannerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TaskPlannerWhereInput | TaskPlannerWhereInput[]
    OR?: TaskPlannerWhereInput[]
    NOT?: TaskPlannerWhereInput | TaskPlannerWhereInput[]
    employeeId?: StringFilter<"TaskPlanner"> | string
    startDate?: DateTimeFilter<"TaskPlanner"> | Date | string
    endDate?: DateTimeFilter<"TaskPlanner"> | Date | string
    status?: EnumTaskPlannerStatusFilter<"TaskPlanner"> | $Enums.TaskPlannerStatus
    createdAt?: DateTimeFilter<"TaskPlanner"> | Date | string
    updatedAt?: DateTimeFilter<"TaskPlanner"> | Date | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    doctorTasks?: DoctorTaskListRelationFilter
    chemistTasks?: ChemistTaskListRelationFilter
    tourPlanTasks?: TourPlanTaskListRelationFilter
  }, "id">

  export type TaskPlannerOrderByWithAggregationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TaskPlannerCountOrderByAggregateInput
    _max?: TaskPlannerMaxOrderByAggregateInput
    _min?: TaskPlannerMinOrderByAggregateInput
  }

  export type TaskPlannerScalarWhereWithAggregatesInput = {
    AND?: TaskPlannerScalarWhereWithAggregatesInput | TaskPlannerScalarWhereWithAggregatesInput[]
    OR?: TaskPlannerScalarWhereWithAggregatesInput[]
    NOT?: TaskPlannerScalarWhereWithAggregatesInput | TaskPlannerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TaskPlanner"> | string
    employeeId?: StringWithAggregatesFilter<"TaskPlanner"> | string
    startDate?: DateTimeWithAggregatesFilter<"TaskPlanner"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"TaskPlanner"> | Date | string
    status?: EnumTaskPlannerStatusWithAggregatesFilter<"TaskPlanner"> | $Enums.TaskPlannerStatus
    createdAt?: DateTimeWithAggregatesFilter<"TaskPlanner"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TaskPlanner"> | Date | string
  }

  export type DoctorTaskWhereInput = {
    AND?: DoctorTaskWhereInput | DoctorTaskWhereInput[]
    OR?: DoctorTaskWhereInput[]
    NOT?: DoctorTaskWhereInput | DoctorTaskWhereInput[]
    id?: StringFilter<"DoctorTask"> | string
    plannerId?: StringFilter<"DoctorTask"> | string
    employeeId?: StringFilter<"DoctorTask"> | string
    doctorId?: StringFilter<"DoctorTask"> | string
    taskDate?: DateTimeFilter<"DoctorTask"> | Date | string
    startTime?: DateTimeFilter<"DoctorTask"> | Date | string
    endTime?: DateTimeFilter<"DoctorTask"> | Date | string
    taskStatus?: EnumTaskStatusFilter<"DoctorTask"> | $Enums.TaskStatus
    createdAt?: DateTimeFilter<"DoctorTask"> | Date | string
    updatedAt?: DateTimeFilter<"DoctorTask"> | Date | string
    planner?: XOR<TaskPlannerScalarRelationFilter, TaskPlannerWhereInput>
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    doctor?: XOR<DoctorScalarRelationFilter, DoctorWhereInput>
    doctorInteractions?: DoctorInteractionListRelationFilter
    dcrReports?: DcrReportListRelationFilter
  }

  export type DoctorTaskOrderByWithRelationInput = {
    id?: SortOrder
    plannerId?: SortOrder
    employeeId?: SortOrder
    doctorId?: SortOrder
    taskDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    taskStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    planner?: TaskPlannerOrderByWithRelationInput
    employee?: EmployeeOrderByWithRelationInput
    doctor?: DoctorOrderByWithRelationInput
    doctorInteractions?: DoctorInteractionOrderByRelationAggregateInput
    dcrReports?: DcrReportOrderByRelationAggregateInput
  }

  export type DoctorTaskWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DoctorTaskWhereInput | DoctorTaskWhereInput[]
    OR?: DoctorTaskWhereInput[]
    NOT?: DoctorTaskWhereInput | DoctorTaskWhereInput[]
    plannerId?: StringFilter<"DoctorTask"> | string
    employeeId?: StringFilter<"DoctorTask"> | string
    doctorId?: StringFilter<"DoctorTask"> | string
    taskDate?: DateTimeFilter<"DoctorTask"> | Date | string
    startTime?: DateTimeFilter<"DoctorTask"> | Date | string
    endTime?: DateTimeFilter<"DoctorTask"> | Date | string
    taskStatus?: EnumTaskStatusFilter<"DoctorTask"> | $Enums.TaskStatus
    createdAt?: DateTimeFilter<"DoctorTask"> | Date | string
    updatedAt?: DateTimeFilter<"DoctorTask"> | Date | string
    planner?: XOR<TaskPlannerScalarRelationFilter, TaskPlannerWhereInput>
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    doctor?: XOR<DoctorScalarRelationFilter, DoctorWhereInput>
    doctorInteractions?: DoctorInteractionListRelationFilter
    dcrReports?: DcrReportListRelationFilter
  }, "id">

  export type DoctorTaskOrderByWithAggregationInput = {
    id?: SortOrder
    plannerId?: SortOrder
    employeeId?: SortOrder
    doctorId?: SortOrder
    taskDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    taskStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DoctorTaskCountOrderByAggregateInput
    _max?: DoctorTaskMaxOrderByAggregateInput
    _min?: DoctorTaskMinOrderByAggregateInput
  }

  export type DoctorTaskScalarWhereWithAggregatesInput = {
    AND?: DoctorTaskScalarWhereWithAggregatesInput | DoctorTaskScalarWhereWithAggregatesInput[]
    OR?: DoctorTaskScalarWhereWithAggregatesInput[]
    NOT?: DoctorTaskScalarWhereWithAggregatesInput | DoctorTaskScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DoctorTask"> | string
    plannerId?: StringWithAggregatesFilter<"DoctorTask"> | string
    employeeId?: StringWithAggregatesFilter<"DoctorTask"> | string
    doctorId?: StringWithAggregatesFilter<"DoctorTask"> | string
    taskDate?: DateTimeWithAggregatesFilter<"DoctorTask"> | Date | string
    startTime?: DateTimeWithAggregatesFilter<"DoctorTask"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"DoctorTask"> | Date | string
    taskStatus?: EnumTaskStatusWithAggregatesFilter<"DoctorTask"> | $Enums.TaskStatus
    createdAt?: DateTimeWithAggregatesFilter<"DoctorTask"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DoctorTask"> | Date | string
  }

  export type ChemistTaskWhereInput = {
    AND?: ChemistTaskWhereInput | ChemistTaskWhereInput[]
    OR?: ChemistTaskWhereInput[]
    NOT?: ChemistTaskWhereInput | ChemistTaskWhereInput[]
    id?: StringFilter<"ChemistTask"> | string
    plannerId?: StringFilter<"ChemistTask"> | string
    employeeId?: StringFilter<"ChemistTask"> | string
    chemistId?: StringFilter<"ChemistTask"> | string
    taskDate?: DateTimeFilter<"ChemistTask"> | Date | string
    startTime?: DateTimeFilter<"ChemistTask"> | Date | string
    endTime?: DateTimeFilter<"ChemistTask"> | Date | string
    taskStatus?: EnumTaskStatusFilter<"ChemistTask"> | $Enums.TaskStatus
    createdAt?: DateTimeFilter<"ChemistTask"> | Date | string
    updatedAt?: DateTimeFilter<"ChemistTask"> | Date | string
    planner?: XOR<TaskPlannerScalarRelationFilter, TaskPlannerWhereInput>
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    chemist?: XOR<ChemistScalarRelationFilter, ChemistWhereInput>
    chemistInteractions?: ChemistInteractionListRelationFilter
    dcrReports?: DcrReportListRelationFilter
  }

  export type ChemistTaskOrderByWithRelationInput = {
    id?: SortOrder
    plannerId?: SortOrder
    employeeId?: SortOrder
    chemistId?: SortOrder
    taskDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    taskStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    planner?: TaskPlannerOrderByWithRelationInput
    employee?: EmployeeOrderByWithRelationInput
    chemist?: ChemistOrderByWithRelationInput
    chemistInteractions?: ChemistInteractionOrderByRelationAggregateInput
    dcrReports?: DcrReportOrderByRelationAggregateInput
  }

  export type ChemistTaskWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChemistTaskWhereInput | ChemistTaskWhereInput[]
    OR?: ChemistTaskWhereInput[]
    NOT?: ChemistTaskWhereInput | ChemistTaskWhereInput[]
    plannerId?: StringFilter<"ChemistTask"> | string
    employeeId?: StringFilter<"ChemistTask"> | string
    chemistId?: StringFilter<"ChemistTask"> | string
    taskDate?: DateTimeFilter<"ChemistTask"> | Date | string
    startTime?: DateTimeFilter<"ChemistTask"> | Date | string
    endTime?: DateTimeFilter<"ChemistTask"> | Date | string
    taskStatus?: EnumTaskStatusFilter<"ChemistTask"> | $Enums.TaskStatus
    createdAt?: DateTimeFilter<"ChemistTask"> | Date | string
    updatedAt?: DateTimeFilter<"ChemistTask"> | Date | string
    planner?: XOR<TaskPlannerScalarRelationFilter, TaskPlannerWhereInput>
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    chemist?: XOR<ChemistScalarRelationFilter, ChemistWhereInput>
    chemistInteractions?: ChemistInteractionListRelationFilter
    dcrReports?: DcrReportListRelationFilter
  }, "id">

  export type ChemistTaskOrderByWithAggregationInput = {
    id?: SortOrder
    plannerId?: SortOrder
    employeeId?: SortOrder
    chemistId?: SortOrder
    taskDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    taskStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ChemistTaskCountOrderByAggregateInput
    _max?: ChemistTaskMaxOrderByAggregateInput
    _min?: ChemistTaskMinOrderByAggregateInput
  }

  export type ChemistTaskScalarWhereWithAggregatesInput = {
    AND?: ChemistTaskScalarWhereWithAggregatesInput | ChemistTaskScalarWhereWithAggregatesInput[]
    OR?: ChemistTaskScalarWhereWithAggregatesInput[]
    NOT?: ChemistTaskScalarWhereWithAggregatesInput | ChemistTaskScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChemistTask"> | string
    plannerId?: StringWithAggregatesFilter<"ChemistTask"> | string
    employeeId?: StringWithAggregatesFilter<"ChemistTask"> | string
    chemistId?: StringWithAggregatesFilter<"ChemistTask"> | string
    taskDate?: DateTimeWithAggregatesFilter<"ChemistTask"> | Date | string
    startTime?: DateTimeWithAggregatesFilter<"ChemistTask"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"ChemistTask"> | Date | string
    taskStatus?: EnumTaskStatusWithAggregatesFilter<"ChemistTask"> | $Enums.TaskStatus
    createdAt?: DateTimeWithAggregatesFilter<"ChemistTask"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ChemistTask"> | Date | string
  }

  export type TourPlanTaskWhereInput = {
    AND?: TourPlanTaskWhereInput | TourPlanTaskWhereInput[]
    OR?: TourPlanTaskWhereInput[]
    NOT?: TourPlanTaskWhereInput | TourPlanTaskWhereInput[]
    id?: StringFilter<"TourPlanTask"> | string
    plannerId?: StringFilter<"TourPlanTask"> | string
    employeeId?: StringFilter<"TourPlanTask"> | string
    tourPlanId?: StringFilter<"TourPlanTask"> | string
    location?: StringFilter<"TourPlanTask"> | string
    taskDate?: DateTimeFilter<"TourPlanTask"> | Date | string
    startTime?: DateTimeFilter<"TourPlanTask"> | Date | string
    endTime?: DateTimeFilter<"TourPlanTask"> | Date | string
    taskStatus?: EnumTaskStatusFilter<"TourPlanTask"> | $Enums.TaskStatus
    createdAt?: DateTimeFilter<"TourPlanTask"> | Date | string
    updatedAt?: DateTimeFilter<"TourPlanTask"> | Date | string
    planner?: XOR<TaskPlannerScalarRelationFilter, TaskPlannerWhereInput>
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    tourPlan?: XOR<TourPlanScalarRelationFilter, TourPlanWhereInput>
    tourPlanReports?: TourPlanReportListRelationFilter
    dcrReports?: DcrReportListRelationFilter
  }

  export type TourPlanTaskOrderByWithRelationInput = {
    id?: SortOrder
    plannerId?: SortOrder
    employeeId?: SortOrder
    tourPlanId?: SortOrder
    location?: SortOrder
    taskDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    taskStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    planner?: TaskPlannerOrderByWithRelationInput
    employee?: EmployeeOrderByWithRelationInput
    tourPlan?: TourPlanOrderByWithRelationInput
    tourPlanReports?: TourPlanReportOrderByRelationAggregateInput
    dcrReports?: DcrReportOrderByRelationAggregateInput
  }

  export type TourPlanTaskWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TourPlanTaskWhereInput | TourPlanTaskWhereInput[]
    OR?: TourPlanTaskWhereInput[]
    NOT?: TourPlanTaskWhereInput | TourPlanTaskWhereInput[]
    plannerId?: StringFilter<"TourPlanTask"> | string
    employeeId?: StringFilter<"TourPlanTask"> | string
    tourPlanId?: StringFilter<"TourPlanTask"> | string
    location?: StringFilter<"TourPlanTask"> | string
    taskDate?: DateTimeFilter<"TourPlanTask"> | Date | string
    startTime?: DateTimeFilter<"TourPlanTask"> | Date | string
    endTime?: DateTimeFilter<"TourPlanTask"> | Date | string
    taskStatus?: EnumTaskStatusFilter<"TourPlanTask"> | $Enums.TaskStatus
    createdAt?: DateTimeFilter<"TourPlanTask"> | Date | string
    updatedAt?: DateTimeFilter<"TourPlanTask"> | Date | string
    planner?: XOR<TaskPlannerScalarRelationFilter, TaskPlannerWhereInput>
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    tourPlan?: XOR<TourPlanScalarRelationFilter, TourPlanWhereInput>
    tourPlanReports?: TourPlanReportListRelationFilter
    dcrReports?: DcrReportListRelationFilter
  }, "id">

  export type TourPlanTaskOrderByWithAggregationInput = {
    id?: SortOrder
    plannerId?: SortOrder
    employeeId?: SortOrder
    tourPlanId?: SortOrder
    location?: SortOrder
    taskDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    taskStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TourPlanTaskCountOrderByAggregateInput
    _max?: TourPlanTaskMaxOrderByAggregateInput
    _min?: TourPlanTaskMinOrderByAggregateInput
  }

  export type TourPlanTaskScalarWhereWithAggregatesInput = {
    AND?: TourPlanTaskScalarWhereWithAggregatesInput | TourPlanTaskScalarWhereWithAggregatesInput[]
    OR?: TourPlanTaskScalarWhereWithAggregatesInput[]
    NOT?: TourPlanTaskScalarWhereWithAggregatesInput | TourPlanTaskScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TourPlanTask"> | string
    plannerId?: StringWithAggregatesFilter<"TourPlanTask"> | string
    employeeId?: StringWithAggregatesFilter<"TourPlanTask"> | string
    tourPlanId?: StringWithAggregatesFilter<"TourPlanTask"> | string
    location?: StringWithAggregatesFilter<"TourPlanTask"> | string
    taskDate?: DateTimeWithAggregatesFilter<"TourPlanTask"> | Date | string
    startTime?: DateTimeWithAggregatesFilter<"TourPlanTask"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"TourPlanTask"> | Date | string
    taskStatus?: EnumTaskStatusWithAggregatesFilter<"TourPlanTask"> | $Enums.TaskStatus
    createdAt?: DateTimeWithAggregatesFilter<"TourPlanTask"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TourPlanTask"> | Date | string
  }

  export type TourPlanWhereInput = {
    AND?: TourPlanWhereInput | TourPlanWhereInput[]
    OR?: TourPlanWhereInput[]
    NOT?: TourPlanWhereInput | TourPlanWhereInput[]
    id?: StringFilter<"TourPlan"> | string
    name?: StringFilter<"TourPlan"> | string
    description?: StringNullableFilter<"TourPlan"> | string | null
    createdAt?: DateTimeFilter<"TourPlan"> | Date | string
    updatedAt?: DateTimeFilter<"TourPlan"> | Date | string
    tourTasks?: TourPlanTaskListRelationFilter
  }

  export type TourPlanOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tourTasks?: TourPlanTaskOrderByRelationAggregateInput
  }

  export type TourPlanWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TourPlanWhereInput | TourPlanWhereInput[]
    OR?: TourPlanWhereInput[]
    NOT?: TourPlanWhereInput | TourPlanWhereInput[]
    name?: StringFilter<"TourPlan"> | string
    description?: StringNullableFilter<"TourPlan"> | string | null
    createdAt?: DateTimeFilter<"TourPlan"> | Date | string
    updatedAt?: DateTimeFilter<"TourPlan"> | Date | string
    tourTasks?: TourPlanTaskListRelationFilter
  }, "id">

  export type TourPlanOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TourPlanCountOrderByAggregateInput
    _max?: TourPlanMaxOrderByAggregateInput
    _min?: TourPlanMinOrderByAggregateInput
  }

  export type TourPlanScalarWhereWithAggregatesInput = {
    AND?: TourPlanScalarWhereWithAggregatesInput | TourPlanScalarWhereWithAggregatesInput[]
    OR?: TourPlanScalarWhereWithAggregatesInput[]
    NOT?: TourPlanScalarWhereWithAggregatesInput | TourPlanScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TourPlan"> | string
    name?: StringWithAggregatesFilter<"TourPlan"> | string
    description?: StringNullableWithAggregatesFilter<"TourPlan"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"TourPlan"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TourPlan"> | Date | string
  }

  export type TourPlanReportWhereInput = {
    AND?: TourPlanReportWhereInput | TourPlanReportWhereInput[]
    OR?: TourPlanReportWhereInput[]
    NOT?: TourPlanReportWhereInput | TourPlanReportWhereInput[]
    id?: StringFilter<"TourPlanReport"> | string
    tourTaskId?: StringFilter<"TourPlanReport"> | string
    interactionTime?: DateTimeFilter<"TourPlanReport"> | Date | string
    purpose?: StringNullableFilter<"TourPlanReport"> | string | null
    outcome?: StringNullableFilter<"TourPlanReport"> | string | null
    comments?: StringNullableFilter<"TourPlanReport"> | string | null
    createdAt?: DateTimeFilter<"TourPlanReport"> | Date | string
    updatedAt?: DateTimeFilter<"TourPlanReport"> | Date | string
    tourTask?: XOR<TourPlanTaskScalarRelationFilter, TourPlanTaskWhereInput>
  }

  export type TourPlanReportOrderByWithRelationInput = {
    id?: SortOrder
    tourTaskId?: SortOrder
    interactionTime?: SortOrder
    purpose?: SortOrderInput | SortOrder
    outcome?: SortOrderInput | SortOrder
    comments?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tourTask?: TourPlanTaskOrderByWithRelationInput
  }

  export type TourPlanReportWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TourPlanReportWhereInput | TourPlanReportWhereInput[]
    OR?: TourPlanReportWhereInput[]
    NOT?: TourPlanReportWhereInput | TourPlanReportWhereInput[]
    tourTaskId?: StringFilter<"TourPlanReport"> | string
    interactionTime?: DateTimeFilter<"TourPlanReport"> | Date | string
    purpose?: StringNullableFilter<"TourPlanReport"> | string | null
    outcome?: StringNullableFilter<"TourPlanReport"> | string | null
    comments?: StringNullableFilter<"TourPlanReport"> | string | null
    createdAt?: DateTimeFilter<"TourPlanReport"> | Date | string
    updatedAt?: DateTimeFilter<"TourPlanReport"> | Date | string
    tourTask?: XOR<TourPlanTaskScalarRelationFilter, TourPlanTaskWhereInput>
  }, "id">

  export type TourPlanReportOrderByWithAggregationInput = {
    id?: SortOrder
    tourTaskId?: SortOrder
    interactionTime?: SortOrder
    purpose?: SortOrderInput | SortOrder
    outcome?: SortOrderInput | SortOrder
    comments?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TourPlanReportCountOrderByAggregateInput
    _max?: TourPlanReportMaxOrderByAggregateInput
    _min?: TourPlanReportMinOrderByAggregateInput
  }

  export type TourPlanReportScalarWhereWithAggregatesInput = {
    AND?: TourPlanReportScalarWhereWithAggregatesInput | TourPlanReportScalarWhereWithAggregatesInput[]
    OR?: TourPlanReportScalarWhereWithAggregatesInput[]
    NOT?: TourPlanReportScalarWhereWithAggregatesInput | TourPlanReportScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TourPlanReport"> | string
    tourTaskId?: StringWithAggregatesFilter<"TourPlanReport"> | string
    interactionTime?: DateTimeWithAggregatesFilter<"TourPlanReport"> | Date | string
    purpose?: StringNullableWithAggregatesFilter<"TourPlanReport"> | string | null
    outcome?: StringNullableWithAggregatesFilter<"TourPlanReport"> | string | null
    comments?: StringNullableWithAggregatesFilter<"TourPlanReport"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"TourPlanReport"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TourPlanReport"> | Date | string
  }

  export type ExpenseTypeWhereInput = {
    AND?: ExpenseTypeWhereInput | ExpenseTypeWhereInput[]
    OR?: ExpenseTypeWhereInput[]
    NOT?: ExpenseTypeWhereInput | ExpenseTypeWhereInput[]
    id?: StringFilter<"ExpenseType"> | string
    name?: StringFilter<"ExpenseType"> | string
    description?: StringNullableFilter<"ExpenseType"> | string | null
    icon?: StringNullableFilter<"ExpenseType"> | string | null
    formFields?: JsonFilter<"ExpenseType">
    isActive?: BoolFilter<"ExpenseType"> | boolean
    createdAt?: DateTimeFilter<"ExpenseType"> | Date | string
    updatedAt?: DateTimeFilter<"ExpenseType"> | Date | string
    roleConfigs?: ExpenseRoleConfigListRelationFilter
    expenseClaims?: ExpenseClaimListRelationFilter
  }

  export type ExpenseTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    icon?: SortOrderInput | SortOrder
    formFields?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    roleConfigs?: ExpenseRoleConfigOrderByRelationAggregateInput
    expenseClaims?: ExpenseClaimOrderByRelationAggregateInput
  }

  export type ExpenseTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: ExpenseTypeWhereInput | ExpenseTypeWhereInput[]
    OR?: ExpenseTypeWhereInput[]
    NOT?: ExpenseTypeWhereInput | ExpenseTypeWhereInput[]
    description?: StringNullableFilter<"ExpenseType"> | string | null
    icon?: StringNullableFilter<"ExpenseType"> | string | null
    formFields?: JsonFilter<"ExpenseType">
    isActive?: BoolFilter<"ExpenseType"> | boolean
    createdAt?: DateTimeFilter<"ExpenseType"> | Date | string
    updatedAt?: DateTimeFilter<"ExpenseType"> | Date | string
    roleConfigs?: ExpenseRoleConfigListRelationFilter
    expenseClaims?: ExpenseClaimListRelationFilter
  }, "id" | "name">

  export type ExpenseTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    icon?: SortOrderInput | SortOrder
    formFields?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ExpenseTypeCountOrderByAggregateInput
    _max?: ExpenseTypeMaxOrderByAggregateInput
    _min?: ExpenseTypeMinOrderByAggregateInput
  }

  export type ExpenseTypeScalarWhereWithAggregatesInput = {
    AND?: ExpenseTypeScalarWhereWithAggregatesInput | ExpenseTypeScalarWhereWithAggregatesInput[]
    OR?: ExpenseTypeScalarWhereWithAggregatesInput[]
    NOT?: ExpenseTypeScalarWhereWithAggregatesInput | ExpenseTypeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ExpenseType"> | string
    name?: StringWithAggregatesFilter<"ExpenseType"> | string
    description?: StringNullableWithAggregatesFilter<"ExpenseType"> | string | null
    icon?: StringNullableWithAggregatesFilter<"ExpenseType"> | string | null
    formFields?: JsonWithAggregatesFilter<"ExpenseType">
    isActive?: BoolWithAggregatesFilter<"ExpenseType"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ExpenseType"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ExpenseType"> | Date | string
  }

  export type ExpenseRoleConfigWhereInput = {
    AND?: ExpenseRoleConfigWhereInput | ExpenseRoleConfigWhereInput[]
    OR?: ExpenseRoleConfigWhereInput[]
    NOT?: ExpenseRoleConfigWhereInput | ExpenseRoleConfigWhereInput[]
    id?: StringFilter<"ExpenseRoleConfig"> | string
    expenseTypeId?: StringFilter<"ExpenseRoleConfig"> | string
    role?: EnumEmployeeRoleFilter<"ExpenseRoleConfig"> | $Enums.EmployeeRole
    limits?: JsonFilter<"ExpenseRoleConfig">
    rates?: JsonNullableFilter<"ExpenseRoleConfig">
    validationRules?: JsonFilter<"ExpenseRoleConfig">
    isActive?: BoolFilter<"ExpenseRoleConfig"> | boolean
    createdAt?: DateTimeFilter<"ExpenseRoleConfig"> | Date | string
    updatedAt?: DateTimeFilter<"ExpenseRoleConfig"> | Date | string
    expenseType?: XOR<ExpenseTypeScalarRelationFilter, ExpenseTypeWhereInput>
    expenseClaims?: ExpenseClaimListRelationFilter
  }

  export type ExpenseRoleConfigOrderByWithRelationInput = {
    id?: SortOrder
    expenseTypeId?: SortOrder
    role?: SortOrder
    limits?: SortOrder
    rates?: SortOrderInput | SortOrder
    validationRules?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expenseType?: ExpenseTypeOrderByWithRelationInput
    expenseClaims?: ExpenseClaimOrderByRelationAggregateInput
  }

  export type ExpenseRoleConfigWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    expenseTypeId_role?: ExpenseRoleConfigExpenseTypeIdRoleCompoundUniqueInput
    AND?: ExpenseRoleConfigWhereInput | ExpenseRoleConfigWhereInput[]
    OR?: ExpenseRoleConfigWhereInput[]
    NOT?: ExpenseRoleConfigWhereInput | ExpenseRoleConfigWhereInput[]
    expenseTypeId?: StringFilter<"ExpenseRoleConfig"> | string
    role?: EnumEmployeeRoleFilter<"ExpenseRoleConfig"> | $Enums.EmployeeRole
    limits?: JsonFilter<"ExpenseRoleConfig">
    rates?: JsonNullableFilter<"ExpenseRoleConfig">
    validationRules?: JsonFilter<"ExpenseRoleConfig">
    isActive?: BoolFilter<"ExpenseRoleConfig"> | boolean
    createdAt?: DateTimeFilter<"ExpenseRoleConfig"> | Date | string
    updatedAt?: DateTimeFilter<"ExpenseRoleConfig"> | Date | string
    expenseType?: XOR<ExpenseTypeScalarRelationFilter, ExpenseTypeWhereInput>
    expenseClaims?: ExpenseClaimListRelationFilter
  }, "id" | "expenseTypeId_role">

  export type ExpenseRoleConfigOrderByWithAggregationInput = {
    id?: SortOrder
    expenseTypeId?: SortOrder
    role?: SortOrder
    limits?: SortOrder
    rates?: SortOrderInput | SortOrder
    validationRules?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ExpenseRoleConfigCountOrderByAggregateInput
    _max?: ExpenseRoleConfigMaxOrderByAggregateInput
    _min?: ExpenseRoleConfigMinOrderByAggregateInput
  }

  export type ExpenseRoleConfigScalarWhereWithAggregatesInput = {
    AND?: ExpenseRoleConfigScalarWhereWithAggregatesInput | ExpenseRoleConfigScalarWhereWithAggregatesInput[]
    OR?: ExpenseRoleConfigScalarWhereWithAggregatesInput[]
    NOT?: ExpenseRoleConfigScalarWhereWithAggregatesInput | ExpenseRoleConfigScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ExpenseRoleConfig"> | string
    expenseTypeId?: StringWithAggregatesFilter<"ExpenseRoleConfig"> | string
    role?: EnumEmployeeRoleWithAggregatesFilter<"ExpenseRoleConfig"> | $Enums.EmployeeRole
    limits?: JsonWithAggregatesFilter<"ExpenseRoleConfig">
    rates?: JsonNullableWithAggregatesFilter<"ExpenseRoleConfig">
    validationRules?: JsonWithAggregatesFilter<"ExpenseRoleConfig">
    isActive?: BoolWithAggregatesFilter<"ExpenseRoleConfig"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ExpenseRoleConfig"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ExpenseRoleConfig"> | Date | string
  }

  export type ExpenseClaimWhereInput = {
    AND?: ExpenseClaimWhereInput | ExpenseClaimWhereInput[]
    OR?: ExpenseClaimWhereInput[]
    NOT?: ExpenseClaimWhereInput | ExpenseClaimWhereInput[]
    id?: StringFilter<"ExpenseClaim"> | string
    claimNumber?: StringFilter<"ExpenseClaim"> | string
    employeeId?: StringFilter<"ExpenseClaim"> | string
    expenseTypeId?: StringFilter<"ExpenseClaim"> | string
    expenseRoleConfigId?: StringFilter<"ExpenseClaim"> | string
    expenseData?: JsonFilter<"ExpenseClaim">
    status?: EnumExpenseClaimStatusFilter<"ExpenseClaim"> | $Enums.ExpenseClaimStatus
    submittedAt?: DateTimeFilter<"ExpenseClaim"> | Date | string
    approvedAt?: DateTimeNullableFilter<"ExpenseClaim"> | Date | string | null
    approvedBy?: StringNullableFilter<"ExpenseClaim"> | string | null
    approvalComments?: StringNullableFilter<"ExpenseClaim"> | string | null
    rejectionReason?: StringNullableFilter<"ExpenseClaim"> | string | null
    createdAt?: DateTimeFilter<"ExpenseClaim"> | Date | string
    updatedAt?: DateTimeFilter<"ExpenseClaim"> | Date | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    expenseType?: XOR<ExpenseTypeScalarRelationFilter, ExpenseTypeWhereInput>
    expenseRoleConfig?: XOR<ExpenseRoleConfigScalarRelationFilter, ExpenseRoleConfigWhereInput>
    approver?: XOR<EmployeeNullableScalarRelationFilter, EmployeeWhereInput> | null
  }

  export type ExpenseClaimOrderByWithRelationInput = {
    id?: SortOrder
    claimNumber?: SortOrder
    employeeId?: SortOrder
    expenseTypeId?: SortOrder
    expenseRoleConfigId?: SortOrder
    expenseData?: SortOrder
    status?: SortOrder
    submittedAt?: SortOrder
    approvedAt?: SortOrderInput | SortOrder
    approvedBy?: SortOrderInput | SortOrder
    approvalComments?: SortOrderInput | SortOrder
    rejectionReason?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
    expenseType?: ExpenseTypeOrderByWithRelationInput
    expenseRoleConfig?: ExpenseRoleConfigOrderByWithRelationInput
    approver?: EmployeeOrderByWithRelationInput
  }

  export type ExpenseClaimWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    claimNumber?: string
    AND?: ExpenseClaimWhereInput | ExpenseClaimWhereInput[]
    OR?: ExpenseClaimWhereInput[]
    NOT?: ExpenseClaimWhereInput | ExpenseClaimWhereInput[]
    employeeId?: StringFilter<"ExpenseClaim"> | string
    expenseTypeId?: StringFilter<"ExpenseClaim"> | string
    expenseRoleConfigId?: StringFilter<"ExpenseClaim"> | string
    expenseData?: JsonFilter<"ExpenseClaim">
    status?: EnumExpenseClaimStatusFilter<"ExpenseClaim"> | $Enums.ExpenseClaimStatus
    submittedAt?: DateTimeFilter<"ExpenseClaim"> | Date | string
    approvedAt?: DateTimeNullableFilter<"ExpenseClaim"> | Date | string | null
    approvedBy?: StringNullableFilter<"ExpenseClaim"> | string | null
    approvalComments?: StringNullableFilter<"ExpenseClaim"> | string | null
    rejectionReason?: StringNullableFilter<"ExpenseClaim"> | string | null
    createdAt?: DateTimeFilter<"ExpenseClaim"> | Date | string
    updatedAt?: DateTimeFilter<"ExpenseClaim"> | Date | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    expenseType?: XOR<ExpenseTypeScalarRelationFilter, ExpenseTypeWhereInput>
    expenseRoleConfig?: XOR<ExpenseRoleConfigScalarRelationFilter, ExpenseRoleConfigWhereInput>
    approver?: XOR<EmployeeNullableScalarRelationFilter, EmployeeWhereInput> | null
  }, "id" | "claimNumber">

  export type ExpenseClaimOrderByWithAggregationInput = {
    id?: SortOrder
    claimNumber?: SortOrder
    employeeId?: SortOrder
    expenseTypeId?: SortOrder
    expenseRoleConfigId?: SortOrder
    expenseData?: SortOrder
    status?: SortOrder
    submittedAt?: SortOrder
    approvedAt?: SortOrderInput | SortOrder
    approvedBy?: SortOrderInput | SortOrder
    approvalComments?: SortOrderInput | SortOrder
    rejectionReason?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ExpenseClaimCountOrderByAggregateInput
    _max?: ExpenseClaimMaxOrderByAggregateInput
    _min?: ExpenseClaimMinOrderByAggregateInput
  }

  export type ExpenseClaimScalarWhereWithAggregatesInput = {
    AND?: ExpenseClaimScalarWhereWithAggregatesInput | ExpenseClaimScalarWhereWithAggregatesInput[]
    OR?: ExpenseClaimScalarWhereWithAggregatesInput[]
    NOT?: ExpenseClaimScalarWhereWithAggregatesInput | ExpenseClaimScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ExpenseClaim"> | string
    claimNumber?: StringWithAggregatesFilter<"ExpenseClaim"> | string
    employeeId?: StringWithAggregatesFilter<"ExpenseClaim"> | string
    expenseTypeId?: StringWithAggregatesFilter<"ExpenseClaim"> | string
    expenseRoleConfigId?: StringWithAggregatesFilter<"ExpenseClaim"> | string
    expenseData?: JsonWithAggregatesFilter<"ExpenseClaim">
    status?: EnumExpenseClaimStatusWithAggregatesFilter<"ExpenseClaim"> | $Enums.ExpenseClaimStatus
    submittedAt?: DateTimeWithAggregatesFilter<"ExpenseClaim"> | Date | string
    approvedAt?: DateTimeNullableWithAggregatesFilter<"ExpenseClaim"> | Date | string | null
    approvedBy?: StringNullableWithAggregatesFilter<"ExpenseClaim"> | string | null
    approvalComments?: StringNullableWithAggregatesFilter<"ExpenseClaim"> | string | null
    rejectionReason?: StringNullableWithAggregatesFilter<"ExpenseClaim"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ExpenseClaim"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ExpenseClaim"> | Date | string
  }

  export type GiftWhereInput = {
    AND?: GiftWhereInput | GiftWhereInput[]
    OR?: GiftWhereInput[]
    NOT?: GiftWhereInput | GiftWhereInput[]
    id?: StringFilter<"Gift"> | string
    name?: StringFilter<"Gift"> | string
    description?: StringNullableFilter<"Gift"> | string | null
    unitCost?: DecimalFilter<"Gift"> | Decimal | DecimalJsLike | number | string
    specifications?: JsonNullableFilter<"Gift">
    giftImages?: JsonNullableFilter<"Gift">
    createdAt?: DateTimeFilter<"Gift"> | Date | string
    updatedAt?: DateTimeFilter<"Gift"> | Date | string
    createdById?: StringFilter<"Gift"> | string
    isActive?: BoolFilter<"Gift"> | boolean
    createdBy?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    userGiftInventories?: UserGiftInventoryListRelationFilter
    doctorDistributionGiftItems?: DoctorDistributionGiftItemListRelationFilter
  }

  export type GiftOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    unitCost?: SortOrder
    specifications?: SortOrderInput | SortOrder
    giftImages?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    isActive?: SortOrder
    createdBy?: EmployeeOrderByWithRelationInput
    userGiftInventories?: UserGiftInventoryOrderByRelationAggregateInput
    doctorDistributionGiftItems?: DoctorDistributionGiftItemOrderByRelationAggregateInput
  }

  export type GiftWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GiftWhereInput | GiftWhereInput[]
    OR?: GiftWhereInput[]
    NOT?: GiftWhereInput | GiftWhereInput[]
    name?: StringFilter<"Gift"> | string
    description?: StringNullableFilter<"Gift"> | string | null
    unitCost?: DecimalFilter<"Gift"> | Decimal | DecimalJsLike | number | string
    specifications?: JsonNullableFilter<"Gift">
    giftImages?: JsonNullableFilter<"Gift">
    createdAt?: DateTimeFilter<"Gift"> | Date | string
    updatedAt?: DateTimeFilter<"Gift"> | Date | string
    createdById?: StringFilter<"Gift"> | string
    isActive?: BoolFilter<"Gift"> | boolean
    createdBy?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    userGiftInventories?: UserGiftInventoryListRelationFilter
    doctorDistributionGiftItems?: DoctorDistributionGiftItemListRelationFilter
  }, "id">

  export type GiftOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    unitCost?: SortOrder
    specifications?: SortOrderInput | SortOrder
    giftImages?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    isActive?: SortOrder
    _count?: GiftCountOrderByAggregateInput
    _avg?: GiftAvgOrderByAggregateInput
    _max?: GiftMaxOrderByAggregateInput
    _min?: GiftMinOrderByAggregateInput
    _sum?: GiftSumOrderByAggregateInput
  }

  export type GiftScalarWhereWithAggregatesInput = {
    AND?: GiftScalarWhereWithAggregatesInput | GiftScalarWhereWithAggregatesInput[]
    OR?: GiftScalarWhereWithAggregatesInput[]
    NOT?: GiftScalarWhereWithAggregatesInput | GiftScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Gift"> | string
    name?: StringWithAggregatesFilter<"Gift"> | string
    description?: StringNullableWithAggregatesFilter<"Gift"> | string | null
    unitCost?: DecimalWithAggregatesFilter<"Gift"> | Decimal | DecimalJsLike | number | string
    specifications?: JsonNullableWithAggregatesFilter<"Gift">
    giftImages?: JsonNullableWithAggregatesFilter<"Gift">
    createdAt?: DateTimeWithAggregatesFilter<"Gift"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Gift"> | Date | string
    createdById?: StringWithAggregatesFilter<"Gift"> | string
    isActive?: BoolWithAggregatesFilter<"Gift"> | boolean
  }

  export type UserDrugInventoryWhereInput = {
    AND?: UserDrugInventoryWhereInput | UserDrugInventoryWhereInput[]
    OR?: UserDrugInventoryWhereInput[]
    NOT?: UserDrugInventoryWhereInput | UserDrugInventoryWhereInput[]
    id?: StringFilter<"UserDrugInventory"> | string
    employeeId?: StringFilter<"UserDrugInventory"> | string
    drugId?: StringFilter<"UserDrugInventory"> | string
    quantity?: IntFilter<"UserDrugInventory"> | number
    lastRestockedAt?: DateTimeNullableFilter<"UserDrugInventory"> | Date | string | null
    createdAt?: DateTimeFilter<"UserDrugInventory"> | Date | string
    updatedAt?: DateTimeFilter<"UserDrugInventory"> | Date | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    drug?: XOR<DrugScalarRelationFilter, DrugWhereInput>
    doctorDistributionDrugItems?: DoctorDistributionDrugItemListRelationFilter
  }

  export type UserDrugInventoryOrderByWithRelationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    drugId?: SortOrder
    quantity?: SortOrder
    lastRestockedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
    drug?: DrugOrderByWithRelationInput
    doctorDistributionDrugItems?: DoctorDistributionDrugItemOrderByRelationAggregateInput
  }

  export type UserDrugInventoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserDrugInventoryWhereInput | UserDrugInventoryWhereInput[]
    OR?: UserDrugInventoryWhereInput[]
    NOT?: UserDrugInventoryWhereInput | UserDrugInventoryWhereInput[]
    employeeId?: StringFilter<"UserDrugInventory"> | string
    drugId?: StringFilter<"UserDrugInventory"> | string
    quantity?: IntFilter<"UserDrugInventory"> | number
    lastRestockedAt?: DateTimeNullableFilter<"UserDrugInventory"> | Date | string | null
    createdAt?: DateTimeFilter<"UserDrugInventory"> | Date | string
    updatedAt?: DateTimeFilter<"UserDrugInventory"> | Date | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    drug?: XOR<DrugScalarRelationFilter, DrugWhereInput>
    doctorDistributionDrugItems?: DoctorDistributionDrugItemListRelationFilter
  }, "id">

  export type UserDrugInventoryOrderByWithAggregationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    drugId?: SortOrder
    quantity?: SortOrder
    lastRestockedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserDrugInventoryCountOrderByAggregateInput
    _avg?: UserDrugInventoryAvgOrderByAggregateInput
    _max?: UserDrugInventoryMaxOrderByAggregateInput
    _min?: UserDrugInventoryMinOrderByAggregateInput
    _sum?: UserDrugInventorySumOrderByAggregateInput
  }

  export type UserDrugInventoryScalarWhereWithAggregatesInput = {
    AND?: UserDrugInventoryScalarWhereWithAggregatesInput | UserDrugInventoryScalarWhereWithAggregatesInput[]
    OR?: UserDrugInventoryScalarWhereWithAggregatesInput[]
    NOT?: UserDrugInventoryScalarWhereWithAggregatesInput | UserDrugInventoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserDrugInventory"> | string
    employeeId?: StringWithAggregatesFilter<"UserDrugInventory"> | string
    drugId?: StringWithAggregatesFilter<"UserDrugInventory"> | string
    quantity?: IntWithAggregatesFilter<"UserDrugInventory"> | number
    lastRestockedAt?: DateTimeNullableWithAggregatesFilter<"UserDrugInventory"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserDrugInventory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserDrugInventory"> | Date | string
  }

  export type UserGiftInventoryWhereInput = {
    AND?: UserGiftInventoryWhereInput | UserGiftInventoryWhereInput[]
    OR?: UserGiftInventoryWhereInput[]
    NOT?: UserGiftInventoryWhereInput | UserGiftInventoryWhereInput[]
    id?: StringFilter<"UserGiftInventory"> | string
    employeeId?: StringFilter<"UserGiftInventory"> | string
    giftId?: StringFilter<"UserGiftInventory"> | string
    quantity?: IntFilter<"UserGiftInventory"> | number
    lastRestockedAt?: DateTimeNullableFilter<"UserGiftInventory"> | Date | string | null
    createdAt?: DateTimeFilter<"UserGiftInventory"> | Date | string
    updatedAt?: DateTimeFilter<"UserGiftInventory"> | Date | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    gift?: XOR<GiftScalarRelationFilter, GiftWhereInput>
    doctorDistributionGiftItems?: DoctorDistributionGiftItemListRelationFilter
  }

  export type UserGiftInventoryOrderByWithRelationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    giftId?: SortOrder
    quantity?: SortOrder
    lastRestockedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
    gift?: GiftOrderByWithRelationInput
    doctorDistributionGiftItems?: DoctorDistributionGiftItemOrderByRelationAggregateInput
  }

  export type UserGiftInventoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserGiftInventoryWhereInput | UserGiftInventoryWhereInput[]
    OR?: UserGiftInventoryWhereInput[]
    NOT?: UserGiftInventoryWhereInput | UserGiftInventoryWhereInput[]
    employeeId?: StringFilter<"UserGiftInventory"> | string
    giftId?: StringFilter<"UserGiftInventory"> | string
    quantity?: IntFilter<"UserGiftInventory"> | number
    lastRestockedAt?: DateTimeNullableFilter<"UserGiftInventory"> | Date | string | null
    createdAt?: DateTimeFilter<"UserGiftInventory"> | Date | string
    updatedAt?: DateTimeFilter<"UserGiftInventory"> | Date | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    gift?: XOR<GiftScalarRelationFilter, GiftWhereInput>
    doctorDistributionGiftItems?: DoctorDistributionGiftItemListRelationFilter
  }, "id">

  export type UserGiftInventoryOrderByWithAggregationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    giftId?: SortOrder
    quantity?: SortOrder
    lastRestockedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserGiftInventoryCountOrderByAggregateInput
    _avg?: UserGiftInventoryAvgOrderByAggregateInput
    _max?: UserGiftInventoryMaxOrderByAggregateInput
    _min?: UserGiftInventoryMinOrderByAggregateInput
    _sum?: UserGiftInventorySumOrderByAggregateInput
  }

  export type UserGiftInventoryScalarWhereWithAggregatesInput = {
    AND?: UserGiftInventoryScalarWhereWithAggregatesInput | UserGiftInventoryScalarWhereWithAggregatesInput[]
    OR?: UserGiftInventoryScalarWhereWithAggregatesInput[]
    NOT?: UserGiftInventoryScalarWhereWithAggregatesInput | UserGiftInventoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserGiftInventory"> | string
    employeeId?: StringWithAggregatesFilter<"UserGiftInventory"> | string
    giftId?: StringWithAggregatesFilter<"UserGiftInventory"> | string
    quantity?: IntWithAggregatesFilter<"UserGiftInventory"> | number
    lastRestockedAt?: DateTimeNullableWithAggregatesFilter<"UserGiftInventory"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserGiftInventory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserGiftInventory"> | Date | string
  }

  export type DoctorDistributionWhereInput = {
    AND?: DoctorDistributionWhereInput | DoctorDistributionWhereInput[]
    OR?: DoctorDistributionWhereInput[]
    NOT?: DoctorDistributionWhereInput | DoctorDistributionWhereInput[]
    id?: StringFilter<"DoctorDistribution"> | string
    doctorInteractionId?: StringFilter<"DoctorDistribution"> | string
    employeeId?: StringFilter<"DoctorDistribution"> | string
    distributedAt?: DateTimeFilter<"DoctorDistribution"> | Date | string
    createdAt?: DateTimeFilter<"DoctorDistribution"> | Date | string
    updatedAt?: DateTimeFilter<"DoctorDistribution"> | Date | string
    doctorInteraction?: XOR<DoctorInteractionScalarRelationFilter, DoctorInteractionWhereInput>
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    drugItems?: DoctorDistributionDrugItemListRelationFilter
    giftItems?: DoctorDistributionGiftItemListRelationFilter
  }

  export type DoctorDistributionOrderByWithRelationInput = {
    id?: SortOrder
    doctorInteractionId?: SortOrder
    employeeId?: SortOrder
    distributedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    doctorInteraction?: DoctorInteractionOrderByWithRelationInput
    employee?: EmployeeOrderByWithRelationInput
    drugItems?: DoctorDistributionDrugItemOrderByRelationAggregateInput
    giftItems?: DoctorDistributionGiftItemOrderByRelationAggregateInput
  }

  export type DoctorDistributionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DoctorDistributionWhereInput | DoctorDistributionWhereInput[]
    OR?: DoctorDistributionWhereInput[]
    NOT?: DoctorDistributionWhereInput | DoctorDistributionWhereInput[]
    doctorInteractionId?: StringFilter<"DoctorDistribution"> | string
    employeeId?: StringFilter<"DoctorDistribution"> | string
    distributedAt?: DateTimeFilter<"DoctorDistribution"> | Date | string
    createdAt?: DateTimeFilter<"DoctorDistribution"> | Date | string
    updatedAt?: DateTimeFilter<"DoctorDistribution"> | Date | string
    doctorInteraction?: XOR<DoctorInteractionScalarRelationFilter, DoctorInteractionWhereInput>
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    drugItems?: DoctorDistributionDrugItemListRelationFilter
    giftItems?: DoctorDistributionGiftItemListRelationFilter
  }, "id">

  export type DoctorDistributionOrderByWithAggregationInput = {
    id?: SortOrder
    doctorInteractionId?: SortOrder
    employeeId?: SortOrder
    distributedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DoctorDistributionCountOrderByAggregateInput
    _max?: DoctorDistributionMaxOrderByAggregateInput
    _min?: DoctorDistributionMinOrderByAggregateInput
  }

  export type DoctorDistributionScalarWhereWithAggregatesInput = {
    AND?: DoctorDistributionScalarWhereWithAggregatesInput | DoctorDistributionScalarWhereWithAggregatesInput[]
    OR?: DoctorDistributionScalarWhereWithAggregatesInput[]
    NOT?: DoctorDistributionScalarWhereWithAggregatesInput | DoctorDistributionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DoctorDistribution"> | string
    doctorInteractionId?: StringWithAggregatesFilter<"DoctorDistribution"> | string
    employeeId?: StringWithAggregatesFilter<"DoctorDistribution"> | string
    distributedAt?: DateTimeWithAggregatesFilter<"DoctorDistribution"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"DoctorDistribution"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DoctorDistribution"> | Date | string
  }

  export type DoctorDistributionDrugItemWhereInput = {
    AND?: DoctorDistributionDrugItemWhereInput | DoctorDistributionDrugItemWhereInput[]
    OR?: DoctorDistributionDrugItemWhereInput[]
    NOT?: DoctorDistributionDrugItemWhereInput | DoctorDistributionDrugItemWhereInput[]
    id?: StringFilter<"DoctorDistributionDrugItem"> | string
    doctorDistributionId?: StringFilter<"DoctorDistributionDrugItem"> | string
    drugId?: StringFilter<"DoctorDistributionDrugItem"> | string
    fromInventoryId?: StringFilter<"DoctorDistributionDrugItem"> | string
    quantity?: IntFilter<"DoctorDistributionDrugItem"> | number
    unitCost?: DecimalFilter<"DoctorDistributionDrugItem"> | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFilter<"DoctorDistributionDrugItem"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"DoctorDistributionDrugItem"> | Date | string
    updatedAt?: DateTimeFilter<"DoctorDistributionDrugItem"> | Date | string
    doctorDistribution?: XOR<DoctorDistributionScalarRelationFilter, DoctorDistributionWhereInput>
    drug?: XOR<DrugScalarRelationFilter, DrugWhereInput>
    fromInventory?: XOR<UserDrugInventoryScalarRelationFilter, UserDrugInventoryWhereInput>
  }

  export type DoctorDistributionDrugItemOrderByWithRelationInput = {
    id?: SortOrder
    doctorDistributionId?: SortOrder
    drugId?: SortOrder
    fromInventoryId?: SortOrder
    quantity?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    doctorDistribution?: DoctorDistributionOrderByWithRelationInput
    drug?: DrugOrderByWithRelationInput
    fromInventory?: UserDrugInventoryOrderByWithRelationInput
  }

  export type DoctorDistributionDrugItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DoctorDistributionDrugItemWhereInput | DoctorDistributionDrugItemWhereInput[]
    OR?: DoctorDistributionDrugItemWhereInput[]
    NOT?: DoctorDistributionDrugItemWhereInput | DoctorDistributionDrugItemWhereInput[]
    doctorDistributionId?: StringFilter<"DoctorDistributionDrugItem"> | string
    drugId?: StringFilter<"DoctorDistributionDrugItem"> | string
    fromInventoryId?: StringFilter<"DoctorDistributionDrugItem"> | string
    quantity?: IntFilter<"DoctorDistributionDrugItem"> | number
    unitCost?: DecimalFilter<"DoctorDistributionDrugItem"> | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFilter<"DoctorDistributionDrugItem"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"DoctorDistributionDrugItem"> | Date | string
    updatedAt?: DateTimeFilter<"DoctorDistributionDrugItem"> | Date | string
    doctorDistribution?: XOR<DoctorDistributionScalarRelationFilter, DoctorDistributionWhereInput>
    drug?: XOR<DrugScalarRelationFilter, DrugWhereInput>
    fromInventory?: XOR<UserDrugInventoryScalarRelationFilter, UserDrugInventoryWhereInput>
  }, "id">

  export type DoctorDistributionDrugItemOrderByWithAggregationInput = {
    id?: SortOrder
    doctorDistributionId?: SortOrder
    drugId?: SortOrder
    fromInventoryId?: SortOrder
    quantity?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DoctorDistributionDrugItemCountOrderByAggregateInput
    _avg?: DoctorDistributionDrugItemAvgOrderByAggregateInput
    _max?: DoctorDistributionDrugItemMaxOrderByAggregateInput
    _min?: DoctorDistributionDrugItemMinOrderByAggregateInput
    _sum?: DoctorDistributionDrugItemSumOrderByAggregateInput
  }

  export type DoctorDistributionDrugItemScalarWhereWithAggregatesInput = {
    AND?: DoctorDistributionDrugItemScalarWhereWithAggregatesInput | DoctorDistributionDrugItemScalarWhereWithAggregatesInput[]
    OR?: DoctorDistributionDrugItemScalarWhereWithAggregatesInput[]
    NOT?: DoctorDistributionDrugItemScalarWhereWithAggregatesInput | DoctorDistributionDrugItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DoctorDistributionDrugItem"> | string
    doctorDistributionId?: StringWithAggregatesFilter<"DoctorDistributionDrugItem"> | string
    drugId?: StringWithAggregatesFilter<"DoctorDistributionDrugItem"> | string
    fromInventoryId?: StringWithAggregatesFilter<"DoctorDistributionDrugItem"> | string
    quantity?: IntWithAggregatesFilter<"DoctorDistributionDrugItem"> | number
    unitCost?: DecimalWithAggregatesFilter<"DoctorDistributionDrugItem"> | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalWithAggregatesFilter<"DoctorDistributionDrugItem"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeWithAggregatesFilter<"DoctorDistributionDrugItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DoctorDistributionDrugItem"> | Date | string
  }

  export type DoctorDistributionGiftItemWhereInput = {
    AND?: DoctorDistributionGiftItemWhereInput | DoctorDistributionGiftItemWhereInput[]
    OR?: DoctorDistributionGiftItemWhereInput[]
    NOT?: DoctorDistributionGiftItemWhereInput | DoctorDistributionGiftItemWhereInput[]
    id?: StringFilter<"DoctorDistributionGiftItem"> | string
    doctorDistributionId?: StringFilter<"DoctorDistributionGiftItem"> | string
    giftId?: StringFilter<"DoctorDistributionGiftItem"> | string
    fromInventoryId?: StringFilter<"DoctorDistributionGiftItem"> | string
    quantity?: IntFilter<"DoctorDistributionGiftItem"> | number
    unitCost?: DecimalFilter<"DoctorDistributionGiftItem"> | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFilter<"DoctorDistributionGiftItem"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"DoctorDistributionGiftItem"> | Date | string
    updatedAt?: DateTimeFilter<"DoctorDistributionGiftItem"> | Date | string
    doctorDistribution?: XOR<DoctorDistributionScalarRelationFilter, DoctorDistributionWhereInput>
    gift?: XOR<GiftScalarRelationFilter, GiftWhereInput>
    fromInventory?: XOR<UserGiftInventoryScalarRelationFilter, UserGiftInventoryWhereInput>
  }

  export type DoctorDistributionGiftItemOrderByWithRelationInput = {
    id?: SortOrder
    doctorDistributionId?: SortOrder
    giftId?: SortOrder
    fromInventoryId?: SortOrder
    quantity?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    doctorDistribution?: DoctorDistributionOrderByWithRelationInput
    gift?: GiftOrderByWithRelationInput
    fromInventory?: UserGiftInventoryOrderByWithRelationInput
  }

  export type DoctorDistributionGiftItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DoctorDistributionGiftItemWhereInput | DoctorDistributionGiftItemWhereInput[]
    OR?: DoctorDistributionGiftItemWhereInput[]
    NOT?: DoctorDistributionGiftItemWhereInput | DoctorDistributionGiftItemWhereInput[]
    doctorDistributionId?: StringFilter<"DoctorDistributionGiftItem"> | string
    giftId?: StringFilter<"DoctorDistributionGiftItem"> | string
    fromInventoryId?: StringFilter<"DoctorDistributionGiftItem"> | string
    quantity?: IntFilter<"DoctorDistributionGiftItem"> | number
    unitCost?: DecimalFilter<"DoctorDistributionGiftItem"> | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFilter<"DoctorDistributionGiftItem"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"DoctorDistributionGiftItem"> | Date | string
    updatedAt?: DateTimeFilter<"DoctorDistributionGiftItem"> | Date | string
    doctorDistribution?: XOR<DoctorDistributionScalarRelationFilter, DoctorDistributionWhereInput>
    gift?: XOR<GiftScalarRelationFilter, GiftWhereInput>
    fromInventory?: XOR<UserGiftInventoryScalarRelationFilter, UserGiftInventoryWhereInput>
  }, "id">

  export type DoctorDistributionGiftItemOrderByWithAggregationInput = {
    id?: SortOrder
    doctorDistributionId?: SortOrder
    giftId?: SortOrder
    fromInventoryId?: SortOrder
    quantity?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DoctorDistributionGiftItemCountOrderByAggregateInput
    _avg?: DoctorDistributionGiftItemAvgOrderByAggregateInput
    _max?: DoctorDistributionGiftItemMaxOrderByAggregateInput
    _min?: DoctorDistributionGiftItemMinOrderByAggregateInput
    _sum?: DoctorDistributionGiftItemSumOrderByAggregateInput
  }

  export type DoctorDistributionGiftItemScalarWhereWithAggregatesInput = {
    AND?: DoctorDistributionGiftItemScalarWhereWithAggregatesInput | DoctorDistributionGiftItemScalarWhereWithAggregatesInput[]
    OR?: DoctorDistributionGiftItemScalarWhereWithAggregatesInput[]
    NOT?: DoctorDistributionGiftItemScalarWhereWithAggregatesInput | DoctorDistributionGiftItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DoctorDistributionGiftItem"> | string
    doctorDistributionId?: StringWithAggregatesFilter<"DoctorDistributionGiftItem"> | string
    giftId?: StringWithAggregatesFilter<"DoctorDistributionGiftItem"> | string
    fromInventoryId?: StringWithAggregatesFilter<"DoctorDistributionGiftItem"> | string
    quantity?: IntWithAggregatesFilter<"DoctorDistributionGiftItem"> | number
    unitCost?: DecimalWithAggregatesFilter<"DoctorDistributionGiftItem"> | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalWithAggregatesFilter<"DoctorDistributionGiftItem"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeWithAggregatesFilter<"DoctorDistributionGiftItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DoctorDistributionGiftItem"> | Date | string
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    organizationId?: StringFilter<"AuditLog"> | string
    employeeId?: StringNullableFilter<"AuditLog"> | string | null
    tableName?: StringFilter<"AuditLog"> | string
    actionType?: StringFilter<"AuditLog"> | string
    recordId?: StringFilter<"AuditLog"> | string
    oldValues?: JsonNullableFilter<"AuditLog">
    newValues?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    employee?: XOR<EmployeeNullableScalarRelationFilter, EmployeeWhereInput> | null
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    employeeId?: SortOrderInput | SortOrder
    tableName?: SortOrder
    actionType?: SortOrder
    recordId?: SortOrder
    oldValues?: SortOrderInput | SortOrder
    newValues?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    organizationId?: StringFilter<"AuditLog"> | string
    employeeId?: StringNullableFilter<"AuditLog"> | string | null
    tableName?: StringFilter<"AuditLog"> | string
    actionType?: StringFilter<"AuditLog"> | string
    recordId?: StringFilter<"AuditLog"> | string
    oldValues?: JsonNullableFilter<"AuditLog">
    newValues?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    employee?: XOR<EmployeeNullableScalarRelationFilter, EmployeeWhereInput> | null
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    employeeId?: SortOrderInput | SortOrder
    tableName?: SortOrder
    actionType?: SortOrder
    recordId?: SortOrder
    oldValues?: SortOrderInput | SortOrder
    newValues?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    organizationId?: StringWithAggregatesFilter<"AuditLog"> | string
    employeeId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    tableName?: StringWithAggregatesFilter<"AuditLog"> | string
    actionType?: StringWithAggregatesFilter<"AuditLog"> | string
    recordId?: StringWithAggregatesFilter<"AuditLog"> | string
    oldValues?: JsonNullableWithAggregatesFilter<"AuditLog">
    newValues?: JsonNullableWithAggregatesFilter<"AuditLog">
    ipAddress?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type EmployeeCreateInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    reportingManager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutReportingManagerInput
    team?: TeamCreateNestedOneWithoutTeamMembersInput
    leadsTeam?: TeamCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    reportingManagerId?: string | null
    teamId?: string | null
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutReportingManagerInput
    leadsTeam?: TeamUncheckedCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryUncheckedCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordUncheckedCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteUncheckedCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteUncheckedCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderUncheckedCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorUncheckedCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugUncheckedCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistUncheckedCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftUncheckedCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionUncheckedCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerUncheckedCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskUncheckedCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    reportingManager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutReportingManagerNestedInput
    team?: TeamUpdateOneWithoutTeamMembersNestedInput
    leadsTeam?: TeamUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    reportingManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    subordinates?: EmployeeUncheckedUpdateManyWithoutReportingManagerNestedInput
    leadsTeam?: TeamUncheckedUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUncheckedUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUncheckedUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUncheckedUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUncheckedUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeCreateManyInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    reportingManagerId?: string | null
    teamId?: string | null
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
  }

  export type EmployeeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EmployeeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    reportingManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TeamCreateInput = {
    id?: string
    teamName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    leadName: EmployeeCreateNestedOneWithoutLeadsTeamInput
    teamMembers?: EmployeeCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateInput = {
    id?: string
    teamName: string
    leadId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    teamMembers?: EmployeeUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    leadName?: EmployeeUpdateOneRequiredWithoutLeadsTeamNestedInput
    teamMembers?: EmployeeUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamName?: StringFieldUpdateOperationsInput | string
    leadId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: EmployeeUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamCreateManyInput = {
    id?: string
    teamName: string
    leadId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
  }

  export type TeamUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TeamUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamName?: StringFieldUpdateOperationsInput | string
    leadId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TerritoryCreateInput = {
    id?: string
    organizationId: string
    name: string
    type: string
    boundaries?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    parentTerritory?: TerritoryCreateNestedOneWithoutChildTerritoriesInput
    childTerritories?: TerritoryCreateNestedManyWithoutParentTerritoryInput
    employees?: EmployeeTerritoryCreateNestedManyWithoutTerritoryInput
    hospitals?: HospitalCreateNestedManyWithoutTerritoryInput
    chemists?: ChemistCreateNestedManyWithoutTerritoryInput
  }

  export type TerritoryUncheckedCreateInput = {
    id?: string
    organizationId: string
    name: string
    type: string
    parentTerritoryId?: string | null
    boundaries?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    childTerritories?: TerritoryUncheckedCreateNestedManyWithoutParentTerritoryInput
    employees?: EmployeeTerritoryUncheckedCreateNestedManyWithoutTerritoryInput
    hospitals?: HospitalUncheckedCreateNestedManyWithoutTerritoryInput
    chemists?: ChemistUncheckedCreateNestedManyWithoutTerritoryInput
  }

  export type TerritoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    boundaries?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentTerritory?: TerritoryUpdateOneWithoutChildTerritoriesNestedInput
    childTerritories?: TerritoryUpdateManyWithoutParentTerritoryNestedInput
    employees?: EmployeeTerritoryUpdateManyWithoutTerritoryNestedInput
    hospitals?: HospitalUpdateManyWithoutTerritoryNestedInput
    chemists?: ChemistUpdateManyWithoutTerritoryNestedInput
  }

  export type TerritoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    parentTerritoryId?: NullableStringFieldUpdateOperationsInput | string | null
    boundaries?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    childTerritories?: TerritoryUncheckedUpdateManyWithoutParentTerritoryNestedInput
    employees?: EmployeeTerritoryUncheckedUpdateManyWithoutTerritoryNestedInput
    hospitals?: HospitalUncheckedUpdateManyWithoutTerritoryNestedInput
    chemists?: ChemistUncheckedUpdateManyWithoutTerritoryNestedInput
  }

  export type TerritoryCreateManyInput = {
    id?: string
    organizationId: string
    name: string
    type: string
    parentTerritoryId?: string | null
    boundaries?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TerritoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    boundaries?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TerritoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    parentTerritoryId?: NullableStringFieldUpdateOperationsInput | string | null
    boundaries?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeTerritoryCreateInput = {
    id?: string
    assignedAt: Date | string
    unassignedAt?: Date | string | null
    isPrimary?: boolean
    employee: EmployeeCreateNestedOneWithoutTerritoriesInput
    territory: TerritoryCreateNestedOneWithoutEmployeesInput
  }

  export type EmployeeTerritoryUncheckedCreateInput = {
    id?: string
    employeeId: string
    territoryId: string
    assignedAt: Date | string
    unassignedAt?: Date | string | null
    isPrimary?: boolean
  }

  export type EmployeeTerritoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unassignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    employee?: EmployeeUpdateOneRequiredWithoutTerritoriesNestedInput
    territory?: TerritoryUpdateOneRequiredWithoutEmployeesNestedInput
  }

  export type EmployeeTerritoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    territoryId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unassignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EmployeeTerritoryCreateManyInput = {
    id?: string
    employeeId: string
    territoryId: string
    assignedAt: Date | string
    unassignedAt?: Date | string | null
    isPrimary?: boolean
  }

  export type EmployeeTerritoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unassignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EmployeeTerritoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    territoryId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unassignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EmployeeTrainingRecordCreateInput = {
    id?: string
    trainingName: string
    description?: string | null
    completionDate: Date | string
    createdAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutTrainingRecordsInput
  }

  export type EmployeeTrainingRecordUncheckedCreateInput = {
    id?: string
    employeeId: string
    trainingName: string
    description?: string | null
    completionDate: Date | string
    createdAt?: Date | string
  }

  export type EmployeeTrainingRecordUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    trainingName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    completionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutTrainingRecordsNestedInput
  }

  export type EmployeeTrainingRecordUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    trainingName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    completionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeTrainingRecordCreateManyInput = {
    id?: string
    employeeId: string
    trainingName: string
    description?: string | null
    completionDate: Date | string
    createdAt?: Date | string
  }

  export type EmployeeTrainingRecordUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    trainingName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    completionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeTrainingRecordUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    trainingName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    completionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HospitalChainCreateInput = {
    id?: string
    organizationId: string
    name: string
    headquartersAddress?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    hospitals?: HospitalCreateNestedManyWithoutHospitalChainInput
  }

  export type HospitalChainUncheckedCreateInput = {
    id?: string
    organizationId: string
    name: string
    headquartersAddress?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    hospitals?: HospitalUncheckedCreateNestedManyWithoutHospitalChainInput
  }

  export type HospitalChainUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    headquartersAddress?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hospitals?: HospitalUpdateManyWithoutHospitalChainNestedInput
  }

  export type HospitalChainUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    headquartersAddress?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hospitals?: HospitalUncheckedUpdateManyWithoutHospitalChainNestedInput
  }

  export type HospitalChainCreateManyInput = {
    id?: string
    organizationId: string
    name: string
    headquartersAddress?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
  }

  export type HospitalChainUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    headquartersAddress?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type HospitalChainUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    headquartersAddress?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ChemistChainCreateInput = {
    id?: string
    organizationId: string
    name: string
    headquartersAddress?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    chemists?: ChemistCreateNestedManyWithoutChemistChainInput
  }

  export type ChemistChainUncheckedCreateInput = {
    id?: string
    organizationId: string
    name: string
    headquartersAddress?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    chemists?: ChemistUncheckedCreateNestedManyWithoutChemistChainInput
  }

  export type ChemistChainUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    headquartersAddress?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    chemists?: ChemistUpdateManyWithoutChemistChainNestedInput
  }

  export type ChemistChainUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    headquartersAddress?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    chemists?: ChemistUncheckedUpdateManyWithoutChemistChainNestedInput
  }

  export type ChemistChainCreateManyInput = {
    id?: string
    organizationId: string
    name: string
    headquartersAddress?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
  }

  export type ChemistChainUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    headquartersAddress?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ChemistChainUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    headquartersAddress?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type HospitalCreateInput = {
    id?: string
    organizationId: string
    name: string
    type: string
    address: string
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    hospitalChain?: HospitalChainCreateNestedOneWithoutHospitalsInput
    territory: TerritoryCreateNestedOneWithoutHospitalsInput
    doctorAssociations?: DoctorHospitalAssociationCreateNestedManyWithoutHospitalInput
    consultationSchedules?: DoctorConsultationScheduleCreateNestedManyWithoutHospitalInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateInput = {
    id?: string
    organizationId: string
    hospitalChainId?: string | null
    territoryId: string
    name: string
    type: string
    address: string
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    doctorAssociations?: DoctorHospitalAssociationUncheckedCreateNestedManyWithoutHospitalInput
    consultationSchedules?: DoctorConsultationScheduleUncheckedCreateNestedManyWithoutHospitalInput
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hospitalChain?: HospitalChainUpdateOneWithoutHospitalsNestedInput
    territory?: TerritoryUpdateOneRequiredWithoutHospitalsNestedInput
    doctorAssociations?: DoctorHospitalAssociationUpdateManyWithoutHospitalNestedInput
    consultationSchedules?: DoctorConsultationScheduleUpdateManyWithoutHospitalNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    hospitalChainId?: NullableStringFieldUpdateOperationsInput | string | null
    territoryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    doctorAssociations?: DoctorHospitalAssociationUncheckedUpdateManyWithoutHospitalNestedInput
    consultationSchedules?: DoctorConsultationScheduleUncheckedUpdateManyWithoutHospitalNestedInput
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalCreateManyInput = {
    id?: string
    organizationId: string
    hospitalChainId?: string | null
    territoryId: string
    name: string
    type: string
    address: string
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
  }

  export type HospitalUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type HospitalUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    hospitalChainId?: NullableStringFieldUpdateOperationsInput | string | null
    territoryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DoctorCreateInput = {
    id?: string
    organizationId: string
    name: string
    designation?: string | null
    specialization?: string | null
    email?: string | null
    phone?: string | null
    description?: string | null
    profilePictureUrl?: string | null
    qualification?: string | null
    experienceYears?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    createdBy: EmployeeCreateNestedOneWithoutDoctorsCreatedInput
    hospitalAssociations?: DoctorHospitalAssociationCreateNestedManyWithoutDoctorInput
    consultationSchedules?: DoctorConsultationScheduleCreateNestedManyWithoutDoctorInput
    interactions?: DoctorInteractionCreateNestedManyWithoutDoctorInput
    notes?: DoctorNoteCreateNestedManyWithoutDoctorInput
    chemistRelations?: DoctorChemistRelationCreateNestedManyWithoutDoctorInput
    DoctorTask?: DoctorTaskCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateInput = {
    id?: string
    organizationId: string
    name: string
    designation?: string | null
    specialization?: string | null
    email?: string | null
    phone?: string | null
    description?: string | null
    profilePictureUrl?: string | null
    qualification?: string | null
    experienceYears?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isActive?: boolean
    hospitalAssociations?: DoctorHospitalAssociationUncheckedCreateNestedManyWithoutDoctorInput
    consultationSchedules?: DoctorConsultationScheduleUncheckedCreateNestedManyWithoutDoctorInput
    interactions?: DoctorInteractionUncheckedCreateNestedManyWithoutDoctorInput
    notes?: DoctorNoteUncheckedCreateNestedManyWithoutDoctorInput
    chemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutDoctorInput
    DoctorTask?: DoctorTaskUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qualification?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: EmployeeUpdateOneRequiredWithoutDoctorsCreatedNestedInput
    hospitalAssociations?: DoctorHospitalAssociationUpdateManyWithoutDoctorNestedInput
    consultationSchedules?: DoctorConsultationScheduleUpdateManyWithoutDoctorNestedInput
    interactions?: DoctorInteractionUpdateManyWithoutDoctorNestedInput
    notes?: DoctorNoteUpdateManyWithoutDoctorNestedInput
    chemistRelations?: DoctorChemistRelationUpdateManyWithoutDoctorNestedInput
    DoctorTask?: DoctorTaskUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qualification?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hospitalAssociations?: DoctorHospitalAssociationUncheckedUpdateManyWithoutDoctorNestedInput
    consultationSchedules?: DoctorConsultationScheduleUncheckedUpdateManyWithoutDoctorNestedInput
    interactions?: DoctorInteractionUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: DoctorNoteUncheckedUpdateManyWithoutDoctorNestedInput
    chemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutDoctorNestedInput
    DoctorTask?: DoctorTaskUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorCreateManyInput = {
    id?: string
    organizationId: string
    name: string
    designation?: string | null
    specialization?: string | null
    email?: string | null
    phone?: string | null
    description?: string | null
    profilePictureUrl?: string | null
    qualification?: string | null
    experienceYears?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isActive?: boolean
  }

  export type DoctorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qualification?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DoctorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qualification?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DoctorHospitalAssociationCreateInput = {
    id?: string
    department?: string | null
    position?: string | null
    isPrimary?: boolean
    associationStartDate?: Date | string | null
    associationEndDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor: DoctorCreateNestedOneWithoutHospitalAssociationsInput
    hospital: HospitalCreateNestedOneWithoutDoctorAssociationsInput
  }

  export type DoctorHospitalAssociationUncheckedCreateInput = {
    id?: string
    doctorId: string
    hospitalId: string
    department?: string | null
    position?: string | null
    isPrimary?: boolean
    associationStartDate?: Date | string | null
    associationEndDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorHospitalAssociationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    associationStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    associationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneRequiredWithoutHospitalAssociationsNestedInput
    hospital?: HospitalUpdateOneRequiredWithoutDoctorAssociationsNestedInput
  }

  export type DoctorHospitalAssociationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    associationStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    associationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorHospitalAssociationCreateManyInput = {
    id?: string
    doctorId: string
    hospitalId: string
    department?: string | null
    position?: string | null
    isPrimary?: boolean
    associationStartDate?: Date | string | null
    associationEndDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorHospitalAssociationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    associationStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    associationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorHospitalAssociationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    associationStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    associationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorConsultationScheduleCreateInput = {
    id?: string
    dayOfWeek: $Enums.DayOfWeek
    startTime: Date | string
    endTime: Date | string
    consultationType: $Enums.ConsultationType
    isActive?: boolean
    effectiveFrom?: Date | string | null
    effectiveTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor: DoctorCreateNestedOneWithoutConsultationSchedulesInput
    hospital: HospitalCreateNestedOneWithoutConsultationSchedulesInput
  }

  export type DoctorConsultationScheduleUncheckedCreateInput = {
    id?: string
    doctorId: string
    hospitalId: string
    dayOfWeek: $Enums.DayOfWeek
    startTime: Date | string
    endTime: Date | string
    consultationType: $Enums.ConsultationType
    isActive?: boolean
    effectiveFrom?: Date | string | null
    effectiveTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorConsultationScheduleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    consultationType?: EnumConsultationTypeFieldUpdateOperationsInput | $Enums.ConsultationType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    effectiveTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneRequiredWithoutConsultationSchedulesNestedInput
    hospital?: HospitalUpdateOneRequiredWithoutConsultationSchedulesNestedInput
  }

  export type DoctorConsultationScheduleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    consultationType?: EnumConsultationTypeFieldUpdateOperationsInput | $Enums.ConsultationType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    effectiveTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorConsultationScheduleCreateManyInput = {
    id?: string
    doctorId: string
    hospitalId: string
    dayOfWeek: $Enums.DayOfWeek
    startTime: Date | string
    endTime: Date | string
    consultationType: $Enums.ConsultationType
    isActive?: boolean
    effectiveFrom?: Date | string | null
    effectiveTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorConsultationScheduleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    consultationType?: EnumConsultationTypeFieldUpdateOperationsInput | $Enums.ConsultationType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    effectiveTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorConsultationScheduleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    consultationType?: EnumConsultationTypeFieldUpdateOperationsInput | $Enums.ConsultationType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    effectiveTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorNoteCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor: DoctorCreateNestedOneWithoutNotesInput
    createdBy: EmployeeCreateNestedOneWithoutDoctorNotesInput
  }

  export type DoctorNoteUncheckedCreateInput = {
    id?: string
    doctorId: string
    createdById: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorNoteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneRequiredWithoutNotesNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutDoctorNotesNestedInput
  }

  export type DoctorNoteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorNoteCreateManyInput = {
    id?: string
    doctorId: string
    createdById: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorNoteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorNoteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorInteractionCreateInput = {
    id?: string
    interactionType: $Enums.InteractionType
    startTime: Date | string
    endTime?: Date | string | null
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    rating?: number | null
    createdAt?: Date | string
    doctor: DoctorCreateNestedOneWithoutInteractionsInput
    employee: EmployeeCreateNestedOneWithoutDoctorInteractionsInput
    hospital?: HospitalCreateNestedOneWithoutDoctorInteractionsInput
    DoctorDistribution?: DoctorDistributionCreateNestedManyWithoutDoctorInteractionInput
    DoctorTask?: DoctorTaskCreateNestedOneWithoutDoctorInteractionsInput
  }

  export type DoctorInteractionUncheckedCreateInput = {
    id?: string
    doctorId: string
    employeeId: string
    hospitalId?: string | null
    interactionType: $Enums.InteractionType
    startTime: Date | string
    endTime?: Date | string | null
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    rating?: number | null
    createdAt?: Date | string
    doctorTaskId?: string | null
    DoctorDistribution?: DoctorDistributionUncheckedCreateNestedManyWithoutDoctorInteractionInput
  }

  export type DoctorInteractionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    interactionType?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneRequiredWithoutInteractionsNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutDoctorInteractionsNestedInput
    hospital?: HospitalUpdateOneWithoutDoctorInteractionsNestedInput
    DoctorDistribution?: DoctorDistributionUpdateManyWithoutDoctorInteractionNestedInput
    DoctorTask?: DoctorTaskUpdateOneWithoutDoctorInteractionsNestedInput
  }

  export type DoctorInteractionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    interactionType?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    DoctorDistribution?: DoctorDistributionUncheckedUpdateManyWithoutDoctorInteractionNestedInput
  }

  export type DoctorInteractionCreateManyInput = {
    id?: string
    doctorId: string
    employeeId: string
    hospitalId?: string | null
    interactionType: $Enums.InteractionType
    startTime: Date | string
    endTime?: Date | string | null
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    rating?: number | null
    createdAt?: Date | string
    doctorTaskId?: string | null
  }

  export type DoctorInteractionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    interactionType?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorInteractionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    interactionType?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorTaskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DrugCreateInput = {
    id?: string
    organizationId: string
    name: string
    composition?: string | null
    manufacturer?: string | null
    indications?: string | null
    sideEffects?: string | null
    safetyAdvice?: string | null
    dosageForms?: NullableJsonNullValueInput | InputJsonValue
    price?: Decimal | DecimalJsLike | number | string | null
    schedule?: string | null
    regulatoryApprovals?: string | null
    category?: string | null
    isAvailable?: boolean
    images?: NullableJsonNullValueInput | InputJsonValue
    marketingMaterials?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    createdBy: EmployeeCreateNestedOneWithoutDrugsCreatedInput
    orderItems?: OrderItemCreateNestedManyWithoutDrugInput
    rcpaData?: RcpaDrugDataCreateNestedManyWithoutDrugInput
    UserDrugInventory?: UserDrugInventoryCreateNestedManyWithoutDrugInput
    DoctorDistributionDrugItem?: DoctorDistributionDrugItemCreateNestedManyWithoutDrugInput
  }

  export type DrugUncheckedCreateInput = {
    id?: string
    organizationId: string
    name: string
    composition?: string | null
    manufacturer?: string | null
    indications?: string | null
    sideEffects?: string | null
    safetyAdvice?: string | null
    dosageForms?: NullableJsonNullValueInput | InputJsonValue
    price?: Decimal | DecimalJsLike | number | string | null
    schedule?: string | null
    regulatoryApprovals?: string | null
    category?: string | null
    isAvailable?: boolean
    images?: NullableJsonNullValueInput | InputJsonValue
    marketingMaterials?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isActive?: boolean
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutDrugInput
    rcpaData?: RcpaDrugDataUncheckedCreateNestedManyWithoutDrugInput
    UserDrugInventory?: UserDrugInventoryUncheckedCreateNestedManyWithoutDrugInput
    DoctorDistributionDrugItem?: DoctorDistributionDrugItemUncheckedCreateNestedManyWithoutDrugInput
  }

  export type DrugUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    indications?: NullableStringFieldUpdateOperationsInput | string | null
    sideEffects?: NullableStringFieldUpdateOperationsInput | string | null
    safetyAdvice?: NullableStringFieldUpdateOperationsInput | string | null
    dosageForms?: NullableJsonNullValueInput | InputJsonValue
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryApprovals?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    images?: NullableJsonNullValueInput | InputJsonValue
    marketingMaterials?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: EmployeeUpdateOneRequiredWithoutDrugsCreatedNestedInput
    orderItems?: OrderItemUpdateManyWithoutDrugNestedInput
    rcpaData?: RcpaDrugDataUpdateManyWithoutDrugNestedInput
    UserDrugInventory?: UserDrugInventoryUpdateManyWithoutDrugNestedInput
    DoctorDistributionDrugItem?: DoctorDistributionDrugItemUpdateManyWithoutDrugNestedInput
  }

  export type DrugUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    indications?: NullableStringFieldUpdateOperationsInput | string | null
    sideEffects?: NullableStringFieldUpdateOperationsInput | string | null
    safetyAdvice?: NullableStringFieldUpdateOperationsInput | string | null
    dosageForms?: NullableJsonNullValueInput | InputJsonValue
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryApprovals?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    images?: NullableJsonNullValueInput | InputJsonValue
    marketingMaterials?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    orderItems?: OrderItemUncheckedUpdateManyWithoutDrugNestedInput
    rcpaData?: RcpaDrugDataUncheckedUpdateManyWithoutDrugNestedInput
    UserDrugInventory?: UserDrugInventoryUncheckedUpdateManyWithoutDrugNestedInput
    DoctorDistributionDrugItem?: DoctorDistributionDrugItemUncheckedUpdateManyWithoutDrugNestedInput
  }

  export type DrugCreateManyInput = {
    id?: string
    organizationId: string
    name: string
    composition?: string | null
    manufacturer?: string | null
    indications?: string | null
    sideEffects?: string | null
    safetyAdvice?: string | null
    dosageForms?: NullableJsonNullValueInput | InputJsonValue
    price?: Decimal | DecimalJsLike | number | string | null
    schedule?: string | null
    regulatoryApprovals?: string | null
    category?: string | null
    isAvailable?: boolean
    images?: NullableJsonNullValueInput | InputJsonValue
    marketingMaterials?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isActive?: boolean
  }

  export type DrugUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    indications?: NullableStringFieldUpdateOperationsInput | string | null
    sideEffects?: NullableStringFieldUpdateOperationsInput | string | null
    safetyAdvice?: NullableStringFieldUpdateOperationsInput | string | null
    dosageForms?: NullableJsonNullValueInput | InputJsonValue
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryApprovals?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    images?: NullableJsonNullValueInput | InputJsonValue
    marketingMaterials?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DrugUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    indications?: NullableStringFieldUpdateOperationsInput | string | null
    sideEffects?: NullableStringFieldUpdateOperationsInput | string | null
    safetyAdvice?: NullableStringFieldUpdateOperationsInput | string | null
    dosageForms?: NullableJsonNullValueInput | InputJsonValue
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryApprovals?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    images?: NullableJsonNullValueInput | InputJsonValue
    marketingMaterials?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ChemistCreateInput = {
    id?: string
    organizationId: string
    name: string
    type: $Enums.ChemistType
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    profilePictureUrl?: string | null
    visitingHours?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    chemistChain?: ChemistChainCreateNestedOneWithoutChemistsInput
    territory: TerritoryCreateNestedOneWithoutChemistsInput
    createdBy: EmployeeCreateNestedOneWithoutChemistsCreatedInput
    notes?: ChemistNoteCreateNestedManyWithoutChemistInput
    interactions?: ChemistInteractionCreateNestedManyWithoutChemistInput
    doctorRelations?: DoctorChemistRelationCreateNestedManyWithoutChemistInput
    orders?: OrderCreateNestedManyWithoutChemistInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutChemistInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutChemistInput
  }

  export type ChemistUncheckedCreateInput = {
    id?: string
    organizationId: string
    chemistChainId?: string | null
    territoryId: string
    name: string
    type: $Enums.ChemistType
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    profilePictureUrl?: string | null
    visitingHours?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isActive?: boolean
    notes?: ChemistNoteUncheckedCreateNestedManyWithoutChemistInput
    interactions?: ChemistInteractionUncheckedCreateNestedManyWithoutChemistInput
    doctorRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutChemistInput
    orders?: OrderUncheckedCreateNestedManyWithoutChemistInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutChemistInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutChemistInput
  }

  export type ChemistUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChemistTypeFieldUpdateOperationsInput | $Enums.ChemistType
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    visitingHours?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    chemistChain?: ChemistChainUpdateOneWithoutChemistsNestedInput
    territory?: TerritoryUpdateOneRequiredWithoutChemistsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutChemistsCreatedNestedInput
    notes?: ChemistNoteUpdateManyWithoutChemistNestedInput
    interactions?: ChemistInteractionUpdateManyWithoutChemistNestedInput
    doctorRelations?: DoctorChemistRelationUpdateManyWithoutChemistNestedInput
    orders?: OrderUpdateManyWithoutChemistNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutChemistNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutChemistNestedInput
  }

  export type ChemistUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    chemistChainId?: NullableStringFieldUpdateOperationsInput | string | null
    territoryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChemistTypeFieldUpdateOperationsInput | $Enums.ChemistType
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    visitingHours?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: ChemistNoteUncheckedUpdateManyWithoutChemistNestedInput
    interactions?: ChemistInteractionUncheckedUpdateManyWithoutChemistNestedInput
    doctorRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutChemistNestedInput
    orders?: OrderUncheckedUpdateManyWithoutChemistNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutChemistNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutChemistNestedInput
  }

  export type ChemistCreateManyInput = {
    id?: string
    organizationId: string
    chemistChainId?: string | null
    territoryId: string
    name: string
    type: $Enums.ChemistType
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    profilePictureUrl?: string | null
    visitingHours?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isActive?: boolean
  }

  export type ChemistUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChemistTypeFieldUpdateOperationsInput | $Enums.ChemistType
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    visitingHours?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ChemistUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    chemistChainId?: NullableStringFieldUpdateOperationsInput | string | null
    territoryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChemistTypeFieldUpdateOperationsInput | $Enums.ChemistType
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    visitingHours?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ChemistNoteCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chemist: ChemistCreateNestedOneWithoutNotesInput
    createdBy: EmployeeCreateNestedOneWithoutChemistNotesInput
  }

  export type ChemistNoteUncheckedCreateInput = {
    id?: string
    chemistId: string
    createdById: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChemistNoteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chemist?: ChemistUpdateOneRequiredWithoutNotesNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutChemistNotesNestedInput
  }

  export type ChemistNoteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    chemistId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChemistNoteCreateManyInput = {
    id?: string
    chemistId: string
    createdById: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChemistNoteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChemistNoteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    chemistId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChemistInteractionCreateInput = {
    id?: string
    interactionType: $Enums.InteractionType
    startTime: Date | string
    endTime?: Date | string | null
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    rating?: number | null
    createdAt?: Date | string
    chemist: ChemistCreateNestedOneWithoutInteractionsInput
    employee: EmployeeCreateNestedOneWithoutChemistInteractionsInput
    chemistTask?: ChemistTaskCreateNestedOneWithoutChemistInteractionsInput
  }

  export type ChemistInteractionUncheckedCreateInput = {
    id?: string
    chemistId: string
    employeeId: string
    interactionType: $Enums.InteractionType
    startTime: Date | string
    endTime?: Date | string | null
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    rating?: number | null
    createdAt?: Date | string
    chemistTaskId?: string | null
  }

  export type ChemistInteractionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    interactionType?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chemist?: ChemistUpdateOneRequiredWithoutInteractionsNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutChemistInteractionsNestedInput
    chemistTask?: ChemistTaskUpdateOneWithoutChemistInteractionsNestedInput
  }

  export type ChemistInteractionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    chemistId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    interactionType?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chemistTaskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChemistInteractionCreateManyInput = {
    id?: string
    chemistId: string
    employeeId: string
    interactionType: $Enums.InteractionType
    startTime: Date | string
    endTime?: Date | string | null
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    rating?: number | null
    createdAt?: Date | string
    chemistTaskId?: string | null
  }

  export type ChemistInteractionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    interactionType?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChemistInteractionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    chemistId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    interactionType?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chemistTaskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DoctorChemistRelationCreateInput = {
    id?: string
    createdAt?: Date | string
    doctor: DoctorCreateNestedOneWithoutChemistRelationsInput
    chemist: ChemistCreateNestedOneWithoutDoctorRelationsInput
    createdBy: EmployeeCreateNestedOneWithoutDoctorChemistRelationsInput
  }

  export type DoctorChemistRelationUncheckedCreateInput = {
    id?: string
    doctorId: string
    chemistId: string
    createdAt?: Date | string
    createdById: string
  }

  export type DoctorChemistRelationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneRequiredWithoutChemistRelationsNestedInput
    chemist?: ChemistUpdateOneRequiredWithoutDoctorRelationsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutDoctorChemistRelationsNestedInput
  }

  export type DoctorChemistRelationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    chemistId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type DoctorChemistRelationCreateManyInput = {
    id?: string
    doctorId: string
    chemistId: string
    createdAt?: Date | string
    createdById: string
  }

  export type DoctorChemistRelationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorChemistRelationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    chemistId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type OrderCreateInput = {
    id?: string
    organizationId: string
    totalAmount: Decimal | DecimalJsLike | number | string
    status: $Enums.OrderStatus
    orderDate: Date | string
    deliveryDate?: Date | string | null
    specialInstructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chemist?: ChemistCreateNestedOneWithoutOrdersInput
    createdBy: EmployeeCreateNestedOneWithoutOrdersCreatedInput
    items?: OrderItemCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateInput = {
    id?: string
    organizationId: string
    chemistId?: string | null
    totalAmount: Decimal | DecimalJsLike | number | string
    status: $Enums.OrderStatus
    orderDate: Date | string
    deliveryDate?: Date | string | null
    specialInstructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    items?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chemist?: ChemistUpdateOneWithoutOrdersNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutOrdersCreatedNestedInput
    items?: OrderItemUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    chemistId?: NullableStringFieldUpdateOperationsInput | string | null
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    items?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderCreateManyInput = {
    id?: string
    organizationId: string
    chemistId?: string | null
    totalAmount: Decimal | DecimalJsLike | number | string
    status: $Enums.OrderStatus
    orderDate: Date | string
    deliveryDate?: Date | string | null
    specialInstructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
  }

  export type OrderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    chemistId?: NullableStringFieldUpdateOperationsInput | string | null
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type OrderItemCreateInput = {
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    subtotal: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    order: OrderCreateNestedOneWithoutItemsInput
    drug: DrugCreateNestedOneWithoutOrderItemsInput
  }

  export type OrderItemUncheckedCreateInput = {
    orderId: string
    drugId: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    subtotal: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
  }

  export type OrderItemUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneRequiredWithoutItemsNestedInput
    drug?: DrugUpdateOneRequiredWithoutOrderItemsNestedInput
  }

  export type OrderItemUncheckedUpdateInput = {
    orderId?: StringFieldUpdateOperationsInput | string
    drugId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemCreateManyInput = {
    orderId: string
    drugId: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    subtotal: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
  }

  export type OrderItemUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemUncheckedUpdateManyInput = {
    orderId?: StringFieldUpdateOperationsInput | string
    drugId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DcrReportCreateInput = {
    id?: string
    organizationId: string
    taskType?: $Enums.TaskTypeReference | null
    reportDate: Date | string
    productsDiscussed?: string | null
    comments?: string | null
    isDraft?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutDcrReportsInput
    doctorTask?: DoctorTaskCreateNestedOneWithoutDcrReportsInput
    chemistTask?: ChemistTaskCreateNestedOneWithoutDcrReportsInput
    tourPlanTask?: TourPlanTaskCreateNestedOneWithoutDcrReportsInput
  }

  export type DcrReportUncheckedCreateInput = {
    id?: string
    organizationId: string
    employeeId: string
    taskId?: string | null
    taskType?: $Enums.TaskTypeReference | null
    reportDate: Date | string
    productsDiscussed?: string | null
    comments?: string | null
    isDraft?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DcrReportUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    taskType?: NullableEnumTaskTypeReferenceFieldUpdateOperationsInput | $Enums.TaskTypeReference | null
    reportDate?: DateTimeFieldUpdateOperationsInput | Date | string
    productsDiscussed?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    isDraft?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutDcrReportsNestedInput
    doctorTask?: DoctorTaskUpdateOneWithoutDcrReportsNestedInput
    chemistTask?: ChemistTaskUpdateOneWithoutDcrReportsNestedInput
    tourPlanTask?: TourPlanTaskUpdateOneWithoutDcrReportsNestedInput
  }

  export type DcrReportUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    taskType?: NullableEnumTaskTypeReferenceFieldUpdateOperationsInput | $Enums.TaskTypeReference | null
    reportDate?: DateTimeFieldUpdateOperationsInput | Date | string
    productsDiscussed?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    isDraft?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DcrReportCreateManyInput = {
    id?: string
    organizationId: string
    employeeId: string
    taskId?: string | null
    taskType?: $Enums.TaskTypeReference | null
    reportDate: Date | string
    productsDiscussed?: string | null
    comments?: string | null
    isDraft?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DcrReportUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    taskType?: NullableEnumTaskTypeReferenceFieldUpdateOperationsInput | $Enums.TaskTypeReference | null
    reportDate?: DateTimeFieldUpdateOperationsInput | Date | string
    productsDiscussed?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    isDraft?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DcrReportUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    taskType?: NullableEnumTaskTypeReferenceFieldUpdateOperationsInput | $Enums.TaskTypeReference | null
    reportDate?: DateTimeFieldUpdateOperationsInput | Date | string
    productsDiscussed?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    isDraft?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RcpaReportCreateInput = {
    id?: string
    organizationId: string
    remarks?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutRcpaReportsInput
    chemist: ChemistCreateNestedOneWithoutRcpaReportsInput
    drugData?: RcpaDrugDataCreateNestedManyWithoutRcpaReportInput
  }

  export type RcpaReportUncheckedCreateInput = {
    id?: string
    organizationId: string
    employeeId: string
    chemistId: string
    remarks?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    drugData?: RcpaDrugDataUncheckedCreateNestedManyWithoutRcpaReportInput
  }

  export type RcpaReportUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutRcpaReportsNestedInput
    chemist?: ChemistUpdateOneRequiredWithoutRcpaReportsNestedInput
    drugData?: RcpaDrugDataUpdateManyWithoutRcpaReportNestedInput
  }

  export type RcpaReportUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    chemistId?: StringFieldUpdateOperationsInput | string
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    drugData?: RcpaDrugDataUncheckedUpdateManyWithoutRcpaReportNestedInput
  }

  export type RcpaReportCreateManyInput = {
    id?: string
    organizationId: string
    employeeId: string
    chemistId: string
    remarks?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RcpaReportUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RcpaReportUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    chemistId?: StringFieldUpdateOperationsInput | string
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RcpaDrugDataCreateInput = {
    id?: string
    competitorDrugName?: string | null
    ownQuantity: number
    competitorQuantity: number
    createdAt?: Date | string
    rcpaReport: RcpaReportCreateNestedOneWithoutDrugDataInput
    drug?: DrugCreateNestedOneWithoutRcpaDataInput
  }

  export type RcpaDrugDataUncheckedCreateInput = {
    id?: string
    rcpaReportId: string
    drugId?: string | null
    competitorDrugName?: string | null
    ownQuantity: number
    competitorQuantity: number
    createdAt?: Date | string
  }

  export type RcpaDrugDataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    competitorDrugName?: NullableStringFieldUpdateOperationsInput | string | null
    ownQuantity?: IntFieldUpdateOperationsInput | number
    competitorQuantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rcpaReport?: RcpaReportUpdateOneRequiredWithoutDrugDataNestedInput
    drug?: DrugUpdateOneWithoutRcpaDataNestedInput
  }

  export type RcpaDrugDataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rcpaReportId?: StringFieldUpdateOperationsInput | string
    drugId?: NullableStringFieldUpdateOperationsInput | string | null
    competitorDrugName?: NullableStringFieldUpdateOperationsInput | string | null
    ownQuantity?: IntFieldUpdateOperationsInput | number
    competitorQuantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RcpaDrugDataCreateManyInput = {
    id?: string
    rcpaReportId: string
    drugId?: string | null
    competitorDrugName?: string | null
    ownQuantity: number
    competitorQuantity: number
    createdAt?: Date | string
  }

  export type RcpaDrugDataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    competitorDrugName?: NullableStringFieldUpdateOperationsInput | string | null
    ownQuantity?: IntFieldUpdateOperationsInput | number
    competitorQuantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RcpaDrugDataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    rcpaReportId?: StringFieldUpdateOperationsInput | string
    drugId?: NullableStringFieldUpdateOperationsInput | string | null
    competitorDrugName?: NullableStringFieldUpdateOperationsInput | string | null
    ownQuantity?: IntFieldUpdateOperationsInput | number
    competitorQuantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CheckInCreateInput = {
    id?: string
    organizationId: string
    checkInTime?: Date | string | null
    checkOutTime?: Date | string | null
    checkInLatitude?: Decimal | DecimalJsLike | number | string | null
    checkInLongitude?: Decimal | DecimalJsLike | number | string | null
    checkOutLatitude?: Decimal | DecimalJsLike | number | string | null
    checkOutLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutCheckInsInput
  }

  export type CheckInUncheckedCreateInput = {
    id?: string
    organizationId: string
    employeeId: string
    checkInTime?: Date | string | null
    checkOutTime?: Date | string | null
    checkInLatitude?: Decimal | DecimalJsLike | number | string | null
    checkInLongitude?: Decimal | DecimalJsLike | number | string | null
    checkOutLatitude?: Decimal | DecimalJsLike | number | string | null
    checkOutLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
  }

  export type CheckInUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkInLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    checkInLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    checkOutLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    checkOutLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutCheckInsNestedInput
  }

  export type CheckInUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkInLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    checkInLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    checkOutLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    checkOutLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CheckInCreateManyInput = {
    id?: string
    organizationId: string
    employeeId: string
    checkInTime?: Date | string | null
    checkOutTime?: Date | string | null
    checkInLatitude?: Decimal | DecimalJsLike | number | string | null
    checkInLongitude?: Decimal | DecimalJsLike | number | string | null
    checkOutLatitude?: Decimal | DecimalJsLike | number | string | null
    checkOutLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
  }

  export type CheckInUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkInLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    checkInLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    checkOutLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    checkOutLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CheckInUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkInLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    checkInLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    checkOutLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    checkOutLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskPlannerCreateInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.TaskPlannerStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutTaskPlansInput
    doctorTasks?: DoctorTaskCreateNestedManyWithoutPlannerInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutPlannerInput
    tourPlanTasks?: TourPlanTaskCreateNestedManyWithoutPlannerInput
  }

  export type TaskPlannerUncheckedCreateInput = {
    id?: string
    employeeId: string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.TaskPlannerStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorTasks?: DoctorTaskUncheckedCreateNestedManyWithoutPlannerInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutPlannerInput
    tourPlanTasks?: TourPlanTaskUncheckedCreateNestedManyWithoutPlannerInput
  }

  export type TaskPlannerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTaskPlannerStatusFieldUpdateOperationsInput | $Enums.TaskPlannerStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutTaskPlansNestedInput
    doctorTasks?: DoctorTaskUpdateManyWithoutPlannerNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutPlannerNestedInput
    tourPlanTasks?: TourPlanTaskUpdateManyWithoutPlannerNestedInput
  }

  export type TaskPlannerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTaskPlannerStatusFieldUpdateOperationsInput | $Enums.TaskPlannerStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorTasks?: DoctorTaskUncheckedUpdateManyWithoutPlannerNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutPlannerNestedInput
    tourPlanTasks?: TourPlanTaskUncheckedUpdateManyWithoutPlannerNestedInput
  }

  export type TaskPlannerCreateManyInput = {
    id?: string
    employeeId: string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.TaskPlannerStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskPlannerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTaskPlannerStatusFieldUpdateOperationsInput | $Enums.TaskPlannerStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskPlannerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTaskPlannerStatusFieldUpdateOperationsInput | $Enums.TaskPlannerStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorTaskCreateInput = {
    id?: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    planner: TaskPlannerCreateNestedOneWithoutDoctorTasksInput
    employee: EmployeeCreateNestedOneWithoutDoctorTasksInput
    doctor: DoctorCreateNestedOneWithoutDoctorTaskInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutDoctorTaskInput
    dcrReports?: DcrReportCreateNestedManyWithoutDoctorTaskInput
  }

  export type DoctorTaskUncheckedCreateInput = {
    id?: string
    plannerId: string
    employeeId: string
    doctorId: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutDoctorTaskInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutDoctorTaskInput
  }

  export type DoctorTaskUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    planner?: TaskPlannerUpdateOneRequiredWithoutDoctorTasksNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutDoctorTasksNestedInput
    doctor?: DoctorUpdateOneRequiredWithoutDoctorTaskNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutDoctorTaskNestedInput
    dcrReports?: DcrReportUpdateManyWithoutDoctorTaskNestedInput
  }

  export type DoctorTaskUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    plannerId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutDoctorTaskNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutDoctorTaskNestedInput
  }

  export type DoctorTaskCreateManyInput = {
    id?: string
    plannerId: string
    employeeId: string
    doctorId: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorTaskUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorTaskUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    plannerId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChemistTaskCreateInput = {
    id?: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    planner: TaskPlannerCreateNestedOneWithoutChemistTasksInput
    employee: EmployeeCreateNestedOneWithoutChemistTasksInput
    chemist: ChemistCreateNestedOneWithoutChemistTasksInput
    chemistInteractions?: ChemistInteractionCreateNestedManyWithoutChemistTaskInput
    dcrReports?: DcrReportCreateNestedManyWithoutChemistTaskInput
  }

  export type ChemistTaskUncheckedCreateInput = {
    id?: string
    plannerId: string
    employeeId: string
    chemistId: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    chemistInteractions?: ChemistInteractionUncheckedCreateNestedManyWithoutChemistTaskInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutChemistTaskInput
  }

  export type ChemistTaskUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    planner?: TaskPlannerUpdateOneRequiredWithoutChemistTasksNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutChemistTasksNestedInput
    chemist?: ChemistUpdateOneRequiredWithoutChemistTasksNestedInput
    chemistInteractions?: ChemistInteractionUpdateManyWithoutChemistTaskNestedInput
    dcrReports?: DcrReportUpdateManyWithoutChemistTaskNestedInput
  }

  export type ChemistTaskUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    plannerId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    chemistId?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chemistInteractions?: ChemistInteractionUncheckedUpdateManyWithoutChemistTaskNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutChemistTaskNestedInput
  }

  export type ChemistTaskCreateManyInput = {
    id?: string
    plannerId: string
    employeeId: string
    chemistId: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChemistTaskUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChemistTaskUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    plannerId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    chemistId?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TourPlanTaskCreateInput = {
    id?: string
    location: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    planner: TaskPlannerCreateNestedOneWithoutTourPlanTasksInput
    employee: EmployeeCreateNestedOneWithoutTourPlanTasksInput
    tourPlan: TourPlanCreateNestedOneWithoutTourTasksInput
    tourPlanReports?: TourPlanReportCreateNestedManyWithoutTourTaskInput
    dcrReports?: DcrReportCreateNestedManyWithoutTourPlanTaskInput
  }

  export type TourPlanTaskUncheckedCreateInput = {
    id?: string
    plannerId: string
    employeeId: string
    tourPlanId: string
    location: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    tourPlanReports?: TourPlanReportUncheckedCreateNestedManyWithoutTourTaskInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutTourPlanTaskInput
  }

  export type TourPlanTaskUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    planner?: TaskPlannerUpdateOneRequiredWithoutTourPlanTasksNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutTourPlanTasksNestedInput
    tourPlan?: TourPlanUpdateOneRequiredWithoutTourTasksNestedInput
    tourPlanReports?: TourPlanReportUpdateManyWithoutTourTaskNestedInput
    dcrReports?: DcrReportUpdateManyWithoutTourPlanTaskNestedInput
  }

  export type TourPlanTaskUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    plannerId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    tourPlanId?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tourPlanReports?: TourPlanReportUncheckedUpdateManyWithoutTourTaskNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutTourPlanTaskNestedInput
  }

  export type TourPlanTaskCreateManyInput = {
    id?: string
    plannerId: string
    employeeId: string
    tourPlanId: string
    location: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TourPlanTaskUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TourPlanTaskUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    plannerId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    tourPlanId?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TourPlanCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tourTasks?: TourPlanTaskCreateNestedManyWithoutTourPlanInput
  }

  export type TourPlanUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tourTasks?: TourPlanTaskUncheckedCreateNestedManyWithoutTourPlanInput
  }

  export type TourPlanUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tourTasks?: TourPlanTaskUpdateManyWithoutTourPlanNestedInput
  }

  export type TourPlanUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tourTasks?: TourPlanTaskUncheckedUpdateManyWithoutTourPlanNestedInput
  }

  export type TourPlanCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TourPlanUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TourPlanUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TourPlanReportCreateInput = {
    id?: string
    interactionTime?: Date | string
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tourTask: TourPlanTaskCreateNestedOneWithoutTourPlanReportsInput
  }

  export type TourPlanReportUncheckedCreateInput = {
    id?: string
    tourTaskId: string
    interactionTime?: Date | string
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TourPlanReportUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    interactionTime?: DateTimeFieldUpdateOperationsInput | Date | string
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tourTask?: TourPlanTaskUpdateOneRequiredWithoutTourPlanReportsNestedInput
  }

  export type TourPlanReportUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tourTaskId?: StringFieldUpdateOperationsInput | string
    interactionTime?: DateTimeFieldUpdateOperationsInput | Date | string
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TourPlanReportCreateManyInput = {
    id?: string
    tourTaskId: string
    interactionTime?: Date | string
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TourPlanReportUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    interactionTime?: DateTimeFieldUpdateOperationsInput | Date | string
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TourPlanReportUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tourTaskId?: StringFieldUpdateOperationsInput | string
    interactionTime?: DateTimeFieldUpdateOperationsInput | Date | string
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExpenseTypeCreateInput = {
    id?: string
    name: string
    description?: string | null
    icon?: string | null
    formFields: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    roleConfigs?: ExpenseRoleConfigCreateNestedManyWithoutExpenseTypeInput
    expenseClaims?: ExpenseClaimCreateNestedManyWithoutExpenseTypeInput
  }

  export type ExpenseTypeUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    icon?: string | null
    formFields: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    roleConfigs?: ExpenseRoleConfigUncheckedCreateNestedManyWithoutExpenseTypeInput
    expenseClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutExpenseTypeInput
  }

  export type ExpenseTypeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    formFields?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roleConfigs?: ExpenseRoleConfigUpdateManyWithoutExpenseTypeNestedInput
    expenseClaims?: ExpenseClaimUpdateManyWithoutExpenseTypeNestedInput
  }

  export type ExpenseTypeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    formFields?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roleConfigs?: ExpenseRoleConfigUncheckedUpdateManyWithoutExpenseTypeNestedInput
    expenseClaims?: ExpenseClaimUncheckedUpdateManyWithoutExpenseTypeNestedInput
  }

  export type ExpenseTypeCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    icon?: string | null
    formFields: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExpenseTypeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    formFields?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExpenseTypeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    formFields?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExpenseRoleConfigCreateInput = {
    id?: string
    role: $Enums.EmployeeRole
    limits: JsonNullValueInput | InputJsonValue
    rates?: NullableJsonNullValueInput | InputJsonValue
    validationRules: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    expenseType: ExpenseTypeCreateNestedOneWithoutRoleConfigsInput
    expenseClaims?: ExpenseClaimCreateNestedManyWithoutExpenseRoleConfigInput
  }

  export type ExpenseRoleConfigUncheckedCreateInput = {
    id?: string
    expenseTypeId: string
    role: $Enums.EmployeeRole
    limits: JsonNullValueInput | InputJsonValue
    rates?: NullableJsonNullValueInput | InputJsonValue
    validationRules: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    expenseClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutExpenseRoleConfigInput
  }

  export type ExpenseRoleConfigUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    limits?: JsonNullValueInput | InputJsonValue
    rates?: NullableJsonNullValueInput | InputJsonValue
    validationRules?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expenseType?: ExpenseTypeUpdateOneRequiredWithoutRoleConfigsNestedInput
    expenseClaims?: ExpenseClaimUpdateManyWithoutExpenseRoleConfigNestedInput
  }

  export type ExpenseRoleConfigUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    expenseTypeId?: StringFieldUpdateOperationsInput | string
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    limits?: JsonNullValueInput | InputJsonValue
    rates?: NullableJsonNullValueInput | InputJsonValue
    validationRules?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expenseClaims?: ExpenseClaimUncheckedUpdateManyWithoutExpenseRoleConfigNestedInput
  }

  export type ExpenseRoleConfigCreateManyInput = {
    id?: string
    expenseTypeId: string
    role: $Enums.EmployeeRole
    limits: JsonNullValueInput | InputJsonValue
    rates?: NullableJsonNullValueInput | InputJsonValue
    validationRules: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExpenseRoleConfigUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    limits?: JsonNullValueInput | InputJsonValue
    rates?: NullableJsonNullValueInput | InputJsonValue
    validationRules?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExpenseRoleConfigUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    expenseTypeId?: StringFieldUpdateOperationsInput | string
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    limits?: JsonNullValueInput | InputJsonValue
    rates?: NullableJsonNullValueInput | InputJsonValue
    validationRules?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExpenseClaimCreateInput = {
    id?: string
    claimNumber: string
    expenseData: JsonNullValueInput | InputJsonValue
    status?: $Enums.ExpenseClaimStatus
    submittedAt?: Date | string
    approvedAt?: Date | string | null
    approvalComments?: string | null
    rejectionReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutExpenseClaimsInput
    expenseType: ExpenseTypeCreateNestedOneWithoutExpenseClaimsInput
    expenseRoleConfig: ExpenseRoleConfigCreateNestedOneWithoutExpenseClaimsInput
    approver?: EmployeeCreateNestedOneWithoutApprovedClaimsInput
  }

  export type ExpenseClaimUncheckedCreateInput = {
    id?: string
    claimNumber: string
    employeeId: string
    expenseTypeId: string
    expenseRoleConfigId: string
    expenseData: JsonNullValueInput | InputJsonValue
    status?: $Enums.ExpenseClaimStatus
    submittedAt?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    approvalComments?: string | null
    rejectionReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExpenseClaimUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    claimNumber?: StringFieldUpdateOperationsInput | string
    expenseData?: JsonNullValueInput | InputJsonValue
    status?: EnumExpenseClaimStatusFieldUpdateOperationsInput | $Enums.ExpenseClaimStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalComments?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutExpenseClaimsNestedInput
    expenseType?: ExpenseTypeUpdateOneRequiredWithoutExpenseClaimsNestedInput
    expenseRoleConfig?: ExpenseRoleConfigUpdateOneRequiredWithoutExpenseClaimsNestedInput
    approver?: EmployeeUpdateOneWithoutApprovedClaimsNestedInput
  }

  export type ExpenseClaimUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    claimNumber?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    expenseTypeId?: StringFieldUpdateOperationsInput | string
    expenseRoleConfigId?: StringFieldUpdateOperationsInput | string
    expenseData?: JsonNullValueInput | InputJsonValue
    status?: EnumExpenseClaimStatusFieldUpdateOperationsInput | $Enums.ExpenseClaimStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvalComments?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExpenseClaimCreateManyInput = {
    id?: string
    claimNumber: string
    employeeId: string
    expenseTypeId: string
    expenseRoleConfigId: string
    expenseData: JsonNullValueInput | InputJsonValue
    status?: $Enums.ExpenseClaimStatus
    submittedAt?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    approvalComments?: string | null
    rejectionReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExpenseClaimUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    claimNumber?: StringFieldUpdateOperationsInput | string
    expenseData?: JsonNullValueInput | InputJsonValue
    status?: EnumExpenseClaimStatusFieldUpdateOperationsInput | $Enums.ExpenseClaimStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalComments?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExpenseClaimUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    claimNumber?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    expenseTypeId?: StringFieldUpdateOperationsInput | string
    expenseRoleConfigId?: StringFieldUpdateOperationsInput | string
    expenseData?: JsonNullValueInput | InputJsonValue
    status?: EnumExpenseClaimStatusFieldUpdateOperationsInput | $Enums.ExpenseClaimStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvalComments?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GiftCreateInput = {
    id?: string
    name: string
    description?: string | null
    unitCost: Decimal | DecimalJsLike | number | string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    giftImages?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    createdBy: EmployeeCreateNestedOneWithoutGiftsCreatedInput
    userGiftInventories?: UserGiftInventoryCreateNestedManyWithoutGiftInput
    doctorDistributionGiftItems?: DoctorDistributionGiftItemCreateNestedManyWithoutGiftInput
  }

  export type GiftUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    unitCost: Decimal | DecimalJsLike | number | string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    giftImages?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isActive?: boolean
    userGiftInventories?: UserGiftInventoryUncheckedCreateNestedManyWithoutGiftInput
    doctorDistributionGiftItems?: DoctorDistributionGiftItemUncheckedCreateNestedManyWithoutGiftInput
  }

  export type GiftUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    giftImages?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: EmployeeUpdateOneRequiredWithoutGiftsCreatedNestedInput
    userGiftInventories?: UserGiftInventoryUpdateManyWithoutGiftNestedInput
    doctorDistributionGiftItems?: DoctorDistributionGiftItemUpdateManyWithoutGiftNestedInput
  }

  export type GiftUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    giftImages?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userGiftInventories?: UserGiftInventoryUncheckedUpdateManyWithoutGiftNestedInput
    doctorDistributionGiftItems?: DoctorDistributionGiftItemUncheckedUpdateManyWithoutGiftNestedInput
  }

  export type GiftCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    unitCost: Decimal | DecimalJsLike | number | string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    giftImages?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isActive?: boolean
  }

  export type GiftUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    giftImages?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GiftUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    giftImages?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserDrugInventoryCreateInput = {
    id?: string
    quantity: number
    lastRestockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutDrugInventoriesInput
    drug: DrugCreateNestedOneWithoutUserDrugInventoryInput
    doctorDistributionDrugItems?: DoctorDistributionDrugItemCreateNestedManyWithoutFromInventoryInput
  }

  export type UserDrugInventoryUncheckedCreateInput = {
    id?: string
    employeeId: string
    drugId: string
    quantity: number
    lastRestockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorDistributionDrugItems?: DoctorDistributionDrugItemUncheckedCreateNestedManyWithoutFromInventoryInput
  }

  export type UserDrugInventoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    lastRestockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutDrugInventoriesNestedInput
    drug?: DrugUpdateOneRequiredWithoutUserDrugInventoryNestedInput
    doctorDistributionDrugItems?: DoctorDistributionDrugItemUpdateManyWithoutFromInventoryNestedInput
  }

  export type UserDrugInventoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    drugId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    lastRestockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorDistributionDrugItems?: DoctorDistributionDrugItemUncheckedUpdateManyWithoutFromInventoryNestedInput
  }

  export type UserDrugInventoryCreateManyInput = {
    id?: string
    employeeId: string
    drugId: string
    quantity: number
    lastRestockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserDrugInventoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    lastRestockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserDrugInventoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    drugId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    lastRestockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserGiftInventoryCreateInput = {
    id?: string
    quantity: number
    lastRestockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutGiftInventoriesInput
    gift: GiftCreateNestedOneWithoutUserGiftInventoriesInput
    doctorDistributionGiftItems?: DoctorDistributionGiftItemCreateNestedManyWithoutFromInventoryInput
  }

  export type UserGiftInventoryUncheckedCreateInput = {
    id?: string
    employeeId: string
    giftId: string
    quantity: number
    lastRestockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorDistributionGiftItems?: DoctorDistributionGiftItemUncheckedCreateNestedManyWithoutFromInventoryInput
  }

  export type UserGiftInventoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    lastRestockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutGiftInventoriesNestedInput
    gift?: GiftUpdateOneRequiredWithoutUserGiftInventoriesNestedInput
    doctorDistributionGiftItems?: DoctorDistributionGiftItemUpdateManyWithoutFromInventoryNestedInput
  }

  export type UserGiftInventoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    giftId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    lastRestockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorDistributionGiftItems?: DoctorDistributionGiftItemUncheckedUpdateManyWithoutFromInventoryNestedInput
  }

  export type UserGiftInventoryCreateManyInput = {
    id?: string
    employeeId: string
    giftId: string
    quantity: number
    lastRestockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserGiftInventoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    lastRestockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserGiftInventoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    giftId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    lastRestockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorDistributionCreateInput = {
    id?: string
    distributedAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorInteraction: DoctorInteractionCreateNestedOneWithoutDoctorDistributionInput
    employee: EmployeeCreateNestedOneWithoutDoctorDistributionsInput
    drugItems?: DoctorDistributionDrugItemCreateNestedManyWithoutDoctorDistributionInput
    giftItems?: DoctorDistributionGiftItemCreateNestedManyWithoutDoctorDistributionInput
  }

  export type DoctorDistributionUncheckedCreateInput = {
    id?: string
    doctorInteractionId: string
    employeeId: string
    distributedAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    drugItems?: DoctorDistributionDrugItemUncheckedCreateNestedManyWithoutDoctorDistributionInput
    giftItems?: DoctorDistributionGiftItemUncheckedCreateNestedManyWithoutDoctorDistributionInput
  }

  export type DoctorDistributionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    distributedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorInteraction?: DoctorInteractionUpdateOneRequiredWithoutDoctorDistributionNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutDoctorDistributionsNestedInput
    drugItems?: DoctorDistributionDrugItemUpdateManyWithoutDoctorDistributionNestedInput
    giftItems?: DoctorDistributionGiftItemUpdateManyWithoutDoctorDistributionNestedInput
  }

  export type DoctorDistributionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorInteractionId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    distributedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    drugItems?: DoctorDistributionDrugItemUncheckedUpdateManyWithoutDoctorDistributionNestedInput
    giftItems?: DoctorDistributionGiftItemUncheckedUpdateManyWithoutDoctorDistributionNestedInput
  }

  export type DoctorDistributionCreateManyInput = {
    id?: string
    doctorInteractionId: string
    employeeId: string
    distributedAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorDistributionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    distributedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorDistributionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorInteractionId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    distributedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorDistributionDrugItemCreateInput = {
    id?: string
    quantity: number
    unitCost: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorDistribution: DoctorDistributionCreateNestedOneWithoutDrugItemsInput
    drug: DrugCreateNestedOneWithoutDoctorDistributionDrugItemInput
    fromInventory: UserDrugInventoryCreateNestedOneWithoutDoctorDistributionDrugItemsInput
  }

  export type DoctorDistributionDrugItemUncheckedCreateInput = {
    id?: string
    doctorDistributionId: string
    drugId: string
    fromInventoryId: string
    quantity: number
    unitCost: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorDistributionDrugItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorDistribution?: DoctorDistributionUpdateOneRequiredWithoutDrugItemsNestedInput
    drug?: DrugUpdateOneRequiredWithoutDoctorDistributionDrugItemNestedInput
    fromInventory?: UserDrugInventoryUpdateOneRequiredWithoutDoctorDistributionDrugItemsNestedInput
  }

  export type DoctorDistributionDrugItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorDistributionId?: StringFieldUpdateOperationsInput | string
    drugId?: StringFieldUpdateOperationsInput | string
    fromInventoryId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorDistributionDrugItemCreateManyInput = {
    id?: string
    doctorDistributionId: string
    drugId: string
    fromInventoryId: string
    quantity: number
    unitCost: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorDistributionDrugItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorDistributionDrugItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorDistributionId?: StringFieldUpdateOperationsInput | string
    drugId?: StringFieldUpdateOperationsInput | string
    fromInventoryId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorDistributionGiftItemCreateInput = {
    id?: string
    quantity: number
    unitCost: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorDistribution: DoctorDistributionCreateNestedOneWithoutGiftItemsInput
    gift: GiftCreateNestedOneWithoutDoctorDistributionGiftItemsInput
    fromInventory: UserGiftInventoryCreateNestedOneWithoutDoctorDistributionGiftItemsInput
  }

  export type DoctorDistributionGiftItemUncheckedCreateInput = {
    id?: string
    doctorDistributionId: string
    giftId: string
    fromInventoryId: string
    quantity: number
    unitCost: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorDistributionGiftItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorDistribution?: DoctorDistributionUpdateOneRequiredWithoutGiftItemsNestedInput
    gift?: GiftUpdateOneRequiredWithoutDoctorDistributionGiftItemsNestedInput
    fromInventory?: UserGiftInventoryUpdateOneRequiredWithoutDoctorDistributionGiftItemsNestedInput
  }

  export type DoctorDistributionGiftItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorDistributionId?: StringFieldUpdateOperationsInput | string
    giftId?: StringFieldUpdateOperationsInput | string
    fromInventoryId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorDistributionGiftItemCreateManyInput = {
    id?: string
    doctorDistributionId: string
    giftId: string
    fromInventoryId: string
    quantity: number
    unitCost: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorDistributionGiftItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorDistributionGiftItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorDistributionId?: StringFieldUpdateOperationsInput | string
    giftId?: StringFieldUpdateOperationsInput | string
    fromInventoryId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateInput = {
    id?: string
    organizationId: string
    tableName: string
    actionType: string
    recordId: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    createdAt?: Date | string
    employee?: EmployeeCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    organizationId: string
    employeeId?: string | null
    tableName: string
    actionType: string
    recordId: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    tableName?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: string
    organizationId: string
    employeeId?: string | null
    tableName: string
    actionType: string
    recordId: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    tableName?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumEmployeeRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.EmployeeRole | EnumEmployeeRoleFieldRefInput<$PrismaModel>
    in?: $Enums.EmployeeRole[] | ListEnumEmployeeRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmployeeRole[] | ListEnumEmployeeRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumEmployeeRoleFilter<$PrismaModel> | $Enums.EmployeeRole
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EmployeeNullableScalarRelationFilter = {
    is?: EmployeeWhereInput | null
    isNot?: EmployeeWhereInput | null
  }

  export type EmployeeListRelationFilter = {
    every?: EmployeeWhereInput
    some?: EmployeeWhereInput
    none?: EmployeeWhereInput
  }

  export type TeamNullableScalarRelationFilter = {
    is?: TeamWhereInput | null
    isNot?: TeamWhereInput | null
  }

  export type EmployeeTerritoryListRelationFilter = {
    every?: EmployeeTerritoryWhereInput
    some?: EmployeeTerritoryWhereInput
    none?: EmployeeTerritoryWhereInput
  }

  export type EmployeeTrainingRecordListRelationFilter = {
    every?: EmployeeTrainingRecordWhereInput
    some?: EmployeeTrainingRecordWhereInput
    none?: EmployeeTrainingRecordWhereInput
  }

  export type DoctorNoteListRelationFilter = {
    every?: DoctorNoteWhereInput
    some?: DoctorNoteWhereInput
    none?: DoctorNoteWhereInput
  }

  export type ChemistNoteListRelationFilter = {
    every?: ChemistNoteWhereInput
    some?: ChemistNoteWhereInput
    none?: ChemistNoteWhereInput
  }

  export type DoctorInteractionListRelationFilter = {
    every?: DoctorInteractionWhereInput
    some?: DoctorInteractionWhereInput
    none?: DoctorInteractionWhereInput
  }

  export type ChemistInteractionListRelationFilter = {
    every?: ChemistInteractionWhereInput
    some?: ChemistInteractionWhereInput
    none?: ChemistInteractionWhereInput
  }

  export type DcrReportListRelationFilter = {
    every?: DcrReportWhereInput
    some?: DcrReportWhereInput
    none?: DcrReportWhereInput
  }

  export type RcpaReportListRelationFilter = {
    every?: RcpaReportWhereInput
    some?: RcpaReportWhereInput
    none?: RcpaReportWhereInput
  }

  export type CheckInListRelationFilter = {
    every?: CheckInWhereInput
    some?: CheckInWhereInput
    none?: CheckInWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type OrderListRelationFilter = {
    every?: OrderWhereInput
    some?: OrderWhereInput
    none?: OrderWhereInput
  }

  export type DoctorListRelationFilter = {
    every?: DoctorWhereInput
    some?: DoctorWhereInput
    none?: DoctorWhereInput
  }

  export type DrugListRelationFilter = {
    every?: DrugWhereInput
    some?: DrugWhereInput
    none?: DrugWhereInput
  }

  export type ChemistListRelationFilter = {
    every?: ChemistWhereInput
    some?: ChemistWhereInput
    none?: ChemistWhereInput
  }

  export type DoctorChemistRelationListRelationFilter = {
    every?: DoctorChemistRelationWhereInput
    some?: DoctorChemistRelationWhereInput
    none?: DoctorChemistRelationWhereInput
  }

  export type ExpenseClaimListRelationFilter = {
    every?: ExpenseClaimWhereInput
    some?: ExpenseClaimWhereInput
    none?: ExpenseClaimWhereInput
  }

  export type UserDrugInventoryListRelationFilter = {
    every?: UserDrugInventoryWhereInput
    some?: UserDrugInventoryWhereInput
    none?: UserDrugInventoryWhereInput
  }

  export type UserGiftInventoryListRelationFilter = {
    every?: UserGiftInventoryWhereInput
    some?: UserGiftInventoryWhereInput
    none?: UserGiftInventoryWhereInput
  }

  export type GiftListRelationFilter = {
    every?: GiftWhereInput
    some?: GiftWhereInput
    none?: GiftWhereInput
  }

  export type DoctorDistributionListRelationFilter = {
    every?: DoctorDistributionWhereInput
    some?: DoctorDistributionWhereInput
    none?: DoctorDistributionWhereInput
  }

  export type TaskPlannerListRelationFilter = {
    every?: TaskPlannerWhereInput
    some?: TaskPlannerWhereInput
    none?: TaskPlannerWhereInput
  }

  export type DoctorTaskListRelationFilter = {
    every?: DoctorTaskWhereInput
    some?: DoctorTaskWhereInput
    none?: DoctorTaskWhereInput
  }

  export type ChemistTaskListRelationFilter = {
    every?: ChemistTaskWhereInput
    some?: ChemistTaskWhereInput
    none?: ChemistTaskWhereInput
  }

  export type TourPlanTaskListRelationFilter = {
    every?: TourPlanTaskWhereInput
    some?: TourPlanTaskWhereInput
    none?: TourPlanTaskWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type EmployeeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmployeeTerritoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmployeeTrainingRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DoctorNoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChemistNoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DoctorInteractionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChemistInteractionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DcrReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RcpaReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CheckInOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DoctorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DrugOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChemistOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DoctorChemistRelationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExpenseClaimOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserDrugInventoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserGiftInventoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GiftOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DoctorDistributionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TaskPlannerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DoctorTaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChemistTaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TourPlanTaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmployeeCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    profilePic?: SortOrder
    role?: SortOrder
    reportingManagerId?: SortOrder
    teamId?: SortOrder
    employeeCode?: SortOrder
    city?: SortOrder
    state?: SortOrder
    assignedLatitude?: SortOrder
    assignedLongitude?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
    isActive?: SortOrder
  }

  export type EmployeeAvgOrderByAggregateInput = {
    assignedLatitude?: SortOrder
    assignedLongitude?: SortOrder
  }

  export type EmployeeMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    profilePic?: SortOrder
    role?: SortOrder
    reportingManagerId?: SortOrder
    teamId?: SortOrder
    employeeCode?: SortOrder
    city?: SortOrder
    state?: SortOrder
    assignedLatitude?: SortOrder
    assignedLongitude?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
    isActive?: SortOrder
  }

  export type EmployeeMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    profilePic?: SortOrder
    role?: SortOrder
    reportingManagerId?: SortOrder
    teamId?: SortOrder
    employeeCode?: SortOrder
    city?: SortOrder
    state?: SortOrder
    assignedLatitude?: SortOrder
    assignedLongitude?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
    isActive?: SortOrder
  }

  export type EmployeeSumOrderByAggregateInput = {
    assignedLatitude?: SortOrder
    assignedLongitude?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumEmployeeRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EmployeeRole | EnumEmployeeRoleFieldRefInput<$PrismaModel>
    in?: $Enums.EmployeeRole[] | ListEnumEmployeeRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmployeeRole[] | ListEnumEmployeeRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumEmployeeRoleWithAggregatesFilter<$PrismaModel> | $Enums.EmployeeRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEmployeeRoleFilter<$PrismaModel>
    _max?: NestedEnumEmployeeRoleFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EmployeeScalarRelationFilter = {
    is?: EmployeeWhereInput
    isNot?: EmployeeWhereInput
  }

  export type TeamCountOrderByAggregateInput = {
    id?: SortOrder
    teamName?: SortOrder
    leadId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
  }

  export type TeamMaxOrderByAggregateInput = {
    id?: SortOrder
    teamName?: SortOrder
    leadId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
  }

  export type TeamMinOrderByAggregateInput = {
    id?: SortOrder
    teamName?: SortOrder
    leadId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type TerritoryNullableScalarRelationFilter = {
    is?: TerritoryWhereInput | null
    isNot?: TerritoryWhereInput | null
  }

  export type TerritoryListRelationFilter = {
    every?: TerritoryWhereInput
    some?: TerritoryWhereInput
    none?: TerritoryWhereInput
  }

  export type HospitalListRelationFilter = {
    every?: HospitalWhereInput
    some?: HospitalWhereInput
    none?: HospitalWhereInput
  }

  export type TerritoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HospitalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TerritoryCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    parentTerritoryId?: SortOrder
    boundaries?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TerritoryMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    parentTerritoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TerritoryMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    parentTerritoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type TerritoryScalarRelationFilter = {
    is?: TerritoryWhereInput
    isNot?: TerritoryWhereInput
  }

  export type EmployeeTerritoryCountOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    territoryId?: SortOrder
    assignedAt?: SortOrder
    unassignedAt?: SortOrder
    isPrimary?: SortOrder
  }

  export type EmployeeTerritoryMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    territoryId?: SortOrder
    assignedAt?: SortOrder
    unassignedAt?: SortOrder
    isPrimary?: SortOrder
  }

  export type EmployeeTerritoryMinOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    territoryId?: SortOrder
    assignedAt?: SortOrder
    unassignedAt?: SortOrder
    isPrimary?: SortOrder
  }

  export type EmployeeTrainingRecordCountOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    trainingName?: SortOrder
    description?: SortOrder
    completionDate?: SortOrder
    createdAt?: SortOrder
  }

  export type EmployeeTrainingRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    trainingName?: SortOrder
    description?: SortOrder
    completionDate?: SortOrder
    createdAt?: SortOrder
  }

  export type EmployeeTrainingRecordMinOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    trainingName?: SortOrder
    description?: SortOrder
    completionDate?: SortOrder
    createdAt?: SortOrder
  }

  export type HospitalChainCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    headquartersAddress?: SortOrder
    contactEmail?: SortOrder
    contactPhone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
  }

  export type HospitalChainMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    headquartersAddress?: SortOrder
    contactEmail?: SortOrder
    contactPhone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
  }

  export type HospitalChainMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    headquartersAddress?: SortOrder
    contactEmail?: SortOrder
    contactPhone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
  }

  export type ChemistChainCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    headquartersAddress?: SortOrder
    contactEmail?: SortOrder
    contactPhone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
  }

  export type ChemistChainMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    headquartersAddress?: SortOrder
    contactEmail?: SortOrder
    contactPhone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
  }

  export type ChemistChainMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    headquartersAddress?: SortOrder
    contactEmail?: SortOrder
    contactPhone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
  }

  export type HospitalChainNullableScalarRelationFilter = {
    is?: HospitalChainWhereInput | null
    isNot?: HospitalChainWhereInput | null
  }

  export type DoctorHospitalAssociationListRelationFilter = {
    every?: DoctorHospitalAssociationWhereInput
    some?: DoctorHospitalAssociationWhereInput
    none?: DoctorHospitalAssociationWhereInput
  }

  export type DoctorConsultationScheduleListRelationFilter = {
    every?: DoctorConsultationScheduleWhereInput
    some?: DoctorConsultationScheduleWhereInput
    none?: DoctorConsultationScheduleWhereInput
  }

  export type DoctorHospitalAssociationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DoctorConsultationScheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HospitalCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    hospitalChainId?: SortOrder
    territoryId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    pincode?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    website?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
  }

  export type HospitalAvgOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type HospitalMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    hospitalChainId?: SortOrder
    territoryId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    pincode?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    website?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
  }

  export type HospitalMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    hospitalChainId?: SortOrder
    territoryId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    pincode?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    website?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
  }

  export type HospitalSumOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DoctorCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    designation?: SortOrder
    specialization?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    description?: SortOrder
    profilePictureUrl?: SortOrder
    qualification?: SortOrder
    experienceYears?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    isActive?: SortOrder
  }

  export type DoctorAvgOrderByAggregateInput = {
    experienceYears?: SortOrder
  }

  export type DoctorMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    designation?: SortOrder
    specialization?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    description?: SortOrder
    profilePictureUrl?: SortOrder
    qualification?: SortOrder
    experienceYears?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    isActive?: SortOrder
  }

  export type DoctorMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    designation?: SortOrder
    specialization?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    description?: SortOrder
    profilePictureUrl?: SortOrder
    qualification?: SortOrder
    experienceYears?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    isActive?: SortOrder
  }

  export type DoctorSumOrderByAggregateInput = {
    experienceYears?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DoctorScalarRelationFilter = {
    is?: DoctorWhereInput
    isNot?: DoctorWhereInput
  }

  export type HospitalScalarRelationFilter = {
    is?: HospitalWhereInput
    isNot?: HospitalWhereInput
  }

  export type DoctorHospitalAssociationDoctorIdHospitalIdCompoundUniqueInput = {
    doctorId: string
    hospitalId: string
  }

  export type DoctorHospitalAssociationCountOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    hospitalId?: SortOrder
    department?: SortOrder
    position?: SortOrder
    isPrimary?: SortOrder
    associationStartDate?: SortOrder
    associationEndDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DoctorHospitalAssociationMaxOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    hospitalId?: SortOrder
    department?: SortOrder
    position?: SortOrder
    isPrimary?: SortOrder
    associationStartDate?: SortOrder
    associationEndDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DoctorHospitalAssociationMinOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    hospitalId?: SortOrder
    department?: SortOrder
    position?: SortOrder
    isPrimary?: SortOrder
    associationStartDate?: SortOrder
    associationEndDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumDayOfWeekFilter<$PrismaModel = never> = {
    equals?: $Enums.DayOfWeek | EnumDayOfWeekFieldRefInput<$PrismaModel>
    in?: $Enums.DayOfWeek[] | ListEnumDayOfWeekFieldRefInput<$PrismaModel>
    notIn?: $Enums.DayOfWeek[] | ListEnumDayOfWeekFieldRefInput<$PrismaModel>
    not?: NestedEnumDayOfWeekFilter<$PrismaModel> | $Enums.DayOfWeek
  }

  export type EnumConsultationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ConsultationType | EnumConsultationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ConsultationType[] | ListEnumConsultationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ConsultationType[] | ListEnumConsultationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumConsultationTypeFilter<$PrismaModel> | $Enums.ConsultationType
  }

  export type DoctorConsultationScheduleCountOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    hospitalId?: SortOrder
    dayOfWeek?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    consultationType?: SortOrder
    isActive?: SortOrder
    effectiveFrom?: SortOrder
    effectiveTo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DoctorConsultationScheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    hospitalId?: SortOrder
    dayOfWeek?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    consultationType?: SortOrder
    isActive?: SortOrder
    effectiveFrom?: SortOrder
    effectiveTo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DoctorConsultationScheduleMinOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    hospitalId?: SortOrder
    dayOfWeek?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    consultationType?: SortOrder
    isActive?: SortOrder
    effectiveFrom?: SortOrder
    effectiveTo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumDayOfWeekWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DayOfWeek | EnumDayOfWeekFieldRefInput<$PrismaModel>
    in?: $Enums.DayOfWeek[] | ListEnumDayOfWeekFieldRefInput<$PrismaModel>
    notIn?: $Enums.DayOfWeek[] | ListEnumDayOfWeekFieldRefInput<$PrismaModel>
    not?: NestedEnumDayOfWeekWithAggregatesFilter<$PrismaModel> | $Enums.DayOfWeek
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDayOfWeekFilter<$PrismaModel>
    _max?: NestedEnumDayOfWeekFilter<$PrismaModel>
  }

  export type EnumConsultationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ConsultationType | EnumConsultationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ConsultationType[] | ListEnumConsultationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ConsultationType[] | ListEnumConsultationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumConsultationTypeWithAggregatesFilter<$PrismaModel> | $Enums.ConsultationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumConsultationTypeFilter<$PrismaModel>
    _max?: NestedEnumConsultationTypeFilter<$PrismaModel>
  }

  export type DoctorNoteCountOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    createdById?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DoctorNoteMaxOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    createdById?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DoctorNoteMinOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    createdById?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumInteractionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.InteractionType | EnumInteractionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InteractionType[] | ListEnumInteractionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InteractionType[] | ListEnumInteractionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInteractionTypeFilter<$PrismaModel> | $Enums.InteractionType
  }

  export type HospitalNullableScalarRelationFilter = {
    is?: HospitalWhereInput | null
    isNot?: HospitalWhereInput | null
  }

  export type DoctorTaskNullableScalarRelationFilter = {
    is?: DoctorTaskWhereInput | null
    isNot?: DoctorTaskWhereInput | null
  }

  export type DoctorInteractionCountOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    employeeId?: SortOrder
    hospitalId?: SortOrder
    interactionType?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    purpose?: SortOrder
    outcome?: SortOrder
    comments?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    doctorTaskId?: SortOrder
  }

  export type DoctorInteractionAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type DoctorInteractionMaxOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    employeeId?: SortOrder
    hospitalId?: SortOrder
    interactionType?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    purpose?: SortOrder
    outcome?: SortOrder
    comments?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    doctorTaskId?: SortOrder
  }

  export type DoctorInteractionMinOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    employeeId?: SortOrder
    hospitalId?: SortOrder
    interactionType?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    purpose?: SortOrder
    outcome?: SortOrder
    comments?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    doctorTaskId?: SortOrder
  }

  export type DoctorInteractionSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type EnumInteractionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InteractionType | EnumInteractionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InteractionType[] | ListEnumInteractionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InteractionType[] | ListEnumInteractionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInteractionTypeWithAggregatesFilter<$PrismaModel> | $Enums.InteractionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInteractionTypeFilter<$PrismaModel>
    _max?: NestedEnumInteractionTypeFilter<$PrismaModel>
  }

  export type OrderItemListRelationFilter = {
    every?: OrderItemWhereInput
    some?: OrderItemWhereInput
    none?: OrderItemWhereInput
  }

  export type RcpaDrugDataListRelationFilter = {
    every?: RcpaDrugDataWhereInput
    some?: RcpaDrugDataWhereInput
    none?: RcpaDrugDataWhereInput
  }

  export type DoctorDistributionDrugItemListRelationFilter = {
    every?: DoctorDistributionDrugItemWhereInput
    some?: DoctorDistributionDrugItemWhereInput
    none?: DoctorDistributionDrugItemWhereInput
  }

  export type OrderItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RcpaDrugDataOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DoctorDistributionDrugItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DrugCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    composition?: SortOrder
    manufacturer?: SortOrder
    indications?: SortOrder
    sideEffects?: SortOrder
    safetyAdvice?: SortOrder
    dosageForms?: SortOrder
    price?: SortOrder
    schedule?: SortOrder
    regulatoryApprovals?: SortOrder
    category?: SortOrder
    isAvailable?: SortOrder
    images?: SortOrder
    marketingMaterials?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    isActive?: SortOrder
  }

  export type DrugAvgOrderByAggregateInput = {
    price?: SortOrder
  }

  export type DrugMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    composition?: SortOrder
    manufacturer?: SortOrder
    indications?: SortOrder
    sideEffects?: SortOrder
    safetyAdvice?: SortOrder
    price?: SortOrder
    schedule?: SortOrder
    regulatoryApprovals?: SortOrder
    category?: SortOrder
    isAvailable?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    isActive?: SortOrder
  }

  export type DrugMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    composition?: SortOrder
    manufacturer?: SortOrder
    indications?: SortOrder
    sideEffects?: SortOrder
    safetyAdvice?: SortOrder
    price?: SortOrder
    schedule?: SortOrder
    regulatoryApprovals?: SortOrder
    category?: SortOrder
    isAvailable?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    isActive?: SortOrder
  }

  export type DrugSumOrderByAggregateInput = {
    price?: SortOrder
  }

  export type EnumChemistTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ChemistType | EnumChemistTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ChemistType[] | ListEnumChemistTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChemistType[] | ListEnumChemistTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumChemistTypeFilter<$PrismaModel> | $Enums.ChemistType
  }

  export type ChemistChainNullableScalarRelationFilter = {
    is?: ChemistChainWhereInput | null
    isNot?: ChemistChainWhereInput | null
  }

  export type ChemistCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    chemistChainId?: SortOrder
    territoryId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    pincode?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    description?: SortOrder
    profilePictureUrl?: SortOrder
    visitingHours?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    isActive?: SortOrder
  }

  export type ChemistAvgOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type ChemistMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    chemistChainId?: SortOrder
    territoryId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    pincode?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    description?: SortOrder
    profilePictureUrl?: SortOrder
    visitingHours?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    isActive?: SortOrder
  }

  export type ChemistMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    chemistChainId?: SortOrder
    territoryId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    pincode?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    description?: SortOrder
    profilePictureUrl?: SortOrder
    visitingHours?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    isActive?: SortOrder
  }

  export type ChemistSumOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type EnumChemistTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ChemistType | EnumChemistTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ChemistType[] | ListEnumChemistTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChemistType[] | ListEnumChemistTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumChemistTypeWithAggregatesFilter<$PrismaModel> | $Enums.ChemistType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumChemistTypeFilter<$PrismaModel>
    _max?: NestedEnumChemistTypeFilter<$PrismaModel>
  }

  export type ChemistScalarRelationFilter = {
    is?: ChemistWhereInput
    isNot?: ChemistWhereInput
  }

  export type ChemistNoteCountOrderByAggregateInput = {
    id?: SortOrder
    chemistId?: SortOrder
    createdById?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChemistNoteMaxOrderByAggregateInput = {
    id?: SortOrder
    chemistId?: SortOrder
    createdById?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChemistNoteMinOrderByAggregateInput = {
    id?: SortOrder
    chemistId?: SortOrder
    createdById?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChemistTaskNullableScalarRelationFilter = {
    is?: ChemistTaskWhereInput | null
    isNot?: ChemistTaskWhereInput | null
  }

  export type ChemistInteractionCountOrderByAggregateInput = {
    id?: SortOrder
    chemistId?: SortOrder
    employeeId?: SortOrder
    interactionType?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    purpose?: SortOrder
    outcome?: SortOrder
    comments?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    chemistTaskId?: SortOrder
  }

  export type ChemistInteractionAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type ChemistInteractionMaxOrderByAggregateInput = {
    id?: SortOrder
    chemistId?: SortOrder
    employeeId?: SortOrder
    interactionType?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    purpose?: SortOrder
    outcome?: SortOrder
    comments?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    chemistTaskId?: SortOrder
  }

  export type ChemistInteractionMinOrderByAggregateInput = {
    id?: SortOrder
    chemistId?: SortOrder
    employeeId?: SortOrder
    interactionType?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    purpose?: SortOrder
    outcome?: SortOrder
    comments?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    chemistTaskId?: SortOrder
  }

  export type ChemistInteractionSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type DoctorChemistRelationCountOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    chemistId?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
  }

  export type DoctorChemistRelationMaxOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    chemistId?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
  }

  export type DoctorChemistRelationMinOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    chemistId?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type EnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type ChemistNullableScalarRelationFilter = {
    is?: ChemistWhereInput | null
    isNot?: ChemistWhereInput | null
  }

  export type OrderCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    chemistId?: SortOrder
    totalAmount?: SortOrder
    status?: SortOrder
    orderDate?: SortOrder
    deliveryDate?: SortOrder
    specialInstructions?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
  }

  export type OrderAvgOrderByAggregateInput = {
    totalAmount?: SortOrder
  }

  export type OrderMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    chemistId?: SortOrder
    totalAmount?: SortOrder
    status?: SortOrder
    orderDate?: SortOrder
    deliveryDate?: SortOrder
    specialInstructions?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
  }

  export type OrderMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    chemistId?: SortOrder
    totalAmount?: SortOrder
    status?: SortOrder
    orderDate?: SortOrder
    deliveryDate?: SortOrder
    specialInstructions?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
  }

  export type OrderSumOrderByAggregateInput = {
    totalAmount?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type EnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type OrderScalarRelationFilter = {
    is?: OrderWhereInput
    isNot?: OrderWhereInput
  }

  export type DrugScalarRelationFilter = {
    is?: DrugWhereInput
    isNot?: DrugWhereInput
  }

  export type OrderItemOrderIdDrugIdCompoundUniqueInput = {
    orderId: string
    drugId: string
  }

  export type OrderItemCountOrderByAggregateInput = {
    orderId?: SortOrder
    drugId?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    subtotal?: SortOrder
    createdAt?: SortOrder
  }

  export type OrderItemAvgOrderByAggregateInput = {
    quantity?: SortOrder
    unitPrice?: SortOrder
    subtotal?: SortOrder
  }

  export type OrderItemMaxOrderByAggregateInput = {
    orderId?: SortOrder
    drugId?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    subtotal?: SortOrder
    createdAt?: SortOrder
  }

  export type OrderItemMinOrderByAggregateInput = {
    orderId?: SortOrder
    drugId?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    subtotal?: SortOrder
    createdAt?: SortOrder
  }

  export type OrderItemSumOrderByAggregateInput = {
    quantity?: SortOrder
    unitPrice?: SortOrder
    subtotal?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumTaskTypeReferenceNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskTypeReference | EnumTaskTypeReferenceFieldRefInput<$PrismaModel> | null
    in?: $Enums.TaskTypeReference[] | ListEnumTaskTypeReferenceFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.TaskTypeReference[] | ListEnumTaskTypeReferenceFieldRefInput<$PrismaModel> | null
    not?: NestedEnumTaskTypeReferenceNullableFilter<$PrismaModel> | $Enums.TaskTypeReference | null
  }

  export type TourPlanTaskNullableScalarRelationFilter = {
    is?: TourPlanTaskWhereInput | null
    isNot?: TourPlanTaskWhereInput | null
  }

  export type DcrReportCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    employeeId?: SortOrder
    taskId?: SortOrder
    taskType?: SortOrder
    reportDate?: SortOrder
    productsDiscussed?: SortOrder
    comments?: SortOrder
    isDraft?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DcrReportMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    employeeId?: SortOrder
    taskId?: SortOrder
    taskType?: SortOrder
    reportDate?: SortOrder
    productsDiscussed?: SortOrder
    comments?: SortOrder
    isDraft?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DcrReportMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    employeeId?: SortOrder
    taskId?: SortOrder
    taskType?: SortOrder
    reportDate?: SortOrder
    productsDiscussed?: SortOrder
    comments?: SortOrder
    isDraft?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumTaskTypeReferenceNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskTypeReference | EnumTaskTypeReferenceFieldRefInput<$PrismaModel> | null
    in?: $Enums.TaskTypeReference[] | ListEnumTaskTypeReferenceFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.TaskTypeReference[] | ListEnumTaskTypeReferenceFieldRefInput<$PrismaModel> | null
    not?: NestedEnumTaskTypeReferenceNullableWithAggregatesFilter<$PrismaModel> | $Enums.TaskTypeReference | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumTaskTypeReferenceNullableFilter<$PrismaModel>
    _max?: NestedEnumTaskTypeReferenceNullableFilter<$PrismaModel>
  }

  export type RcpaReportCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    employeeId?: SortOrder
    chemistId?: SortOrder
    remarks?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RcpaReportMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    employeeId?: SortOrder
    chemistId?: SortOrder
    remarks?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RcpaReportMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    employeeId?: SortOrder
    chemistId?: SortOrder
    remarks?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RcpaReportScalarRelationFilter = {
    is?: RcpaReportWhereInput
    isNot?: RcpaReportWhereInput
  }

  export type DrugNullableScalarRelationFilter = {
    is?: DrugWhereInput | null
    isNot?: DrugWhereInput | null
  }

  export type RcpaDrugDataCountOrderByAggregateInput = {
    id?: SortOrder
    rcpaReportId?: SortOrder
    drugId?: SortOrder
    competitorDrugName?: SortOrder
    ownQuantity?: SortOrder
    competitorQuantity?: SortOrder
    createdAt?: SortOrder
  }

  export type RcpaDrugDataAvgOrderByAggregateInput = {
    ownQuantity?: SortOrder
    competitorQuantity?: SortOrder
  }

  export type RcpaDrugDataMaxOrderByAggregateInput = {
    id?: SortOrder
    rcpaReportId?: SortOrder
    drugId?: SortOrder
    competitorDrugName?: SortOrder
    ownQuantity?: SortOrder
    competitorQuantity?: SortOrder
    createdAt?: SortOrder
  }

  export type RcpaDrugDataMinOrderByAggregateInput = {
    id?: SortOrder
    rcpaReportId?: SortOrder
    drugId?: SortOrder
    competitorDrugName?: SortOrder
    ownQuantity?: SortOrder
    competitorQuantity?: SortOrder
    createdAt?: SortOrder
  }

  export type RcpaDrugDataSumOrderByAggregateInput = {
    ownQuantity?: SortOrder
    competitorQuantity?: SortOrder
  }

  export type CheckInCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    employeeId?: SortOrder
    checkInTime?: SortOrder
    checkOutTime?: SortOrder
    checkInLatitude?: SortOrder
    checkInLongitude?: SortOrder
    checkOutLatitude?: SortOrder
    checkOutLongitude?: SortOrder
    createdAt?: SortOrder
  }

  export type CheckInAvgOrderByAggregateInput = {
    checkInLatitude?: SortOrder
    checkInLongitude?: SortOrder
    checkOutLatitude?: SortOrder
    checkOutLongitude?: SortOrder
  }

  export type CheckInMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    employeeId?: SortOrder
    checkInTime?: SortOrder
    checkOutTime?: SortOrder
    checkInLatitude?: SortOrder
    checkInLongitude?: SortOrder
    checkOutLatitude?: SortOrder
    checkOutLongitude?: SortOrder
    createdAt?: SortOrder
  }

  export type CheckInMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    employeeId?: SortOrder
    checkInTime?: SortOrder
    checkOutTime?: SortOrder
    checkInLatitude?: SortOrder
    checkInLongitude?: SortOrder
    checkOutLatitude?: SortOrder
    checkOutLongitude?: SortOrder
    createdAt?: SortOrder
  }

  export type CheckInSumOrderByAggregateInput = {
    checkInLatitude?: SortOrder
    checkInLongitude?: SortOrder
    checkOutLatitude?: SortOrder
    checkOutLongitude?: SortOrder
  }

  export type EnumTaskPlannerStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskPlannerStatus | EnumTaskPlannerStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskPlannerStatus[] | ListEnumTaskPlannerStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskPlannerStatus[] | ListEnumTaskPlannerStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskPlannerStatusFilter<$PrismaModel> | $Enums.TaskPlannerStatus
  }

  export type TaskPlannerCountOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TaskPlannerMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TaskPlannerMinOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumTaskPlannerStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskPlannerStatus | EnumTaskPlannerStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskPlannerStatus[] | ListEnumTaskPlannerStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskPlannerStatus[] | ListEnumTaskPlannerStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskPlannerStatusWithAggregatesFilter<$PrismaModel> | $Enums.TaskPlannerStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskPlannerStatusFilter<$PrismaModel>
    _max?: NestedEnumTaskPlannerStatusFilter<$PrismaModel>
  }

  export type EnumTaskStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusFilter<$PrismaModel> | $Enums.TaskStatus
  }

  export type TaskPlannerScalarRelationFilter = {
    is?: TaskPlannerWhereInput
    isNot?: TaskPlannerWhereInput
  }

  export type DoctorTaskCountOrderByAggregateInput = {
    id?: SortOrder
    plannerId?: SortOrder
    employeeId?: SortOrder
    doctorId?: SortOrder
    taskDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    taskStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DoctorTaskMaxOrderByAggregateInput = {
    id?: SortOrder
    plannerId?: SortOrder
    employeeId?: SortOrder
    doctorId?: SortOrder
    taskDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    taskStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DoctorTaskMinOrderByAggregateInput = {
    id?: SortOrder
    plannerId?: SortOrder
    employeeId?: SortOrder
    doctorId?: SortOrder
    taskDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    taskStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumTaskStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel> | $Enums.TaskStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskStatusFilter<$PrismaModel>
    _max?: NestedEnumTaskStatusFilter<$PrismaModel>
  }

  export type ChemistTaskCountOrderByAggregateInput = {
    id?: SortOrder
    plannerId?: SortOrder
    employeeId?: SortOrder
    chemistId?: SortOrder
    taskDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    taskStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChemistTaskMaxOrderByAggregateInput = {
    id?: SortOrder
    plannerId?: SortOrder
    employeeId?: SortOrder
    chemistId?: SortOrder
    taskDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    taskStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChemistTaskMinOrderByAggregateInput = {
    id?: SortOrder
    plannerId?: SortOrder
    employeeId?: SortOrder
    chemistId?: SortOrder
    taskDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    taskStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TourPlanScalarRelationFilter = {
    is?: TourPlanWhereInput
    isNot?: TourPlanWhereInput
  }

  export type TourPlanReportListRelationFilter = {
    every?: TourPlanReportWhereInput
    some?: TourPlanReportWhereInput
    none?: TourPlanReportWhereInput
  }

  export type TourPlanReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TourPlanTaskCountOrderByAggregateInput = {
    id?: SortOrder
    plannerId?: SortOrder
    employeeId?: SortOrder
    tourPlanId?: SortOrder
    location?: SortOrder
    taskDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    taskStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TourPlanTaskMaxOrderByAggregateInput = {
    id?: SortOrder
    plannerId?: SortOrder
    employeeId?: SortOrder
    tourPlanId?: SortOrder
    location?: SortOrder
    taskDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    taskStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TourPlanTaskMinOrderByAggregateInput = {
    id?: SortOrder
    plannerId?: SortOrder
    employeeId?: SortOrder
    tourPlanId?: SortOrder
    location?: SortOrder
    taskDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    taskStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TourPlanCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TourPlanMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TourPlanMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TourPlanTaskScalarRelationFilter = {
    is?: TourPlanTaskWhereInput
    isNot?: TourPlanTaskWhereInput
  }

  export type TourPlanReportCountOrderByAggregateInput = {
    id?: SortOrder
    tourTaskId?: SortOrder
    interactionTime?: SortOrder
    purpose?: SortOrder
    outcome?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TourPlanReportMaxOrderByAggregateInput = {
    id?: SortOrder
    tourTaskId?: SortOrder
    interactionTime?: SortOrder
    purpose?: SortOrder
    outcome?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TourPlanReportMinOrderByAggregateInput = {
    id?: SortOrder
    tourTaskId?: SortOrder
    interactionTime?: SortOrder
    purpose?: SortOrder
    outcome?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ExpenseRoleConfigListRelationFilter = {
    every?: ExpenseRoleConfigWhereInput
    some?: ExpenseRoleConfigWhereInput
    none?: ExpenseRoleConfigWhereInput
  }

  export type ExpenseRoleConfigOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExpenseTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    formFields?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExpenseTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExpenseTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type ExpenseTypeScalarRelationFilter = {
    is?: ExpenseTypeWhereInput
    isNot?: ExpenseTypeWhereInput
  }

  export type ExpenseRoleConfigExpenseTypeIdRoleCompoundUniqueInput = {
    expenseTypeId: string
    role: $Enums.EmployeeRole
  }

  export type ExpenseRoleConfigCountOrderByAggregateInput = {
    id?: SortOrder
    expenseTypeId?: SortOrder
    role?: SortOrder
    limits?: SortOrder
    rates?: SortOrder
    validationRules?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExpenseRoleConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    expenseTypeId?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExpenseRoleConfigMinOrderByAggregateInput = {
    id?: SortOrder
    expenseTypeId?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumExpenseClaimStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ExpenseClaimStatus | EnumExpenseClaimStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ExpenseClaimStatus[] | ListEnumExpenseClaimStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ExpenseClaimStatus[] | ListEnumExpenseClaimStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumExpenseClaimStatusFilter<$PrismaModel> | $Enums.ExpenseClaimStatus
  }

  export type ExpenseRoleConfigScalarRelationFilter = {
    is?: ExpenseRoleConfigWhereInput
    isNot?: ExpenseRoleConfigWhereInput
  }

  export type ExpenseClaimCountOrderByAggregateInput = {
    id?: SortOrder
    claimNumber?: SortOrder
    employeeId?: SortOrder
    expenseTypeId?: SortOrder
    expenseRoleConfigId?: SortOrder
    expenseData?: SortOrder
    status?: SortOrder
    submittedAt?: SortOrder
    approvedAt?: SortOrder
    approvedBy?: SortOrder
    approvalComments?: SortOrder
    rejectionReason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExpenseClaimMaxOrderByAggregateInput = {
    id?: SortOrder
    claimNumber?: SortOrder
    employeeId?: SortOrder
    expenseTypeId?: SortOrder
    expenseRoleConfigId?: SortOrder
    status?: SortOrder
    submittedAt?: SortOrder
    approvedAt?: SortOrder
    approvedBy?: SortOrder
    approvalComments?: SortOrder
    rejectionReason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExpenseClaimMinOrderByAggregateInput = {
    id?: SortOrder
    claimNumber?: SortOrder
    employeeId?: SortOrder
    expenseTypeId?: SortOrder
    expenseRoleConfigId?: SortOrder
    status?: SortOrder
    submittedAt?: SortOrder
    approvedAt?: SortOrder
    approvedBy?: SortOrder
    approvalComments?: SortOrder
    rejectionReason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumExpenseClaimStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ExpenseClaimStatus | EnumExpenseClaimStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ExpenseClaimStatus[] | ListEnumExpenseClaimStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ExpenseClaimStatus[] | ListEnumExpenseClaimStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumExpenseClaimStatusWithAggregatesFilter<$PrismaModel> | $Enums.ExpenseClaimStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumExpenseClaimStatusFilter<$PrismaModel>
    _max?: NestedEnumExpenseClaimStatusFilter<$PrismaModel>
  }

  export type DoctorDistributionGiftItemListRelationFilter = {
    every?: DoctorDistributionGiftItemWhereInput
    some?: DoctorDistributionGiftItemWhereInput
    none?: DoctorDistributionGiftItemWhereInput
  }

  export type DoctorDistributionGiftItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GiftCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    unitCost?: SortOrder
    specifications?: SortOrder
    giftImages?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    isActive?: SortOrder
  }

  export type GiftAvgOrderByAggregateInput = {
    unitCost?: SortOrder
  }

  export type GiftMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    unitCost?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    isActive?: SortOrder
  }

  export type GiftMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    unitCost?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    isActive?: SortOrder
  }

  export type GiftSumOrderByAggregateInput = {
    unitCost?: SortOrder
  }

  export type UserDrugInventoryCountOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    drugId?: SortOrder
    quantity?: SortOrder
    lastRestockedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserDrugInventoryAvgOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type UserDrugInventoryMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    drugId?: SortOrder
    quantity?: SortOrder
    lastRestockedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserDrugInventoryMinOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    drugId?: SortOrder
    quantity?: SortOrder
    lastRestockedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserDrugInventorySumOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type GiftScalarRelationFilter = {
    is?: GiftWhereInput
    isNot?: GiftWhereInput
  }

  export type UserGiftInventoryCountOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    giftId?: SortOrder
    quantity?: SortOrder
    lastRestockedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserGiftInventoryAvgOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type UserGiftInventoryMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    giftId?: SortOrder
    quantity?: SortOrder
    lastRestockedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserGiftInventoryMinOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    giftId?: SortOrder
    quantity?: SortOrder
    lastRestockedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserGiftInventorySumOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type DoctorInteractionScalarRelationFilter = {
    is?: DoctorInteractionWhereInput
    isNot?: DoctorInteractionWhereInput
  }

  export type DoctorDistributionCountOrderByAggregateInput = {
    id?: SortOrder
    doctorInteractionId?: SortOrder
    employeeId?: SortOrder
    distributedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DoctorDistributionMaxOrderByAggregateInput = {
    id?: SortOrder
    doctorInteractionId?: SortOrder
    employeeId?: SortOrder
    distributedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DoctorDistributionMinOrderByAggregateInput = {
    id?: SortOrder
    doctorInteractionId?: SortOrder
    employeeId?: SortOrder
    distributedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DoctorDistributionScalarRelationFilter = {
    is?: DoctorDistributionWhereInput
    isNot?: DoctorDistributionWhereInput
  }

  export type UserDrugInventoryScalarRelationFilter = {
    is?: UserDrugInventoryWhereInput
    isNot?: UserDrugInventoryWhereInput
  }

  export type DoctorDistributionDrugItemCountOrderByAggregateInput = {
    id?: SortOrder
    doctorDistributionId?: SortOrder
    drugId?: SortOrder
    fromInventoryId?: SortOrder
    quantity?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DoctorDistributionDrugItemAvgOrderByAggregateInput = {
    quantity?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
  }

  export type DoctorDistributionDrugItemMaxOrderByAggregateInput = {
    id?: SortOrder
    doctorDistributionId?: SortOrder
    drugId?: SortOrder
    fromInventoryId?: SortOrder
    quantity?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DoctorDistributionDrugItemMinOrderByAggregateInput = {
    id?: SortOrder
    doctorDistributionId?: SortOrder
    drugId?: SortOrder
    fromInventoryId?: SortOrder
    quantity?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DoctorDistributionDrugItemSumOrderByAggregateInput = {
    quantity?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
  }

  export type UserGiftInventoryScalarRelationFilter = {
    is?: UserGiftInventoryWhereInput
    isNot?: UserGiftInventoryWhereInput
  }

  export type DoctorDistributionGiftItemCountOrderByAggregateInput = {
    id?: SortOrder
    doctorDistributionId?: SortOrder
    giftId?: SortOrder
    fromInventoryId?: SortOrder
    quantity?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DoctorDistributionGiftItemAvgOrderByAggregateInput = {
    quantity?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
  }

  export type DoctorDistributionGiftItemMaxOrderByAggregateInput = {
    id?: SortOrder
    doctorDistributionId?: SortOrder
    giftId?: SortOrder
    fromInventoryId?: SortOrder
    quantity?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DoctorDistributionGiftItemMinOrderByAggregateInput = {
    id?: SortOrder
    doctorDistributionId?: SortOrder
    giftId?: SortOrder
    fromInventoryId?: SortOrder
    quantity?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DoctorDistributionGiftItemSumOrderByAggregateInput = {
    quantity?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    employeeId?: SortOrder
    tableName?: SortOrder
    actionType?: SortOrder
    recordId?: SortOrder
    oldValues?: SortOrder
    newValues?: SortOrder
    ipAddress?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    employeeId?: SortOrder
    tableName?: SortOrder
    actionType?: SortOrder
    recordId?: SortOrder
    ipAddress?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    employeeId?: SortOrder
    tableName?: SortOrder
    actionType?: SortOrder
    recordId?: SortOrder
    ipAddress?: SortOrder
    createdAt?: SortOrder
  }

  export type EmployeeCreateNestedOneWithoutSubordinatesInput = {
    create?: XOR<EmployeeCreateWithoutSubordinatesInput, EmployeeUncheckedCreateWithoutSubordinatesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutSubordinatesInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeCreateNestedManyWithoutReportingManagerInput = {
    create?: XOR<EmployeeCreateWithoutReportingManagerInput, EmployeeUncheckedCreateWithoutReportingManagerInput> | EmployeeCreateWithoutReportingManagerInput[] | EmployeeUncheckedCreateWithoutReportingManagerInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutReportingManagerInput | EmployeeCreateOrConnectWithoutReportingManagerInput[]
    createMany?: EmployeeCreateManyReportingManagerInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type TeamCreateNestedOneWithoutTeamMembersInput = {
    create?: XOR<TeamCreateWithoutTeamMembersInput, TeamUncheckedCreateWithoutTeamMembersInput>
    connectOrCreate?: TeamCreateOrConnectWithoutTeamMembersInput
    connect?: TeamWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutLeadNameInput = {
    create?: XOR<TeamCreateWithoutLeadNameInput, TeamUncheckedCreateWithoutLeadNameInput>
    connectOrCreate?: TeamCreateOrConnectWithoutLeadNameInput
    connect?: TeamWhereUniqueInput
  }

  export type EmployeeTerritoryCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<EmployeeTerritoryCreateWithoutEmployeeInput, EmployeeTerritoryUncheckedCreateWithoutEmployeeInput> | EmployeeTerritoryCreateWithoutEmployeeInput[] | EmployeeTerritoryUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: EmployeeTerritoryCreateOrConnectWithoutEmployeeInput | EmployeeTerritoryCreateOrConnectWithoutEmployeeInput[]
    createMany?: EmployeeTerritoryCreateManyEmployeeInputEnvelope
    connect?: EmployeeTerritoryWhereUniqueInput | EmployeeTerritoryWhereUniqueInput[]
  }

  export type EmployeeTrainingRecordCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<EmployeeTrainingRecordCreateWithoutEmployeeInput, EmployeeTrainingRecordUncheckedCreateWithoutEmployeeInput> | EmployeeTrainingRecordCreateWithoutEmployeeInput[] | EmployeeTrainingRecordUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: EmployeeTrainingRecordCreateOrConnectWithoutEmployeeInput | EmployeeTrainingRecordCreateOrConnectWithoutEmployeeInput[]
    createMany?: EmployeeTrainingRecordCreateManyEmployeeInputEnvelope
    connect?: EmployeeTrainingRecordWhereUniqueInput | EmployeeTrainingRecordWhereUniqueInput[]
  }

  export type DoctorNoteCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<DoctorNoteCreateWithoutCreatedByInput, DoctorNoteUncheckedCreateWithoutCreatedByInput> | DoctorNoteCreateWithoutCreatedByInput[] | DoctorNoteUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DoctorNoteCreateOrConnectWithoutCreatedByInput | DoctorNoteCreateOrConnectWithoutCreatedByInput[]
    createMany?: DoctorNoteCreateManyCreatedByInputEnvelope
    connect?: DoctorNoteWhereUniqueInput | DoctorNoteWhereUniqueInput[]
  }

  export type ChemistNoteCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ChemistNoteCreateWithoutCreatedByInput, ChemistNoteUncheckedCreateWithoutCreatedByInput> | ChemistNoteCreateWithoutCreatedByInput[] | ChemistNoteUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ChemistNoteCreateOrConnectWithoutCreatedByInput | ChemistNoteCreateOrConnectWithoutCreatedByInput[]
    createMany?: ChemistNoteCreateManyCreatedByInputEnvelope
    connect?: ChemistNoteWhereUniqueInput | ChemistNoteWhereUniqueInput[]
  }

  export type DoctorInteractionCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<DoctorInteractionCreateWithoutEmployeeInput, DoctorInteractionUncheckedCreateWithoutEmployeeInput> | DoctorInteractionCreateWithoutEmployeeInput[] | DoctorInteractionUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: DoctorInteractionCreateOrConnectWithoutEmployeeInput | DoctorInteractionCreateOrConnectWithoutEmployeeInput[]
    createMany?: DoctorInteractionCreateManyEmployeeInputEnvelope
    connect?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
  }

  export type ChemistInteractionCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<ChemistInteractionCreateWithoutEmployeeInput, ChemistInteractionUncheckedCreateWithoutEmployeeInput> | ChemistInteractionCreateWithoutEmployeeInput[] | ChemistInteractionUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: ChemistInteractionCreateOrConnectWithoutEmployeeInput | ChemistInteractionCreateOrConnectWithoutEmployeeInput[]
    createMany?: ChemistInteractionCreateManyEmployeeInputEnvelope
    connect?: ChemistInteractionWhereUniqueInput | ChemistInteractionWhereUniqueInput[]
  }

  export type DcrReportCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<DcrReportCreateWithoutEmployeeInput, DcrReportUncheckedCreateWithoutEmployeeInput> | DcrReportCreateWithoutEmployeeInput[] | DcrReportUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: DcrReportCreateOrConnectWithoutEmployeeInput | DcrReportCreateOrConnectWithoutEmployeeInput[]
    createMany?: DcrReportCreateManyEmployeeInputEnvelope
    connect?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
  }

  export type RcpaReportCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<RcpaReportCreateWithoutEmployeeInput, RcpaReportUncheckedCreateWithoutEmployeeInput> | RcpaReportCreateWithoutEmployeeInput[] | RcpaReportUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: RcpaReportCreateOrConnectWithoutEmployeeInput | RcpaReportCreateOrConnectWithoutEmployeeInput[]
    createMany?: RcpaReportCreateManyEmployeeInputEnvelope
    connect?: RcpaReportWhereUniqueInput | RcpaReportWhereUniqueInput[]
  }

  export type CheckInCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<CheckInCreateWithoutEmployeeInput, CheckInUncheckedCreateWithoutEmployeeInput> | CheckInCreateWithoutEmployeeInput[] | CheckInUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: CheckInCreateOrConnectWithoutEmployeeInput | CheckInCreateOrConnectWithoutEmployeeInput[]
    createMany?: CheckInCreateManyEmployeeInputEnvelope
    connect?: CheckInWhereUniqueInput | CheckInWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<AuditLogCreateWithoutEmployeeInput, AuditLogUncheckedCreateWithoutEmployeeInput> | AuditLogCreateWithoutEmployeeInput[] | AuditLogUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutEmployeeInput | AuditLogCreateOrConnectWithoutEmployeeInput[]
    createMany?: AuditLogCreateManyEmployeeInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type OrderCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<OrderCreateWithoutCreatedByInput, OrderUncheckedCreateWithoutCreatedByInput> | OrderCreateWithoutCreatedByInput[] | OrderUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutCreatedByInput | OrderCreateOrConnectWithoutCreatedByInput[]
    createMany?: OrderCreateManyCreatedByInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type DoctorCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<DoctorCreateWithoutCreatedByInput, DoctorUncheckedCreateWithoutCreatedByInput> | DoctorCreateWithoutCreatedByInput[] | DoctorUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DoctorCreateOrConnectWithoutCreatedByInput | DoctorCreateOrConnectWithoutCreatedByInput[]
    createMany?: DoctorCreateManyCreatedByInputEnvelope
    connect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
  }

  export type DrugCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<DrugCreateWithoutCreatedByInput, DrugUncheckedCreateWithoutCreatedByInput> | DrugCreateWithoutCreatedByInput[] | DrugUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DrugCreateOrConnectWithoutCreatedByInput | DrugCreateOrConnectWithoutCreatedByInput[]
    createMany?: DrugCreateManyCreatedByInputEnvelope
    connect?: DrugWhereUniqueInput | DrugWhereUniqueInput[]
  }

  export type ChemistCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ChemistCreateWithoutCreatedByInput, ChemistUncheckedCreateWithoutCreatedByInput> | ChemistCreateWithoutCreatedByInput[] | ChemistUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ChemistCreateOrConnectWithoutCreatedByInput | ChemistCreateOrConnectWithoutCreatedByInput[]
    createMany?: ChemistCreateManyCreatedByInputEnvelope
    connect?: ChemistWhereUniqueInput | ChemistWhereUniqueInput[]
  }

  export type DoctorChemistRelationCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<DoctorChemistRelationCreateWithoutCreatedByInput, DoctorChemistRelationUncheckedCreateWithoutCreatedByInput> | DoctorChemistRelationCreateWithoutCreatedByInput[] | DoctorChemistRelationUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DoctorChemistRelationCreateOrConnectWithoutCreatedByInput | DoctorChemistRelationCreateOrConnectWithoutCreatedByInput[]
    createMany?: DoctorChemistRelationCreateManyCreatedByInputEnvelope
    connect?: DoctorChemistRelationWhereUniqueInput | DoctorChemistRelationWhereUniqueInput[]
  }

  export type ExpenseClaimCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<ExpenseClaimCreateWithoutEmployeeInput, ExpenseClaimUncheckedCreateWithoutEmployeeInput> | ExpenseClaimCreateWithoutEmployeeInput[] | ExpenseClaimUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: ExpenseClaimCreateOrConnectWithoutEmployeeInput | ExpenseClaimCreateOrConnectWithoutEmployeeInput[]
    createMany?: ExpenseClaimCreateManyEmployeeInputEnvelope
    connect?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
  }

  export type ExpenseClaimCreateNestedManyWithoutApproverInput = {
    create?: XOR<ExpenseClaimCreateWithoutApproverInput, ExpenseClaimUncheckedCreateWithoutApproverInput> | ExpenseClaimCreateWithoutApproverInput[] | ExpenseClaimUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: ExpenseClaimCreateOrConnectWithoutApproverInput | ExpenseClaimCreateOrConnectWithoutApproverInput[]
    createMany?: ExpenseClaimCreateManyApproverInputEnvelope
    connect?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
  }

  export type UserDrugInventoryCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<UserDrugInventoryCreateWithoutEmployeeInput, UserDrugInventoryUncheckedCreateWithoutEmployeeInput> | UserDrugInventoryCreateWithoutEmployeeInput[] | UserDrugInventoryUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: UserDrugInventoryCreateOrConnectWithoutEmployeeInput | UserDrugInventoryCreateOrConnectWithoutEmployeeInput[]
    createMany?: UserDrugInventoryCreateManyEmployeeInputEnvelope
    connect?: UserDrugInventoryWhereUniqueInput | UserDrugInventoryWhereUniqueInput[]
  }

  export type UserGiftInventoryCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<UserGiftInventoryCreateWithoutEmployeeInput, UserGiftInventoryUncheckedCreateWithoutEmployeeInput> | UserGiftInventoryCreateWithoutEmployeeInput[] | UserGiftInventoryUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: UserGiftInventoryCreateOrConnectWithoutEmployeeInput | UserGiftInventoryCreateOrConnectWithoutEmployeeInput[]
    createMany?: UserGiftInventoryCreateManyEmployeeInputEnvelope
    connect?: UserGiftInventoryWhereUniqueInput | UserGiftInventoryWhereUniqueInput[]
  }

  export type GiftCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<GiftCreateWithoutCreatedByInput, GiftUncheckedCreateWithoutCreatedByInput> | GiftCreateWithoutCreatedByInput[] | GiftUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: GiftCreateOrConnectWithoutCreatedByInput | GiftCreateOrConnectWithoutCreatedByInput[]
    createMany?: GiftCreateManyCreatedByInputEnvelope
    connect?: GiftWhereUniqueInput | GiftWhereUniqueInput[]
  }

  export type DoctorDistributionCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<DoctorDistributionCreateWithoutEmployeeInput, DoctorDistributionUncheckedCreateWithoutEmployeeInput> | DoctorDistributionCreateWithoutEmployeeInput[] | DoctorDistributionUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: DoctorDistributionCreateOrConnectWithoutEmployeeInput | DoctorDistributionCreateOrConnectWithoutEmployeeInput[]
    createMany?: DoctorDistributionCreateManyEmployeeInputEnvelope
    connect?: DoctorDistributionWhereUniqueInput | DoctorDistributionWhereUniqueInput[]
  }

  export type TaskPlannerCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<TaskPlannerCreateWithoutEmployeeInput, TaskPlannerUncheckedCreateWithoutEmployeeInput> | TaskPlannerCreateWithoutEmployeeInput[] | TaskPlannerUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: TaskPlannerCreateOrConnectWithoutEmployeeInput | TaskPlannerCreateOrConnectWithoutEmployeeInput[]
    createMany?: TaskPlannerCreateManyEmployeeInputEnvelope
    connect?: TaskPlannerWhereUniqueInput | TaskPlannerWhereUniqueInput[]
  }

  export type DoctorTaskCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<DoctorTaskCreateWithoutEmployeeInput, DoctorTaskUncheckedCreateWithoutEmployeeInput> | DoctorTaskCreateWithoutEmployeeInput[] | DoctorTaskUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: DoctorTaskCreateOrConnectWithoutEmployeeInput | DoctorTaskCreateOrConnectWithoutEmployeeInput[]
    createMany?: DoctorTaskCreateManyEmployeeInputEnvelope
    connect?: DoctorTaskWhereUniqueInput | DoctorTaskWhereUniqueInput[]
  }

  export type ChemistTaskCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<ChemistTaskCreateWithoutEmployeeInput, ChemistTaskUncheckedCreateWithoutEmployeeInput> | ChemistTaskCreateWithoutEmployeeInput[] | ChemistTaskUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: ChemistTaskCreateOrConnectWithoutEmployeeInput | ChemistTaskCreateOrConnectWithoutEmployeeInput[]
    createMany?: ChemistTaskCreateManyEmployeeInputEnvelope
    connect?: ChemistTaskWhereUniqueInput | ChemistTaskWhereUniqueInput[]
  }

  export type TourPlanTaskCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<TourPlanTaskCreateWithoutEmployeeInput, TourPlanTaskUncheckedCreateWithoutEmployeeInput> | TourPlanTaskCreateWithoutEmployeeInput[] | TourPlanTaskUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: TourPlanTaskCreateOrConnectWithoutEmployeeInput | TourPlanTaskCreateOrConnectWithoutEmployeeInput[]
    createMany?: TourPlanTaskCreateManyEmployeeInputEnvelope
    connect?: TourPlanTaskWhereUniqueInput | TourPlanTaskWhereUniqueInput[]
  }

  export type EmployeeUncheckedCreateNestedManyWithoutReportingManagerInput = {
    create?: XOR<EmployeeCreateWithoutReportingManagerInput, EmployeeUncheckedCreateWithoutReportingManagerInput> | EmployeeCreateWithoutReportingManagerInput[] | EmployeeUncheckedCreateWithoutReportingManagerInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutReportingManagerInput | EmployeeCreateOrConnectWithoutReportingManagerInput[]
    createMany?: EmployeeCreateManyReportingManagerInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type TeamUncheckedCreateNestedOneWithoutLeadNameInput = {
    create?: XOR<TeamCreateWithoutLeadNameInput, TeamUncheckedCreateWithoutLeadNameInput>
    connectOrCreate?: TeamCreateOrConnectWithoutLeadNameInput
    connect?: TeamWhereUniqueInput
  }

  export type EmployeeTerritoryUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<EmployeeTerritoryCreateWithoutEmployeeInput, EmployeeTerritoryUncheckedCreateWithoutEmployeeInput> | EmployeeTerritoryCreateWithoutEmployeeInput[] | EmployeeTerritoryUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: EmployeeTerritoryCreateOrConnectWithoutEmployeeInput | EmployeeTerritoryCreateOrConnectWithoutEmployeeInput[]
    createMany?: EmployeeTerritoryCreateManyEmployeeInputEnvelope
    connect?: EmployeeTerritoryWhereUniqueInput | EmployeeTerritoryWhereUniqueInput[]
  }

  export type EmployeeTrainingRecordUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<EmployeeTrainingRecordCreateWithoutEmployeeInput, EmployeeTrainingRecordUncheckedCreateWithoutEmployeeInput> | EmployeeTrainingRecordCreateWithoutEmployeeInput[] | EmployeeTrainingRecordUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: EmployeeTrainingRecordCreateOrConnectWithoutEmployeeInput | EmployeeTrainingRecordCreateOrConnectWithoutEmployeeInput[]
    createMany?: EmployeeTrainingRecordCreateManyEmployeeInputEnvelope
    connect?: EmployeeTrainingRecordWhereUniqueInput | EmployeeTrainingRecordWhereUniqueInput[]
  }

  export type DoctorNoteUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<DoctorNoteCreateWithoutCreatedByInput, DoctorNoteUncheckedCreateWithoutCreatedByInput> | DoctorNoteCreateWithoutCreatedByInput[] | DoctorNoteUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DoctorNoteCreateOrConnectWithoutCreatedByInput | DoctorNoteCreateOrConnectWithoutCreatedByInput[]
    createMany?: DoctorNoteCreateManyCreatedByInputEnvelope
    connect?: DoctorNoteWhereUniqueInput | DoctorNoteWhereUniqueInput[]
  }

  export type ChemistNoteUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ChemistNoteCreateWithoutCreatedByInput, ChemistNoteUncheckedCreateWithoutCreatedByInput> | ChemistNoteCreateWithoutCreatedByInput[] | ChemistNoteUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ChemistNoteCreateOrConnectWithoutCreatedByInput | ChemistNoteCreateOrConnectWithoutCreatedByInput[]
    createMany?: ChemistNoteCreateManyCreatedByInputEnvelope
    connect?: ChemistNoteWhereUniqueInput | ChemistNoteWhereUniqueInput[]
  }

  export type DoctorInteractionUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<DoctorInteractionCreateWithoutEmployeeInput, DoctorInteractionUncheckedCreateWithoutEmployeeInput> | DoctorInteractionCreateWithoutEmployeeInput[] | DoctorInteractionUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: DoctorInteractionCreateOrConnectWithoutEmployeeInput | DoctorInteractionCreateOrConnectWithoutEmployeeInput[]
    createMany?: DoctorInteractionCreateManyEmployeeInputEnvelope
    connect?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
  }

  export type ChemistInteractionUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<ChemistInteractionCreateWithoutEmployeeInput, ChemistInteractionUncheckedCreateWithoutEmployeeInput> | ChemistInteractionCreateWithoutEmployeeInput[] | ChemistInteractionUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: ChemistInteractionCreateOrConnectWithoutEmployeeInput | ChemistInteractionCreateOrConnectWithoutEmployeeInput[]
    createMany?: ChemistInteractionCreateManyEmployeeInputEnvelope
    connect?: ChemistInteractionWhereUniqueInput | ChemistInteractionWhereUniqueInput[]
  }

  export type DcrReportUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<DcrReportCreateWithoutEmployeeInput, DcrReportUncheckedCreateWithoutEmployeeInput> | DcrReportCreateWithoutEmployeeInput[] | DcrReportUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: DcrReportCreateOrConnectWithoutEmployeeInput | DcrReportCreateOrConnectWithoutEmployeeInput[]
    createMany?: DcrReportCreateManyEmployeeInputEnvelope
    connect?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
  }

  export type RcpaReportUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<RcpaReportCreateWithoutEmployeeInput, RcpaReportUncheckedCreateWithoutEmployeeInput> | RcpaReportCreateWithoutEmployeeInput[] | RcpaReportUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: RcpaReportCreateOrConnectWithoutEmployeeInput | RcpaReportCreateOrConnectWithoutEmployeeInput[]
    createMany?: RcpaReportCreateManyEmployeeInputEnvelope
    connect?: RcpaReportWhereUniqueInput | RcpaReportWhereUniqueInput[]
  }

  export type CheckInUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<CheckInCreateWithoutEmployeeInput, CheckInUncheckedCreateWithoutEmployeeInput> | CheckInCreateWithoutEmployeeInput[] | CheckInUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: CheckInCreateOrConnectWithoutEmployeeInput | CheckInCreateOrConnectWithoutEmployeeInput[]
    createMany?: CheckInCreateManyEmployeeInputEnvelope
    connect?: CheckInWhereUniqueInput | CheckInWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<AuditLogCreateWithoutEmployeeInput, AuditLogUncheckedCreateWithoutEmployeeInput> | AuditLogCreateWithoutEmployeeInput[] | AuditLogUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutEmployeeInput | AuditLogCreateOrConnectWithoutEmployeeInput[]
    createMany?: AuditLogCreateManyEmployeeInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<OrderCreateWithoutCreatedByInput, OrderUncheckedCreateWithoutCreatedByInput> | OrderCreateWithoutCreatedByInput[] | OrderUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutCreatedByInput | OrderCreateOrConnectWithoutCreatedByInput[]
    createMany?: OrderCreateManyCreatedByInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type DoctorUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<DoctorCreateWithoutCreatedByInput, DoctorUncheckedCreateWithoutCreatedByInput> | DoctorCreateWithoutCreatedByInput[] | DoctorUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DoctorCreateOrConnectWithoutCreatedByInput | DoctorCreateOrConnectWithoutCreatedByInput[]
    createMany?: DoctorCreateManyCreatedByInputEnvelope
    connect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
  }

  export type DrugUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<DrugCreateWithoutCreatedByInput, DrugUncheckedCreateWithoutCreatedByInput> | DrugCreateWithoutCreatedByInput[] | DrugUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DrugCreateOrConnectWithoutCreatedByInput | DrugCreateOrConnectWithoutCreatedByInput[]
    createMany?: DrugCreateManyCreatedByInputEnvelope
    connect?: DrugWhereUniqueInput | DrugWhereUniqueInput[]
  }

  export type ChemistUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ChemistCreateWithoutCreatedByInput, ChemistUncheckedCreateWithoutCreatedByInput> | ChemistCreateWithoutCreatedByInput[] | ChemistUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ChemistCreateOrConnectWithoutCreatedByInput | ChemistCreateOrConnectWithoutCreatedByInput[]
    createMany?: ChemistCreateManyCreatedByInputEnvelope
    connect?: ChemistWhereUniqueInput | ChemistWhereUniqueInput[]
  }

  export type DoctorChemistRelationUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<DoctorChemistRelationCreateWithoutCreatedByInput, DoctorChemistRelationUncheckedCreateWithoutCreatedByInput> | DoctorChemistRelationCreateWithoutCreatedByInput[] | DoctorChemistRelationUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DoctorChemistRelationCreateOrConnectWithoutCreatedByInput | DoctorChemistRelationCreateOrConnectWithoutCreatedByInput[]
    createMany?: DoctorChemistRelationCreateManyCreatedByInputEnvelope
    connect?: DoctorChemistRelationWhereUniqueInput | DoctorChemistRelationWhereUniqueInput[]
  }

  export type ExpenseClaimUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<ExpenseClaimCreateWithoutEmployeeInput, ExpenseClaimUncheckedCreateWithoutEmployeeInput> | ExpenseClaimCreateWithoutEmployeeInput[] | ExpenseClaimUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: ExpenseClaimCreateOrConnectWithoutEmployeeInput | ExpenseClaimCreateOrConnectWithoutEmployeeInput[]
    createMany?: ExpenseClaimCreateManyEmployeeInputEnvelope
    connect?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
  }

  export type ExpenseClaimUncheckedCreateNestedManyWithoutApproverInput = {
    create?: XOR<ExpenseClaimCreateWithoutApproverInput, ExpenseClaimUncheckedCreateWithoutApproverInput> | ExpenseClaimCreateWithoutApproverInput[] | ExpenseClaimUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: ExpenseClaimCreateOrConnectWithoutApproverInput | ExpenseClaimCreateOrConnectWithoutApproverInput[]
    createMany?: ExpenseClaimCreateManyApproverInputEnvelope
    connect?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
  }

  export type UserDrugInventoryUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<UserDrugInventoryCreateWithoutEmployeeInput, UserDrugInventoryUncheckedCreateWithoutEmployeeInput> | UserDrugInventoryCreateWithoutEmployeeInput[] | UserDrugInventoryUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: UserDrugInventoryCreateOrConnectWithoutEmployeeInput | UserDrugInventoryCreateOrConnectWithoutEmployeeInput[]
    createMany?: UserDrugInventoryCreateManyEmployeeInputEnvelope
    connect?: UserDrugInventoryWhereUniqueInput | UserDrugInventoryWhereUniqueInput[]
  }

  export type UserGiftInventoryUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<UserGiftInventoryCreateWithoutEmployeeInput, UserGiftInventoryUncheckedCreateWithoutEmployeeInput> | UserGiftInventoryCreateWithoutEmployeeInput[] | UserGiftInventoryUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: UserGiftInventoryCreateOrConnectWithoutEmployeeInput | UserGiftInventoryCreateOrConnectWithoutEmployeeInput[]
    createMany?: UserGiftInventoryCreateManyEmployeeInputEnvelope
    connect?: UserGiftInventoryWhereUniqueInput | UserGiftInventoryWhereUniqueInput[]
  }

  export type GiftUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<GiftCreateWithoutCreatedByInput, GiftUncheckedCreateWithoutCreatedByInput> | GiftCreateWithoutCreatedByInput[] | GiftUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: GiftCreateOrConnectWithoutCreatedByInput | GiftCreateOrConnectWithoutCreatedByInput[]
    createMany?: GiftCreateManyCreatedByInputEnvelope
    connect?: GiftWhereUniqueInput | GiftWhereUniqueInput[]
  }

  export type DoctorDistributionUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<DoctorDistributionCreateWithoutEmployeeInput, DoctorDistributionUncheckedCreateWithoutEmployeeInput> | DoctorDistributionCreateWithoutEmployeeInput[] | DoctorDistributionUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: DoctorDistributionCreateOrConnectWithoutEmployeeInput | DoctorDistributionCreateOrConnectWithoutEmployeeInput[]
    createMany?: DoctorDistributionCreateManyEmployeeInputEnvelope
    connect?: DoctorDistributionWhereUniqueInput | DoctorDistributionWhereUniqueInput[]
  }

  export type TaskPlannerUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<TaskPlannerCreateWithoutEmployeeInput, TaskPlannerUncheckedCreateWithoutEmployeeInput> | TaskPlannerCreateWithoutEmployeeInput[] | TaskPlannerUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: TaskPlannerCreateOrConnectWithoutEmployeeInput | TaskPlannerCreateOrConnectWithoutEmployeeInput[]
    createMany?: TaskPlannerCreateManyEmployeeInputEnvelope
    connect?: TaskPlannerWhereUniqueInput | TaskPlannerWhereUniqueInput[]
  }

  export type DoctorTaskUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<DoctorTaskCreateWithoutEmployeeInput, DoctorTaskUncheckedCreateWithoutEmployeeInput> | DoctorTaskCreateWithoutEmployeeInput[] | DoctorTaskUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: DoctorTaskCreateOrConnectWithoutEmployeeInput | DoctorTaskCreateOrConnectWithoutEmployeeInput[]
    createMany?: DoctorTaskCreateManyEmployeeInputEnvelope
    connect?: DoctorTaskWhereUniqueInput | DoctorTaskWhereUniqueInput[]
  }

  export type ChemistTaskUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<ChemistTaskCreateWithoutEmployeeInput, ChemistTaskUncheckedCreateWithoutEmployeeInput> | ChemistTaskCreateWithoutEmployeeInput[] | ChemistTaskUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: ChemistTaskCreateOrConnectWithoutEmployeeInput | ChemistTaskCreateOrConnectWithoutEmployeeInput[]
    createMany?: ChemistTaskCreateManyEmployeeInputEnvelope
    connect?: ChemistTaskWhereUniqueInput | ChemistTaskWhereUniqueInput[]
  }

  export type TourPlanTaskUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<TourPlanTaskCreateWithoutEmployeeInput, TourPlanTaskUncheckedCreateWithoutEmployeeInput> | TourPlanTaskCreateWithoutEmployeeInput[] | TourPlanTaskUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: TourPlanTaskCreateOrConnectWithoutEmployeeInput | TourPlanTaskCreateOrConnectWithoutEmployeeInput[]
    createMany?: TourPlanTaskCreateManyEmployeeInputEnvelope
    connect?: TourPlanTaskWhereUniqueInput | TourPlanTaskWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumEmployeeRoleFieldUpdateOperationsInput = {
    set?: $Enums.EmployeeRole
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EmployeeUpdateOneWithoutSubordinatesNestedInput = {
    create?: XOR<EmployeeCreateWithoutSubordinatesInput, EmployeeUncheckedCreateWithoutSubordinatesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutSubordinatesInput
    upsert?: EmployeeUpsertWithoutSubordinatesInput
    disconnect?: EmployeeWhereInput | boolean
    delete?: EmployeeWhereInput | boolean
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutSubordinatesInput, EmployeeUpdateWithoutSubordinatesInput>, EmployeeUncheckedUpdateWithoutSubordinatesInput>
  }

  export type EmployeeUpdateManyWithoutReportingManagerNestedInput = {
    create?: XOR<EmployeeCreateWithoutReportingManagerInput, EmployeeUncheckedCreateWithoutReportingManagerInput> | EmployeeCreateWithoutReportingManagerInput[] | EmployeeUncheckedCreateWithoutReportingManagerInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutReportingManagerInput | EmployeeCreateOrConnectWithoutReportingManagerInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutReportingManagerInput | EmployeeUpsertWithWhereUniqueWithoutReportingManagerInput[]
    createMany?: EmployeeCreateManyReportingManagerInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutReportingManagerInput | EmployeeUpdateWithWhereUniqueWithoutReportingManagerInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutReportingManagerInput | EmployeeUpdateManyWithWhereWithoutReportingManagerInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type TeamUpdateOneWithoutTeamMembersNestedInput = {
    create?: XOR<TeamCreateWithoutTeamMembersInput, TeamUncheckedCreateWithoutTeamMembersInput>
    connectOrCreate?: TeamCreateOrConnectWithoutTeamMembersInput
    upsert?: TeamUpsertWithoutTeamMembersInput
    disconnect?: TeamWhereInput | boolean
    delete?: TeamWhereInput | boolean
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutTeamMembersInput, TeamUpdateWithoutTeamMembersInput>, TeamUncheckedUpdateWithoutTeamMembersInput>
  }

  export type TeamUpdateOneWithoutLeadNameNestedInput = {
    create?: XOR<TeamCreateWithoutLeadNameInput, TeamUncheckedCreateWithoutLeadNameInput>
    connectOrCreate?: TeamCreateOrConnectWithoutLeadNameInput
    upsert?: TeamUpsertWithoutLeadNameInput
    disconnect?: TeamWhereInput | boolean
    delete?: TeamWhereInput | boolean
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutLeadNameInput, TeamUpdateWithoutLeadNameInput>, TeamUncheckedUpdateWithoutLeadNameInput>
  }

  export type EmployeeTerritoryUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<EmployeeTerritoryCreateWithoutEmployeeInput, EmployeeTerritoryUncheckedCreateWithoutEmployeeInput> | EmployeeTerritoryCreateWithoutEmployeeInput[] | EmployeeTerritoryUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: EmployeeTerritoryCreateOrConnectWithoutEmployeeInput | EmployeeTerritoryCreateOrConnectWithoutEmployeeInput[]
    upsert?: EmployeeTerritoryUpsertWithWhereUniqueWithoutEmployeeInput | EmployeeTerritoryUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: EmployeeTerritoryCreateManyEmployeeInputEnvelope
    set?: EmployeeTerritoryWhereUniqueInput | EmployeeTerritoryWhereUniqueInput[]
    disconnect?: EmployeeTerritoryWhereUniqueInput | EmployeeTerritoryWhereUniqueInput[]
    delete?: EmployeeTerritoryWhereUniqueInput | EmployeeTerritoryWhereUniqueInput[]
    connect?: EmployeeTerritoryWhereUniqueInput | EmployeeTerritoryWhereUniqueInput[]
    update?: EmployeeTerritoryUpdateWithWhereUniqueWithoutEmployeeInput | EmployeeTerritoryUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: EmployeeTerritoryUpdateManyWithWhereWithoutEmployeeInput | EmployeeTerritoryUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: EmployeeTerritoryScalarWhereInput | EmployeeTerritoryScalarWhereInput[]
  }

  export type EmployeeTrainingRecordUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<EmployeeTrainingRecordCreateWithoutEmployeeInput, EmployeeTrainingRecordUncheckedCreateWithoutEmployeeInput> | EmployeeTrainingRecordCreateWithoutEmployeeInput[] | EmployeeTrainingRecordUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: EmployeeTrainingRecordCreateOrConnectWithoutEmployeeInput | EmployeeTrainingRecordCreateOrConnectWithoutEmployeeInput[]
    upsert?: EmployeeTrainingRecordUpsertWithWhereUniqueWithoutEmployeeInput | EmployeeTrainingRecordUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: EmployeeTrainingRecordCreateManyEmployeeInputEnvelope
    set?: EmployeeTrainingRecordWhereUniqueInput | EmployeeTrainingRecordWhereUniqueInput[]
    disconnect?: EmployeeTrainingRecordWhereUniqueInput | EmployeeTrainingRecordWhereUniqueInput[]
    delete?: EmployeeTrainingRecordWhereUniqueInput | EmployeeTrainingRecordWhereUniqueInput[]
    connect?: EmployeeTrainingRecordWhereUniqueInput | EmployeeTrainingRecordWhereUniqueInput[]
    update?: EmployeeTrainingRecordUpdateWithWhereUniqueWithoutEmployeeInput | EmployeeTrainingRecordUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: EmployeeTrainingRecordUpdateManyWithWhereWithoutEmployeeInput | EmployeeTrainingRecordUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: EmployeeTrainingRecordScalarWhereInput | EmployeeTrainingRecordScalarWhereInput[]
  }

  export type DoctorNoteUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<DoctorNoteCreateWithoutCreatedByInput, DoctorNoteUncheckedCreateWithoutCreatedByInput> | DoctorNoteCreateWithoutCreatedByInput[] | DoctorNoteUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DoctorNoteCreateOrConnectWithoutCreatedByInput | DoctorNoteCreateOrConnectWithoutCreatedByInput[]
    upsert?: DoctorNoteUpsertWithWhereUniqueWithoutCreatedByInput | DoctorNoteUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: DoctorNoteCreateManyCreatedByInputEnvelope
    set?: DoctorNoteWhereUniqueInput | DoctorNoteWhereUniqueInput[]
    disconnect?: DoctorNoteWhereUniqueInput | DoctorNoteWhereUniqueInput[]
    delete?: DoctorNoteWhereUniqueInput | DoctorNoteWhereUniqueInput[]
    connect?: DoctorNoteWhereUniqueInput | DoctorNoteWhereUniqueInput[]
    update?: DoctorNoteUpdateWithWhereUniqueWithoutCreatedByInput | DoctorNoteUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: DoctorNoteUpdateManyWithWhereWithoutCreatedByInput | DoctorNoteUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: DoctorNoteScalarWhereInput | DoctorNoteScalarWhereInput[]
  }

  export type ChemistNoteUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ChemistNoteCreateWithoutCreatedByInput, ChemistNoteUncheckedCreateWithoutCreatedByInput> | ChemistNoteCreateWithoutCreatedByInput[] | ChemistNoteUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ChemistNoteCreateOrConnectWithoutCreatedByInput | ChemistNoteCreateOrConnectWithoutCreatedByInput[]
    upsert?: ChemistNoteUpsertWithWhereUniqueWithoutCreatedByInput | ChemistNoteUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ChemistNoteCreateManyCreatedByInputEnvelope
    set?: ChemistNoteWhereUniqueInput | ChemistNoteWhereUniqueInput[]
    disconnect?: ChemistNoteWhereUniqueInput | ChemistNoteWhereUniqueInput[]
    delete?: ChemistNoteWhereUniqueInput | ChemistNoteWhereUniqueInput[]
    connect?: ChemistNoteWhereUniqueInput | ChemistNoteWhereUniqueInput[]
    update?: ChemistNoteUpdateWithWhereUniqueWithoutCreatedByInput | ChemistNoteUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ChemistNoteUpdateManyWithWhereWithoutCreatedByInput | ChemistNoteUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ChemistNoteScalarWhereInput | ChemistNoteScalarWhereInput[]
  }

  export type DoctorInteractionUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<DoctorInteractionCreateWithoutEmployeeInput, DoctorInteractionUncheckedCreateWithoutEmployeeInput> | DoctorInteractionCreateWithoutEmployeeInput[] | DoctorInteractionUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: DoctorInteractionCreateOrConnectWithoutEmployeeInput | DoctorInteractionCreateOrConnectWithoutEmployeeInput[]
    upsert?: DoctorInteractionUpsertWithWhereUniqueWithoutEmployeeInput | DoctorInteractionUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: DoctorInteractionCreateManyEmployeeInputEnvelope
    set?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
    disconnect?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
    delete?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
    connect?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
    update?: DoctorInteractionUpdateWithWhereUniqueWithoutEmployeeInput | DoctorInteractionUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: DoctorInteractionUpdateManyWithWhereWithoutEmployeeInput | DoctorInteractionUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: DoctorInteractionScalarWhereInput | DoctorInteractionScalarWhereInput[]
  }

  export type ChemistInteractionUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<ChemistInteractionCreateWithoutEmployeeInput, ChemistInteractionUncheckedCreateWithoutEmployeeInput> | ChemistInteractionCreateWithoutEmployeeInput[] | ChemistInteractionUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: ChemistInteractionCreateOrConnectWithoutEmployeeInput | ChemistInteractionCreateOrConnectWithoutEmployeeInput[]
    upsert?: ChemistInteractionUpsertWithWhereUniqueWithoutEmployeeInput | ChemistInteractionUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: ChemistInteractionCreateManyEmployeeInputEnvelope
    set?: ChemistInteractionWhereUniqueInput | ChemistInteractionWhereUniqueInput[]
    disconnect?: ChemistInteractionWhereUniqueInput | ChemistInteractionWhereUniqueInput[]
    delete?: ChemistInteractionWhereUniqueInput | ChemistInteractionWhereUniqueInput[]
    connect?: ChemistInteractionWhereUniqueInput | ChemistInteractionWhereUniqueInput[]
    update?: ChemistInteractionUpdateWithWhereUniqueWithoutEmployeeInput | ChemistInteractionUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: ChemistInteractionUpdateManyWithWhereWithoutEmployeeInput | ChemistInteractionUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: ChemistInteractionScalarWhereInput | ChemistInteractionScalarWhereInput[]
  }

  export type DcrReportUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<DcrReportCreateWithoutEmployeeInput, DcrReportUncheckedCreateWithoutEmployeeInput> | DcrReportCreateWithoutEmployeeInput[] | DcrReportUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: DcrReportCreateOrConnectWithoutEmployeeInput | DcrReportCreateOrConnectWithoutEmployeeInput[]
    upsert?: DcrReportUpsertWithWhereUniqueWithoutEmployeeInput | DcrReportUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: DcrReportCreateManyEmployeeInputEnvelope
    set?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
    disconnect?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
    delete?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
    connect?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
    update?: DcrReportUpdateWithWhereUniqueWithoutEmployeeInput | DcrReportUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: DcrReportUpdateManyWithWhereWithoutEmployeeInput | DcrReportUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: DcrReportScalarWhereInput | DcrReportScalarWhereInput[]
  }

  export type RcpaReportUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<RcpaReportCreateWithoutEmployeeInput, RcpaReportUncheckedCreateWithoutEmployeeInput> | RcpaReportCreateWithoutEmployeeInput[] | RcpaReportUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: RcpaReportCreateOrConnectWithoutEmployeeInput | RcpaReportCreateOrConnectWithoutEmployeeInput[]
    upsert?: RcpaReportUpsertWithWhereUniqueWithoutEmployeeInput | RcpaReportUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: RcpaReportCreateManyEmployeeInputEnvelope
    set?: RcpaReportWhereUniqueInput | RcpaReportWhereUniqueInput[]
    disconnect?: RcpaReportWhereUniqueInput | RcpaReportWhereUniqueInput[]
    delete?: RcpaReportWhereUniqueInput | RcpaReportWhereUniqueInput[]
    connect?: RcpaReportWhereUniqueInput | RcpaReportWhereUniqueInput[]
    update?: RcpaReportUpdateWithWhereUniqueWithoutEmployeeInput | RcpaReportUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: RcpaReportUpdateManyWithWhereWithoutEmployeeInput | RcpaReportUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: RcpaReportScalarWhereInput | RcpaReportScalarWhereInput[]
  }

  export type CheckInUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<CheckInCreateWithoutEmployeeInput, CheckInUncheckedCreateWithoutEmployeeInput> | CheckInCreateWithoutEmployeeInput[] | CheckInUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: CheckInCreateOrConnectWithoutEmployeeInput | CheckInCreateOrConnectWithoutEmployeeInput[]
    upsert?: CheckInUpsertWithWhereUniqueWithoutEmployeeInput | CheckInUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: CheckInCreateManyEmployeeInputEnvelope
    set?: CheckInWhereUniqueInput | CheckInWhereUniqueInput[]
    disconnect?: CheckInWhereUniqueInput | CheckInWhereUniqueInput[]
    delete?: CheckInWhereUniqueInput | CheckInWhereUniqueInput[]
    connect?: CheckInWhereUniqueInput | CheckInWhereUniqueInput[]
    update?: CheckInUpdateWithWhereUniqueWithoutEmployeeInput | CheckInUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: CheckInUpdateManyWithWhereWithoutEmployeeInput | CheckInUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: CheckInScalarWhereInput | CheckInScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<AuditLogCreateWithoutEmployeeInput, AuditLogUncheckedCreateWithoutEmployeeInput> | AuditLogCreateWithoutEmployeeInput[] | AuditLogUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutEmployeeInput | AuditLogCreateOrConnectWithoutEmployeeInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutEmployeeInput | AuditLogUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: AuditLogCreateManyEmployeeInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutEmployeeInput | AuditLogUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutEmployeeInput | AuditLogUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type OrderUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<OrderCreateWithoutCreatedByInput, OrderUncheckedCreateWithoutCreatedByInput> | OrderCreateWithoutCreatedByInput[] | OrderUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutCreatedByInput | OrderCreateOrConnectWithoutCreatedByInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutCreatedByInput | OrderUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: OrderCreateManyCreatedByInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutCreatedByInput | OrderUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutCreatedByInput | OrderUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type DoctorUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<DoctorCreateWithoutCreatedByInput, DoctorUncheckedCreateWithoutCreatedByInput> | DoctorCreateWithoutCreatedByInput[] | DoctorUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DoctorCreateOrConnectWithoutCreatedByInput | DoctorCreateOrConnectWithoutCreatedByInput[]
    upsert?: DoctorUpsertWithWhereUniqueWithoutCreatedByInput | DoctorUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: DoctorCreateManyCreatedByInputEnvelope
    set?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    disconnect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    delete?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    connect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    update?: DoctorUpdateWithWhereUniqueWithoutCreatedByInput | DoctorUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: DoctorUpdateManyWithWhereWithoutCreatedByInput | DoctorUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: DoctorScalarWhereInput | DoctorScalarWhereInput[]
  }

  export type DrugUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<DrugCreateWithoutCreatedByInput, DrugUncheckedCreateWithoutCreatedByInput> | DrugCreateWithoutCreatedByInput[] | DrugUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DrugCreateOrConnectWithoutCreatedByInput | DrugCreateOrConnectWithoutCreatedByInput[]
    upsert?: DrugUpsertWithWhereUniqueWithoutCreatedByInput | DrugUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: DrugCreateManyCreatedByInputEnvelope
    set?: DrugWhereUniqueInput | DrugWhereUniqueInput[]
    disconnect?: DrugWhereUniqueInput | DrugWhereUniqueInput[]
    delete?: DrugWhereUniqueInput | DrugWhereUniqueInput[]
    connect?: DrugWhereUniqueInput | DrugWhereUniqueInput[]
    update?: DrugUpdateWithWhereUniqueWithoutCreatedByInput | DrugUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: DrugUpdateManyWithWhereWithoutCreatedByInput | DrugUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: DrugScalarWhereInput | DrugScalarWhereInput[]
  }

  export type ChemistUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ChemistCreateWithoutCreatedByInput, ChemistUncheckedCreateWithoutCreatedByInput> | ChemistCreateWithoutCreatedByInput[] | ChemistUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ChemistCreateOrConnectWithoutCreatedByInput | ChemistCreateOrConnectWithoutCreatedByInput[]
    upsert?: ChemistUpsertWithWhereUniqueWithoutCreatedByInput | ChemistUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ChemistCreateManyCreatedByInputEnvelope
    set?: ChemistWhereUniqueInput | ChemistWhereUniqueInput[]
    disconnect?: ChemistWhereUniqueInput | ChemistWhereUniqueInput[]
    delete?: ChemistWhereUniqueInput | ChemistWhereUniqueInput[]
    connect?: ChemistWhereUniqueInput | ChemistWhereUniqueInput[]
    update?: ChemistUpdateWithWhereUniqueWithoutCreatedByInput | ChemistUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ChemistUpdateManyWithWhereWithoutCreatedByInput | ChemistUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ChemistScalarWhereInput | ChemistScalarWhereInput[]
  }

  export type DoctorChemistRelationUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<DoctorChemistRelationCreateWithoutCreatedByInput, DoctorChemistRelationUncheckedCreateWithoutCreatedByInput> | DoctorChemistRelationCreateWithoutCreatedByInput[] | DoctorChemistRelationUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DoctorChemistRelationCreateOrConnectWithoutCreatedByInput | DoctorChemistRelationCreateOrConnectWithoutCreatedByInput[]
    upsert?: DoctorChemistRelationUpsertWithWhereUniqueWithoutCreatedByInput | DoctorChemistRelationUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: DoctorChemistRelationCreateManyCreatedByInputEnvelope
    set?: DoctorChemistRelationWhereUniqueInput | DoctorChemistRelationWhereUniqueInput[]
    disconnect?: DoctorChemistRelationWhereUniqueInput | DoctorChemistRelationWhereUniqueInput[]
    delete?: DoctorChemistRelationWhereUniqueInput | DoctorChemistRelationWhereUniqueInput[]
    connect?: DoctorChemistRelationWhereUniqueInput | DoctorChemistRelationWhereUniqueInput[]
    update?: DoctorChemistRelationUpdateWithWhereUniqueWithoutCreatedByInput | DoctorChemistRelationUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: DoctorChemistRelationUpdateManyWithWhereWithoutCreatedByInput | DoctorChemistRelationUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: DoctorChemistRelationScalarWhereInput | DoctorChemistRelationScalarWhereInput[]
  }

  export type ExpenseClaimUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<ExpenseClaimCreateWithoutEmployeeInput, ExpenseClaimUncheckedCreateWithoutEmployeeInput> | ExpenseClaimCreateWithoutEmployeeInput[] | ExpenseClaimUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: ExpenseClaimCreateOrConnectWithoutEmployeeInput | ExpenseClaimCreateOrConnectWithoutEmployeeInput[]
    upsert?: ExpenseClaimUpsertWithWhereUniqueWithoutEmployeeInput | ExpenseClaimUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: ExpenseClaimCreateManyEmployeeInputEnvelope
    set?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
    disconnect?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
    delete?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
    connect?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
    update?: ExpenseClaimUpdateWithWhereUniqueWithoutEmployeeInput | ExpenseClaimUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: ExpenseClaimUpdateManyWithWhereWithoutEmployeeInput | ExpenseClaimUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: ExpenseClaimScalarWhereInput | ExpenseClaimScalarWhereInput[]
  }

  export type ExpenseClaimUpdateManyWithoutApproverNestedInput = {
    create?: XOR<ExpenseClaimCreateWithoutApproverInput, ExpenseClaimUncheckedCreateWithoutApproverInput> | ExpenseClaimCreateWithoutApproverInput[] | ExpenseClaimUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: ExpenseClaimCreateOrConnectWithoutApproverInput | ExpenseClaimCreateOrConnectWithoutApproverInput[]
    upsert?: ExpenseClaimUpsertWithWhereUniqueWithoutApproverInput | ExpenseClaimUpsertWithWhereUniqueWithoutApproverInput[]
    createMany?: ExpenseClaimCreateManyApproverInputEnvelope
    set?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
    disconnect?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
    delete?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
    connect?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
    update?: ExpenseClaimUpdateWithWhereUniqueWithoutApproverInput | ExpenseClaimUpdateWithWhereUniqueWithoutApproverInput[]
    updateMany?: ExpenseClaimUpdateManyWithWhereWithoutApproverInput | ExpenseClaimUpdateManyWithWhereWithoutApproverInput[]
    deleteMany?: ExpenseClaimScalarWhereInput | ExpenseClaimScalarWhereInput[]
  }

  export type UserDrugInventoryUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<UserDrugInventoryCreateWithoutEmployeeInput, UserDrugInventoryUncheckedCreateWithoutEmployeeInput> | UserDrugInventoryCreateWithoutEmployeeInput[] | UserDrugInventoryUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: UserDrugInventoryCreateOrConnectWithoutEmployeeInput | UserDrugInventoryCreateOrConnectWithoutEmployeeInput[]
    upsert?: UserDrugInventoryUpsertWithWhereUniqueWithoutEmployeeInput | UserDrugInventoryUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: UserDrugInventoryCreateManyEmployeeInputEnvelope
    set?: UserDrugInventoryWhereUniqueInput | UserDrugInventoryWhereUniqueInput[]
    disconnect?: UserDrugInventoryWhereUniqueInput | UserDrugInventoryWhereUniqueInput[]
    delete?: UserDrugInventoryWhereUniqueInput | UserDrugInventoryWhereUniqueInput[]
    connect?: UserDrugInventoryWhereUniqueInput | UserDrugInventoryWhereUniqueInput[]
    update?: UserDrugInventoryUpdateWithWhereUniqueWithoutEmployeeInput | UserDrugInventoryUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: UserDrugInventoryUpdateManyWithWhereWithoutEmployeeInput | UserDrugInventoryUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: UserDrugInventoryScalarWhereInput | UserDrugInventoryScalarWhereInput[]
  }

  export type UserGiftInventoryUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<UserGiftInventoryCreateWithoutEmployeeInput, UserGiftInventoryUncheckedCreateWithoutEmployeeInput> | UserGiftInventoryCreateWithoutEmployeeInput[] | UserGiftInventoryUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: UserGiftInventoryCreateOrConnectWithoutEmployeeInput | UserGiftInventoryCreateOrConnectWithoutEmployeeInput[]
    upsert?: UserGiftInventoryUpsertWithWhereUniqueWithoutEmployeeInput | UserGiftInventoryUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: UserGiftInventoryCreateManyEmployeeInputEnvelope
    set?: UserGiftInventoryWhereUniqueInput | UserGiftInventoryWhereUniqueInput[]
    disconnect?: UserGiftInventoryWhereUniqueInput | UserGiftInventoryWhereUniqueInput[]
    delete?: UserGiftInventoryWhereUniqueInput | UserGiftInventoryWhereUniqueInput[]
    connect?: UserGiftInventoryWhereUniqueInput | UserGiftInventoryWhereUniqueInput[]
    update?: UserGiftInventoryUpdateWithWhereUniqueWithoutEmployeeInput | UserGiftInventoryUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: UserGiftInventoryUpdateManyWithWhereWithoutEmployeeInput | UserGiftInventoryUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: UserGiftInventoryScalarWhereInput | UserGiftInventoryScalarWhereInput[]
  }

  export type GiftUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<GiftCreateWithoutCreatedByInput, GiftUncheckedCreateWithoutCreatedByInput> | GiftCreateWithoutCreatedByInput[] | GiftUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: GiftCreateOrConnectWithoutCreatedByInput | GiftCreateOrConnectWithoutCreatedByInput[]
    upsert?: GiftUpsertWithWhereUniqueWithoutCreatedByInput | GiftUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: GiftCreateManyCreatedByInputEnvelope
    set?: GiftWhereUniqueInput | GiftWhereUniqueInput[]
    disconnect?: GiftWhereUniqueInput | GiftWhereUniqueInput[]
    delete?: GiftWhereUniqueInput | GiftWhereUniqueInput[]
    connect?: GiftWhereUniqueInput | GiftWhereUniqueInput[]
    update?: GiftUpdateWithWhereUniqueWithoutCreatedByInput | GiftUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: GiftUpdateManyWithWhereWithoutCreatedByInput | GiftUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: GiftScalarWhereInput | GiftScalarWhereInput[]
  }

  export type DoctorDistributionUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<DoctorDistributionCreateWithoutEmployeeInput, DoctorDistributionUncheckedCreateWithoutEmployeeInput> | DoctorDistributionCreateWithoutEmployeeInput[] | DoctorDistributionUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: DoctorDistributionCreateOrConnectWithoutEmployeeInput | DoctorDistributionCreateOrConnectWithoutEmployeeInput[]
    upsert?: DoctorDistributionUpsertWithWhereUniqueWithoutEmployeeInput | DoctorDistributionUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: DoctorDistributionCreateManyEmployeeInputEnvelope
    set?: DoctorDistributionWhereUniqueInput | DoctorDistributionWhereUniqueInput[]
    disconnect?: DoctorDistributionWhereUniqueInput | DoctorDistributionWhereUniqueInput[]
    delete?: DoctorDistributionWhereUniqueInput | DoctorDistributionWhereUniqueInput[]
    connect?: DoctorDistributionWhereUniqueInput | DoctorDistributionWhereUniqueInput[]
    update?: DoctorDistributionUpdateWithWhereUniqueWithoutEmployeeInput | DoctorDistributionUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: DoctorDistributionUpdateManyWithWhereWithoutEmployeeInput | DoctorDistributionUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: DoctorDistributionScalarWhereInput | DoctorDistributionScalarWhereInput[]
  }

  export type TaskPlannerUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<TaskPlannerCreateWithoutEmployeeInput, TaskPlannerUncheckedCreateWithoutEmployeeInput> | TaskPlannerCreateWithoutEmployeeInput[] | TaskPlannerUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: TaskPlannerCreateOrConnectWithoutEmployeeInput | TaskPlannerCreateOrConnectWithoutEmployeeInput[]
    upsert?: TaskPlannerUpsertWithWhereUniqueWithoutEmployeeInput | TaskPlannerUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: TaskPlannerCreateManyEmployeeInputEnvelope
    set?: TaskPlannerWhereUniqueInput | TaskPlannerWhereUniqueInput[]
    disconnect?: TaskPlannerWhereUniqueInput | TaskPlannerWhereUniqueInput[]
    delete?: TaskPlannerWhereUniqueInput | TaskPlannerWhereUniqueInput[]
    connect?: TaskPlannerWhereUniqueInput | TaskPlannerWhereUniqueInput[]
    update?: TaskPlannerUpdateWithWhereUniqueWithoutEmployeeInput | TaskPlannerUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: TaskPlannerUpdateManyWithWhereWithoutEmployeeInput | TaskPlannerUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: TaskPlannerScalarWhereInput | TaskPlannerScalarWhereInput[]
  }

  export type DoctorTaskUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<DoctorTaskCreateWithoutEmployeeInput, DoctorTaskUncheckedCreateWithoutEmployeeInput> | DoctorTaskCreateWithoutEmployeeInput[] | DoctorTaskUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: DoctorTaskCreateOrConnectWithoutEmployeeInput | DoctorTaskCreateOrConnectWithoutEmployeeInput[]
    upsert?: DoctorTaskUpsertWithWhereUniqueWithoutEmployeeInput | DoctorTaskUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: DoctorTaskCreateManyEmployeeInputEnvelope
    set?: DoctorTaskWhereUniqueInput | DoctorTaskWhereUniqueInput[]
    disconnect?: DoctorTaskWhereUniqueInput | DoctorTaskWhereUniqueInput[]
    delete?: DoctorTaskWhereUniqueInput | DoctorTaskWhereUniqueInput[]
    connect?: DoctorTaskWhereUniqueInput | DoctorTaskWhereUniqueInput[]
    update?: DoctorTaskUpdateWithWhereUniqueWithoutEmployeeInput | DoctorTaskUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: DoctorTaskUpdateManyWithWhereWithoutEmployeeInput | DoctorTaskUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: DoctorTaskScalarWhereInput | DoctorTaskScalarWhereInput[]
  }

  export type ChemistTaskUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<ChemistTaskCreateWithoutEmployeeInput, ChemistTaskUncheckedCreateWithoutEmployeeInput> | ChemistTaskCreateWithoutEmployeeInput[] | ChemistTaskUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: ChemistTaskCreateOrConnectWithoutEmployeeInput | ChemistTaskCreateOrConnectWithoutEmployeeInput[]
    upsert?: ChemistTaskUpsertWithWhereUniqueWithoutEmployeeInput | ChemistTaskUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: ChemistTaskCreateManyEmployeeInputEnvelope
    set?: ChemistTaskWhereUniqueInput | ChemistTaskWhereUniqueInput[]
    disconnect?: ChemistTaskWhereUniqueInput | ChemistTaskWhereUniqueInput[]
    delete?: ChemistTaskWhereUniqueInput | ChemistTaskWhereUniqueInput[]
    connect?: ChemistTaskWhereUniqueInput | ChemistTaskWhereUniqueInput[]
    update?: ChemistTaskUpdateWithWhereUniqueWithoutEmployeeInput | ChemistTaskUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: ChemistTaskUpdateManyWithWhereWithoutEmployeeInput | ChemistTaskUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: ChemistTaskScalarWhereInput | ChemistTaskScalarWhereInput[]
  }

  export type TourPlanTaskUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<TourPlanTaskCreateWithoutEmployeeInput, TourPlanTaskUncheckedCreateWithoutEmployeeInput> | TourPlanTaskCreateWithoutEmployeeInput[] | TourPlanTaskUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: TourPlanTaskCreateOrConnectWithoutEmployeeInput | TourPlanTaskCreateOrConnectWithoutEmployeeInput[]
    upsert?: TourPlanTaskUpsertWithWhereUniqueWithoutEmployeeInput | TourPlanTaskUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: TourPlanTaskCreateManyEmployeeInputEnvelope
    set?: TourPlanTaskWhereUniqueInput | TourPlanTaskWhereUniqueInput[]
    disconnect?: TourPlanTaskWhereUniqueInput | TourPlanTaskWhereUniqueInput[]
    delete?: TourPlanTaskWhereUniqueInput | TourPlanTaskWhereUniqueInput[]
    connect?: TourPlanTaskWhereUniqueInput | TourPlanTaskWhereUniqueInput[]
    update?: TourPlanTaskUpdateWithWhereUniqueWithoutEmployeeInput | TourPlanTaskUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: TourPlanTaskUpdateManyWithWhereWithoutEmployeeInput | TourPlanTaskUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: TourPlanTaskScalarWhereInput | TourPlanTaskScalarWhereInput[]
  }

  export type EmployeeUncheckedUpdateManyWithoutReportingManagerNestedInput = {
    create?: XOR<EmployeeCreateWithoutReportingManagerInput, EmployeeUncheckedCreateWithoutReportingManagerInput> | EmployeeCreateWithoutReportingManagerInput[] | EmployeeUncheckedCreateWithoutReportingManagerInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutReportingManagerInput | EmployeeCreateOrConnectWithoutReportingManagerInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutReportingManagerInput | EmployeeUpsertWithWhereUniqueWithoutReportingManagerInput[]
    createMany?: EmployeeCreateManyReportingManagerInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutReportingManagerInput | EmployeeUpdateWithWhereUniqueWithoutReportingManagerInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutReportingManagerInput | EmployeeUpdateManyWithWhereWithoutReportingManagerInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type TeamUncheckedUpdateOneWithoutLeadNameNestedInput = {
    create?: XOR<TeamCreateWithoutLeadNameInput, TeamUncheckedCreateWithoutLeadNameInput>
    connectOrCreate?: TeamCreateOrConnectWithoutLeadNameInput
    upsert?: TeamUpsertWithoutLeadNameInput
    disconnect?: TeamWhereInput | boolean
    delete?: TeamWhereInput | boolean
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutLeadNameInput, TeamUpdateWithoutLeadNameInput>, TeamUncheckedUpdateWithoutLeadNameInput>
  }

  export type EmployeeTerritoryUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<EmployeeTerritoryCreateWithoutEmployeeInput, EmployeeTerritoryUncheckedCreateWithoutEmployeeInput> | EmployeeTerritoryCreateWithoutEmployeeInput[] | EmployeeTerritoryUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: EmployeeTerritoryCreateOrConnectWithoutEmployeeInput | EmployeeTerritoryCreateOrConnectWithoutEmployeeInput[]
    upsert?: EmployeeTerritoryUpsertWithWhereUniqueWithoutEmployeeInput | EmployeeTerritoryUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: EmployeeTerritoryCreateManyEmployeeInputEnvelope
    set?: EmployeeTerritoryWhereUniqueInput | EmployeeTerritoryWhereUniqueInput[]
    disconnect?: EmployeeTerritoryWhereUniqueInput | EmployeeTerritoryWhereUniqueInput[]
    delete?: EmployeeTerritoryWhereUniqueInput | EmployeeTerritoryWhereUniqueInput[]
    connect?: EmployeeTerritoryWhereUniqueInput | EmployeeTerritoryWhereUniqueInput[]
    update?: EmployeeTerritoryUpdateWithWhereUniqueWithoutEmployeeInput | EmployeeTerritoryUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: EmployeeTerritoryUpdateManyWithWhereWithoutEmployeeInput | EmployeeTerritoryUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: EmployeeTerritoryScalarWhereInput | EmployeeTerritoryScalarWhereInput[]
  }

  export type EmployeeTrainingRecordUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<EmployeeTrainingRecordCreateWithoutEmployeeInput, EmployeeTrainingRecordUncheckedCreateWithoutEmployeeInput> | EmployeeTrainingRecordCreateWithoutEmployeeInput[] | EmployeeTrainingRecordUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: EmployeeTrainingRecordCreateOrConnectWithoutEmployeeInput | EmployeeTrainingRecordCreateOrConnectWithoutEmployeeInput[]
    upsert?: EmployeeTrainingRecordUpsertWithWhereUniqueWithoutEmployeeInput | EmployeeTrainingRecordUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: EmployeeTrainingRecordCreateManyEmployeeInputEnvelope
    set?: EmployeeTrainingRecordWhereUniqueInput | EmployeeTrainingRecordWhereUniqueInput[]
    disconnect?: EmployeeTrainingRecordWhereUniqueInput | EmployeeTrainingRecordWhereUniqueInput[]
    delete?: EmployeeTrainingRecordWhereUniqueInput | EmployeeTrainingRecordWhereUniqueInput[]
    connect?: EmployeeTrainingRecordWhereUniqueInput | EmployeeTrainingRecordWhereUniqueInput[]
    update?: EmployeeTrainingRecordUpdateWithWhereUniqueWithoutEmployeeInput | EmployeeTrainingRecordUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: EmployeeTrainingRecordUpdateManyWithWhereWithoutEmployeeInput | EmployeeTrainingRecordUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: EmployeeTrainingRecordScalarWhereInput | EmployeeTrainingRecordScalarWhereInput[]
  }

  export type DoctorNoteUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<DoctorNoteCreateWithoutCreatedByInput, DoctorNoteUncheckedCreateWithoutCreatedByInput> | DoctorNoteCreateWithoutCreatedByInput[] | DoctorNoteUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DoctorNoteCreateOrConnectWithoutCreatedByInput | DoctorNoteCreateOrConnectWithoutCreatedByInput[]
    upsert?: DoctorNoteUpsertWithWhereUniqueWithoutCreatedByInput | DoctorNoteUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: DoctorNoteCreateManyCreatedByInputEnvelope
    set?: DoctorNoteWhereUniqueInput | DoctorNoteWhereUniqueInput[]
    disconnect?: DoctorNoteWhereUniqueInput | DoctorNoteWhereUniqueInput[]
    delete?: DoctorNoteWhereUniqueInput | DoctorNoteWhereUniqueInput[]
    connect?: DoctorNoteWhereUniqueInput | DoctorNoteWhereUniqueInput[]
    update?: DoctorNoteUpdateWithWhereUniqueWithoutCreatedByInput | DoctorNoteUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: DoctorNoteUpdateManyWithWhereWithoutCreatedByInput | DoctorNoteUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: DoctorNoteScalarWhereInput | DoctorNoteScalarWhereInput[]
  }

  export type ChemistNoteUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ChemistNoteCreateWithoutCreatedByInput, ChemistNoteUncheckedCreateWithoutCreatedByInput> | ChemistNoteCreateWithoutCreatedByInput[] | ChemistNoteUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ChemistNoteCreateOrConnectWithoutCreatedByInput | ChemistNoteCreateOrConnectWithoutCreatedByInput[]
    upsert?: ChemistNoteUpsertWithWhereUniqueWithoutCreatedByInput | ChemistNoteUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ChemistNoteCreateManyCreatedByInputEnvelope
    set?: ChemistNoteWhereUniqueInput | ChemistNoteWhereUniqueInput[]
    disconnect?: ChemistNoteWhereUniqueInput | ChemistNoteWhereUniqueInput[]
    delete?: ChemistNoteWhereUniqueInput | ChemistNoteWhereUniqueInput[]
    connect?: ChemistNoteWhereUniqueInput | ChemistNoteWhereUniqueInput[]
    update?: ChemistNoteUpdateWithWhereUniqueWithoutCreatedByInput | ChemistNoteUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ChemistNoteUpdateManyWithWhereWithoutCreatedByInput | ChemistNoteUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ChemistNoteScalarWhereInput | ChemistNoteScalarWhereInput[]
  }

  export type DoctorInteractionUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<DoctorInteractionCreateWithoutEmployeeInput, DoctorInteractionUncheckedCreateWithoutEmployeeInput> | DoctorInteractionCreateWithoutEmployeeInput[] | DoctorInteractionUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: DoctorInteractionCreateOrConnectWithoutEmployeeInput | DoctorInteractionCreateOrConnectWithoutEmployeeInput[]
    upsert?: DoctorInteractionUpsertWithWhereUniqueWithoutEmployeeInput | DoctorInteractionUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: DoctorInteractionCreateManyEmployeeInputEnvelope
    set?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
    disconnect?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
    delete?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
    connect?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
    update?: DoctorInteractionUpdateWithWhereUniqueWithoutEmployeeInput | DoctorInteractionUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: DoctorInteractionUpdateManyWithWhereWithoutEmployeeInput | DoctorInteractionUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: DoctorInteractionScalarWhereInput | DoctorInteractionScalarWhereInput[]
  }

  export type ChemistInteractionUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<ChemistInteractionCreateWithoutEmployeeInput, ChemistInteractionUncheckedCreateWithoutEmployeeInput> | ChemistInteractionCreateWithoutEmployeeInput[] | ChemistInteractionUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: ChemistInteractionCreateOrConnectWithoutEmployeeInput | ChemistInteractionCreateOrConnectWithoutEmployeeInput[]
    upsert?: ChemistInteractionUpsertWithWhereUniqueWithoutEmployeeInput | ChemistInteractionUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: ChemistInteractionCreateManyEmployeeInputEnvelope
    set?: ChemistInteractionWhereUniqueInput | ChemistInteractionWhereUniqueInput[]
    disconnect?: ChemistInteractionWhereUniqueInput | ChemistInteractionWhereUniqueInput[]
    delete?: ChemistInteractionWhereUniqueInput | ChemistInteractionWhereUniqueInput[]
    connect?: ChemistInteractionWhereUniqueInput | ChemistInteractionWhereUniqueInput[]
    update?: ChemistInteractionUpdateWithWhereUniqueWithoutEmployeeInput | ChemistInteractionUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: ChemistInteractionUpdateManyWithWhereWithoutEmployeeInput | ChemistInteractionUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: ChemistInteractionScalarWhereInput | ChemistInteractionScalarWhereInput[]
  }

  export type DcrReportUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<DcrReportCreateWithoutEmployeeInput, DcrReportUncheckedCreateWithoutEmployeeInput> | DcrReportCreateWithoutEmployeeInput[] | DcrReportUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: DcrReportCreateOrConnectWithoutEmployeeInput | DcrReportCreateOrConnectWithoutEmployeeInput[]
    upsert?: DcrReportUpsertWithWhereUniqueWithoutEmployeeInput | DcrReportUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: DcrReportCreateManyEmployeeInputEnvelope
    set?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
    disconnect?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
    delete?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
    connect?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
    update?: DcrReportUpdateWithWhereUniqueWithoutEmployeeInput | DcrReportUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: DcrReportUpdateManyWithWhereWithoutEmployeeInput | DcrReportUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: DcrReportScalarWhereInput | DcrReportScalarWhereInput[]
  }

  export type RcpaReportUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<RcpaReportCreateWithoutEmployeeInput, RcpaReportUncheckedCreateWithoutEmployeeInput> | RcpaReportCreateWithoutEmployeeInput[] | RcpaReportUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: RcpaReportCreateOrConnectWithoutEmployeeInput | RcpaReportCreateOrConnectWithoutEmployeeInput[]
    upsert?: RcpaReportUpsertWithWhereUniqueWithoutEmployeeInput | RcpaReportUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: RcpaReportCreateManyEmployeeInputEnvelope
    set?: RcpaReportWhereUniqueInput | RcpaReportWhereUniqueInput[]
    disconnect?: RcpaReportWhereUniqueInput | RcpaReportWhereUniqueInput[]
    delete?: RcpaReportWhereUniqueInput | RcpaReportWhereUniqueInput[]
    connect?: RcpaReportWhereUniqueInput | RcpaReportWhereUniqueInput[]
    update?: RcpaReportUpdateWithWhereUniqueWithoutEmployeeInput | RcpaReportUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: RcpaReportUpdateManyWithWhereWithoutEmployeeInput | RcpaReportUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: RcpaReportScalarWhereInput | RcpaReportScalarWhereInput[]
  }

  export type CheckInUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<CheckInCreateWithoutEmployeeInput, CheckInUncheckedCreateWithoutEmployeeInput> | CheckInCreateWithoutEmployeeInput[] | CheckInUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: CheckInCreateOrConnectWithoutEmployeeInput | CheckInCreateOrConnectWithoutEmployeeInput[]
    upsert?: CheckInUpsertWithWhereUniqueWithoutEmployeeInput | CheckInUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: CheckInCreateManyEmployeeInputEnvelope
    set?: CheckInWhereUniqueInput | CheckInWhereUniqueInput[]
    disconnect?: CheckInWhereUniqueInput | CheckInWhereUniqueInput[]
    delete?: CheckInWhereUniqueInput | CheckInWhereUniqueInput[]
    connect?: CheckInWhereUniqueInput | CheckInWhereUniqueInput[]
    update?: CheckInUpdateWithWhereUniqueWithoutEmployeeInput | CheckInUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: CheckInUpdateManyWithWhereWithoutEmployeeInput | CheckInUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: CheckInScalarWhereInput | CheckInScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<AuditLogCreateWithoutEmployeeInput, AuditLogUncheckedCreateWithoutEmployeeInput> | AuditLogCreateWithoutEmployeeInput[] | AuditLogUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutEmployeeInput | AuditLogCreateOrConnectWithoutEmployeeInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutEmployeeInput | AuditLogUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: AuditLogCreateManyEmployeeInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutEmployeeInput | AuditLogUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutEmployeeInput | AuditLogUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<OrderCreateWithoutCreatedByInput, OrderUncheckedCreateWithoutCreatedByInput> | OrderCreateWithoutCreatedByInput[] | OrderUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutCreatedByInput | OrderCreateOrConnectWithoutCreatedByInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutCreatedByInput | OrderUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: OrderCreateManyCreatedByInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutCreatedByInput | OrderUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutCreatedByInput | OrderUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type DoctorUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<DoctorCreateWithoutCreatedByInput, DoctorUncheckedCreateWithoutCreatedByInput> | DoctorCreateWithoutCreatedByInput[] | DoctorUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DoctorCreateOrConnectWithoutCreatedByInput | DoctorCreateOrConnectWithoutCreatedByInput[]
    upsert?: DoctorUpsertWithWhereUniqueWithoutCreatedByInput | DoctorUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: DoctorCreateManyCreatedByInputEnvelope
    set?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    disconnect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    delete?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    connect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    update?: DoctorUpdateWithWhereUniqueWithoutCreatedByInput | DoctorUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: DoctorUpdateManyWithWhereWithoutCreatedByInput | DoctorUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: DoctorScalarWhereInput | DoctorScalarWhereInput[]
  }

  export type DrugUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<DrugCreateWithoutCreatedByInput, DrugUncheckedCreateWithoutCreatedByInput> | DrugCreateWithoutCreatedByInput[] | DrugUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DrugCreateOrConnectWithoutCreatedByInput | DrugCreateOrConnectWithoutCreatedByInput[]
    upsert?: DrugUpsertWithWhereUniqueWithoutCreatedByInput | DrugUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: DrugCreateManyCreatedByInputEnvelope
    set?: DrugWhereUniqueInput | DrugWhereUniqueInput[]
    disconnect?: DrugWhereUniqueInput | DrugWhereUniqueInput[]
    delete?: DrugWhereUniqueInput | DrugWhereUniqueInput[]
    connect?: DrugWhereUniqueInput | DrugWhereUniqueInput[]
    update?: DrugUpdateWithWhereUniqueWithoutCreatedByInput | DrugUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: DrugUpdateManyWithWhereWithoutCreatedByInput | DrugUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: DrugScalarWhereInput | DrugScalarWhereInput[]
  }

  export type ChemistUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ChemistCreateWithoutCreatedByInput, ChemistUncheckedCreateWithoutCreatedByInput> | ChemistCreateWithoutCreatedByInput[] | ChemistUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ChemistCreateOrConnectWithoutCreatedByInput | ChemistCreateOrConnectWithoutCreatedByInput[]
    upsert?: ChemistUpsertWithWhereUniqueWithoutCreatedByInput | ChemistUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ChemistCreateManyCreatedByInputEnvelope
    set?: ChemistWhereUniqueInput | ChemistWhereUniqueInput[]
    disconnect?: ChemistWhereUniqueInput | ChemistWhereUniqueInput[]
    delete?: ChemistWhereUniqueInput | ChemistWhereUniqueInput[]
    connect?: ChemistWhereUniqueInput | ChemistWhereUniqueInput[]
    update?: ChemistUpdateWithWhereUniqueWithoutCreatedByInput | ChemistUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ChemistUpdateManyWithWhereWithoutCreatedByInput | ChemistUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ChemistScalarWhereInput | ChemistScalarWhereInput[]
  }

  export type DoctorChemistRelationUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<DoctorChemistRelationCreateWithoutCreatedByInput, DoctorChemistRelationUncheckedCreateWithoutCreatedByInput> | DoctorChemistRelationCreateWithoutCreatedByInput[] | DoctorChemistRelationUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DoctorChemistRelationCreateOrConnectWithoutCreatedByInput | DoctorChemistRelationCreateOrConnectWithoutCreatedByInput[]
    upsert?: DoctorChemistRelationUpsertWithWhereUniqueWithoutCreatedByInput | DoctorChemistRelationUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: DoctorChemistRelationCreateManyCreatedByInputEnvelope
    set?: DoctorChemistRelationWhereUniqueInput | DoctorChemistRelationWhereUniqueInput[]
    disconnect?: DoctorChemistRelationWhereUniqueInput | DoctorChemistRelationWhereUniqueInput[]
    delete?: DoctorChemistRelationWhereUniqueInput | DoctorChemistRelationWhereUniqueInput[]
    connect?: DoctorChemistRelationWhereUniqueInput | DoctorChemistRelationWhereUniqueInput[]
    update?: DoctorChemistRelationUpdateWithWhereUniqueWithoutCreatedByInput | DoctorChemistRelationUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: DoctorChemistRelationUpdateManyWithWhereWithoutCreatedByInput | DoctorChemistRelationUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: DoctorChemistRelationScalarWhereInput | DoctorChemistRelationScalarWhereInput[]
  }

  export type ExpenseClaimUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<ExpenseClaimCreateWithoutEmployeeInput, ExpenseClaimUncheckedCreateWithoutEmployeeInput> | ExpenseClaimCreateWithoutEmployeeInput[] | ExpenseClaimUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: ExpenseClaimCreateOrConnectWithoutEmployeeInput | ExpenseClaimCreateOrConnectWithoutEmployeeInput[]
    upsert?: ExpenseClaimUpsertWithWhereUniqueWithoutEmployeeInput | ExpenseClaimUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: ExpenseClaimCreateManyEmployeeInputEnvelope
    set?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
    disconnect?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
    delete?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
    connect?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
    update?: ExpenseClaimUpdateWithWhereUniqueWithoutEmployeeInput | ExpenseClaimUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: ExpenseClaimUpdateManyWithWhereWithoutEmployeeInput | ExpenseClaimUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: ExpenseClaimScalarWhereInput | ExpenseClaimScalarWhereInput[]
  }

  export type ExpenseClaimUncheckedUpdateManyWithoutApproverNestedInput = {
    create?: XOR<ExpenseClaimCreateWithoutApproverInput, ExpenseClaimUncheckedCreateWithoutApproverInput> | ExpenseClaimCreateWithoutApproverInput[] | ExpenseClaimUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: ExpenseClaimCreateOrConnectWithoutApproverInput | ExpenseClaimCreateOrConnectWithoutApproverInput[]
    upsert?: ExpenseClaimUpsertWithWhereUniqueWithoutApproverInput | ExpenseClaimUpsertWithWhereUniqueWithoutApproverInput[]
    createMany?: ExpenseClaimCreateManyApproverInputEnvelope
    set?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
    disconnect?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
    delete?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
    connect?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
    update?: ExpenseClaimUpdateWithWhereUniqueWithoutApproverInput | ExpenseClaimUpdateWithWhereUniqueWithoutApproverInput[]
    updateMany?: ExpenseClaimUpdateManyWithWhereWithoutApproverInput | ExpenseClaimUpdateManyWithWhereWithoutApproverInput[]
    deleteMany?: ExpenseClaimScalarWhereInput | ExpenseClaimScalarWhereInput[]
  }

  export type UserDrugInventoryUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<UserDrugInventoryCreateWithoutEmployeeInput, UserDrugInventoryUncheckedCreateWithoutEmployeeInput> | UserDrugInventoryCreateWithoutEmployeeInput[] | UserDrugInventoryUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: UserDrugInventoryCreateOrConnectWithoutEmployeeInput | UserDrugInventoryCreateOrConnectWithoutEmployeeInput[]
    upsert?: UserDrugInventoryUpsertWithWhereUniqueWithoutEmployeeInput | UserDrugInventoryUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: UserDrugInventoryCreateManyEmployeeInputEnvelope
    set?: UserDrugInventoryWhereUniqueInput | UserDrugInventoryWhereUniqueInput[]
    disconnect?: UserDrugInventoryWhereUniqueInput | UserDrugInventoryWhereUniqueInput[]
    delete?: UserDrugInventoryWhereUniqueInput | UserDrugInventoryWhereUniqueInput[]
    connect?: UserDrugInventoryWhereUniqueInput | UserDrugInventoryWhereUniqueInput[]
    update?: UserDrugInventoryUpdateWithWhereUniqueWithoutEmployeeInput | UserDrugInventoryUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: UserDrugInventoryUpdateManyWithWhereWithoutEmployeeInput | UserDrugInventoryUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: UserDrugInventoryScalarWhereInput | UserDrugInventoryScalarWhereInput[]
  }

  export type UserGiftInventoryUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<UserGiftInventoryCreateWithoutEmployeeInput, UserGiftInventoryUncheckedCreateWithoutEmployeeInput> | UserGiftInventoryCreateWithoutEmployeeInput[] | UserGiftInventoryUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: UserGiftInventoryCreateOrConnectWithoutEmployeeInput | UserGiftInventoryCreateOrConnectWithoutEmployeeInput[]
    upsert?: UserGiftInventoryUpsertWithWhereUniqueWithoutEmployeeInput | UserGiftInventoryUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: UserGiftInventoryCreateManyEmployeeInputEnvelope
    set?: UserGiftInventoryWhereUniqueInput | UserGiftInventoryWhereUniqueInput[]
    disconnect?: UserGiftInventoryWhereUniqueInput | UserGiftInventoryWhereUniqueInput[]
    delete?: UserGiftInventoryWhereUniqueInput | UserGiftInventoryWhereUniqueInput[]
    connect?: UserGiftInventoryWhereUniqueInput | UserGiftInventoryWhereUniqueInput[]
    update?: UserGiftInventoryUpdateWithWhereUniqueWithoutEmployeeInput | UserGiftInventoryUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: UserGiftInventoryUpdateManyWithWhereWithoutEmployeeInput | UserGiftInventoryUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: UserGiftInventoryScalarWhereInput | UserGiftInventoryScalarWhereInput[]
  }

  export type GiftUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<GiftCreateWithoutCreatedByInput, GiftUncheckedCreateWithoutCreatedByInput> | GiftCreateWithoutCreatedByInput[] | GiftUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: GiftCreateOrConnectWithoutCreatedByInput | GiftCreateOrConnectWithoutCreatedByInput[]
    upsert?: GiftUpsertWithWhereUniqueWithoutCreatedByInput | GiftUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: GiftCreateManyCreatedByInputEnvelope
    set?: GiftWhereUniqueInput | GiftWhereUniqueInput[]
    disconnect?: GiftWhereUniqueInput | GiftWhereUniqueInput[]
    delete?: GiftWhereUniqueInput | GiftWhereUniqueInput[]
    connect?: GiftWhereUniqueInput | GiftWhereUniqueInput[]
    update?: GiftUpdateWithWhereUniqueWithoutCreatedByInput | GiftUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: GiftUpdateManyWithWhereWithoutCreatedByInput | GiftUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: GiftScalarWhereInput | GiftScalarWhereInput[]
  }

  export type DoctorDistributionUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<DoctorDistributionCreateWithoutEmployeeInput, DoctorDistributionUncheckedCreateWithoutEmployeeInput> | DoctorDistributionCreateWithoutEmployeeInput[] | DoctorDistributionUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: DoctorDistributionCreateOrConnectWithoutEmployeeInput | DoctorDistributionCreateOrConnectWithoutEmployeeInput[]
    upsert?: DoctorDistributionUpsertWithWhereUniqueWithoutEmployeeInput | DoctorDistributionUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: DoctorDistributionCreateManyEmployeeInputEnvelope
    set?: DoctorDistributionWhereUniqueInput | DoctorDistributionWhereUniqueInput[]
    disconnect?: DoctorDistributionWhereUniqueInput | DoctorDistributionWhereUniqueInput[]
    delete?: DoctorDistributionWhereUniqueInput | DoctorDistributionWhereUniqueInput[]
    connect?: DoctorDistributionWhereUniqueInput | DoctorDistributionWhereUniqueInput[]
    update?: DoctorDistributionUpdateWithWhereUniqueWithoutEmployeeInput | DoctorDistributionUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: DoctorDistributionUpdateManyWithWhereWithoutEmployeeInput | DoctorDistributionUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: DoctorDistributionScalarWhereInput | DoctorDistributionScalarWhereInput[]
  }

  export type TaskPlannerUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<TaskPlannerCreateWithoutEmployeeInput, TaskPlannerUncheckedCreateWithoutEmployeeInput> | TaskPlannerCreateWithoutEmployeeInput[] | TaskPlannerUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: TaskPlannerCreateOrConnectWithoutEmployeeInput | TaskPlannerCreateOrConnectWithoutEmployeeInput[]
    upsert?: TaskPlannerUpsertWithWhereUniqueWithoutEmployeeInput | TaskPlannerUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: TaskPlannerCreateManyEmployeeInputEnvelope
    set?: TaskPlannerWhereUniqueInput | TaskPlannerWhereUniqueInput[]
    disconnect?: TaskPlannerWhereUniqueInput | TaskPlannerWhereUniqueInput[]
    delete?: TaskPlannerWhereUniqueInput | TaskPlannerWhereUniqueInput[]
    connect?: TaskPlannerWhereUniqueInput | TaskPlannerWhereUniqueInput[]
    update?: TaskPlannerUpdateWithWhereUniqueWithoutEmployeeInput | TaskPlannerUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: TaskPlannerUpdateManyWithWhereWithoutEmployeeInput | TaskPlannerUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: TaskPlannerScalarWhereInput | TaskPlannerScalarWhereInput[]
  }

  export type DoctorTaskUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<DoctorTaskCreateWithoutEmployeeInput, DoctorTaskUncheckedCreateWithoutEmployeeInput> | DoctorTaskCreateWithoutEmployeeInput[] | DoctorTaskUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: DoctorTaskCreateOrConnectWithoutEmployeeInput | DoctorTaskCreateOrConnectWithoutEmployeeInput[]
    upsert?: DoctorTaskUpsertWithWhereUniqueWithoutEmployeeInput | DoctorTaskUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: DoctorTaskCreateManyEmployeeInputEnvelope
    set?: DoctorTaskWhereUniqueInput | DoctorTaskWhereUniqueInput[]
    disconnect?: DoctorTaskWhereUniqueInput | DoctorTaskWhereUniqueInput[]
    delete?: DoctorTaskWhereUniqueInput | DoctorTaskWhereUniqueInput[]
    connect?: DoctorTaskWhereUniqueInput | DoctorTaskWhereUniqueInput[]
    update?: DoctorTaskUpdateWithWhereUniqueWithoutEmployeeInput | DoctorTaskUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: DoctorTaskUpdateManyWithWhereWithoutEmployeeInput | DoctorTaskUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: DoctorTaskScalarWhereInput | DoctorTaskScalarWhereInput[]
  }

  export type ChemistTaskUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<ChemistTaskCreateWithoutEmployeeInput, ChemistTaskUncheckedCreateWithoutEmployeeInput> | ChemistTaskCreateWithoutEmployeeInput[] | ChemistTaskUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: ChemistTaskCreateOrConnectWithoutEmployeeInput | ChemistTaskCreateOrConnectWithoutEmployeeInput[]
    upsert?: ChemistTaskUpsertWithWhereUniqueWithoutEmployeeInput | ChemistTaskUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: ChemistTaskCreateManyEmployeeInputEnvelope
    set?: ChemistTaskWhereUniqueInput | ChemistTaskWhereUniqueInput[]
    disconnect?: ChemistTaskWhereUniqueInput | ChemistTaskWhereUniqueInput[]
    delete?: ChemistTaskWhereUniqueInput | ChemistTaskWhereUniqueInput[]
    connect?: ChemistTaskWhereUniqueInput | ChemistTaskWhereUniqueInput[]
    update?: ChemistTaskUpdateWithWhereUniqueWithoutEmployeeInput | ChemistTaskUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: ChemistTaskUpdateManyWithWhereWithoutEmployeeInput | ChemistTaskUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: ChemistTaskScalarWhereInput | ChemistTaskScalarWhereInput[]
  }

  export type TourPlanTaskUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<TourPlanTaskCreateWithoutEmployeeInput, TourPlanTaskUncheckedCreateWithoutEmployeeInput> | TourPlanTaskCreateWithoutEmployeeInput[] | TourPlanTaskUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: TourPlanTaskCreateOrConnectWithoutEmployeeInput | TourPlanTaskCreateOrConnectWithoutEmployeeInput[]
    upsert?: TourPlanTaskUpsertWithWhereUniqueWithoutEmployeeInput | TourPlanTaskUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: TourPlanTaskCreateManyEmployeeInputEnvelope
    set?: TourPlanTaskWhereUniqueInput | TourPlanTaskWhereUniqueInput[]
    disconnect?: TourPlanTaskWhereUniqueInput | TourPlanTaskWhereUniqueInput[]
    delete?: TourPlanTaskWhereUniqueInput | TourPlanTaskWhereUniqueInput[]
    connect?: TourPlanTaskWhereUniqueInput | TourPlanTaskWhereUniqueInput[]
    update?: TourPlanTaskUpdateWithWhereUniqueWithoutEmployeeInput | TourPlanTaskUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: TourPlanTaskUpdateManyWithWhereWithoutEmployeeInput | TourPlanTaskUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: TourPlanTaskScalarWhereInput | TourPlanTaskScalarWhereInput[]
  }

  export type EmployeeCreateNestedOneWithoutLeadsTeamInput = {
    create?: XOR<EmployeeCreateWithoutLeadsTeamInput, EmployeeUncheckedCreateWithoutLeadsTeamInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutLeadsTeamInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeCreateNestedManyWithoutTeamInput = {
    create?: XOR<EmployeeCreateWithoutTeamInput, EmployeeUncheckedCreateWithoutTeamInput> | EmployeeCreateWithoutTeamInput[] | EmployeeUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutTeamInput | EmployeeCreateOrConnectWithoutTeamInput[]
    createMany?: EmployeeCreateManyTeamInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type EmployeeUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<EmployeeCreateWithoutTeamInput, EmployeeUncheckedCreateWithoutTeamInput> | EmployeeCreateWithoutTeamInput[] | EmployeeUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutTeamInput | EmployeeCreateOrConnectWithoutTeamInput[]
    createMany?: EmployeeCreateManyTeamInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type EmployeeUpdateOneRequiredWithoutLeadsTeamNestedInput = {
    create?: XOR<EmployeeCreateWithoutLeadsTeamInput, EmployeeUncheckedCreateWithoutLeadsTeamInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutLeadsTeamInput
    upsert?: EmployeeUpsertWithoutLeadsTeamInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutLeadsTeamInput, EmployeeUpdateWithoutLeadsTeamInput>, EmployeeUncheckedUpdateWithoutLeadsTeamInput>
  }

  export type EmployeeUpdateManyWithoutTeamNestedInput = {
    create?: XOR<EmployeeCreateWithoutTeamInput, EmployeeUncheckedCreateWithoutTeamInput> | EmployeeCreateWithoutTeamInput[] | EmployeeUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutTeamInput | EmployeeCreateOrConnectWithoutTeamInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutTeamInput | EmployeeUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: EmployeeCreateManyTeamInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutTeamInput | EmployeeUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutTeamInput | EmployeeUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type EmployeeUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<EmployeeCreateWithoutTeamInput, EmployeeUncheckedCreateWithoutTeamInput> | EmployeeCreateWithoutTeamInput[] | EmployeeUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutTeamInput | EmployeeCreateOrConnectWithoutTeamInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutTeamInput | EmployeeUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: EmployeeCreateManyTeamInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutTeamInput | EmployeeUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutTeamInput | EmployeeUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type TerritoryCreateNestedOneWithoutChildTerritoriesInput = {
    create?: XOR<TerritoryCreateWithoutChildTerritoriesInput, TerritoryUncheckedCreateWithoutChildTerritoriesInput>
    connectOrCreate?: TerritoryCreateOrConnectWithoutChildTerritoriesInput
    connect?: TerritoryWhereUniqueInput
  }

  export type TerritoryCreateNestedManyWithoutParentTerritoryInput = {
    create?: XOR<TerritoryCreateWithoutParentTerritoryInput, TerritoryUncheckedCreateWithoutParentTerritoryInput> | TerritoryCreateWithoutParentTerritoryInput[] | TerritoryUncheckedCreateWithoutParentTerritoryInput[]
    connectOrCreate?: TerritoryCreateOrConnectWithoutParentTerritoryInput | TerritoryCreateOrConnectWithoutParentTerritoryInput[]
    createMany?: TerritoryCreateManyParentTerritoryInputEnvelope
    connect?: TerritoryWhereUniqueInput | TerritoryWhereUniqueInput[]
  }

  export type EmployeeTerritoryCreateNestedManyWithoutTerritoryInput = {
    create?: XOR<EmployeeTerritoryCreateWithoutTerritoryInput, EmployeeTerritoryUncheckedCreateWithoutTerritoryInput> | EmployeeTerritoryCreateWithoutTerritoryInput[] | EmployeeTerritoryUncheckedCreateWithoutTerritoryInput[]
    connectOrCreate?: EmployeeTerritoryCreateOrConnectWithoutTerritoryInput | EmployeeTerritoryCreateOrConnectWithoutTerritoryInput[]
    createMany?: EmployeeTerritoryCreateManyTerritoryInputEnvelope
    connect?: EmployeeTerritoryWhereUniqueInput | EmployeeTerritoryWhereUniqueInput[]
  }

  export type HospitalCreateNestedManyWithoutTerritoryInput = {
    create?: XOR<HospitalCreateWithoutTerritoryInput, HospitalUncheckedCreateWithoutTerritoryInput> | HospitalCreateWithoutTerritoryInput[] | HospitalUncheckedCreateWithoutTerritoryInput[]
    connectOrCreate?: HospitalCreateOrConnectWithoutTerritoryInput | HospitalCreateOrConnectWithoutTerritoryInput[]
    createMany?: HospitalCreateManyTerritoryInputEnvelope
    connect?: HospitalWhereUniqueInput | HospitalWhereUniqueInput[]
  }

  export type ChemistCreateNestedManyWithoutTerritoryInput = {
    create?: XOR<ChemistCreateWithoutTerritoryInput, ChemistUncheckedCreateWithoutTerritoryInput> | ChemistCreateWithoutTerritoryInput[] | ChemistUncheckedCreateWithoutTerritoryInput[]
    connectOrCreate?: ChemistCreateOrConnectWithoutTerritoryInput | ChemistCreateOrConnectWithoutTerritoryInput[]
    createMany?: ChemistCreateManyTerritoryInputEnvelope
    connect?: ChemistWhereUniqueInput | ChemistWhereUniqueInput[]
  }

  export type TerritoryUncheckedCreateNestedManyWithoutParentTerritoryInput = {
    create?: XOR<TerritoryCreateWithoutParentTerritoryInput, TerritoryUncheckedCreateWithoutParentTerritoryInput> | TerritoryCreateWithoutParentTerritoryInput[] | TerritoryUncheckedCreateWithoutParentTerritoryInput[]
    connectOrCreate?: TerritoryCreateOrConnectWithoutParentTerritoryInput | TerritoryCreateOrConnectWithoutParentTerritoryInput[]
    createMany?: TerritoryCreateManyParentTerritoryInputEnvelope
    connect?: TerritoryWhereUniqueInput | TerritoryWhereUniqueInput[]
  }

  export type EmployeeTerritoryUncheckedCreateNestedManyWithoutTerritoryInput = {
    create?: XOR<EmployeeTerritoryCreateWithoutTerritoryInput, EmployeeTerritoryUncheckedCreateWithoutTerritoryInput> | EmployeeTerritoryCreateWithoutTerritoryInput[] | EmployeeTerritoryUncheckedCreateWithoutTerritoryInput[]
    connectOrCreate?: EmployeeTerritoryCreateOrConnectWithoutTerritoryInput | EmployeeTerritoryCreateOrConnectWithoutTerritoryInput[]
    createMany?: EmployeeTerritoryCreateManyTerritoryInputEnvelope
    connect?: EmployeeTerritoryWhereUniqueInput | EmployeeTerritoryWhereUniqueInput[]
  }

  export type HospitalUncheckedCreateNestedManyWithoutTerritoryInput = {
    create?: XOR<HospitalCreateWithoutTerritoryInput, HospitalUncheckedCreateWithoutTerritoryInput> | HospitalCreateWithoutTerritoryInput[] | HospitalUncheckedCreateWithoutTerritoryInput[]
    connectOrCreate?: HospitalCreateOrConnectWithoutTerritoryInput | HospitalCreateOrConnectWithoutTerritoryInput[]
    createMany?: HospitalCreateManyTerritoryInputEnvelope
    connect?: HospitalWhereUniqueInput | HospitalWhereUniqueInput[]
  }

  export type ChemistUncheckedCreateNestedManyWithoutTerritoryInput = {
    create?: XOR<ChemistCreateWithoutTerritoryInput, ChemistUncheckedCreateWithoutTerritoryInput> | ChemistCreateWithoutTerritoryInput[] | ChemistUncheckedCreateWithoutTerritoryInput[]
    connectOrCreate?: ChemistCreateOrConnectWithoutTerritoryInput | ChemistCreateOrConnectWithoutTerritoryInput[]
    createMany?: ChemistCreateManyTerritoryInputEnvelope
    connect?: ChemistWhereUniqueInput | ChemistWhereUniqueInput[]
  }

  export type TerritoryUpdateOneWithoutChildTerritoriesNestedInput = {
    create?: XOR<TerritoryCreateWithoutChildTerritoriesInput, TerritoryUncheckedCreateWithoutChildTerritoriesInput>
    connectOrCreate?: TerritoryCreateOrConnectWithoutChildTerritoriesInput
    upsert?: TerritoryUpsertWithoutChildTerritoriesInput
    disconnect?: TerritoryWhereInput | boolean
    delete?: TerritoryWhereInput | boolean
    connect?: TerritoryWhereUniqueInput
    update?: XOR<XOR<TerritoryUpdateToOneWithWhereWithoutChildTerritoriesInput, TerritoryUpdateWithoutChildTerritoriesInput>, TerritoryUncheckedUpdateWithoutChildTerritoriesInput>
  }

  export type TerritoryUpdateManyWithoutParentTerritoryNestedInput = {
    create?: XOR<TerritoryCreateWithoutParentTerritoryInput, TerritoryUncheckedCreateWithoutParentTerritoryInput> | TerritoryCreateWithoutParentTerritoryInput[] | TerritoryUncheckedCreateWithoutParentTerritoryInput[]
    connectOrCreate?: TerritoryCreateOrConnectWithoutParentTerritoryInput | TerritoryCreateOrConnectWithoutParentTerritoryInput[]
    upsert?: TerritoryUpsertWithWhereUniqueWithoutParentTerritoryInput | TerritoryUpsertWithWhereUniqueWithoutParentTerritoryInput[]
    createMany?: TerritoryCreateManyParentTerritoryInputEnvelope
    set?: TerritoryWhereUniqueInput | TerritoryWhereUniqueInput[]
    disconnect?: TerritoryWhereUniqueInput | TerritoryWhereUniqueInput[]
    delete?: TerritoryWhereUniqueInput | TerritoryWhereUniqueInput[]
    connect?: TerritoryWhereUniqueInput | TerritoryWhereUniqueInput[]
    update?: TerritoryUpdateWithWhereUniqueWithoutParentTerritoryInput | TerritoryUpdateWithWhereUniqueWithoutParentTerritoryInput[]
    updateMany?: TerritoryUpdateManyWithWhereWithoutParentTerritoryInput | TerritoryUpdateManyWithWhereWithoutParentTerritoryInput[]
    deleteMany?: TerritoryScalarWhereInput | TerritoryScalarWhereInput[]
  }

  export type EmployeeTerritoryUpdateManyWithoutTerritoryNestedInput = {
    create?: XOR<EmployeeTerritoryCreateWithoutTerritoryInput, EmployeeTerritoryUncheckedCreateWithoutTerritoryInput> | EmployeeTerritoryCreateWithoutTerritoryInput[] | EmployeeTerritoryUncheckedCreateWithoutTerritoryInput[]
    connectOrCreate?: EmployeeTerritoryCreateOrConnectWithoutTerritoryInput | EmployeeTerritoryCreateOrConnectWithoutTerritoryInput[]
    upsert?: EmployeeTerritoryUpsertWithWhereUniqueWithoutTerritoryInput | EmployeeTerritoryUpsertWithWhereUniqueWithoutTerritoryInput[]
    createMany?: EmployeeTerritoryCreateManyTerritoryInputEnvelope
    set?: EmployeeTerritoryWhereUniqueInput | EmployeeTerritoryWhereUniqueInput[]
    disconnect?: EmployeeTerritoryWhereUniqueInput | EmployeeTerritoryWhereUniqueInput[]
    delete?: EmployeeTerritoryWhereUniqueInput | EmployeeTerritoryWhereUniqueInput[]
    connect?: EmployeeTerritoryWhereUniqueInput | EmployeeTerritoryWhereUniqueInput[]
    update?: EmployeeTerritoryUpdateWithWhereUniqueWithoutTerritoryInput | EmployeeTerritoryUpdateWithWhereUniqueWithoutTerritoryInput[]
    updateMany?: EmployeeTerritoryUpdateManyWithWhereWithoutTerritoryInput | EmployeeTerritoryUpdateManyWithWhereWithoutTerritoryInput[]
    deleteMany?: EmployeeTerritoryScalarWhereInput | EmployeeTerritoryScalarWhereInput[]
  }

  export type HospitalUpdateManyWithoutTerritoryNestedInput = {
    create?: XOR<HospitalCreateWithoutTerritoryInput, HospitalUncheckedCreateWithoutTerritoryInput> | HospitalCreateWithoutTerritoryInput[] | HospitalUncheckedCreateWithoutTerritoryInput[]
    connectOrCreate?: HospitalCreateOrConnectWithoutTerritoryInput | HospitalCreateOrConnectWithoutTerritoryInput[]
    upsert?: HospitalUpsertWithWhereUniqueWithoutTerritoryInput | HospitalUpsertWithWhereUniqueWithoutTerritoryInput[]
    createMany?: HospitalCreateManyTerritoryInputEnvelope
    set?: HospitalWhereUniqueInput | HospitalWhereUniqueInput[]
    disconnect?: HospitalWhereUniqueInput | HospitalWhereUniqueInput[]
    delete?: HospitalWhereUniqueInput | HospitalWhereUniqueInput[]
    connect?: HospitalWhereUniqueInput | HospitalWhereUniqueInput[]
    update?: HospitalUpdateWithWhereUniqueWithoutTerritoryInput | HospitalUpdateWithWhereUniqueWithoutTerritoryInput[]
    updateMany?: HospitalUpdateManyWithWhereWithoutTerritoryInput | HospitalUpdateManyWithWhereWithoutTerritoryInput[]
    deleteMany?: HospitalScalarWhereInput | HospitalScalarWhereInput[]
  }

  export type ChemistUpdateManyWithoutTerritoryNestedInput = {
    create?: XOR<ChemistCreateWithoutTerritoryInput, ChemistUncheckedCreateWithoutTerritoryInput> | ChemistCreateWithoutTerritoryInput[] | ChemistUncheckedCreateWithoutTerritoryInput[]
    connectOrCreate?: ChemistCreateOrConnectWithoutTerritoryInput | ChemistCreateOrConnectWithoutTerritoryInput[]
    upsert?: ChemistUpsertWithWhereUniqueWithoutTerritoryInput | ChemistUpsertWithWhereUniqueWithoutTerritoryInput[]
    createMany?: ChemistCreateManyTerritoryInputEnvelope
    set?: ChemistWhereUniqueInput | ChemistWhereUniqueInput[]
    disconnect?: ChemistWhereUniqueInput | ChemistWhereUniqueInput[]
    delete?: ChemistWhereUniqueInput | ChemistWhereUniqueInput[]
    connect?: ChemistWhereUniqueInput | ChemistWhereUniqueInput[]
    update?: ChemistUpdateWithWhereUniqueWithoutTerritoryInput | ChemistUpdateWithWhereUniqueWithoutTerritoryInput[]
    updateMany?: ChemistUpdateManyWithWhereWithoutTerritoryInput | ChemistUpdateManyWithWhereWithoutTerritoryInput[]
    deleteMany?: ChemistScalarWhereInput | ChemistScalarWhereInput[]
  }

  export type TerritoryUncheckedUpdateManyWithoutParentTerritoryNestedInput = {
    create?: XOR<TerritoryCreateWithoutParentTerritoryInput, TerritoryUncheckedCreateWithoutParentTerritoryInput> | TerritoryCreateWithoutParentTerritoryInput[] | TerritoryUncheckedCreateWithoutParentTerritoryInput[]
    connectOrCreate?: TerritoryCreateOrConnectWithoutParentTerritoryInput | TerritoryCreateOrConnectWithoutParentTerritoryInput[]
    upsert?: TerritoryUpsertWithWhereUniqueWithoutParentTerritoryInput | TerritoryUpsertWithWhereUniqueWithoutParentTerritoryInput[]
    createMany?: TerritoryCreateManyParentTerritoryInputEnvelope
    set?: TerritoryWhereUniqueInput | TerritoryWhereUniqueInput[]
    disconnect?: TerritoryWhereUniqueInput | TerritoryWhereUniqueInput[]
    delete?: TerritoryWhereUniqueInput | TerritoryWhereUniqueInput[]
    connect?: TerritoryWhereUniqueInput | TerritoryWhereUniqueInput[]
    update?: TerritoryUpdateWithWhereUniqueWithoutParentTerritoryInput | TerritoryUpdateWithWhereUniqueWithoutParentTerritoryInput[]
    updateMany?: TerritoryUpdateManyWithWhereWithoutParentTerritoryInput | TerritoryUpdateManyWithWhereWithoutParentTerritoryInput[]
    deleteMany?: TerritoryScalarWhereInput | TerritoryScalarWhereInput[]
  }

  export type EmployeeTerritoryUncheckedUpdateManyWithoutTerritoryNestedInput = {
    create?: XOR<EmployeeTerritoryCreateWithoutTerritoryInput, EmployeeTerritoryUncheckedCreateWithoutTerritoryInput> | EmployeeTerritoryCreateWithoutTerritoryInput[] | EmployeeTerritoryUncheckedCreateWithoutTerritoryInput[]
    connectOrCreate?: EmployeeTerritoryCreateOrConnectWithoutTerritoryInput | EmployeeTerritoryCreateOrConnectWithoutTerritoryInput[]
    upsert?: EmployeeTerritoryUpsertWithWhereUniqueWithoutTerritoryInput | EmployeeTerritoryUpsertWithWhereUniqueWithoutTerritoryInput[]
    createMany?: EmployeeTerritoryCreateManyTerritoryInputEnvelope
    set?: EmployeeTerritoryWhereUniqueInput | EmployeeTerritoryWhereUniqueInput[]
    disconnect?: EmployeeTerritoryWhereUniqueInput | EmployeeTerritoryWhereUniqueInput[]
    delete?: EmployeeTerritoryWhereUniqueInput | EmployeeTerritoryWhereUniqueInput[]
    connect?: EmployeeTerritoryWhereUniqueInput | EmployeeTerritoryWhereUniqueInput[]
    update?: EmployeeTerritoryUpdateWithWhereUniqueWithoutTerritoryInput | EmployeeTerritoryUpdateWithWhereUniqueWithoutTerritoryInput[]
    updateMany?: EmployeeTerritoryUpdateManyWithWhereWithoutTerritoryInput | EmployeeTerritoryUpdateManyWithWhereWithoutTerritoryInput[]
    deleteMany?: EmployeeTerritoryScalarWhereInput | EmployeeTerritoryScalarWhereInput[]
  }

  export type HospitalUncheckedUpdateManyWithoutTerritoryNestedInput = {
    create?: XOR<HospitalCreateWithoutTerritoryInput, HospitalUncheckedCreateWithoutTerritoryInput> | HospitalCreateWithoutTerritoryInput[] | HospitalUncheckedCreateWithoutTerritoryInput[]
    connectOrCreate?: HospitalCreateOrConnectWithoutTerritoryInput | HospitalCreateOrConnectWithoutTerritoryInput[]
    upsert?: HospitalUpsertWithWhereUniqueWithoutTerritoryInput | HospitalUpsertWithWhereUniqueWithoutTerritoryInput[]
    createMany?: HospitalCreateManyTerritoryInputEnvelope
    set?: HospitalWhereUniqueInput | HospitalWhereUniqueInput[]
    disconnect?: HospitalWhereUniqueInput | HospitalWhereUniqueInput[]
    delete?: HospitalWhereUniqueInput | HospitalWhereUniqueInput[]
    connect?: HospitalWhereUniqueInput | HospitalWhereUniqueInput[]
    update?: HospitalUpdateWithWhereUniqueWithoutTerritoryInput | HospitalUpdateWithWhereUniqueWithoutTerritoryInput[]
    updateMany?: HospitalUpdateManyWithWhereWithoutTerritoryInput | HospitalUpdateManyWithWhereWithoutTerritoryInput[]
    deleteMany?: HospitalScalarWhereInput | HospitalScalarWhereInput[]
  }

  export type ChemistUncheckedUpdateManyWithoutTerritoryNestedInput = {
    create?: XOR<ChemistCreateWithoutTerritoryInput, ChemistUncheckedCreateWithoutTerritoryInput> | ChemistCreateWithoutTerritoryInput[] | ChemistUncheckedCreateWithoutTerritoryInput[]
    connectOrCreate?: ChemistCreateOrConnectWithoutTerritoryInput | ChemistCreateOrConnectWithoutTerritoryInput[]
    upsert?: ChemistUpsertWithWhereUniqueWithoutTerritoryInput | ChemistUpsertWithWhereUniqueWithoutTerritoryInput[]
    createMany?: ChemistCreateManyTerritoryInputEnvelope
    set?: ChemistWhereUniqueInput | ChemistWhereUniqueInput[]
    disconnect?: ChemistWhereUniqueInput | ChemistWhereUniqueInput[]
    delete?: ChemistWhereUniqueInput | ChemistWhereUniqueInput[]
    connect?: ChemistWhereUniqueInput | ChemistWhereUniqueInput[]
    update?: ChemistUpdateWithWhereUniqueWithoutTerritoryInput | ChemistUpdateWithWhereUniqueWithoutTerritoryInput[]
    updateMany?: ChemistUpdateManyWithWhereWithoutTerritoryInput | ChemistUpdateManyWithWhereWithoutTerritoryInput[]
    deleteMany?: ChemistScalarWhereInput | ChemistScalarWhereInput[]
  }

  export type EmployeeCreateNestedOneWithoutTerritoriesInput = {
    create?: XOR<EmployeeCreateWithoutTerritoriesInput, EmployeeUncheckedCreateWithoutTerritoriesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutTerritoriesInput
    connect?: EmployeeWhereUniqueInput
  }

  export type TerritoryCreateNestedOneWithoutEmployeesInput = {
    create?: XOR<TerritoryCreateWithoutEmployeesInput, TerritoryUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: TerritoryCreateOrConnectWithoutEmployeesInput
    connect?: TerritoryWhereUniqueInput
  }

  export type EmployeeUpdateOneRequiredWithoutTerritoriesNestedInput = {
    create?: XOR<EmployeeCreateWithoutTerritoriesInput, EmployeeUncheckedCreateWithoutTerritoriesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutTerritoriesInput
    upsert?: EmployeeUpsertWithoutTerritoriesInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutTerritoriesInput, EmployeeUpdateWithoutTerritoriesInput>, EmployeeUncheckedUpdateWithoutTerritoriesInput>
  }

  export type TerritoryUpdateOneRequiredWithoutEmployeesNestedInput = {
    create?: XOR<TerritoryCreateWithoutEmployeesInput, TerritoryUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: TerritoryCreateOrConnectWithoutEmployeesInput
    upsert?: TerritoryUpsertWithoutEmployeesInput
    connect?: TerritoryWhereUniqueInput
    update?: XOR<XOR<TerritoryUpdateToOneWithWhereWithoutEmployeesInput, TerritoryUpdateWithoutEmployeesInput>, TerritoryUncheckedUpdateWithoutEmployeesInput>
  }

  export type EmployeeCreateNestedOneWithoutTrainingRecordsInput = {
    create?: XOR<EmployeeCreateWithoutTrainingRecordsInput, EmployeeUncheckedCreateWithoutTrainingRecordsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutTrainingRecordsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeUpdateOneRequiredWithoutTrainingRecordsNestedInput = {
    create?: XOR<EmployeeCreateWithoutTrainingRecordsInput, EmployeeUncheckedCreateWithoutTrainingRecordsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutTrainingRecordsInput
    upsert?: EmployeeUpsertWithoutTrainingRecordsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutTrainingRecordsInput, EmployeeUpdateWithoutTrainingRecordsInput>, EmployeeUncheckedUpdateWithoutTrainingRecordsInput>
  }

  export type HospitalCreateNestedManyWithoutHospitalChainInput = {
    create?: XOR<HospitalCreateWithoutHospitalChainInput, HospitalUncheckedCreateWithoutHospitalChainInput> | HospitalCreateWithoutHospitalChainInput[] | HospitalUncheckedCreateWithoutHospitalChainInput[]
    connectOrCreate?: HospitalCreateOrConnectWithoutHospitalChainInput | HospitalCreateOrConnectWithoutHospitalChainInput[]
    createMany?: HospitalCreateManyHospitalChainInputEnvelope
    connect?: HospitalWhereUniqueInput | HospitalWhereUniqueInput[]
  }

  export type HospitalUncheckedCreateNestedManyWithoutHospitalChainInput = {
    create?: XOR<HospitalCreateWithoutHospitalChainInput, HospitalUncheckedCreateWithoutHospitalChainInput> | HospitalCreateWithoutHospitalChainInput[] | HospitalUncheckedCreateWithoutHospitalChainInput[]
    connectOrCreate?: HospitalCreateOrConnectWithoutHospitalChainInput | HospitalCreateOrConnectWithoutHospitalChainInput[]
    createMany?: HospitalCreateManyHospitalChainInputEnvelope
    connect?: HospitalWhereUniqueInput | HospitalWhereUniqueInput[]
  }

  export type HospitalUpdateManyWithoutHospitalChainNestedInput = {
    create?: XOR<HospitalCreateWithoutHospitalChainInput, HospitalUncheckedCreateWithoutHospitalChainInput> | HospitalCreateWithoutHospitalChainInput[] | HospitalUncheckedCreateWithoutHospitalChainInput[]
    connectOrCreate?: HospitalCreateOrConnectWithoutHospitalChainInput | HospitalCreateOrConnectWithoutHospitalChainInput[]
    upsert?: HospitalUpsertWithWhereUniqueWithoutHospitalChainInput | HospitalUpsertWithWhereUniqueWithoutHospitalChainInput[]
    createMany?: HospitalCreateManyHospitalChainInputEnvelope
    set?: HospitalWhereUniqueInput | HospitalWhereUniqueInput[]
    disconnect?: HospitalWhereUniqueInput | HospitalWhereUniqueInput[]
    delete?: HospitalWhereUniqueInput | HospitalWhereUniqueInput[]
    connect?: HospitalWhereUniqueInput | HospitalWhereUniqueInput[]
    update?: HospitalUpdateWithWhereUniqueWithoutHospitalChainInput | HospitalUpdateWithWhereUniqueWithoutHospitalChainInput[]
    updateMany?: HospitalUpdateManyWithWhereWithoutHospitalChainInput | HospitalUpdateManyWithWhereWithoutHospitalChainInput[]
    deleteMany?: HospitalScalarWhereInput | HospitalScalarWhereInput[]
  }

  export type HospitalUncheckedUpdateManyWithoutHospitalChainNestedInput = {
    create?: XOR<HospitalCreateWithoutHospitalChainInput, HospitalUncheckedCreateWithoutHospitalChainInput> | HospitalCreateWithoutHospitalChainInput[] | HospitalUncheckedCreateWithoutHospitalChainInput[]
    connectOrCreate?: HospitalCreateOrConnectWithoutHospitalChainInput | HospitalCreateOrConnectWithoutHospitalChainInput[]
    upsert?: HospitalUpsertWithWhereUniqueWithoutHospitalChainInput | HospitalUpsertWithWhereUniqueWithoutHospitalChainInput[]
    createMany?: HospitalCreateManyHospitalChainInputEnvelope
    set?: HospitalWhereUniqueInput | HospitalWhereUniqueInput[]
    disconnect?: HospitalWhereUniqueInput | HospitalWhereUniqueInput[]
    delete?: HospitalWhereUniqueInput | HospitalWhereUniqueInput[]
    connect?: HospitalWhereUniqueInput | HospitalWhereUniqueInput[]
    update?: HospitalUpdateWithWhereUniqueWithoutHospitalChainInput | HospitalUpdateWithWhereUniqueWithoutHospitalChainInput[]
    updateMany?: HospitalUpdateManyWithWhereWithoutHospitalChainInput | HospitalUpdateManyWithWhereWithoutHospitalChainInput[]
    deleteMany?: HospitalScalarWhereInput | HospitalScalarWhereInput[]
  }

  export type ChemistCreateNestedManyWithoutChemistChainInput = {
    create?: XOR<ChemistCreateWithoutChemistChainInput, ChemistUncheckedCreateWithoutChemistChainInput> | ChemistCreateWithoutChemistChainInput[] | ChemistUncheckedCreateWithoutChemistChainInput[]
    connectOrCreate?: ChemistCreateOrConnectWithoutChemistChainInput | ChemistCreateOrConnectWithoutChemistChainInput[]
    createMany?: ChemistCreateManyChemistChainInputEnvelope
    connect?: ChemistWhereUniqueInput | ChemistWhereUniqueInput[]
  }

  export type ChemistUncheckedCreateNestedManyWithoutChemistChainInput = {
    create?: XOR<ChemistCreateWithoutChemistChainInput, ChemistUncheckedCreateWithoutChemistChainInput> | ChemistCreateWithoutChemistChainInput[] | ChemistUncheckedCreateWithoutChemistChainInput[]
    connectOrCreate?: ChemistCreateOrConnectWithoutChemistChainInput | ChemistCreateOrConnectWithoutChemistChainInput[]
    createMany?: ChemistCreateManyChemistChainInputEnvelope
    connect?: ChemistWhereUniqueInput | ChemistWhereUniqueInput[]
  }

  export type ChemistUpdateManyWithoutChemistChainNestedInput = {
    create?: XOR<ChemistCreateWithoutChemistChainInput, ChemistUncheckedCreateWithoutChemistChainInput> | ChemistCreateWithoutChemistChainInput[] | ChemistUncheckedCreateWithoutChemistChainInput[]
    connectOrCreate?: ChemistCreateOrConnectWithoutChemistChainInput | ChemistCreateOrConnectWithoutChemistChainInput[]
    upsert?: ChemistUpsertWithWhereUniqueWithoutChemistChainInput | ChemistUpsertWithWhereUniqueWithoutChemistChainInput[]
    createMany?: ChemistCreateManyChemistChainInputEnvelope
    set?: ChemistWhereUniqueInput | ChemistWhereUniqueInput[]
    disconnect?: ChemistWhereUniqueInput | ChemistWhereUniqueInput[]
    delete?: ChemistWhereUniqueInput | ChemistWhereUniqueInput[]
    connect?: ChemistWhereUniqueInput | ChemistWhereUniqueInput[]
    update?: ChemistUpdateWithWhereUniqueWithoutChemistChainInput | ChemistUpdateWithWhereUniqueWithoutChemistChainInput[]
    updateMany?: ChemistUpdateManyWithWhereWithoutChemistChainInput | ChemistUpdateManyWithWhereWithoutChemistChainInput[]
    deleteMany?: ChemistScalarWhereInput | ChemistScalarWhereInput[]
  }

  export type ChemistUncheckedUpdateManyWithoutChemistChainNestedInput = {
    create?: XOR<ChemistCreateWithoutChemistChainInput, ChemistUncheckedCreateWithoutChemistChainInput> | ChemistCreateWithoutChemistChainInput[] | ChemistUncheckedCreateWithoutChemistChainInput[]
    connectOrCreate?: ChemistCreateOrConnectWithoutChemistChainInput | ChemistCreateOrConnectWithoutChemistChainInput[]
    upsert?: ChemistUpsertWithWhereUniqueWithoutChemistChainInput | ChemistUpsertWithWhereUniqueWithoutChemistChainInput[]
    createMany?: ChemistCreateManyChemistChainInputEnvelope
    set?: ChemistWhereUniqueInput | ChemistWhereUniqueInput[]
    disconnect?: ChemistWhereUniqueInput | ChemistWhereUniqueInput[]
    delete?: ChemistWhereUniqueInput | ChemistWhereUniqueInput[]
    connect?: ChemistWhereUniqueInput | ChemistWhereUniqueInput[]
    update?: ChemistUpdateWithWhereUniqueWithoutChemistChainInput | ChemistUpdateWithWhereUniqueWithoutChemistChainInput[]
    updateMany?: ChemistUpdateManyWithWhereWithoutChemistChainInput | ChemistUpdateManyWithWhereWithoutChemistChainInput[]
    deleteMany?: ChemistScalarWhereInput | ChemistScalarWhereInput[]
  }

  export type HospitalChainCreateNestedOneWithoutHospitalsInput = {
    create?: XOR<HospitalChainCreateWithoutHospitalsInput, HospitalChainUncheckedCreateWithoutHospitalsInput>
    connectOrCreate?: HospitalChainCreateOrConnectWithoutHospitalsInput
    connect?: HospitalChainWhereUniqueInput
  }

  export type TerritoryCreateNestedOneWithoutHospitalsInput = {
    create?: XOR<TerritoryCreateWithoutHospitalsInput, TerritoryUncheckedCreateWithoutHospitalsInput>
    connectOrCreate?: TerritoryCreateOrConnectWithoutHospitalsInput
    connect?: TerritoryWhereUniqueInput
  }

  export type DoctorHospitalAssociationCreateNestedManyWithoutHospitalInput = {
    create?: XOR<DoctorHospitalAssociationCreateWithoutHospitalInput, DoctorHospitalAssociationUncheckedCreateWithoutHospitalInput> | DoctorHospitalAssociationCreateWithoutHospitalInput[] | DoctorHospitalAssociationUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: DoctorHospitalAssociationCreateOrConnectWithoutHospitalInput | DoctorHospitalAssociationCreateOrConnectWithoutHospitalInput[]
    createMany?: DoctorHospitalAssociationCreateManyHospitalInputEnvelope
    connect?: DoctorHospitalAssociationWhereUniqueInput | DoctorHospitalAssociationWhereUniqueInput[]
  }

  export type DoctorConsultationScheduleCreateNestedManyWithoutHospitalInput = {
    create?: XOR<DoctorConsultationScheduleCreateWithoutHospitalInput, DoctorConsultationScheduleUncheckedCreateWithoutHospitalInput> | DoctorConsultationScheduleCreateWithoutHospitalInput[] | DoctorConsultationScheduleUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: DoctorConsultationScheduleCreateOrConnectWithoutHospitalInput | DoctorConsultationScheduleCreateOrConnectWithoutHospitalInput[]
    createMany?: DoctorConsultationScheduleCreateManyHospitalInputEnvelope
    connect?: DoctorConsultationScheduleWhereUniqueInput | DoctorConsultationScheduleWhereUniqueInput[]
  }

  export type DoctorInteractionCreateNestedManyWithoutHospitalInput = {
    create?: XOR<DoctorInteractionCreateWithoutHospitalInput, DoctorInteractionUncheckedCreateWithoutHospitalInput> | DoctorInteractionCreateWithoutHospitalInput[] | DoctorInteractionUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: DoctorInteractionCreateOrConnectWithoutHospitalInput | DoctorInteractionCreateOrConnectWithoutHospitalInput[]
    createMany?: DoctorInteractionCreateManyHospitalInputEnvelope
    connect?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
  }

  export type DoctorHospitalAssociationUncheckedCreateNestedManyWithoutHospitalInput = {
    create?: XOR<DoctorHospitalAssociationCreateWithoutHospitalInput, DoctorHospitalAssociationUncheckedCreateWithoutHospitalInput> | DoctorHospitalAssociationCreateWithoutHospitalInput[] | DoctorHospitalAssociationUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: DoctorHospitalAssociationCreateOrConnectWithoutHospitalInput | DoctorHospitalAssociationCreateOrConnectWithoutHospitalInput[]
    createMany?: DoctorHospitalAssociationCreateManyHospitalInputEnvelope
    connect?: DoctorHospitalAssociationWhereUniqueInput | DoctorHospitalAssociationWhereUniqueInput[]
  }

  export type DoctorConsultationScheduleUncheckedCreateNestedManyWithoutHospitalInput = {
    create?: XOR<DoctorConsultationScheduleCreateWithoutHospitalInput, DoctorConsultationScheduleUncheckedCreateWithoutHospitalInput> | DoctorConsultationScheduleCreateWithoutHospitalInput[] | DoctorConsultationScheduleUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: DoctorConsultationScheduleCreateOrConnectWithoutHospitalInput | DoctorConsultationScheduleCreateOrConnectWithoutHospitalInput[]
    createMany?: DoctorConsultationScheduleCreateManyHospitalInputEnvelope
    connect?: DoctorConsultationScheduleWhereUniqueInput | DoctorConsultationScheduleWhereUniqueInput[]
  }

  export type DoctorInteractionUncheckedCreateNestedManyWithoutHospitalInput = {
    create?: XOR<DoctorInteractionCreateWithoutHospitalInput, DoctorInteractionUncheckedCreateWithoutHospitalInput> | DoctorInteractionCreateWithoutHospitalInput[] | DoctorInteractionUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: DoctorInteractionCreateOrConnectWithoutHospitalInput | DoctorInteractionCreateOrConnectWithoutHospitalInput[]
    createMany?: DoctorInteractionCreateManyHospitalInputEnvelope
    connect?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
  }

  export type HospitalChainUpdateOneWithoutHospitalsNestedInput = {
    create?: XOR<HospitalChainCreateWithoutHospitalsInput, HospitalChainUncheckedCreateWithoutHospitalsInput>
    connectOrCreate?: HospitalChainCreateOrConnectWithoutHospitalsInput
    upsert?: HospitalChainUpsertWithoutHospitalsInput
    disconnect?: HospitalChainWhereInput | boolean
    delete?: HospitalChainWhereInput | boolean
    connect?: HospitalChainWhereUniqueInput
    update?: XOR<XOR<HospitalChainUpdateToOneWithWhereWithoutHospitalsInput, HospitalChainUpdateWithoutHospitalsInput>, HospitalChainUncheckedUpdateWithoutHospitalsInput>
  }

  export type TerritoryUpdateOneRequiredWithoutHospitalsNestedInput = {
    create?: XOR<TerritoryCreateWithoutHospitalsInput, TerritoryUncheckedCreateWithoutHospitalsInput>
    connectOrCreate?: TerritoryCreateOrConnectWithoutHospitalsInput
    upsert?: TerritoryUpsertWithoutHospitalsInput
    connect?: TerritoryWhereUniqueInput
    update?: XOR<XOR<TerritoryUpdateToOneWithWhereWithoutHospitalsInput, TerritoryUpdateWithoutHospitalsInput>, TerritoryUncheckedUpdateWithoutHospitalsInput>
  }

  export type DoctorHospitalAssociationUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<DoctorHospitalAssociationCreateWithoutHospitalInput, DoctorHospitalAssociationUncheckedCreateWithoutHospitalInput> | DoctorHospitalAssociationCreateWithoutHospitalInput[] | DoctorHospitalAssociationUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: DoctorHospitalAssociationCreateOrConnectWithoutHospitalInput | DoctorHospitalAssociationCreateOrConnectWithoutHospitalInput[]
    upsert?: DoctorHospitalAssociationUpsertWithWhereUniqueWithoutHospitalInput | DoctorHospitalAssociationUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: DoctorHospitalAssociationCreateManyHospitalInputEnvelope
    set?: DoctorHospitalAssociationWhereUniqueInput | DoctorHospitalAssociationWhereUniqueInput[]
    disconnect?: DoctorHospitalAssociationWhereUniqueInput | DoctorHospitalAssociationWhereUniqueInput[]
    delete?: DoctorHospitalAssociationWhereUniqueInput | DoctorHospitalAssociationWhereUniqueInput[]
    connect?: DoctorHospitalAssociationWhereUniqueInput | DoctorHospitalAssociationWhereUniqueInput[]
    update?: DoctorHospitalAssociationUpdateWithWhereUniqueWithoutHospitalInput | DoctorHospitalAssociationUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: DoctorHospitalAssociationUpdateManyWithWhereWithoutHospitalInput | DoctorHospitalAssociationUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: DoctorHospitalAssociationScalarWhereInput | DoctorHospitalAssociationScalarWhereInput[]
  }

  export type DoctorConsultationScheduleUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<DoctorConsultationScheduleCreateWithoutHospitalInput, DoctorConsultationScheduleUncheckedCreateWithoutHospitalInput> | DoctorConsultationScheduleCreateWithoutHospitalInput[] | DoctorConsultationScheduleUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: DoctorConsultationScheduleCreateOrConnectWithoutHospitalInput | DoctorConsultationScheduleCreateOrConnectWithoutHospitalInput[]
    upsert?: DoctorConsultationScheduleUpsertWithWhereUniqueWithoutHospitalInput | DoctorConsultationScheduleUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: DoctorConsultationScheduleCreateManyHospitalInputEnvelope
    set?: DoctorConsultationScheduleWhereUniqueInput | DoctorConsultationScheduleWhereUniqueInput[]
    disconnect?: DoctorConsultationScheduleWhereUniqueInput | DoctorConsultationScheduleWhereUniqueInput[]
    delete?: DoctorConsultationScheduleWhereUniqueInput | DoctorConsultationScheduleWhereUniqueInput[]
    connect?: DoctorConsultationScheduleWhereUniqueInput | DoctorConsultationScheduleWhereUniqueInput[]
    update?: DoctorConsultationScheduleUpdateWithWhereUniqueWithoutHospitalInput | DoctorConsultationScheduleUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: DoctorConsultationScheduleUpdateManyWithWhereWithoutHospitalInput | DoctorConsultationScheduleUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: DoctorConsultationScheduleScalarWhereInput | DoctorConsultationScheduleScalarWhereInput[]
  }

  export type DoctorInteractionUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<DoctorInteractionCreateWithoutHospitalInput, DoctorInteractionUncheckedCreateWithoutHospitalInput> | DoctorInteractionCreateWithoutHospitalInput[] | DoctorInteractionUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: DoctorInteractionCreateOrConnectWithoutHospitalInput | DoctorInteractionCreateOrConnectWithoutHospitalInput[]
    upsert?: DoctorInteractionUpsertWithWhereUniqueWithoutHospitalInput | DoctorInteractionUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: DoctorInteractionCreateManyHospitalInputEnvelope
    set?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
    disconnect?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
    delete?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
    connect?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
    update?: DoctorInteractionUpdateWithWhereUniqueWithoutHospitalInput | DoctorInteractionUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: DoctorInteractionUpdateManyWithWhereWithoutHospitalInput | DoctorInteractionUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: DoctorInteractionScalarWhereInput | DoctorInteractionScalarWhereInput[]
  }

  export type DoctorHospitalAssociationUncheckedUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<DoctorHospitalAssociationCreateWithoutHospitalInput, DoctorHospitalAssociationUncheckedCreateWithoutHospitalInput> | DoctorHospitalAssociationCreateWithoutHospitalInput[] | DoctorHospitalAssociationUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: DoctorHospitalAssociationCreateOrConnectWithoutHospitalInput | DoctorHospitalAssociationCreateOrConnectWithoutHospitalInput[]
    upsert?: DoctorHospitalAssociationUpsertWithWhereUniqueWithoutHospitalInput | DoctorHospitalAssociationUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: DoctorHospitalAssociationCreateManyHospitalInputEnvelope
    set?: DoctorHospitalAssociationWhereUniqueInput | DoctorHospitalAssociationWhereUniqueInput[]
    disconnect?: DoctorHospitalAssociationWhereUniqueInput | DoctorHospitalAssociationWhereUniqueInput[]
    delete?: DoctorHospitalAssociationWhereUniqueInput | DoctorHospitalAssociationWhereUniqueInput[]
    connect?: DoctorHospitalAssociationWhereUniqueInput | DoctorHospitalAssociationWhereUniqueInput[]
    update?: DoctorHospitalAssociationUpdateWithWhereUniqueWithoutHospitalInput | DoctorHospitalAssociationUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: DoctorHospitalAssociationUpdateManyWithWhereWithoutHospitalInput | DoctorHospitalAssociationUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: DoctorHospitalAssociationScalarWhereInput | DoctorHospitalAssociationScalarWhereInput[]
  }

  export type DoctorConsultationScheduleUncheckedUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<DoctorConsultationScheduleCreateWithoutHospitalInput, DoctorConsultationScheduleUncheckedCreateWithoutHospitalInput> | DoctorConsultationScheduleCreateWithoutHospitalInput[] | DoctorConsultationScheduleUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: DoctorConsultationScheduleCreateOrConnectWithoutHospitalInput | DoctorConsultationScheduleCreateOrConnectWithoutHospitalInput[]
    upsert?: DoctorConsultationScheduleUpsertWithWhereUniqueWithoutHospitalInput | DoctorConsultationScheduleUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: DoctorConsultationScheduleCreateManyHospitalInputEnvelope
    set?: DoctorConsultationScheduleWhereUniqueInput | DoctorConsultationScheduleWhereUniqueInput[]
    disconnect?: DoctorConsultationScheduleWhereUniqueInput | DoctorConsultationScheduleWhereUniqueInput[]
    delete?: DoctorConsultationScheduleWhereUniqueInput | DoctorConsultationScheduleWhereUniqueInput[]
    connect?: DoctorConsultationScheduleWhereUniqueInput | DoctorConsultationScheduleWhereUniqueInput[]
    update?: DoctorConsultationScheduleUpdateWithWhereUniqueWithoutHospitalInput | DoctorConsultationScheduleUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: DoctorConsultationScheduleUpdateManyWithWhereWithoutHospitalInput | DoctorConsultationScheduleUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: DoctorConsultationScheduleScalarWhereInput | DoctorConsultationScheduleScalarWhereInput[]
  }

  export type DoctorInteractionUncheckedUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<DoctorInteractionCreateWithoutHospitalInput, DoctorInteractionUncheckedCreateWithoutHospitalInput> | DoctorInteractionCreateWithoutHospitalInput[] | DoctorInteractionUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: DoctorInteractionCreateOrConnectWithoutHospitalInput | DoctorInteractionCreateOrConnectWithoutHospitalInput[]
    upsert?: DoctorInteractionUpsertWithWhereUniqueWithoutHospitalInput | DoctorInteractionUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: DoctorInteractionCreateManyHospitalInputEnvelope
    set?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
    disconnect?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
    delete?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
    connect?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
    update?: DoctorInteractionUpdateWithWhereUniqueWithoutHospitalInput | DoctorInteractionUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: DoctorInteractionUpdateManyWithWhereWithoutHospitalInput | DoctorInteractionUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: DoctorInteractionScalarWhereInput | DoctorInteractionScalarWhereInput[]
  }

  export type EmployeeCreateNestedOneWithoutDoctorsCreatedInput = {
    create?: XOR<EmployeeCreateWithoutDoctorsCreatedInput, EmployeeUncheckedCreateWithoutDoctorsCreatedInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutDoctorsCreatedInput
    connect?: EmployeeWhereUniqueInput
  }

  export type DoctorHospitalAssociationCreateNestedManyWithoutDoctorInput = {
    create?: XOR<DoctorHospitalAssociationCreateWithoutDoctorInput, DoctorHospitalAssociationUncheckedCreateWithoutDoctorInput> | DoctorHospitalAssociationCreateWithoutDoctorInput[] | DoctorHospitalAssociationUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorHospitalAssociationCreateOrConnectWithoutDoctorInput | DoctorHospitalAssociationCreateOrConnectWithoutDoctorInput[]
    createMany?: DoctorHospitalAssociationCreateManyDoctorInputEnvelope
    connect?: DoctorHospitalAssociationWhereUniqueInput | DoctorHospitalAssociationWhereUniqueInput[]
  }

  export type DoctorConsultationScheduleCreateNestedManyWithoutDoctorInput = {
    create?: XOR<DoctorConsultationScheduleCreateWithoutDoctorInput, DoctorConsultationScheduleUncheckedCreateWithoutDoctorInput> | DoctorConsultationScheduleCreateWithoutDoctorInput[] | DoctorConsultationScheduleUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorConsultationScheduleCreateOrConnectWithoutDoctorInput | DoctorConsultationScheduleCreateOrConnectWithoutDoctorInput[]
    createMany?: DoctorConsultationScheduleCreateManyDoctorInputEnvelope
    connect?: DoctorConsultationScheduleWhereUniqueInput | DoctorConsultationScheduleWhereUniqueInput[]
  }

  export type DoctorInteractionCreateNestedManyWithoutDoctorInput = {
    create?: XOR<DoctorInteractionCreateWithoutDoctorInput, DoctorInteractionUncheckedCreateWithoutDoctorInput> | DoctorInteractionCreateWithoutDoctorInput[] | DoctorInteractionUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorInteractionCreateOrConnectWithoutDoctorInput | DoctorInteractionCreateOrConnectWithoutDoctorInput[]
    createMany?: DoctorInteractionCreateManyDoctorInputEnvelope
    connect?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
  }

  export type DoctorNoteCreateNestedManyWithoutDoctorInput = {
    create?: XOR<DoctorNoteCreateWithoutDoctorInput, DoctorNoteUncheckedCreateWithoutDoctorInput> | DoctorNoteCreateWithoutDoctorInput[] | DoctorNoteUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorNoteCreateOrConnectWithoutDoctorInput | DoctorNoteCreateOrConnectWithoutDoctorInput[]
    createMany?: DoctorNoteCreateManyDoctorInputEnvelope
    connect?: DoctorNoteWhereUniqueInput | DoctorNoteWhereUniqueInput[]
  }

  export type DoctorChemistRelationCreateNestedManyWithoutDoctorInput = {
    create?: XOR<DoctorChemistRelationCreateWithoutDoctorInput, DoctorChemistRelationUncheckedCreateWithoutDoctorInput> | DoctorChemistRelationCreateWithoutDoctorInput[] | DoctorChemistRelationUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorChemistRelationCreateOrConnectWithoutDoctorInput | DoctorChemistRelationCreateOrConnectWithoutDoctorInput[]
    createMany?: DoctorChemistRelationCreateManyDoctorInputEnvelope
    connect?: DoctorChemistRelationWhereUniqueInput | DoctorChemistRelationWhereUniqueInput[]
  }

  export type DoctorTaskCreateNestedManyWithoutDoctorInput = {
    create?: XOR<DoctorTaskCreateWithoutDoctorInput, DoctorTaskUncheckedCreateWithoutDoctorInput> | DoctorTaskCreateWithoutDoctorInput[] | DoctorTaskUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorTaskCreateOrConnectWithoutDoctorInput | DoctorTaskCreateOrConnectWithoutDoctorInput[]
    createMany?: DoctorTaskCreateManyDoctorInputEnvelope
    connect?: DoctorTaskWhereUniqueInput | DoctorTaskWhereUniqueInput[]
  }

  export type DoctorHospitalAssociationUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<DoctorHospitalAssociationCreateWithoutDoctorInput, DoctorHospitalAssociationUncheckedCreateWithoutDoctorInput> | DoctorHospitalAssociationCreateWithoutDoctorInput[] | DoctorHospitalAssociationUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorHospitalAssociationCreateOrConnectWithoutDoctorInput | DoctorHospitalAssociationCreateOrConnectWithoutDoctorInput[]
    createMany?: DoctorHospitalAssociationCreateManyDoctorInputEnvelope
    connect?: DoctorHospitalAssociationWhereUniqueInput | DoctorHospitalAssociationWhereUniqueInput[]
  }

  export type DoctorConsultationScheduleUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<DoctorConsultationScheduleCreateWithoutDoctorInput, DoctorConsultationScheduleUncheckedCreateWithoutDoctorInput> | DoctorConsultationScheduleCreateWithoutDoctorInput[] | DoctorConsultationScheduleUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorConsultationScheduleCreateOrConnectWithoutDoctorInput | DoctorConsultationScheduleCreateOrConnectWithoutDoctorInput[]
    createMany?: DoctorConsultationScheduleCreateManyDoctorInputEnvelope
    connect?: DoctorConsultationScheduleWhereUniqueInput | DoctorConsultationScheduleWhereUniqueInput[]
  }

  export type DoctorInteractionUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<DoctorInteractionCreateWithoutDoctorInput, DoctorInteractionUncheckedCreateWithoutDoctorInput> | DoctorInteractionCreateWithoutDoctorInput[] | DoctorInteractionUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorInteractionCreateOrConnectWithoutDoctorInput | DoctorInteractionCreateOrConnectWithoutDoctorInput[]
    createMany?: DoctorInteractionCreateManyDoctorInputEnvelope
    connect?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
  }

  export type DoctorNoteUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<DoctorNoteCreateWithoutDoctorInput, DoctorNoteUncheckedCreateWithoutDoctorInput> | DoctorNoteCreateWithoutDoctorInput[] | DoctorNoteUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorNoteCreateOrConnectWithoutDoctorInput | DoctorNoteCreateOrConnectWithoutDoctorInput[]
    createMany?: DoctorNoteCreateManyDoctorInputEnvelope
    connect?: DoctorNoteWhereUniqueInput | DoctorNoteWhereUniqueInput[]
  }

  export type DoctorChemistRelationUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<DoctorChemistRelationCreateWithoutDoctorInput, DoctorChemistRelationUncheckedCreateWithoutDoctorInput> | DoctorChemistRelationCreateWithoutDoctorInput[] | DoctorChemistRelationUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorChemistRelationCreateOrConnectWithoutDoctorInput | DoctorChemistRelationCreateOrConnectWithoutDoctorInput[]
    createMany?: DoctorChemistRelationCreateManyDoctorInputEnvelope
    connect?: DoctorChemistRelationWhereUniqueInput | DoctorChemistRelationWhereUniqueInput[]
  }

  export type DoctorTaskUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<DoctorTaskCreateWithoutDoctorInput, DoctorTaskUncheckedCreateWithoutDoctorInput> | DoctorTaskCreateWithoutDoctorInput[] | DoctorTaskUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorTaskCreateOrConnectWithoutDoctorInput | DoctorTaskCreateOrConnectWithoutDoctorInput[]
    createMany?: DoctorTaskCreateManyDoctorInputEnvelope
    connect?: DoctorTaskWhereUniqueInput | DoctorTaskWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EmployeeUpdateOneRequiredWithoutDoctorsCreatedNestedInput = {
    create?: XOR<EmployeeCreateWithoutDoctorsCreatedInput, EmployeeUncheckedCreateWithoutDoctorsCreatedInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutDoctorsCreatedInput
    upsert?: EmployeeUpsertWithoutDoctorsCreatedInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutDoctorsCreatedInput, EmployeeUpdateWithoutDoctorsCreatedInput>, EmployeeUncheckedUpdateWithoutDoctorsCreatedInput>
  }

  export type DoctorHospitalAssociationUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<DoctorHospitalAssociationCreateWithoutDoctorInput, DoctorHospitalAssociationUncheckedCreateWithoutDoctorInput> | DoctorHospitalAssociationCreateWithoutDoctorInput[] | DoctorHospitalAssociationUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorHospitalAssociationCreateOrConnectWithoutDoctorInput | DoctorHospitalAssociationCreateOrConnectWithoutDoctorInput[]
    upsert?: DoctorHospitalAssociationUpsertWithWhereUniqueWithoutDoctorInput | DoctorHospitalAssociationUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: DoctorHospitalAssociationCreateManyDoctorInputEnvelope
    set?: DoctorHospitalAssociationWhereUniqueInput | DoctorHospitalAssociationWhereUniqueInput[]
    disconnect?: DoctorHospitalAssociationWhereUniqueInput | DoctorHospitalAssociationWhereUniqueInput[]
    delete?: DoctorHospitalAssociationWhereUniqueInput | DoctorHospitalAssociationWhereUniqueInput[]
    connect?: DoctorHospitalAssociationWhereUniqueInput | DoctorHospitalAssociationWhereUniqueInput[]
    update?: DoctorHospitalAssociationUpdateWithWhereUniqueWithoutDoctorInput | DoctorHospitalAssociationUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: DoctorHospitalAssociationUpdateManyWithWhereWithoutDoctorInput | DoctorHospitalAssociationUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: DoctorHospitalAssociationScalarWhereInput | DoctorHospitalAssociationScalarWhereInput[]
  }

  export type DoctorConsultationScheduleUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<DoctorConsultationScheduleCreateWithoutDoctorInput, DoctorConsultationScheduleUncheckedCreateWithoutDoctorInput> | DoctorConsultationScheduleCreateWithoutDoctorInput[] | DoctorConsultationScheduleUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorConsultationScheduleCreateOrConnectWithoutDoctorInput | DoctorConsultationScheduleCreateOrConnectWithoutDoctorInput[]
    upsert?: DoctorConsultationScheduleUpsertWithWhereUniqueWithoutDoctorInput | DoctorConsultationScheduleUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: DoctorConsultationScheduleCreateManyDoctorInputEnvelope
    set?: DoctorConsultationScheduleWhereUniqueInput | DoctorConsultationScheduleWhereUniqueInput[]
    disconnect?: DoctorConsultationScheduleWhereUniqueInput | DoctorConsultationScheduleWhereUniqueInput[]
    delete?: DoctorConsultationScheduleWhereUniqueInput | DoctorConsultationScheduleWhereUniqueInput[]
    connect?: DoctorConsultationScheduleWhereUniqueInput | DoctorConsultationScheduleWhereUniqueInput[]
    update?: DoctorConsultationScheduleUpdateWithWhereUniqueWithoutDoctorInput | DoctorConsultationScheduleUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: DoctorConsultationScheduleUpdateManyWithWhereWithoutDoctorInput | DoctorConsultationScheduleUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: DoctorConsultationScheduleScalarWhereInput | DoctorConsultationScheduleScalarWhereInput[]
  }

  export type DoctorInteractionUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<DoctorInteractionCreateWithoutDoctorInput, DoctorInteractionUncheckedCreateWithoutDoctorInput> | DoctorInteractionCreateWithoutDoctorInput[] | DoctorInteractionUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorInteractionCreateOrConnectWithoutDoctorInput | DoctorInteractionCreateOrConnectWithoutDoctorInput[]
    upsert?: DoctorInteractionUpsertWithWhereUniqueWithoutDoctorInput | DoctorInteractionUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: DoctorInteractionCreateManyDoctorInputEnvelope
    set?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
    disconnect?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
    delete?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
    connect?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
    update?: DoctorInteractionUpdateWithWhereUniqueWithoutDoctorInput | DoctorInteractionUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: DoctorInteractionUpdateManyWithWhereWithoutDoctorInput | DoctorInteractionUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: DoctorInteractionScalarWhereInput | DoctorInteractionScalarWhereInput[]
  }

  export type DoctorNoteUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<DoctorNoteCreateWithoutDoctorInput, DoctorNoteUncheckedCreateWithoutDoctorInput> | DoctorNoteCreateWithoutDoctorInput[] | DoctorNoteUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorNoteCreateOrConnectWithoutDoctorInput | DoctorNoteCreateOrConnectWithoutDoctorInput[]
    upsert?: DoctorNoteUpsertWithWhereUniqueWithoutDoctorInput | DoctorNoteUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: DoctorNoteCreateManyDoctorInputEnvelope
    set?: DoctorNoteWhereUniqueInput | DoctorNoteWhereUniqueInput[]
    disconnect?: DoctorNoteWhereUniqueInput | DoctorNoteWhereUniqueInput[]
    delete?: DoctorNoteWhereUniqueInput | DoctorNoteWhereUniqueInput[]
    connect?: DoctorNoteWhereUniqueInput | DoctorNoteWhereUniqueInput[]
    update?: DoctorNoteUpdateWithWhereUniqueWithoutDoctorInput | DoctorNoteUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: DoctorNoteUpdateManyWithWhereWithoutDoctorInput | DoctorNoteUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: DoctorNoteScalarWhereInput | DoctorNoteScalarWhereInput[]
  }

  export type DoctorChemistRelationUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<DoctorChemistRelationCreateWithoutDoctorInput, DoctorChemistRelationUncheckedCreateWithoutDoctorInput> | DoctorChemistRelationCreateWithoutDoctorInput[] | DoctorChemistRelationUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorChemistRelationCreateOrConnectWithoutDoctorInput | DoctorChemistRelationCreateOrConnectWithoutDoctorInput[]
    upsert?: DoctorChemistRelationUpsertWithWhereUniqueWithoutDoctorInput | DoctorChemistRelationUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: DoctorChemistRelationCreateManyDoctorInputEnvelope
    set?: DoctorChemistRelationWhereUniqueInput | DoctorChemistRelationWhereUniqueInput[]
    disconnect?: DoctorChemistRelationWhereUniqueInput | DoctorChemistRelationWhereUniqueInput[]
    delete?: DoctorChemistRelationWhereUniqueInput | DoctorChemistRelationWhereUniqueInput[]
    connect?: DoctorChemistRelationWhereUniqueInput | DoctorChemistRelationWhereUniqueInput[]
    update?: DoctorChemistRelationUpdateWithWhereUniqueWithoutDoctorInput | DoctorChemistRelationUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: DoctorChemistRelationUpdateManyWithWhereWithoutDoctorInput | DoctorChemistRelationUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: DoctorChemistRelationScalarWhereInput | DoctorChemistRelationScalarWhereInput[]
  }

  export type DoctorTaskUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<DoctorTaskCreateWithoutDoctorInput, DoctorTaskUncheckedCreateWithoutDoctorInput> | DoctorTaskCreateWithoutDoctorInput[] | DoctorTaskUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorTaskCreateOrConnectWithoutDoctorInput | DoctorTaskCreateOrConnectWithoutDoctorInput[]
    upsert?: DoctorTaskUpsertWithWhereUniqueWithoutDoctorInput | DoctorTaskUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: DoctorTaskCreateManyDoctorInputEnvelope
    set?: DoctorTaskWhereUniqueInput | DoctorTaskWhereUniqueInput[]
    disconnect?: DoctorTaskWhereUniqueInput | DoctorTaskWhereUniqueInput[]
    delete?: DoctorTaskWhereUniqueInput | DoctorTaskWhereUniqueInput[]
    connect?: DoctorTaskWhereUniqueInput | DoctorTaskWhereUniqueInput[]
    update?: DoctorTaskUpdateWithWhereUniqueWithoutDoctorInput | DoctorTaskUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: DoctorTaskUpdateManyWithWhereWithoutDoctorInput | DoctorTaskUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: DoctorTaskScalarWhereInput | DoctorTaskScalarWhereInput[]
  }

  export type DoctorHospitalAssociationUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<DoctorHospitalAssociationCreateWithoutDoctorInput, DoctorHospitalAssociationUncheckedCreateWithoutDoctorInput> | DoctorHospitalAssociationCreateWithoutDoctorInput[] | DoctorHospitalAssociationUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorHospitalAssociationCreateOrConnectWithoutDoctorInput | DoctorHospitalAssociationCreateOrConnectWithoutDoctorInput[]
    upsert?: DoctorHospitalAssociationUpsertWithWhereUniqueWithoutDoctorInput | DoctorHospitalAssociationUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: DoctorHospitalAssociationCreateManyDoctorInputEnvelope
    set?: DoctorHospitalAssociationWhereUniqueInput | DoctorHospitalAssociationWhereUniqueInput[]
    disconnect?: DoctorHospitalAssociationWhereUniqueInput | DoctorHospitalAssociationWhereUniqueInput[]
    delete?: DoctorHospitalAssociationWhereUniqueInput | DoctorHospitalAssociationWhereUniqueInput[]
    connect?: DoctorHospitalAssociationWhereUniqueInput | DoctorHospitalAssociationWhereUniqueInput[]
    update?: DoctorHospitalAssociationUpdateWithWhereUniqueWithoutDoctorInput | DoctorHospitalAssociationUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: DoctorHospitalAssociationUpdateManyWithWhereWithoutDoctorInput | DoctorHospitalAssociationUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: DoctorHospitalAssociationScalarWhereInput | DoctorHospitalAssociationScalarWhereInput[]
  }

  export type DoctorConsultationScheduleUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<DoctorConsultationScheduleCreateWithoutDoctorInput, DoctorConsultationScheduleUncheckedCreateWithoutDoctorInput> | DoctorConsultationScheduleCreateWithoutDoctorInput[] | DoctorConsultationScheduleUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorConsultationScheduleCreateOrConnectWithoutDoctorInput | DoctorConsultationScheduleCreateOrConnectWithoutDoctorInput[]
    upsert?: DoctorConsultationScheduleUpsertWithWhereUniqueWithoutDoctorInput | DoctorConsultationScheduleUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: DoctorConsultationScheduleCreateManyDoctorInputEnvelope
    set?: DoctorConsultationScheduleWhereUniqueInput | DoctorConsultationScheduleWhereUniqueInput[]
    disconnect?: DoctorConsultationScheduleWhereUniqueInput | DoctorConsultationScheduleWhereUniqueInput[]
    delete?: DoctorConsultationScheduleWhereUniqueInput | DoctorConsultationScheduleWhereUniqueInput[]
    connect?: DoctorConsultationScheduleWhereUniqueInput | DoctorConsultationScheduleWhereUniqueInput[]
    update?: DoctorConsultationScheduleUpdateWithWhereUniqueWithoutDoctorInput | DoctorConsultationScheduleUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: DoctorConsultationScheduleUpdateManyWithWhereWithoutDoctorInput | DoctorConsultationScheduleUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: DoctorConsultationScheduleScalarWhereInput | DoctorConsultationScheduleScalarWhereInput[]
  }

  export type DoctorInteractionUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<DoctorInteractionCreateWithoutDoctorInput, DoctorInteractionUncheckedCreateWithoutDoctorInput> | DoctorInteractionCreateWithoutDoctorInput[] | DoctorInteractionUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorInteractionCreateOrConnectWithoutDoctorInput | DoctorInteractionCreateOrConnectWithoutDoctorInput[]
    upsert?: DoctorInteractionUpsertWithWhereUniqueWithoutDoctorInput | DoctorInteractionUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: DoctorInteractionCreateManyDoctorInputEnvelope
    set?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
    disconnect?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
    delete?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
    connect?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
    update?: DoctorInteractionUpdateWithWhereUniqueWithoutDoctorInput | DoctorInteractionUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: DoctorInteractionUpdateManyWithWhereWithoutDoctorInput | DoctorInteractionUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: DoctorInteractionScalarWhereInput | DoctorInteractionScalarWhereInput[]
  }

  export type DoctorNoteUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<DoctorNoteCreateWithoutDoctorInput, DoctorNoteUncheckedCreateWithoutDoctorInput> | DoctorNoteCreateWithoutDoctorInput[] | DoctorNoteUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorNoteCreateOrConnectWithoutDoctorInput | DoctorNoteCreateOrConnectWithoutDoctorInput[]
    upsert?: DoctorNoteUpsertWithWhereUniqueWithoutDoctorInput | DoctorNoteUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: DoctorNoteCreateManyDoctorInputEnvelope
    set?: DoctorNoteWhereUniqueInput | DoctorNoteWhereUniqueInput[]
    disconnect?: DoctorNoteWhereUniqueInput | DoctorNoteWhereUniqueInput[]
    delete?: DoctorNoteWhereUniqueInput | DoctorNoteWhereUniqueInput[]
    connect?: DoctorNoteWhereUniqueInput | DoctorNoteWhereUniqueInput[]
    update?: DoctorNoteUpdateWithWhereUniqueWithoutDoctorInput | DoctorNoteUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: DoctorNoteUpdateManyWithWhereWithoutDoctorInput | DoctorNoteUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: DoctorNoteScalarWhereInput | DoctorNoteScalarWhereInput[]
  }

  export type DoctorChemistRelationUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<DoctorChemistRelationCreateWithoutDoctorInput, DoctorChemistRelationUncheckedCreateWithoutDoctorInput> | DoctorChemistRelationCreateWithoutDoctorInput[] | DoctorChemistRelationUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorChemistRelationCreateOrConnectWithoutDoctorInput | DoctorChemistRelationCreateOrConnectWithoutDoctorInput[]
    upsert?: DoctorChemistRelationUpsertWithWhereUniqueWithoutDoctorInput | DoctorChemistRelationUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: DoctorChemistRelationCreateManyDoctorInputEnvelope
    set?: DoctorChemistRelationWhereUniqueInput | DoctorChemistRelationWhereUniqueInput[]
    disconnect?: DoctorChemistRelationWhereUniqueInput | DoctorChemistRelationWhereUniqueInput[]
    delete?: DoctorChemistRelationWhereUniqueInput | DoctorChemistRelationWhereUniqueInput[]
    connect?: DoctorChemistRelationWhereUniqueInput | DoctorChemistRelationWhereUniqueInput[]
    update?: DoctorChemistRelationUpdateWithWhereUniqueWithoutDoctorInput | DoctorChemistRelationUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: DoctorChemistRelationUpdateManyWithWhereWithoutDoctorInput | DoctorChemistRelationUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: DoctorChemistRelationScalarWhereInput | DoctorChemistRelationScalarWhereInput[]
  }

  export type DoctorTaskUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<DoctorTaskCreateWithoutDoctorInput, DoctorTaskUncheckedCreateWithoutDoctorInput> | DoctorTaskCreateWithoutDoctorInput[] | DoctorTaskUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorTaskCreateOrConnectWithoutDoctorInput | DoctorTaskCreateOrConnectWithoutDoctorInput[]
    upsert?: DoctorTaskUpsertWithWhereUniqueWithoutDoctorInput | DoctorTaskUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: DoctorTaskCreateManyDoctorInputEnvelope
    set?: DoctorTaskWhereUniqueInput | DoctorTaskWhereUniqueInput[]
    disconnect?: DoctorTaskWhereUniqueInput | DoctorTaskWhereUniqueInput[]
    delete?: DoctorTaskWhereUniqueInput | DoctorTaskWhereUniqueInput[]
    connect?: DoctorTaskWhereUniqueInput | DoctorTaskWhereUniqueInput[]
    update?: DoctorTaskUpdateWithWhereUniqueWithoutDoctorInput | DoctorTaskUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: DoctorTaskUpdateManyWithWhereWithoutDoctorInput | DoctorTaskUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: DoctorTaskScalarWhereInput | DoctorTaskScalarWhereInput[]
  }

  export type DoctorCreateNestedOneWithoutHospitalAssociationsInput = {
    create?: XOR<DoctorCreateWithoutHospitalAssociationsInput, DoctorUncheckedCreateWithoutHospitalAssociationsInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutHospitalAssociationsInput
    connect?: DoctorWhereUniqueInput
  }

  export type HospitalCreateNestedOneWithoutDoctorAssociationsInput = {
    create?: XOR<HospitalCreateWithoutDoctorAssociationsInput, HospitalUncheckedCreateWithoutDoctorAssociationsInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutDoctorAssociationsInput
    connect?: HospitalWhereUniqueInput
  }

  export type DoctorUpdateOneRequiredWithoutHospitalAssociationsNestedInput = {
    create?: XOR<DoctorCreateWithoutHospitalAssociationsInput, DoctorUncheckedCreateWithoutHospitalAssociationsInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutHospitalAssociationsInput
    upsert?: DoctorUpsertWithoutHospitalAssociationsInput
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutHospitalAssociationsInput, DoctorUpdateWithoutHospitalAssociationsInput>, DoctorUncheckedUpdateWithoutHospitalAssociationsInput>
  }

  export type HospitalUpdateOneRequiredWithoutDoctorAssociationsNestedInput = {
    create?: XOR<HospitalCreateWithoutDoctorAssociationsInput, HospitalUncheckedCreateWithoutDoctorAssociationsInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutDoctorAssociationsInput
    upsert?: HospitalUpsertWithoutDoctorAssociationsInput
    connect?: HospitalWhereUniqueInput
    update?: XOR<XOR<HospitalUpdateToOneWithWhereWithoutDoctorAssociationsInput, HospitalUpdateWithoutDoctorAssociationsInput>, HospitalUncheckedUpdateWithoutDoctorAssociationsInput>
  }

  export type DoctorCreateNestedOneWithoutConsultationSchedulesInput = {
    create?: XOR<DoctorCreateWithoutConsultationSchedulesInput, DoctorUncheckedCreateWithoutConsultationSchedulesInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutConsultationSchedulesInput
    connect?: DoctorWhereUniqueInput
  }

  export type HospitalCreateNestedOneWithoutConsultationSchedulesInput = {
    create?: XOR<HospitalCreateWithoutConsultationSchedulesInput, HospitalUncheckedCreateWithoutConsultationSchedulesInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutConsultationSchedulesInput
    connect?: HospitalWhereUniqueInput
  }

  export type EnumDayOfWeekFieldUpdateOperationsInput = {
    set?: $Enums.DayOfWeek
  }

  export type EnumConsultationTypeFieldUpdateOperationsInput = {
    set?: $Enums.ConsultationType
  }

  export type DoctorUpdateOneRequiredWithoutConsultationSchedulesNestedInput = {
    create?: XOR<DoctorCreateWithoutConsultationSchedulesInput, DoctorUncheckedCreateWithoutConsultationSchedulesInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutConsultationSchedulesInput
    upsert?: DoctorUpsertWithoutConsultationSchedulesInput
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutConsultationSchedulesInput, DoctorUpdateWithoutConsultationSchedulesInput>, DoctorUncheckedUpdateWithoutConsultationSchedulesInput>
  }

  export type HospitalUpdateOneRequiredWithoutConsultationSchedulesNestedInput = {
    create?: XOR<HospitalCreateWithoutConsultationSchedulesInput, HospitalUncheckedCreateWithoutConsultationSchedulesInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutConsultationSchedulesInput
    upsert?: HospitalUpsertWithoutConsultationSchedulesInput
    connect?: HospitalWhereUniqueInput
    update?: XOR<XOR<HospitalUpdateToOneWithWhereWithoutConsultationSchedulesInput, HospitalUpdateWithoutConsultationSchedulesInput>, HospitalUncheckedUpdateWithoutConsultationSchedulesInput>
  }

  export type DoctorCreateNestedOneWithoutNotesInput = {
    create?: XOR<DoctorCreateWithoutNotesInput, DoctorUncheckedCreateWithoutNotesInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutNotesInput
    connect?: DoctorWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutDoctorNotesInput = {
    create?: XOR<EmployeeCreateWithoutDoctorNotesInput, EmployeeUncheckedCreateWithoutDoctorNotesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutDoctorNotesInput
    connect?: EmployeeWhereUniqueInput
  }

  export type DoctorUpdateOneRequiredWithoutNotesNestedInput = {
    create?: XOR<DoctorCreateWithoutNotesInput, DoctorUncheckedCreateWithoutNotesInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutNotesInput
    upsert?: DoctorUpsertWithoutNotesInput
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutNotesInput, DoctorUpdateWithoutNotesInput>, DoctorUncheckedUpdateWithoutNotesInput>
  }

  export type EmployeeUpdateOneRequiredWithoutDoctorNotesNestedInput = {
    create?: XOR<EmployeeCreateWithoutDoctorNotesInput, EmployeeUncheckedCreateWithoutDoctorNotesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutDoctorNotesInput
    upsert?: EmployeeUpsertWithoutDoctorNotesInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutDoctorNotesInput, EmployeeUpdateWithoutDoctorNotesInput>, EmployeeUncheckedUpdateWithoutDoctorNotesInput>
  }

  export type DoctorCreateNestedOneWithoutInteractionsInput = {
    create?: XOR<DoctorCreateWithoutInteractionsInput, DoctorUncheckedCreateWithoutInteractionsInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutInteractionsInput
    connect?: DoctorWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutDoctorInteractionsInput = {
    create?: XOR<EmployeeCreateWithoutDoctorInteractionsInput, EmployeeUncheckedCreateWithoutDoctorInteractionsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutDoctorInteractionsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type HospitalCreateNestedOneWithoutDoctorInteractionsInput = {
    create?: XOR<HospitalCreateWithoutDoctorInteractionsInput, HospitalUncheckedCreateWithoutDoctorInteractionsInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutDoctorInteractionsInput
    connect?: HospitalWhereUniqueInput
  }

  export type DoctorDistributionCreateNestedManyWithoutDoctorInteractionInput = {
    create?: XOR<DoctorDistributionCreateWithoutDoctorInteractionInput, DoctorDistributionUncheckedCreateWithoutDoctorInteractionInput> | DoctorDistributionCreateWithoutDoctorInteractionInput[] | DoctorDistributionUncheckedCreateWithoutDoctorInteractionInput[]
    connectOrCreate?: DoctorDistributionCreateOrConnectWithoutDoctorInteractionInput | DoctorDistributionCreateOrConnectWithoutDoctorInteractionInput[]
    createMany?: DoctorDistributionCreateManyDoctorInteractionInputEnvelope
    connect?: DoctorDistributionWhereUniqueInput | DoctorDistributionWhereUniqueInput[]
  }

  export type DoctorTaskCreateNestedOneWithoutDoctorInteractionsInput = {
    create?: XOR<DoctorTaskCreateWithoutDoctorInteractionsInput, DoctorTaskUncheckedCreateWithoutDoctorInteractionsInput>
    connectOrCreate?: DoctorTaskCreateOrConnectWithoutDoctorInteractionsInput
    connect?: DoctorTaskWhereUniqueInput
  }

  export type DoctorDistributionUncheckedCreateNestedManyWithoutDoctorInteractionInput = {
    create?: XOR<DoctorDistributionCreateWithoutDoctorInteractionInput, DoctorDistributionUncheckedCreateWithoutDoctorInteractionInput> | DoctorDistributionCreateWithoutDoctorInteractionInput[] | DoctorDistributionUncheckedCreateWithoutDoctorInteractionInput[]
    connectOrCreate?: DoctorDistributionCreateOrConnectWithoutDoctorInteractionInput | DoctorDistributionCreateOrConnectWithoutDoctorInteractionInput[]
    createMany?: DoctorDistributionCreateManyDoctorInteractionInputEnvelope
    connect?: DoctorDistributionWhereUniqueInput | DoctorDistributionWhereUniqueInput[]
  }

  export type EnumInteractionTypeFieldUpdateOperationsInput = {
    set?: $Enums.InteractionType
  }

  export type DoctorUpdateOneRequiredWithoutInteractionsNestedInput = {
    create?: XOR<DoctorCreateWithoutInteractionsInput, DoctorUncheckedCreateWithoutInteractionsInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutInteractionsInput
    upsert?: DoctorUpsertWithoutInteractionsInput
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutInteractionsInput, DoctorUpdateWithoutInteractionsInput>, DoctorUncheckedUpdateWithoutInteractionsInput>
  }

  export type EmployeeUpdateOneRequiredWithoutDoctorInteractionsNestedInput = {
    create?: XOR<EmployeeCreateWithoutDoctorInteractionsInput, EmployeeUncheckedCreateWithoutDoctorInteractionsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutDoctorInteractionsInput
    upsert?: EmployeeUpsertWithoutDoctorInteractionsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutDoctorInteractionsInput, EmployeeUpdateWithoutDoctorInteractionsInput>, EmployeeUncheckedUpdateWithoutDoctorInteractionsInput>
  }

  export type HospitalUpdateOneWithoutDoctorInteractionsNestedInput = {
    create?: XOR<HospitalCreateWithoutDoctorInteractionsInput, HospitalUncheckedCreateWithoutDoctorInteractionsInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutDoctorInteractionsInput
    upsert?: HospitalUpsertWithoutDoctorInteractionsInput
    disconnect?: HospitalWhereInput | boolean
    delete?: HospitalWhereInput | boolean
    connect?: HospitalWhereUniqueInput
    update?: XOR<XOR<HospitalUpdateToOneWithWhereWithoutDoctorInteractionsInput, HospitalUpdateWithoutDoctorInteractionsInput>, HospitalUncheckedUpdateWithoutDoctorInteractionsInput>
  }

  export type DoctorDistributionUpdateManyWithoutDoctorInteractionNestedInput = {
    create?: XOR<DoctorDistributionCreateWithoutDoctorInteractionInput, DoctorDistributionUncheckedCreateWithoutDoctorInteractionInput> | DoctorDistributionCreateWithoutDoctorInteractionInput[] | DoctorDistributionUncheckedCreateWithoutDoctorInteractionInput[]
    connectOrCreate?: DoctorDistributionCreateOrConnectWithoutDoctorInteractionInput | DoctorDistributionCreateOrConnectWithoutDoctorInteractionInput[]
    upsert?: DoctorDistributionUpsertWithWhereUniqueWithoutDoctorInteractionInput | DoctorDistributionUpsertWithWhereUniqueWithoutDoctorInteractionInput[]
    createMany?: DoctorDistributionCreateManyDoctorInteractionInputEnvelope
    set?: DoctorDistributionWhereUniqueInput | DoctorDistributionWhereUniqueInput[]
    disconnect?: DoctorDistributionWhereUniqueInput | DoctorDistributionWhereUniqueInput[]
    delete?: DoctorDistributionWhereUniqueInput | DoctorDistributionWhereUniqueInput[]
    connect?: DoctorDistributionWhereUniqueInput | DoctorDistributionWhereUniqueInput[]
    update?: DoctorDistributionUpdateWithWhereUniqueWithoutDoctorInteractionInput | DoctorDistributionUpdateWithWhereUniqueWithoutDoctorInteractionInput[]
    updateMany?: DoctorDistributionUpdateManyWithWhereWithoutDoctorInteractionInput | DoctorDistributionUpdateManyWithWhereWithoutDoctorInteractionInput[]
    deleteMany?: DoctorDistributionScalarWhereInput | DoctorDistributionScalarWhereInput[]
  }

  export type DoctorTaskUpdateOneWithoutDoctorInteractionsNestedInput = {
    create?: XOR<DoctorTaskCreateWithoutDoctorInteractionsInput, DoctorTaskUncheckedCreateWithoutDoctorInteractionsInput>
    connectOrCreate?: DoctorTaskCreateOrConnectWithoutDoctorInteractionsInput
    upsert?: DoctorTaskUpsertWithoutDoctorInteractionsInput
    disconnect?: DoctorTaskWhereInput | boolean
    delete?: DoctorTaskWhereInput | boolean
    connect?: DoctorTaskWhereUniqueInput
    update?: XOR<XOR<DoctorTaskUpdateToOneWithWhereWithoutDoctorInteractionsInput, DoctorTaskUpdateWithoutDoctorInteractionsInput>, DoctorTaskUncheckedUpdateWithoutDoctorInteractionsInput>
  }

  export type DoctorDistributionUncheckedUpdateManyWithoutDoctorInteractionNestedInput = {
    create?: XOR<DoctorDistributionCreateWithoutDoctorInteractionInput, DoctorDistributionUncheckedCreateWithoutDoctorInteractionInput> | DoctorDistributionCreateWithoutDoctorInteractionInput[] | DoctorDistributionUncheckedCreateWithoutDoctorInteractionInput[]
    connectOrCreate?: DoctorDistributionCreateOrConnectWithoutDoctorInteractionInput | DoctorDistributionCreateOrConnectWithoutDoctorInteractionInput[]
    upsert?: DoctorDistributionUpsertWithWhereUniqueWithoutDoctorInteractionInput | DoctorDistributionUpsertWithWhereUniqueWithoutDoctorInteractionInput[]
    createMany?: DoctorDistributionCreateManyDoctorInteractionInputEnvelope
    set?: DoctorDistributionWhereUniqueInput | DoctorDistributionWhereUniqueInput[]
    disconnect?: DoctorDistributionWhereUniqueInput | DoctorDistributionWhereUniqueInput[]
    delete?: DoctorDistributionWhereUniqueInput | DoctorDistributionWhereUniqueInput[]
    connect?: DoctorDistributionWhereUniqueInput | DoctorDistributionWhereUniqueInput[]
    update?: DoctorDistributionUpdateWithWhereUniqueWithoutDoctorInteractionInput | DoctorDistributionUpdateWithWhereUniqueWithoutDoctorInteractionInput[]
    updateMany?: DoctorDistributionUpdateManyWithWhereWithoutDoctorInteractionInput | DoctorDistributionUpdateManyWithWhereWithoutDoctorInteractionInput[]
    deleteMany?: DoctorDistributionScalarWhereInput | DoctorDistributionScalarWhereInput[]
  }

  export type EmployeeCreateNestedOneWithoutDrugsCreatedInput = {
    create?: XOR<EmployeeCreateWithoutDrugsCreatedInput, EmployeeUncheckedCreateWithoutDrugsCreatedInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutDrugsCreatedInput
    connect?: EmployeeWhereUniqueInput
  }

  export type OrderItemCreateNestedManyWithoutDrugInput = {
    create?: XOR<OrderItemCreateWithoutDrugInput, OrderItemUncheckedCreateWithoutDrugInput> | OrderItemCreateWithoutDrugInput[] | OrderItemUncheckedCreateWithoutDrugInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutDrugInput | OrderItemCreateOrConnectWithoutDrugInput[]
    createMany?: OrderItemCreateManyDrugInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type RcpaDrugDataCreateNestedManyWithoutDrugInput = {
    create?: XOR<RcpaDrugDataCreateWithoutDrugInput, RcpaDrugDataUncheckedCreateWithoutDrugInput> | RcpaDrugDataCreateWithoutDrugInput[] | RcpaDrugDataUncheckedCreateWithoutDrugInput[]
    connectOrCreate?: RcpaDrugDataCreateOrConnectWithoutDrugInput | RcpaDrugDataCreateOrConnectWithoutDrugInput[]
    createMany?: RcpaDrugDataCreateManyDrugInputEnvelope
    connect?: RcpaDrugDataWhereUniqueInput | RcpaDrugDataWhereUniqueInput[]
  }

  export type UserDrugInventoryCreateNestedManyWithoutDrugInput = {
    create?: XOR<UserDrugInventoryCreateWithoutDrugInput, UserDrugInventoryUncheckedCreateWithoutDrugInput> | UserDrugInventoryCreateWithoutDrugInput[] | UserDrugInventoryUncheckedCreateWithoutDrugInput[]
    connectOrCreate?: UserDrugInventoryCreateOrConnectWithoutDrugInput | UserDrugInventoryCreateOrConnectWithoutDrugInput[]
    createMany?: UserDrugInventoryCreateManyDrugInputEnvelope
    connect?: UserDrugInventoryWhereUniqueInput | UserDrugInventoryWhereUniqueInput[]
  }

  export type DoctorDistributionDrugItemCreateNestedManyWithoutDrugInput = {
    create?: XOR<DoctorDistributionDrugItemCreateWithoutDrugInput, DoctorDistributionDrugItemUncheckedCreateWithoutDrugInput> | DoctorDistributionDrugItemCreateWithoutDrugInput[] | DoctorDistributionDrugItemUncheckedCreateWithoutDrugInput[]
    connectOrCreate?: DoctorDistributionDrugItemCreateOrConnectWithoutDrugInput | DoctorDistributionDrugItemCreateOrConnectWithoutDrugInput[]
    createMany?: DoctorDistributionDrugItemCreateManyDrugInputEnvelope
    connect?: DoctorDistributionDrugItemWhereUniqueInput | DoctorDistributionDrugItemWhereUniqueInput[]
  }

  export type OrderItemUncheckedCreateNestedManyWithoutDrugInput = {
    create?: XOR<OrderItemCreateWithoutDrugInput, OrderItemUncheckedCreateWithoutDrugInput> | OrderItemCreateWithoutDrugInput[] | OrderItemUncheckedCreateWithoutDrugInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutDrugInput | OrderItemCreateOrConnectWithoutDrugInput[]
    createMany?: OrderItemCreateManyDrugInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type RcpaDrugDataUncheckedCreateNestedManyWithoutDrugInput = {
    create?: XOR<RcpaDrugDataCreateWithoutDrugInput, RcpaDrugDataUncheckedCreateWithoutDrugInput> | RcpaDrugDataCreateWithoutDrugInput[] | RcpaDrugDataUncheckedCreateWithoutDrugInput[]
    connectOrCreate?: RcpaDrugDataCreateOrConnectWithoutDrugInput | RcpaDrugDataCreateOrConnectWithoutDrugInput[]
    createMany?: RcpaDrugDataCreateManyDrugInputEnvelope
    connect?: RcpaDrugDataWhereUniqueInput | RcpaDrugDataWhereUniqueInput[]
  }

  export type UserDrugInventoryUncheckedCreateNestedManyWithoutDrugInput = {
    create?: XOR<UserDrugInventoryCreateWithoutDrugInput, UserDrugInventoryUncheckedCreateWithoutDrugInput> | UserDrugInventoryCreateWithoutDrugInput[] | UserDrugInventoryUncheckedCreateWithoutDrugInput[]
    connectOrCreate?: UserDrugInventoryCreateOrConnectWithoutDrugInput | UserDrugInventoryCreateOrConnectWithoutDrugInput[]
    createMany?: UserDrugInventoryCreateManyDrugInputEnvelope
    connect?: UserDrugInventoryWhereUniqueInput | UserDrugInventoryWhereUniqueInput[]
  }

  export type DoctorDistributionDrugItemUncheckedCreateNestedManyWithoutDrugInput = {
    create?: XOR<DoctorDistributionDrugItemCreateWithoutDrugInput, DoctorDistributionDrugItemUncheckedCreateWithoutDrugInput> | DoctorDistributionDrugItemCreateWithoutDrugInput[] | DoctorDistributionDrugItemUncheckedCreateWithoutDrugInput[]
    connectOrCreate?: DoctorDistributionDrugItemCreateOrConnectWithoutDrugInput | DoctorDistributionDrugItemCreateOrConnectWithoutDrugInput[]
    createMany?: DoctorDistributionDrugItemCreateManyDrugInputEnvelope
    connect?: DoctorDistributionDrugItemWhereUniqueInput | DoctorDistributionDrugItemWhereUniqueInput[]
  }

  export type EmployeeUpdateOneRequiredWithoutDrugsCreatedNestedInput = {
    create?: XOR<EmployeeCreateWithoutDrugsCreatedInput, EmployeeUncheckedCreateWithoutDrugsCreatedInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutDrugsCreatedInput
    upsert?: EmployeeUpsertWithoutDrugsCreatedInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutDrugsCreatedInput, EmployeeUpdateWithoutDrugsCreatedInput>, EmployeeUncheckedUpdateWithoutDrugsCreatedInput>
  }

  export type OrderItemUpdateManyWithoutDrugNestedInput = {
    create?: XOR<OrderItemCreateWithoutDrugInput, OrderItemUncheckedCreateWithoutDrugInput> | OrderItemCreateWithoutDrugInput[] | OrderItemUncheckedCreateWithoutDrugInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutDrugInput | OrderItemCreateOrConnectWithoutDrugInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutDrugInput | OrderItemUpsertWithWhereUniqueWithoutDrugInput[]
    createMany?: OrderItemCreateManyDrugInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutDrugInput | OrderItemUpdateWithWhereUniqueWithoutDrugInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutDrugInput | OrderItemUpdateManyWithWhereWithoutDrugInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type RcpaDrugDataUpdateManyWithoutDrugNestedInput = {
    create?: XOR<RcpaDrugDataCreateWithoutDrugInput, RcpaDrugDataUncheckedCreateWithoutDrugInput> | RcpaDrugDataCreateWithoutDrugInput[] | RcpaDrugDataUncheckedCreateWithoutDrugInput[]
    connectOrCreate?: RcpaDrugDataCreateOrConnectWithoutDrugInput | RcpaDrugDataCreateOrConnectWithoutDrugInput[]
    upsert?: RcpaDrugDataUpsertWithWhereUniqueWithoutDrugInput | RcpaDrugDataUpsertWithWhereUniqueWithoutDrugInput[]
    createMany?: RcpaDrugDataCreateManyDrugInputEnvelope
    set?: RcpaDrugDataWhereUniqueInput | RcpaDrugDataWhereUniqueInput[]
    disconnect?: RcpaDrugDataWhereUniqueInput | RcpaDrugDataWhereUniqueInput[]
    delete?: RcpaDrugDataWhereUniqueInput | RcpaDrugDataWhereUniqueInput[]
    connect?: RcpaDrugDataWhereUniqueInput | RcpaDrugDataWhereUniqueInput[]
    update?: RcpaDrugDataUpdateWithWhereUniqueWithoutDrugInput | RcpaDrugDataUpdateWithWhereUniqueWithoutDrugInput[]
    updateMany?: RcpaDrugDataUpdateManyWithWhereWithoutDrugInput | RcpaDrugDataUpdateManyWithWhereWithoutDrugInput[]
    deleteMany?: RcpaDrugDataScalarWhereInput | RcpaDrugDataScalarWhereInput[]
  }

  export type UserDrugInventoryUpdateManyWithoutDrugNestedInput = {
    create?: XOR<UserDrugInventoryCreateWithoutDrugInput, UserDrugInventoryUncheckedCreateWithoutDrugInput> | UserDrugInventoryCreateWithoutDrugInput[] | UserDrugInventoryUncheckedCreateWithoutDrugInput[]
    connectOrCreate?: UserDrugInventoryCreateOrConnectWithoutDrugInput | UserDrugInventoryCreateOrConnectWithoutDrugInput[]
    upsert?: UserDrugInventoryUpsertWithWhereUniqueWithoutDrugInput | UserDrugInventoryUpsertWithWhereUniqueWithoutDrugInput[]
    createMany?: UserDrugInventoryCreateManyDrugInputEnvelope
    set?: UserDrugInventoryWhereUniqueInput | UserDrugInventoryWhereUniqueInput[]
    disconnect?: UserDrugInventoryWhereUniqueInput | UserDrugInventoryWhereUniqueInput[]
    delete?: UserDrugInventoryWhereUniqueInput | UserDrugInventoryWhereUniqueInput[]
    connect?: UserDrugInventoryWhereUniqueInput | UserDrugInventoryWhereUniqueInput[]
    update?: UserDrugInventoryUpdateWithWhereUniqueWithoutDrugInput | UserDrugInventoryUpdateWithWhereUniqueWithoutDrugInput[]
    updateMany?: UserDrugInventoryUpdateManyWithWhereWithoutDrugInput | UserDrugInventoryUpdateManyWithWhereWithoutDrugInput[]
    deleteMany?: UserDrugInventoryScalarWhereInput | UserDrugInventoryScalarWhereInput[]
  }

  export type DoctorDistributionDrugItemUpdateManyWithoutDrugNestedInput = {
    create?: XOR<DoctorDistributionDrugItemCreateWithoutDrugInput, DoctorDistributionDrugItemUncheckedCreateWithoutDrugInput> | DoctorDistributionDrugItemCreateWithoutDrugInput[] | DoctorDistributionDrugItemUncheckedCreateWithoutDrugInput[]
    connectOrCreate?: DoctorDistributionDrugItemCreateOrConnectWithoutDrugInput | DoctorDistributionDrugItemCreateOrConnectWithoutDrugInput[]
    upsert?: DoctorDistributionDrugItemUpsertWithWhereUniqueWithoutDrugInput | DoctorDistributionDrugItemUpsertWithWhereUniqueWithoutDrugInput[]
    createMany?: DoctorDistributionDrugItemCreateManyDrugInputEnvelope
    set?: DoctorDistributionDrugItemWhereUniqueInput | DoctorDistributionDrugItemWhereUniqueInput[]
    disconnect?: DoctorDistributionDrugItemWhereUniqueInput | DoctorDistributionDrugItemWhereUniqueInput[]
    delete?: DoctorDistributionDrugItemWhereUniqueInput | DoctorDistributionDrugItemWhereUniqueInput[]
    connect?: DoctorDistributionDrugItemWhereUniqueInput | DoctorDistributionDrugItemWhereUniqueInput[]
    update?: DoctorDistributionDrugItemUpdateWithWhereUniqueWithoutDrugInput | DoctorDistributionDrugItemUpdateWithWhereUniqueWithoutDrugInput[]
    updateMany?: DoctorDistributionDrugItemUpdateManyWithWhereWithoutDrugInput | DoctorDistributionDrugItemUpdateManyWithWhereWithoutDrugInput[]
    deleteMany?: DoctorDistributionDrugItemScalarWhereInput | DoctorDistributionDrugItemScalarWhereInput[]
  }

  export type OrderItemUncheckedUpdateManyWithoutDrugNestedInput = {
    create?: XOR<OrderItemCreateWithoutDrugInput, OrderItemUncheckedCreateWithoutDrugInput> | OrderItemCreateWithoutDrugInput[] | OrderItemUncheckedCreateWithoutDrugInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutDrugInput | OrderItemCreateOrConnectWithoutDrugInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutDrugInput | OrderItemUpsertWithWhereUniqueWithoutDrugInput[]
    createMany?: OrderItemCreateManyDrugInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutDrugInput | OrderItemUpdateWithWhereUniqueWithoutDrugInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutDrugInput | OrderItemUpdateManyWithWhereWithoutDrugInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type RcpaDrugDataUncheckedUpdateManyWithoutDrugNestedInput = {
    create?: XOR<RcpaDrugDataCreateWithoutDrugInput, RcpaDrugDataUncheckedCreateWithoutDrugInput> | RcpaDrugDataCreateWithoutDrugInput[] | RcpaDrugDataUncheckedCreateWithoutDrugInput[]
    connectOrCreate?: RcpaDrugDataCreateOrConnectWithoutDrugInput | RcpaDrugDataCreateOrConnectWithoutDrugInput[]
    upsert?: RcpaDrugDataUpsertWithWhereUniqueWithoutDrugInput | RcpaDrugDataUpsertWithWhereUniqueWithoutDrugInput[]
    createMany?: RcpaDrugDataCreateManyDrugInputEnvelope
    set?: RcpaDrugDataWhereUniqueInput | RcpaDrugDataWhereUniqueInput[]
    disconnect?: RcpaDrugDataWhereUniqueInput | RcpaDrugDataWhereUniqueInput[]
    delete?: RcpaDrugDataWhereUniqueInput | RcpaDrugDataWhereUniqueInput[]
    connect?: RcpaDrugDataWhereUniqueInput | RcpaDrugDataWhereUniqueInput[]
    update?: RcpaDrugDataUpdateWithWhereUniqueWithoutDrugInput | RcpaDrugDataUpdateWithWhereUniqueWithoutDrugInput[]
    updateMany?: RcpaDrugDataUpdateManyWithWhereWithoutDrugInput | RcpaDrugDataUpdateManyWithWhereWithoutDrugInput[]
    deleteMany?: RcpaDrugDataScalarWhereInput | RcpaDrugDataScalarWhereInput[]
  }

  export type UserDrugInventoryUncheckedUpdateManyWithoutDrugNestedInput = {
    create?: XOR<UserDrugInventoryCreateWithoutDrugInput, UserDrugInventoryUncheckedCreateWithoutDrugInput> | UserDrugInventoryCreateWithoutDrugInput[] | UserDrugInventoryUncheckedCreateWithoutDrugInput[]
    connectOrCreate?: UserDrugInventoryCreateOrConnectWithoutDrugInput | UserDrugInventoryCreateOrConnectWithoutDrugInput[]
    upsert?: UserDrugInventoryUpsertWithWhereUniqueWithoutDrugInput | UserDrugInventoryUpsertWithWhereUniqueWithoutDrugInput[]
    createMany?: UserDrugInventoryCreateManyDrugInputEnvelope
    set?: UserDrugInventoryWhereUniqueInput | UserDrugInventoryWhereUniqueInput[]
    disconnect?: UserDrugInventoryWhereUniqueInput | UserDrugInventoryWhereUniqueInput[]
    delete?: UserDrugInventoryWhereUniqueInput | UserDrugInventoryWhereUniqueInput[]
    connect?: UserDrugInventoryWhereUniqueInput | UserDrugInventoryWhereUniqueInput[]
    update?: UserDrugInventoryUpdateWithWhereUniqueWithoutDrugInput | UserDrugInventoryUpdateWithWhereUniqueWithoutDrugInput[]
    updateMany?: UserDrugInventoryUpdateManyWithWhereWithoutDrugInput | UserDrugInventoryUpdateManyWithWhereWithoutDrugInput[]
    deleteMany?: UserDrugInventoryScalarWhereInput | UserDrugInventoryScalarWhereInput[]
  }

  export type DoctorDistributionDrugItemUncheckedUpdateManyWithoutDrugNestedInput = {
    create?: XOR<DoctorDistributionDrugItemCreateWithoutDrugInput, DoctorDistributionDrugItemUncheckedCreateWithoutDrugInput> | DoctorDistributionDrugItemCreateWithoutDrugInput[] | DoctorDistributionDrugItemUncheckedCreateWithoutDrugInput[]
    connectOrCreate?: DoctorDistributionDrugItemCreateOrConnectWithoutDrugInput | DoctorDistributionDrugItemCreateOrConnectWithoutDrugInput[]
    upsert?: DoctorDistributionDrugItemUpsertWithWhereUniqueWithoutDrugInput | DoctorDistributionDrugItemUpsertWithWhereUniqueWithoutDrugInput[]
    createMany?: DoctorDistributionDrugItemCreateManyDrugInputEnvelope
    set?: DoctorDistributionDrugItemWhereUniqueInput | DoctorDistributionDrugItemWhereUniqueInput[]
    disconnect?: DoctorDistributionDrugItemWhereUniqueInput | DoctorDistributionDrugItemWhereUniqueInput[]
    delete?: DoctorDistributionDrugItemWhereUniqueInput | DoctorDistributionDrugItemWhereUniqueInput[]
    connect?: DoctorDistributionDrugItemWhereUniqueInput | DoctorDistributionDrugItemWhereUniqueInput[]
    update?: DoctorDistributionDrugItemUpdateWithWhereUniqueWithoutDrugInput | DoctorDistributionDrugItemUpdateWithWhereUniqueWithoutDrugInput[]
    updateMany?: DoctorDistributionDrugItemUpdateManyWithWhereWithoutDrugInput | DoctorDistributionDrugItemUpdateManyWithWhereWithoutDrugInput[]
    deleteMany?: DoctorDistributionDrugItemScalarWhereInput | DoctorDistributionDrugItemScalarWhereInput[]
  }

  export type ChemistChainCreateNestedOneWithoutChemistsInput = {
    create?: XOR<ChemistChainCreateWithoutChemistsInput, ChemistChainUncheckedCreateWithoutChemistsInput>
    connectOrCreate?: ChemistChainCreateOrConnectWithoutChemistsInput
    connect?: ChemistChainWhereUniqueInput
  }

  export type TerritoryCreateNestedOneWithoutChemistsInput = {
    create?: XOR<TerritoryCreateWithoutChemistsInput, TerritoryUncheckedCreateWithoutChemistsInput>
    connectOrCreate?: TerritoryCreateOrConnectWithoutChemistsInput
    connect?: TerritoryWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutChemistsCreatedInput = {
    create?: XOR<EmployeeCreateWithoutChemistsCreatedInput, EmployeeUncheckedCreateWithoutChemistsCreatedInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutChemistsCreatedInput
    connect?: EmployeeWhereUniqueInput
  }

  export type ChemistNoteCreateNestedManyWithoutChemistInput = {
    create?: XOR<ChemistNoteCreateWithoutChemistInput, ChemistNoteUncheckedCreateWithoutChemistInput> | ChemistNoteCreateWithoutChemistInput[] | ChemistNoteUncheckedCreateWithoutChemistInput[]
    connectOrCreate?: ChemistNoteCreateOrConnectWithoutChemistInput | ChemistNoteCreateOrConnectWithoutChemistInput[]
    createMany?: ChemistNoteCreateManyChemistInputEnvelope
    connect?: ChemistNoteWhereUniqueInput | ChemistNoteWhereUniqueInput[]
  }

  export type ChemistInteractionCreateNestedManyWithoutChemistInput = {
    create?: XOR<ChemistInteractionCreateWithoutChemistInput, ChemistInteractionUncheckedCreateWithoutChemistInput> | ChemistInteractionCreateWithoutChemistInput[] | ChemistInteractionUncheckedCreateWithoutChemistInput[]
    connectOrCreate?: ChemistInteractionCreateOrConnectWithoutChemistInput | ChemistInteractionCreateOrConnectWithoutChemistInput[]
    createMany?: ChemistInteractionCreateManyChemistInputEnvelope
    connect?: ChemistInteractionWhereUniqueInput | ChemistInteractionWhereUniqueInput[]
  }

  export type DoctorChemistRelationCreateNestedManyWithoutChemistInput = {
    create?: XOR<DoctorChemistRelationCreateWithoutChemistInput, DoctorChemistRelationUncheckedCreateWithoutChemistInput> | DoctorChemistRelationCreateWithoutChemistInput[] | DoctorChemistRelationUncheckedCreateWithoutChemistInput[]
    connectOrCreate?: DoctorChemistRelationCreateOrConnectWithoutChemistInput | DoctorChemistRelationCreateOrConnectWithoutChemistInput[]
    createMany?: DoctorChemistRelationCreateManyChemistInputEnvelope
    connect?: DoctorChemistRelationWhereUniqueInput | DoctorChemistRelationWhereUniqueInput[]
  }

  export type OrderCreateNestedManyWithoutChemistInput = {
    create?: XOR<OrderCreateWithoutChemistInput, OrderUncheckedCreateWithoutChemistInput> | OrderCreateWithoutChemistInput[] | OrderUncheckedCreateWithoutChemistInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutChemistInput | OrderCreateOrConnectWithoutChemistInput[]
    createMany?: OrderCreateManyChemistInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type RcpaReportCreateNestedManyWithoutChemistInput = {
    create?: XOR<RcpaReportCreateWithoutChemistInput, RcpaReportUncheckedCreateWithoutChemistInput> | RcpaReportCreateWithoutChemistInput[] | RcpaReportUncheckedCreateWithoutChemistInput[]
    connectOrCreate?: RcpaReportCreateOrConnectWithoutChemistInput | RcpaReportCreateOrConnectWithoutChemistInput[]
    createMany?: RcpaReportCreateManyChemistInputEnvelope
    connect?: RcpaReportWhereUniqueInput | RcpaReportWhereUniqueInput[]
  }

  export type ChemistTaskCreateNestedManyWithoutChemistInput = {
    create?: XOR<ChemistTaskCreateWithoutChemistInput, ChemistTaskUncheckedCreateWithoutChemistInput> | ChemistTaskCreateWithoutChemistInput[] | ChemistTaskUncheckedCreateWithoutChemistInput[]
    connectOrCreate?: ChemistTaskCreateOrConnectWithoutChemistInput | ChemistTaskCreateOrConnectWithoutChemistInput[]
    createMany?: ChemistTaskCreateManyChemistInputEnvelope
    connect?: ChemistTaskWhereUniqueInput | ChemistTaskWhereUniqueInput[]
  }

  export type ChemistNoteUncheckedCreateNestedManyWithoutChemistInput = {
    create?: XOR<ChemistNoteCreateWithoutChemistInput, ChemistNoteUncheckedCreateWithoutChemistInput> | ChemistNoteCreateWithoutChemistInput[] | ChemistNoteUncheckedCreateWithoutChemistInput[]
    connectOrCreate?: ChemistNoteCreateOrConnectWithoutChemistInput | ChemistNoteCreateOrConnectWithoutChemistInput[]
    createMany?: ChemistNoteCreateManyChemistInputEnvelope
    connect?: ChemistNoteWhereUniqueInput | ChemistNoteWhereUniqueInput[]
  }

  export type ChemistInteractionUncheckedCreateNestedManyWithoutChemistInput = {
    create?: XOR<ChemistInteractionCreateWithoutChemistInput, ChemistInteractionUncheckedCreateWithoutChemistInput> | ChemistInteractionCreateWithoutChemistInput[] | ChemistInteractionUncheckedCreateWithoutChemistInput[]
    connectOrCreate?: ChemistInteractionCreateOrConnectWithoutChemistInput | ChemistInteractionCreateOrConnectWithoutChemistInput[]
    createMany?: ChemistInteractionCreateManyChemistInputEnvelope
    connect?: ChemistInteractionWhereUniqueInput | ChemistInteractionWhereUniqueInput[]
  }

  export type DoctorChemistRelationUncheckedCreateNestedManyWithoutChemistInput = {
    create?: XOR<DoctorChemistRelationCreateWithoutChemistInput, DoctorChemistRelationUncheckedCreateWithoutChemistInput> | DoctorChemistRelationCreateWithoutChemistInput[] | DoctorChemistRelationUncheckedCreateWithoutChemistInput[]
    connectOrCreate?: DoctorChemistRelationCreateOrConnectWithoutChemistInput | DoctorChemistRelationCreateOrConnectWithoutChemistInput[]
    createMany?: DoctorChemistRelationCreateManyChemistInputEnvelope
    connect?: DoctorChemistRelationWhereUniqueInput | DoctorChemistRelationWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutChemistInput = {
    create?: XOR<OrderCreateWithoutChemistInput, OrderUncheckedCreateWithoutChemistInput> | OrderCreateWithoutChemistInput[] | OrderUncheckedCreateWithoutChemistInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutChemistInput | OrderCreateOrConnectWithoutChemistInput[]
    createMany?: OrderCreateManyChemistInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type RcpaReportUncheckedCreateNestedManyWithoutChemistInput = {
    create?: XOR<RcpaReportCreateWithoutChemistInput, RcpaReportUncheckedCreateWithoutChemistInput> | RcpaReportCreateWithoutChemistInput[] | RcpaReportUncheckedCreateWithoutChemistInput[]
    connectOrCreate?: RcpaReportCreateOrConnectWithoutChemistInput | RcpaReportCreateOrConnectWithoutChemistInput[]
    createMany?: RcpaReportCreateManyChemistInputEnvelope
    connect?: RcpaReportWhereUniqueInput | RcpaReportWhereUniqueInput[]
  }

  export type ChemistTaskUncheckedCreateNestedManyWithoutChemistInput = {
    create?: XOR<ChemistTaskCreateWithoutChemistInput, ChemistTaskUncheckedCreateWithoutChemistInput> | ChemistTaskCreateWithoutChemistInput[] | ChemistTaskUncheckedCreateWithoutChemistInput[]
    connectOrCreate?: ChemistTaskCreateOrConnectWithoutChemistInput | ChemistTaskCreateOrConnectWithoutChemistInput[]
    createMany?: ChemistTaskCreateManyChemistInputEnvelope
    connect?: ChemistTaskWhereUniqueInput | ChemistTaskWhereUniqueInput[]
  }

  export type EnumChemistTypeFieldUpdateOperationsInput = {
    set?: $Enums.ChemistType
  }

  export type ChemistChainUpdateOneWithoutChemistsNestedInput = {
    create?: XOR<ChemistChainCreateWithoutChemistsInput, ChemistChainUncheckedCreateWithoutChemistsInput>
    connectOrCreate?: ChemistChainCreateOrConnectWithoutChemistsInput
    upsert?: ChemistChainUpsertWithoutChemistsInput
    disconnect?: ChemistChainWhereInput | boolean
    delete?: ChemistChainWhereInput | boolean
    connect?: ChemistChainWhereUniqueInput
    update?: XOR<XOR<ChemistChainUpdateToOneWithWhereWithoutChemistsInput, ChemistChainUpdateWithoutChemistsInput>, ChemistChainUncheckedUpdateWithoutChemistsInput>
  }

  export type TerritoryUpdateOneRequiredWithoutChemistsNestedInput = {
    create?: XOR<TerritoryCreateWithoutChemistsInput, TerritoryUncheckedCreateWithoutChemistsInput>
    connectOrCreate?: TerritoryCreateOrConnectWithoutChemistsInput
    upsert?: TerritoryUpsertWithoutChemistsInput
    connect?: TerritoryWhereUniqueInput
    update?: XOR<XOR<TerritoryUpdateToOneWithWhereWithoutChemistsInput, TerritoryUpdateWithoutChemistsInput>, TerritoryUncheckedUpdateWithoutChemistsInput>
  }

  export type EmployeeUpdateOneRequiredWithoutChemistsCreatedNestedInput = {
    create?: XOR<EmployeeCreateWithoutChemistsCreatedInput, EmployeeUncheckedCreateWithoutChemistsCreatedInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutChemistsCreatedInput
    upsert?: EmployeeUpsertWithoutChemistsCreatedInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutChemistsCreatedInput, EmployeeUpdateWithoutChemistsCreatedInput>, EmployeeUncheckedUpdateWithoutChemistsCreatedInput>
  }

  export type ChemistNoteUpdateManyWithoutChemistNestedInput = {
    create?: XOR<ChemistNoteCreateWithoutChemistInput, ChemistNoteUncheckedCreateWithoutChemistInput> | ChemistNoteCreateWithoutChemistInput[] | ChemistNoteUncheckedCreateWithoutChemistInput[]
    connectOrCreate?: ChemistNoteCreateOrConnectWithoutChemistInput | ChemistNoteCreateOrConnectWithoutChemistInput[]
    upsert?: ChemistNoteUpsertWithWhereUniqueWithoutChemistInput | ChemistNoteUpsertWithWhereUniqueWithoutChemistInput[]
    createMany?: ChemistNoteCreateManyChemistInputEnvelope
    set?: ChemistNoteWhereUniqueInput | ChemistNoteWhereUniqueInput[]
    disconnect?: ChemistNoteWhereUniqueInput | ChemistNoteWhereUniqueInput[]
    delete?: ChemistNoteWhereUniqueInput | ChemistNoteWhereUniqueInput[]
    connect?: ChemistNoteWhereUniqueInput | ChemistNoteWhereUniqueInput[]
    update?: ChemistNoteUpdateWithWhereUniqueWithoutChemistInput | ChemistNoteUpdateWithWhereUniqueWithoutChemistInput[]
    updateMany?: ChemistNoteUpdateManyWithWhereWithoutChemistInput | ChemistNoteUpdateManyWithWhereWithoutChemistInput[]
    deleteMany?: ChemistNoteScalarWhereInput | ChemistNoteScalarWhereInput[]
  }

  export type ChemistInteractionUpdateManyWithoutChemistNestedInput = {
    create?: XOR<ChemistInteractionCreateWithoutChemistInput, ChemistInteractionUncheckedCreateWithoutChemistInput> | ChemistInteractionCreateWithoutChemistInput[] | ChemistInteractionUncheckedCreateWithoutChemistInput[]
    connectOrCreate?: ChemistInteractionCreateOrConnectWithoutChemistInput | ChemistInteractionCreateOrConnectWithoutChemistInput[]
    upsert?: ChemistInteractionUpsertWithWhereUniqueWithoutChemistInput | ChemistInteractionUpsertWithWhereUniqueWithoutChemistInput[]
    createMany?: ChemistInteractionCreateManyChemistInputEnvelope
    set?: ChemistInteractionWhereUniqueInput | ChemistInteractionWhereUniqueInput[]
    disconnect?: ChemistInteractionWhereUniqueInput | ChemistInteractionWhereUniqueInput[]
    delete?: ChemistInteractionWhereUniqueInput | ChemistInteractionWhereUniqueInput[]
    connect?: ChemistInteractionWhereUniqueInput | ChemistInteractionWhereUniqueInput[]
    update?: ChemistInteractionUpdateWithWhereUniqueWithoutChemistInput | ChemistInteractionUpdateWithWhereUniqueWithoutChemistInput[]
    updateMany?: ChemistInteractionUpdateManyWithWhereWithoutChemistInput | ChemistInteractionUpdateManyWithWhereWithoutChemistInput[]
    deleteMany?: ChemistInteractionScalarWhereInput | ChemistInteractionScalarWhereInput[]
  }

  export type DoctorChemistRelationUpdateManyWithoutChemistNestedInput = {
    create?: XOR<DoctorChemistRelationCreateWithoutChemistInput, DoctorChemistRelationUncheckedCreateWithoutChemistInput> | DoctorChemistRelationCreateWithoutChemistInput[] | DoctorChemistRelationUncheckedCreateWithoutChemistInput[]
    connectOrCreate?: DoctorChemistRelationCreateOrConnectWithoutChemistInput | DoctorChemistRelationCreateOrConnectWithoutChemistInput[]
    upsert?: DoctorChemistRelationUpsertWithWhereUniqueWithoutChemistInput | DoctorChemistRelationUpsertWithWhereUniqueWithoutChemistInput[]
    createMany?: DoctorChemistRelationCreateManyChemistInputEnvelope
    set?: DoctorChemistRelationWhereUniqueInput | DoctorChemistRelationWhereUniqueInput[]
    disconnect?: DoctorChemistRelationWhereUniqueInput | DoctorChemistRelationWhereUniqueInput[]
    delete?: DoctorChemistRelationWhereUniqueInput | DoctorChemistRelationWhereUniqueInput[]
    connect?: DoctorChemistRelationWhereUniqueInput | DoctorChemistRelationWhereUniqueInput[]
    update?: DoctorChemistRelationUpdateWithWhereUniqueWithoutChemistInput | DoctorChemistRelationUpdateWithWhereUniqueWithoutChemistInput[]
    updateMany?: DoctorChemistRelationUpdateManyWithWhereWithoutChemistInput | DoctorChemistRelationUpdateManyWithWhereWithoutChemistInput[]
    deleteMany?: DoctorChemistRelationScalarWhereInput | DoctorChemistRelationScalarWhereInput[]
  }

  export type OrderUpdateManyWithoutChemistNestedInput = {
    create?: XOR<OrderCreateWithoutChemistInput, OrderUncheckedCreateWithoutChemistInput> | OrderCreateWithoutChemistInput[] | OrderUncheckedCreateWithoutChemistInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutChemistInput | OrderCreateOrConnectWithoutChemistInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutChemistInput | OrderUpsertWithWhereUniqueWithoutChemistInput[]
    createMany?: OrderCreateManyChemistInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutChemistInput | OrderUpdateWithWhereUniqueWithoutChemistInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutChemistInput | OrderUpdateManyWithWhereWithoutChemistInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type RcpaReportUpdateManyWithoutChemistNestedInput = {
    create?: XOR<RcpaReportCreateWithoutChemistInput, RcpaReportUncheckedCreateWithoutChemistInput> | RcpaReportCreateWithoutChemistInput[] | RcpaReportUncheckedCreateWithoutChemistInput[]
    connectOrCreate?: RcpaReportCreateOrConnectWithoutChemistInput | RcpaReportCreateOrConnectWithoutChemistInput[]
    upsert?: RcpaReportUpsertWithWhereUniqueWithoutChemistInput | RcpaReportUpsertWithWhereUniqueWithoutChemistInput[]
    createMany?: RcpaReportCreateManyChemistInputEnvelope
    set?: RcpaReportWhereUniqueInput | RcpaReportWhereUniqueInput[]
    disconnect?: RcpaReportWhereUniqueInput | RcpaReportWhereUniqueInput[]
    delete?: RcpaReportWhereUniqueInput | RcpaReportWhereUniqueInput[]
    connect?: RcpaReportWhereUniqueInput | RcpaReportWhereUniqueInput[]
    update?: RcpaReportUpdateWithWhereUniqueWithoutChemistInput | RcpaReportUpdateWithWhereUniqueWithoutChemistInput[]
    updateMany?: RcpaReportUpdateManyWithWhereWithoutChemistInput | RcpaReportUpdateManyWithWhereWithoutChemistInput[]
    deleteMany?: RcpaReportScalarWhereInput | RcpaReportScalarWhereInput[]
  }

  export type ChemistTaskUpdateManyWithoutChemistNestedInput = {
    create?: XOR<ChemistTaskCreateWithoutChemistInput, ChemistTaskUncheckedCreateWithoutChemistInput> | ChemistTaskCreateWithoutChemistInput[] | ChemistTaskUncheckedCreateWithoutChemistInput[]
    connectOrCreate?: ChemistTaskCreateOrConnectWithoutChemistInput | ChemistTaskCreateOrConnectWithoutChemistInput[]
    upsert?: ChemistTaskUpsertWithWhereUniqueWithoutChemistInput | ChemistTaskUpsertWithWhereUniqueWithoutChemistInput[]
    createMany?: ChemistTaskCreateManyChemistInputEnvelope
    set?: ChemistTaskWhereUniqueInput | ChemistTaskWhereUniqueInput[]
    disconnect?: ChemistTaskWhereUniqueInput | ChemistTaskWhereUniqueInput[]
    delete?: ChemistTaskWhereUniqueInput | ChemistTaskWhereUniqueInput[]
    connect?: ChemistTaskWhereUniqueInput | ChemistTaskWhereUniqueInput[]
    update?: ChemistTaskUpdateWithWhereUniqueWithoutChemistInput | ChemistTaskUpdateWithWhereUniqueWithoutChemistInput[]
    updateMany?: ChemistTaskUpdateManyWithWhereWithoutChemistInput | ChemistTaskUpdateManyWithWhereWithoutChemistInput[]
    deleteMany?: ChemistTaskScalarWhereInput | ChemistTaskScalarWhereInput[]
  }

  export type ChemistNoteUncheckedUpdateManyWithoutChemistNestedInput = {
    create?: XOR<ChemistNoteCreateWithoutChemistInput, ChemistNoteUncheckedCreateWithoutChemistInput> | ChemistNoteCreateWithoutChemistInput[] | ChemistNoteUncheckedCreateWithoutChemistInput[]
    connectOrCreate?: ChemistNoteCreateOrConnectWithoutChemistInput | ChemistNoteCreateOrConnectWithoutChemistInput[]
    upsert?: ChemistNoteUpsertWithWhereUniqueWithoutChemistInput | ChemistNoteUpsertWithWhereUniqueWithoutChemistInput[]
    createMany?: ChemistNoteCreateManyChemistInputEnvelope
    set?: ChemistNoteWhereUniqueInput | ChemistNoteWhereUniqueInput[]
    disconnect?: ChemistNoteWhereUniqueInput | ChemistNoteWhereUniqueInput[]
    delete?: ChemistNoteWhereUniqueInput | ChemistNoteWhereUniqueInput[]
    connect?: ChemistNoteWhereUniqueInput | ChemistNoteWhereUniqueInput[]
    update?: ChemistNoteUpdateWithWhereUniqueWithoutChemistInput | ChemistNoteUpdateWithWhereUniqueWithoutChemistInput[]
    updateMany?: ChemistNoteUpdateManyWithWhereWithoutChemistInput | ChemistNoteUpdateManyWithWhereWithoutChemistInput[]
    deleteMany?: ChemistNoteScalarWhereInput | ChemistNoteScalarWhereInput[]
  }

  export type ChemistInteractionUncheckedUpdateManyWithoutChemistNestedInput = {
    create?: XOR<ChemistInteractionCreateWithoutChemistInput, ChemistInteractionUncheckedCreateWithoutChemistInput> | ChemistInteractionCreateWithoutChemistInput[] | ChemistInteractionUncheckedCreateWithoutChemistInput[]
    connectOrCreate?: ChemistInteractionCreateOrConnectWithoutChemistInput | ChemistInteractionCreateOrConnectWithoutChemistInput[]
    upsert?: ChemistInteractionUpsertWithWhereUniqueWithoutChemistInput | ChemistInteractionUpsertWithWhereUniqueWithoutChemistInput[]
    createMany?: ChemistInteractionCreateManyChemistInputEnvelope
    set?: ChemistInteractionWhereUniqueInput | ChemistInteractionWhereUniqueInput[]
    disconnect?: ChemistInteractionWhereUniqueInput | ChemistInteractionWhereUniqueInput[]
    delete?: ChemistInteractionWhereUniqueInput | ChemistInteractionWhereUniqueInput[]
    connect?: ChemistInteractionWhereUniqueInput | ChemistInteractionWhereUniqueInput[]
    update?: ChemistInteractionUpdateWithWhereUniqueWithoutChemistInput | ChemistInteractionUpdateWithWhereUniqueWithoutChemistInput[]
    updateMany?: ChemistInteractionUpdateManyWithWhereWithoutChemistInput | ChemistInteractionUpdateManyWithWhereWithoutChemistInput[]
    deleteMany?: ChemistInteractionScalarWhereInput | ChemistInteractionScalarWhereInput[]
  }

  export type DoctorChemistRelationUncheckedUpdateManyWithoutChemistNestedInput = {
    create?: XOR<DoctorChemistRelationCreateWithoutChemistInput, DoctorChemistRelationUncheckedCreateWithoutChemistInput> | DoctorChemistRelationCreateWithoutChemistInput[] | DoctorChemistRelationUncheckedCreateWithoutChemistInput[]
    connectOrCreate?: DoctorChemistRelationCreateOrConnectWithoutChemistInput | DoctorChemistRelationCreateOrConnectWithoutChemistInput[]
    upsert?: DoctorChemistRelationUpsertWithWhereUniqueWithoutChemistInput | DoctorChemistRelationUpsertWithWhereUniqueWithoutChemistInput[]
    createMany?: DoctorChemistRelationCreateManyChemistInputEnvelope
    set?: DoctorChemistRelationWhereUniqueInput | DoctorChemistRelationWhereUniqueInput[]
    disconnect?: DoctorChemistRelationWhereUniqueInput | DoctorChemistRelationWhereUniqueInput[]
    delete?: DoctorChemistRelationWhereUniqueInput | DoctorChemistRelationWhereUniqueInput[]
    connect?: DoctorChemistRelationWhereUniqueInput | DoctorChemistRelationWhereUniqueInput[]
    update?: DoctorChemistRelationUpdateWithWhereUniqueWithoutChemistInput | DoctorChemistRelationUpdateWithWhereUniqueWithoutChemistInput[]
    updateMany?: DoctorChemistRelationUpdateManyWithWhereWithoutChemistInput | DoctorChemistRelationUpdateManyWithWhereWithoutChemistInput[]
    deleteMany?: DoctorChemistRelationScalarWhereInput | DoctorChemistRelationScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutChemistNestedInput = {
    create?: XOR<OrderCreateWithoutChemistInput, OrderUncheckedCreateWithoutChemistInput> | OrderCreateWithoutChemistInput[] | OrderUncheckedCreateWithoutChemistInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutChemistInput | OrderCreateOrConnectWithoutChemistInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutChemistInput | OrderUpsertWithWhereUniqueWithoutChemistInput[]
    createMany?: OrderCreateManyChemistInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutChemistInput | OrderUpdateWithWhereUniqueWithoutChemistInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutChemistInput | OrderUpdateManyWithWhereWithoutChemistInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type RcpaReportUncheckedUpdateManyWithoutChemistNestedInput = {
    create?: XOR<RcpaReportCreateWithoutChemistInput, RcpaReportUncheckedCreateWithoutChemistInput> | RcpaReportCreateWithoutChemistInput[] | RcpaReportUncheckedCreateWithoutChemistInput[]
    connectOrCreate?: RcpaReportCreateOrConnectWithoutChemistInput | RcpaReportCreateOrConnectWithoutChemistInput[]
    upsert?: RcpaReportUpsertWithWhereUniqueWithoutChemistInput | RcpaReportUpsertWithWhereUniqueWithoutChemistInput[]
    createMany?: RcpaReportCreateManyChemistInputEnvelope
    set?: RcpaReportWhereUniqueInput | RcpaReportWhereUniqueInput[]
    disconnect?: RcpaReportWhereUniqueInput | RcpaReportWhereUniqueInput[]
    delete?: RcpaReportWhereUniqueInput | RcpaReportWhereUniqueInput[]
    connect?: RcpaReportWhereUniqueInput | RcpaReportWhereUniqueInput[]
    update?: RcpaReportUpdateWithWhereUniqueWithoutChemistInput | RcpaReportUpdateWithWhereUniqueWithoutChemistInput[]
    updateMany?: RcpaReportUpdateManyWithWhereWithoutChemistInput | RcpaReportUpdateManyWithWhereWithoutChemistInput[]
    deleteMany?: RcpaReportScalarWhereInput | RcpaReportScalarWhereInput[]
  }

  export type ChemistTaskUncheckedUpdateManyWithoutChemistNestedInput = {
    create?: XOR<ChemistTaskCreateWithoutChemistInput, ChemistTaskUncheckedCreateWithoutChemistInput> | ChemistTaskCreateWithoutChemistInput[] | ChemistTaskUncheckedCreateWithoutChemistInput[]
    connectOrCreate?: ChemistTaskCreateOrConnectWithoutChemistInput | ChemistTaskCreateOrConnectWithoutChemistInput[]
    upsert?: ChemistTaskUpsertWithWhereUniqueWithoutChemistInput | ChemistTaskUpsertWithWhereUniqueWithoutChemistInput[]
    createMany?: ChemistTaskCreateManyChemistInputEnvelope
    set?: ChemistTaskWhereUniqueInput | ChemistTaskWhereUniqueInput[]
    disconnect?: ChemistTaskWhereUniqueInput | ChemistTaskWhereUniqueInput[]
    delete?: ChemistTaskWhereUniqueInput | ChemistTaskWhereUniqueInput[]
    connect?: ChemistTaskWhereUniqueInput | ChemistTaskWhereUniqueInput[]
    update?: ChemistTaskUpdateWithWhereUniqueWithoutChemistInput | ChemistTaskUpdateWithWhereUniqueWithoutChemistInput[]
    updateMany?: ChemistTaskUpdateManyWithWhereWithoutChemistInput | ChemistTaskUpdateManyWithWhereWithoutChemistInput[]
    deleteMany?: ChemistTaskScalarWhereInput | ChemistTaskScalarWhereInput[]
  }

  export type ChemistCreateNestedOneWithoutNotesInput = {
    create?: XOR<ChemistCreateWithoutNotesInput, ChemistUncheckedCreateWithoutNotesInput>
    connectOrCreate?: ChemistCreateOrConnectWithoutNotesInput
    connect?: ChemistWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutChemistNotesInput = {
    create?: XOR<EmployeeCreateWithoutChemistNotesInput, EmployeeUncheckedCreateWithoutChemistNotesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutChemistNotesInput
    connect?: EmployeeWhereUniqueInput
  }

  export type ChemistUpdateOneRequiredWithoutNotesNestedInput = {
    create?: XOR<ChemistCreateWithoutNotesInput, ChemistUncheckedCreateWithoutNotesInput>
    connectOrCreate?: ChemistCreateOrConnectWithoutNotesInput
    upsert?: ChemistUpsertWithoutNotesInput
    connect?: ChemistWhereUniqueInput
    update?: XOR<XOR<ChemistUpdateToOneWithWhereWithoutNotesInput, ChemistUpdateWithoutNotesInput>, ChemistUncheckedUpdateWithoutNotesInput>
  }

  export type EmployeeUpdateOneRequiredWithoutChemistNotesNestedInput = {
    create?: XOR<EmployeeCreateWithoutChemistNotesInput, EmployeeUncheckedCreateWithoutChemistNotesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutChemistNotesInput
    upsert?: EmployeeUpsertWithoutChemistNotesInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutChemistNotesInput, EmployeeUpdateWithoutChemistNotesInput>, EmployeeUncheckedUpdateWithoutChemistNotesInput>
  }

  export type ChemistCreateNestedOneWithoutInteractionsInput = {
    create?: XOR<ChemistCreateWithoutInteractionsInput, ChemistUncheckedCreateWithoutInteractionsInput>
    connectOrCreate?: ChemistCreateOrConnectWithoutInteractionsInput
    connect?: ChemistWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutChemistInteractionsInput = {
    create?: XOR<EmployeeCreateWithoutChemistInteractionsInput, EmployeeUncheckedCreateWithoutChemistInteractionsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutChemistInteractionsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type ChemistTaskCreateNestedOneWithoutChemistInteractionsInput = {
    create?: XOR<ChemistTaskCreateWithoutChemistInteractionsInput, ChemistTaskUncheckedCreateWithoutChemistInteractionsInput>
    connectOrCreate?: ChemistTaskCreateOrConnectWithoutChemistInteractionsInput
    connect?: ChemistTaskWhereUniqueInput
  }

  export type ChemistUpdateOneRequiredWithoutInteractionsNestedInput = {
    create?: XOR<ChemistCreateWithoutInteractionsInput, ChemistUncheckedCreateWithoutInteractionsInput>
    connectOrCreate?: ChemistCreateOrConnectWithoutInteractionsInput
    upsert?: ChemistUpsertWithoutInteractionsInput
    connect?: ChemistWhereUniqueInput
    update?: XOR<XOR<ChemistUpdateToOneWithWhereWithoutInteractionsInput, ChemistUpdateWithoutInteractionsInput>, ChemistUncheckedUpdateWithoutInteractionsInput>
  }

  export type EmployeeUpdateOneRequiredWithoutChemistInteractionsNestedInput = {
    create?: XOR<EmployeeCreateWithoutChemistInteractionsInput, EmployeeUncheckedCreateWithoutChemistInteractionsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutChemistInteractionsInput
    upsert?: EmployeeUpsertWithoutChemistInteractionsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutChemistInteractionsInput, EmployeeUpdateWithoutChemistInteractionsInput>, EmployeeUncheckedUpdateWithoutChemistInteractionsInput>
  }

  export type ChemistTaskUpdateOneWithoutChemistInteractionsNestedInput = {
    create?: XOR<ChemistTaskCreateWithoutChemistInteractionsInput, ChemistTaskUncheckedCreateWithoutChemistInteractionsInput>
    connectOrCreate?: ChemistTaskCreateOrConnectWithoutChemistInteractionsInput
    upsert?: ChemistTaskUpsertWithoutChemistInteractionsInput
    disconnect?: ChemistTaskWhereInput | boolean
    delete?: ChemistTaskWhereInput | boolean
    connect?: ChemistTaskWhereUniqueInput
    update?: XOR<XOR<ChemistTaskUpdateToOneWithWhereWithoutChemistInteractionsInput, ChemistTaskUpdateWithoutChemistInteractionsInput>, ChemistTaskUncheckedUpdateWithoutChemistInteractionsInput>
  }

  export type DoctorCreateNestedOneWithoutChemistRelationsInput = {
    create?: XOR<DoctorCreateWithoutChemistRelationsInput, DoctorUncheckedCreateWithoutChemistRelationsInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutChemistRelationsInput
    connect?: DoctorWhereUniqueInput
  }

  export type ChemistCreateNestedOneWithoutDoctorRelationsInput = {
    create?: XOR<ChemistCreateWithoutDoctorRelationsInput, ChemistUncheckedCreateWithoutDoctorRelationsInput>
    connectOrCreate?: ChemistCreateOrConnectWithoutDoctorRelationsInput
    connect?: ChemistWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutDoctorChemistRelationsInput = {
    create?: XOR<EmployeeCreateWithoutDoctorChemistRelationsInput, EmployeeUncheckedCreateWithoutDoctorChemistRelationsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutDoctorChemistRelationsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type DoctorUpdateOneRequiredWithoutChemistRelationsNestedInput = {
    create?: XOR<DoctorCreateWithoutChemistRelationsInput, DoctorUncheckedCreateWithoutChemistRelationsInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutChemistRelationsInput
    upsert?: DoctorUpsertWithoutChemistRelationsInput
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutChemistRelationsInput, DoctorUpdateWithoutChemistRelationsInput>, DoctorUncheckedUpdateWithoutChemistRelationsInput>
  }

  export type ChemistUpdateOneRequiredWithoutDoctorRelationsNestedInput = {
    create?: XOR<ChemistCreateWithoutDoctorRelationsInput, ChemistUncheckedCreateWithoutDoctorRelationsInput>
    connectOrCreate?: ChemistCreateOrConnectWithoutDoctorRelationsInput
    upsert?: ChemistUpsertWithoutDoctorRelationsInput
    connect?: ChemistWhereUniqueInput
    update?: XOR<XOR<ChemistUpdateToOneWithWhereWithoutDoctorRelationsInput, ChemistUpdateWithoutDoctorRelationsInput>, ChemistUncheckedUpdateWithoutDoctorRelationsInput>
  }

  export type EmployeeUpdateOneRequiredWithoutDoctorChemistRelationsNestedInput = {
    create?: XOR<EmployeeCreateWithoutDoctorChemistRelationsInput, EmployeeUncheckedCreateWithoutDoctorChemistRelationsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutDoctorChemistRelationsInput
    upsert?: EmployeeUpsertWithoutDoctorChemistRelationsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutDoctorChemistRelationsInput, EmployeeUpdateWithoutDoctorChemistRelationsInput>, EmployeeUncheckedUpdateWithoutDoctorChemistRelationsInput>
  }

  export type ChemistCreateNestedOneWithoutOrdersInput = {
    create?: XOR<ChemistCreateWithoutOrdersInput, ChemistUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: ChemistCreateOrConnectWithoutOrdersInput
    connect?: ChemistWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutOrdersCreatedInput = {
    create?: XOR<EmployeeCreateWithoutOrdersCreatedInput, EmployeeUncheckedCreateWithoutOrdersCreatedInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutOrdersCreatedInput
    connect?: EmployeeWhereUniqueInput
  }

  export type OrderItemCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type OrderItemUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type EnumOrderStatusFieldUpdateOperationsInput = {
    set?: $Enums.OrderStatus
  }

  export type ChemistUpdateOneWithoutOrdersNestedInput = {
    create?: XOR<ChemistCreateWithoutOrdersInput, ChemistUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: ChemistCreateOrConnectWithoutOrdersInput
    upsert?: ChemistUpsertWithoutOrdersInput
    disconnect?: ChemistWhereInput | boolean
    delete?: ChemistWhereInput | boolean
    connect?: ChemistWhereUniqueInput
    update?: XOR<XOR<ChemistUpdateToOneWithWhereWithoutOrdersInput, ChemistUpdateWithoutOrdersInput>, ChemistUncheckedUpdateWithoutOrdersInput>
  }

  export type EmployeeUpdateOneRequiredWithoutOrdersCreatedNestedInput = {
    create?: XOR<EmployeeCreateWithoutOrdersCreatedInput, EmployeeUncheckedCreateWithoutOrdersCreatedInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutOrdersCreatedInput
    upsert?: EmployeeUpsertWithoutOrdersCreatedInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutOrdersCreatedInput, EmployeeUpdateWithoutOrdersCreatedInput>, EmployeeUncheckedUpdateWithoutOrdersCreatedInput>
  }

  export type OrderItemUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutOrderInput | OrderItemUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutOrderInput | OrderItemUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutOrderInput | OrderItemUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type OrderItemUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutOrderInput | OrderItemUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutOrderInput | OrderItemUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutOrderInput | OrderItemUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type OrderCreateNestedOneWithoutItemsInput = {
    create?: XOR<OrderCreateWithoutItemsInput, OrderUncheckedCreateWithoutItemsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutItemsInput
    connect?: OrderWhereUniqueInput
  }

  export type DrugCreateNestedOneWithoutOrderItemsInput = {
    create?: XOR<DrugCreateWithoutOrderItemsInput, DrugUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: DrugCreateOrConnectWithoutOrderItemsInput
    connect?: DrugWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type OrderUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<OrderCreateWithoutItemsInput, OrderUncheckedCreateWithoutItemsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutItemsInput
    upsert?: OrderUpsertWithoutItemsInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutItemsInput, OrderUpdateWithoutItemsInput>, OrderUncheckedUpdateWithoutItemsInput>
  }

  export type DrugUpdateOneRequiredWithoutOrderItemsNestedInput = {
    create?: XOR<DrugCreateWithoutOrderItemsInput, DrugUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: DrugCreateOrConnectWithoutOrderItemsInput
    upsert?: DrugUpsertWithoutOrderItemsInput
    connect?: DrugWhereUniqueInput
    update?: XOR<XOR<DrugUpdateToOneWithWhereWithoutOrderItemsInput, DrugUpdateWithoutOrderItemsInput>, DrugUncheckedUpdateWithoutOrderItemsInput>
  }

  export type EmployeeCreateNestedOneWithoutDcrReportsInput = {
    create?: XOR<EmployeeCreateWithoutDcrReportsInput, EmployeeUncheckedCreateWithoutDcrReportsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutDcrReportsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type DoctorTaskCreateNestedOneWithoutDcrReportsInput = {
    create?: XOR<DoctorTaskCreateWithoutDcrReportsInput, DoctorTaskUncheckedCreateWithoutDcrReportsInput>
    connectOrCreate?: DoctorTaskCreateOrConnectWithoutDcrReportsInput
    connect?: DoctorTaskWhereUniqueInput
  }

  export type ChemistTaskCreateNestedOneWithoutDcrReportsInput = {
    create?: XOR<ChemistTaskCreateWithoutDcrReportsInput, ChemistTaskUncheckedCreateWithoutDcrReportsInput>
    connectOrCreate?: ChemistTaskCreateOrConnectWithoutDcrReportsInput
    connect?: ChemistTaskWhereUniqueInput
  }

  export type TourPlanTaskCreateNestedOneWithoutDcrReportsInput = {
    create?: XOR<TourPlanTaskCreateWithoutDcrReportsInput, TourPlanTaskUncheckedCreateWithoutDcrReportsInput>
    connectOrCreate?: TourPlanTaskCreateOrConnectWithoutDcrReportsInput
    connect?: TourPlanTaskWhereUniqueInput
  }

  export type NullableEnumTaskTypeReferenceFieldUpdateOperationsInput = {
    set?: $Enums.TaskTypeReference | null
  }

  export type EmployeeUpdateOneRequiredWithoutDcrReportsNestedInput = {
    create?: XOR<EmployeeCreateWithoutDcrReportsInput, EmployeeUncheckedCreateWithoutDcrReportsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutDcrReportsInput
    upsert?: EmployeeUpsertWithoutDcrReportsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutDcrReportsInput, EmployeeUpdateWithoutDcrReportsInput>, EmployeeUncheckedUpdateWithoutDcrReportsInput>
  }

  export type DoctorTaskUpdateOneWithoutDcrReportsNestedInput = {
    create?: XOR<DoctorTaskCreateWithoutDcrReportsInput, DoctorTaskUncheckedCreateWithoutDcrReportsInput>
    connectOrCreate?: DoctorTaskCreateOrConnectWithoutDcrReportsInput
    upsert?: DoctorTaskUpsertWithoutDcrReportsInput
    disconnect?: DoctorTaskWhereInput | boolean
    delete?: DoctorTaskWhereInput | boolean
    connect?: DoctorTaskWhereUniqueInput
    update?: XOR<XOR<DoctorTaskUpdateToOneWithWhereWithoutDcrReportsInput, DoctorTaskUpdateWithoutDcrReportsInput>, DoctorTaskUncheckedUpdateWithoutDcrReportsInput>
  }

  export type ChemistTaskUpdateOneWithoutDcrReportsNestedInput = {
    create?: XOR<ChemistTaskCreateWithoutDcrReportsInput, ChemistTaskUncheckedCreateWithoutDcrReportsInput>
    connectOrCreate?: ChemistTaskCreateOrConnectWithoutDcrReportsInput
    upsert?: ChemistTaskUpsertWithoutDcrReportsInput
    disconnect?: ChemistTaskWhereInput | boolean
    delete?: ChemistTaskWhereInput | boolean
    connect?: ChemistTaskWhereUniqueInput
    update?: XOR<XOR<ChemistTaskUpdateToOneWithWhereWithoutDcrReportsInput, ChemistTaskUpdateWithoutDcrReportsInput>, ChemistTaskUncheckedUpdateWithoutDcrReportsInput>
  }

  export type TourPlanTaskUpdateOneWithoutDcrReportsNestedInput = {
    create?: XOR<TourPlanTaskCreateWithoutDcrReportsInput, TourPlanTaskUncheckedCreateWithoutDcrReportsInput>
    connectOrCreate?: TourPlanTaskCreateOrConnectWithoutDcrReportsInput
    upsert?: TourPlanTaskUpsertWithoutDcrReportsInput
    disconnect?: TourPlanTaskWhereInput | boolean
    delete?: TourPlanTaskWhereInput | boolean
    connect?: TourPlanTaskWhereUniqueInput
    update?: XOR<XOR<TourPlanTaskUpdateToOneWithWhereWithoutDcrReportsInput, TourPlanTaskUpdateWithoutDcrReportsInput>, TourPlanTaskUncheckedUpdateWithoutDcrReportsInput>
  }

  export type EmployeeCreateNestedOneWithoutRcpaReportsInput = {
    create?: XOR<EmployeeCreateWithoutRcpaReportsInput, EmployeeUncheckedCreateWithoutRcpaReportsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutRcpaReportsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type ChemistCreateNestedOneWithoutRcpaReportsInput = {
    create?: XOR<ChemistCreateWithoutRcpaReportsInput, ChemistUncheckedCreateWithoutRcpaReportsInput>
    connectOrCreate?: ChemistCreateOrConnectWithoutRcpaReportsInput
    connect?: ChemistWhereUniqueInput
  }

  export type RcpaDrugDataCreateNestedManyWithoutRcpaReportInput = {
    create?: XOR<RcpaDrugDataCreateWithoutRcpaReportInput, RcpaDrugDataUncheckedCreateWithoutRcpaReportInput> | RcpaDrugDataCreateWithoutRcpaReportInput[] | RcpaDrugDataUncheckedCreateWithoutRcpaReportInput[]
    connectOrCreate?: RcpaDrugDataCreateOrConnectWithoutRcpaReportInput | RcpaDrugDataCreateOrConnectWithoutRcpaReportInput[]
    createMany?: RcpaDrugDataCreateManyRcpaReportInputEnvelope
    connect?: RcpaDrugDataWhereUniqueInput | RcpaDrugDataWhereUniqueInput[]
  }

  export type RcpaDrugDataUncheckedCreateNestedManyWithoutRcpaReportInput = {
    create?: XOR<RcpaDrugDataCreateWithoutRcpaReportInput, RcpaDrugDataUncheckedCreateWithoutRcpaReportInput> | RcpaDrugDataCreateWithoutRcpaReportInput[] | RcpaDrugDataUncheckedCreateWithoutRcpaReportInput[]
    connectOrCreate?: RcpaDrugDataCreateOrConnectWithoutRcpaReportInput | RcpaDrugDataCreateOrConnectWithoutRcpaReportInput[]
    createMany?: RcpaDrugDataCreateManyRcpaReportInputEnvelope
    connect?: RcpaDrugDataWhereUniqueInput | RcpaDrugDataWhereUniqueInput[]
  }

  export type EmployeeUpdateOneRequiredWithoutRcpaReportsNestedInput = {
    create?: XOR<EmployeeCreateWithoutRcpaReportsInput, EmployeeUncheckedCreateWithoutRcpaReportsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutRcpaReportsInput
    upsert?: EmployeeUpsertWithoutRcpaReportsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutRcpaReportsInput, EmployeeUpdateWithoutRcpaReportsInput>, EmployeeUncheckedUpdateWithoutRcpaReportsInput>
  }

  export type ChemistUpdateOneRequiredWithoutRcpaReportsNestedInput = {
    create?: XOR<ChemistCreateWithoutRcpaReportsInput, ChemistUncheckedCreateWithoutRcpaReportsInput>
    connectOrCreate?: ChemistCreateOrConnectWithoutRcpaReportsInput
    upsert?: ChemistUpsertWithoutRcpaReportsInput
    connect?: ChemistWhereUniqueInput
    update?: XOR<XOR<ChemistUpdateToOneWithWhereWithoutRcpaReportsInput, ChemistUpdateWithoutRcpaReportsInput>, ChemistUncheckedUpdateWithoutRcpaReportsInput>
  }

  export type RcpaDrugDataUpdateManyWithoutRcpaReportNestedInput = {
    create?: XOR<RcpaDrugDataCreateWithoutRcpaReportInput, RcpaDrugDataUncheckedCreateWithoutRcpaReportInput> | RcpaDrugDataCreateWithoutRcpaReportInput[] | RcpaDrugDataUncheckedCreateWithoutRcpaReportInput[]
    connectOrCreate?: RcpaDrugDataCreateOrConnectWithoutRcpaReportInput | RcpaDrugDataCreateOrConnectWithoutRcpaReportInput[]
    upsert?: RcpaDrugDataUpsertWithWhereUniqueWithoutRcpaReportInput | RcpaDrugDataUpsertWithWhereUniqueWithoutRcpaReportInput[]
    createMany?: RcpaDrugDataCreateManyRcpaReportInputEnvelope
    set?: RcpaDrugDataWhereUniqueInput | RcpaDrugDataWhereUniqueInput[]
    disconnect?: RcpaDrugDataWhereUniqueInput | RcpaDrugDataWhereUniqueInput[]
    delete?: RcpaDrugDataWhereUniqueInput | RcpaDrugDataWhereUniqueInput[]
    connect?: RcpaDrugDataWhereUniqueInput | RcpaDrugDataWhereUniqueInput[]
    update?: RcpaDrugDataUpdateWithWhereUniqueWithoutRcpaReportInput | RcpaDrugDataUpdateWithWhereUniqueWithoutRcpaReportInput[]
    updateMany?: RcpaDrugDataUpdateManyWithWhereWithoutRcpaReportInput | RcpaDrugDataUpdateManyWithWhereWithoutRcpaReportInput[]
    deleteMany?: RcpaDrugDataScalarWhereInput | RcpaDrugDataScalarWhereInput[]
  }

  export type RcpaDrugDataUncheckedUpdateManyWithoutRcpaReportNestedInput = {
    create?: XOR<RcpaDrugDataCreateWithoutRcpaReportInput, RcpaDrugDataUncheckedCreateWithoutRcpaReportInput> | RcpaDrugDataCreateWithoutRcpaReportInput[] | RcpaDrugDataUncheckedCreateWithoutRcpaReportInput[]
    connectOrCreate?: RcpaDrugDataCreateOrConnectWithoutRcpaReportInput | RcpaDrugDataCreateOrConnectWithoutRcpaReportInput[]
    upsert?: RcpaDrugDataUpsertWithWhereUniqueWithoutRcpaReportInput | RcpaDrugDataUpsertWithWhereUniqueWithoutRcpaReportInput[]
    createMany?: RcpaDrugDataCreateManyRcpaReportInputEnvelope
    set?: RcpaDrugDataWhereUniqueInput | RcpaDrugDataWhereUniqueInput[]
    disconnect?: RcpaDrugDataWhereUniqueInput | RcpaDrugDataWhereUniqueInput[]
    delete?: RcpaDrugDataWhereUniqueInput | RcpaDrugDataWhereUniqueInput[]
    connect?: RcpaDrugDataWhereUniqueInput | RcpaDrugDataWhereUniqueInput[]
    update?: RcpaDrugDataUpdateWithWhereUniqueWithoutRcpaReportInput | RcpaDrugDataUpdateWithWhereUniqueWithoutRcpaReportInput[]
    updateMany?: RcpaDrugDataUpdateManyWithWhereWithoutRcpaReportInput | RcpaDrugDataUpdateManyWithWhereWithoutRcpaReportInput[]
    deleteMany?: RcpaDrugDataScalarWhereInput | RcpaDrugDataScalarWhereInput[]
  }

  export type RcpaReportCreateNestedOneWithoutDrugDataInput = {
    create?: XOR<RcpaReportCreateWithoutDrugDataInput, RcpaReportUncheckedCreateWithoutDrugDataInput>
    connectOrCreate?: RcpaReportCreateOrConnectWithoutDrugDataInput
    connect?: RcpaReportWhereUniqueInput
  }

  export type DrugCreateNestedOneWithoutRcpaDataInput = {
    create?: XOR<DrugCreateWithoutRcpaDataInput, DrugUncheckedCreateWithoutRcpaDataInput>
    connectOrCreate?: DrugCreateOrConnectWithoutRcpaDataInput
    connect?: DrugWhereUniqueInput
  }

  export type RcpaReportUpdateOneRequiredWithoutDrugDataNestedInput = {
    create?: XOR<RcpaReportCreateWithoutDrugDataInput, RcpaReportUncheckedCreateWithoutDrugDataInput>
    connectOrCreate?: RcpaReportCreateOrConnectWithoutDrugDataInput
    upsert?: RcpaReportUpsertWithoutDrugDataInput
    connect?: RcpaReportWhereUniqueInput
    update?: XOR<XOR<RcpaReportUpdateToOneWithWhereWithoutDrugDataInput, RcpaReportUpdateWithoutDrugDataInput>, RcpaReportUncheckedUpdateWithoutDrugDataInput>
  }

  export type DrugUpdateOneWithoutRcpaDataNestedInput = {
    create?: XOR<DrugCreateWithoutRcpaDataInput, DrugUncheckedCreateWithoutRcpaDataInput>
    connectOrCreate?: DrugCreateOrConnectWithoutRcpaDataInput
    upsert?: DrugUpsertWithoutRcpaDataInput
    disconnect?: DrugWhereInput | boolean
    delete?: DrugWhereInput | boolean
    connect?: DrugWhereUniqueInput
    update?: XOR<XOR<DrugUpdateToOneWithWhereWithoutRcpaDataInput, DrugUpdateWithoutRcpaDataInput>, DrugUncheckedUpdateWithoutRcpaDataInput>
  }

  export type EmployeeCreateNestedOneWithoutCheckInsInput = {
    create?: XOR<EmployeeCreateWithoutCheckInsInput, EmployeeUncheckedCreateWithoutCheckInsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCheckInsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeUpdateOneRequiredWithoutCheckInsNestedInput = {
    create?: XOR<EmployeeCreateWithoutCheckInsInput, EmployeeUncheckedCreateWithoutCheckInsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCheckInsInput
    upsert?: EmployeeUpsertWithoutCheckInsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutCheckInsInput, EmployeeUpdateWithoutCheckInsInput>, EmployeeUncheckedUpdateWithoutCheckInsInput>
  }

  export type EmployeeCreateNestedOneWithoutTaskPlansInput = {
    create?: XOR<EmployeeCreateWithoutTaskPlansInput, EmployeeUncheckedCreateWithoutTaskPlansInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutTaskPlansInput
    connect?: EmployeeWhereUniqueInput
  }

  export type DoctorTaskCreateNestedManyWithoutPlannerInput = {
    create?: XOR<DoctorTaskCreateWithoutPlannerInput, DoctorTaskUncheckedCreateWithoutPlannerInput> | DoctorTaskCreateWithoutPlannerInput[] | DoctorTaskUncheckedCreateWithoutPlannerInput[]
    connectOrCreate?: DoctorTaskCreateOrConnectWithoutPlannerInput | DoctorTaskCreateOrConnectWithoutPlannerInput[]
    createMany?: DoctorTaskCreateManyPlannerInputEnvelope
    connect?: DoctorTaskWhereUniqueInput | DoctorTaskWhereUniqueInput[]
  }

  export type ChemistTaskCreateNestedManyWithoutPlannerInput = {
    create?: XOR<ChemistTaskCreateWithoutPlannerInput, ChemistTaskUncheckedCreateWithoutPlannerInput> | ChemistTaskCreateWithoutPlannerInput[] | ChemistTaskUncheckedCreateWithoutPlannerInput[]
    connectOrCreate?: ChemistTaskCreateOrConnectWithoutPlannerInput | ChemistTaskCreateOrConnectWithoutPlannerInput[]
    createMany?: ChemistTaskCreateManyPlannerInputEnvelope
    connect?: ChemistTaskWhereUniqueInput | ChemistTaskWhereUniqueInput[]
  }

  export type TourPlanTaskCreateNestedManyWithoutPlannerInput = {
    create?: XOR<TourPlanTaskCreateWithoutPlannerInput, TourPlanTaskUncheckedCreateWithoutPlannerInput> | TourPlanTaskCreateWithoutPlannerInput[] | TourPlanTaskUncheckedCreateWithoutPlannerInput[]
    connectOrCreate?: TourPlanTaskCreateOrConnectWithoutPlannerInput | TourPlanTaskCreateOrConnectWithoutPlannerInput[]
    createMany?: TourPlanTaskCreateManyPlannerInputEnvelope
    connect?: TourPlanTaskWhereUniqueInput | TourPlanTaskWhereUniqueInput[]
  }

  export type DoctorTaskUncheckedCreateNestedManyWithoutPlannerInput = {
    create?: XOR<DoctorTaskCreateWithoutPlannerInput, DoctorTaskUncheckedCreateWithoutPlannerInput> | DoctorTaskCreateWithoutPlannerInput[] | DoctorTaskUncheckedCreateWithoutPlannerInput[]
    connectOrCreate?: DoctorTaskCreateOrConnectWithoutPlannerInput | DoctorTaskCreateOrConnectWithoutPlannerInput[]
    createMany?: DoctorTaskCreateManyPlannerInputEnvelope
    connect?: DoctorTaskWhereUniqueInput | DoctorTaskWhereUniqueInput[]
  }

  export type ChemistTaskUncheckedCreateNestedManyWithoutPlannerInput = {
    create?: XOR<ChemistTaskCreateWithoutPlannerInput, ChemistTaskUncheckedCreateWithoutPlannerInput> | ChemistTaskCreateWithoutPlannerInput[] | ChemistTaskUncheckedCreateWithoutPlannerInput[]
    connectOrCreate?: ChemistTaskCreateOrConnectWithoutPlannerInput | ChemistTaskCreateOrConnectWithoutPlannerInput[]
    createMany?: ChemistTaskCreateManyPlannerInputEnvelope
    connect?: ChemistTaskWhereUniqueInput | ChemistTaskWhereUniqueInput[]
  }

  export type TourPlanTaskUncheckedCreateNestedManyWithoutPlannerInput = {
    create?: XOR<TourPlanTaskCreateWithoutPlannerInput, TourPlanTaskUncheckedCreateWithoutPlannerInput> | TourPlanTaskCreateWithoutPlannerInput[] | TourPlanTaskUncheckedCreateWithoutPlannerInput[]
    connectOrCreate?: TourPlanTaskCreateOrConnectWithoutPlannerInput | TourPlanTaskCreateOrConnectWithoutPlannerInput[]
    createMany?: TourPlanTaskCreateManyPlannerInputEnvelope
    connect?: TourPlanTaskWhereUniqueInput | TourPlanTaskWhereUniqueInput[]
  }

  export type EnumTaskPlannerStatusFieldUpdateOperationsInput = {
    set?: $Enums.TaskPlannerStatus
  }

  export type EmployeeUpdateOneRequiredWithoutTaskPlansNestedInput = {
    create?: XOR<EmployeeCreateWithoutTaskPlansInput, EmployeeUncheckedCreateWithoutTaskPlansInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutTaskPlansInput
    upsert?: EmployeeUpsertWithoutTaskPlansInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutTaskPlansInput, EmployeeUpdateWithoutTaskPlansInput>, EmployeeUncheckedUpdateWithoutTaskPlansInput>
  }

  export type DoctorTaskUpdateManyWithoutPlannerNestedInput = {
    create?: XOR<DoctorTaskCreateWithoutPlannerInput, DoctorTaskUncheckedCreateWithoutPlannerInput> | DoctorTaskCreateWithoutPlannerInput[] | DoctorTaskUncheckedCreateWithoutPlannerInput[]
    connectOrCreate?: DoctorTaskCreateOrConnectWithoutPlannerInput | DoctorTaskCreateOrConnectWithoutPlannerInput[]
    upsert?: DoctorTaskUpsertWithWhereUniqueWithoutPlannerInput | DoctorTaskUpsertWithWhereUniqueWithoutPlannerInput[]
    createMany?: DoctorTaskCreateManyPlannerInputEnvelope
    set?: DoctorTaskWhereUniqueInput | DoctorTaskWhereUniqueInput[]
    disconnect?: DoctorTaskWhereUniqueInput | DoctorTaskWhereUniqueInput[]
    delete?: DoctorTaskWhereUniqueInput | DoctorTaskWhereUniqueInput[]
    connect?: DoctorTaskWhereUniqueInput | DoctorTaskWhereUniqueInput[]
    update?: DoctorTaskUpdateWithWhereUniqueWithoutPlannerInput | DoctorTaskUpdateWithWhereUniqueWithoutPlannerInput[]
    updateMany?: DoctorTaskUpdateManyWithWhereWithoutPlannerInput | DoctorTaskUpdateManyWithWhereWithoutPlannerInput[]
    deleteMany?: DoctorTaskScalarWhereInput | DoctorTaskScalarWhereInput[]
  }

  export type ChemistTaskUpdateManyWithoutPlannerNestedInput = {
    create?: XOR<ChemistTaskCreateWithoutPlannerInput, ChemistTaskUncheckedCreateWithoutPlannerInput> | ChemistTaskCreateWithoutPlannerInput[] | ChemistTaskUncheckedCreateWithoutPlannerInput[]
    connectOrCreate?: ChemistTaskCreateOrConnectWithoutPlannerInput | ChemistTaskCreateOrConnectWithoutPlannerInput[]
    upsert?: ChemistTaskUpsertWithWhereUniqueWithoutPlannerInput | ChemistTaskUpsertWithWhereUniqueWithoutPlannerInput[]
    createMany?: ChemistTaskCreateManyPlannerInputEnvelope
    set?: ChemistTaskWhereUniqueInput | ChemistTaskWhereUniqueInput[]
    disconnect?: ChemistTaskWhereUniqueInput | ChemistTaskWhereUniqueInput[]
    delete?: ChemistTaskWhereUniqueInput | ChemistTaskWhereUniqueInput[]
    connect?: ChemistTaskWhereUniqueInput | ChemistTaskWhereUniqueInput[]
    update?: ChemistTaskUpdateWithWhereUniqueWithoutPlannerInput | ChemistTaskUpdateWithWhereUniqueWithoutPlannerInput[]
    updateMany?: ChemistTaskUpdateManyWithWhereWithoutPlannerInput | ChemistTaskUpdateManyWithWhereWithoutPlannerInput[]
    deleteMany?: ChemistTaskScalarWhereInput | ChemistTaskScalarWhereInput[]
  }

  export type TourPlanTaskUpdateManyWithoutPlannerNestedInput = {
    create?: XOR<TourPlanTaskCreateWithoutPlannerInput, TourPlanTaskUncheckedCreateWithoutPlannerInput> | TourPlanTaskCreateWithoutPlannerInput[] | TourPlanTaskUncheckedCreateWithoutPlannerInput[]
    connectOrCreate?: TourPlanTaskCreateOrConnectWithoutPlannerInput | TourPlanTaskCreateOrConnectWithoutPlannerInput[]
    upsert?: TourPlanTaskUpsertWithWhereUniqueWithoutPlannerInput | TourPlanTaskUpsertWithWhereUniqueWithoutPlannerInput[]
    createMany?: TourPlanTaskCreateManyPlannerInputEnvelope
    set?: TourPlanTaskWhereUniqueInput | TourPlanTaskWhereUniqueInput[]
    disconnect?: TourPlanTaskWhereUniqueInput | TourPlanTaskWhereUniqueInput[]
    delete?: TourPlanTaskWhereUniqueInput | TourPlanTaskWhereUniqueInput[]
    connect?: TourPlanTaskWhereUniqueInput | TourPlanTaskWhereUniqueInput[]
    update?: TourPlanTaskUpdateWithWhereUniqueWithoutPlannerInput | TourPlanTaskUpdateWithWhereUniqueWithoutPlannerInput[]
    updateMany?: TourPlanTaskUpdateManyWithWhereWithoutPlannerInput | TourPlanTaskUpdateManyWithWhereWithoutPlannerInput[]
    deleteMany?: TourPlanTaskScalarWhereInput | TourPlanTaskScalarWhereInput[]
  }

  export type DoctorTaskUncheckedUpdateManyWithoutPlannerNestedInput = {
    create?: XOR<DoctorTaskCreateWithoutPlannerInput, DoctorTaskUncheckedCreateWithoutPlannerInput> | DoctorTaskCreateWithoutPlannerInput[] | DoctorTaskUncheckedCreateWithoutPlannerInput[]
    connectOrCreate?: DoctorTaskCreateOrConnectWithoutPlannerInput | DoctorTaskCreateOrConnectWithoutPlannerInput[]
    upsert?: DoctorTaskUpsertWithWhereUniqueWithoutPlannerInput | DoctorTaskUpsertWithWhereUniqueWithoutPlannerInput[]
    createMany?: DoctorTaskCreateManyPlannerInputEnvelope
    set?: DoctorTaskWhereUniqueInput | DoctorTaskWhereUniqueInput[]
    disconnect?: DoctorTaskWhereUniqueInput | DoctorTaskWhereUniqueInput[]
    delete?: DoctorTaskWhereUniqueInput | DoctorTaskWhereUniqueInput[]
    connect?: DoctorTaskWhereUniqueInput | DoctorTaskWhereUniqueInput[]
    update?: DoctorTaskUpdateWithWhereUniqueWithoutPlannerInput | DoctorTaskUpdateWithWhereUniqueWithoutPlannerInput[]
    updateMany?: DoctorTaskUpdateManyWithWhereWithoutPlannerInput | DoctorTaskUpdateManyWithWhereWithoutPlannerInput[]
    deleteMany?: DoctorTaskScalarWhereInput | DoctorTaskScalarWhereInput[]
  }

  export type ChemistTaskUncheckedUpdateManyWithoutPlannerNestedInput = {
    create?: XOR<ChemistTaskCreateWithoutPlannerInput, ChemistTaskUncheckedCreateWithoutPlannerInput> | ChemistTaskCreateWithoutPlannerInput[] | ChemistTaskUncheckedCreateWithoutPlannerInput[]
    connectOrCreate?: ChemistTaskCreateOrConnectWithoutPlannerInput | ChemistTaskCreateOrConnectWithoutPlannerInput[]
    upsert?: ChemistTaskUpsertWithWhereUniqueWithoutPlannerInput | ChemistTaskUpsertWithWhereUniqueWithoutPlannerInput[]
    createMany?: ChemistTaskCreateManyPlannerInputEnvelope
    set?: ChemistTaskWhereUniqueInput | ChemistTaskWhereUniqueInput[]
    disconnect?: ChemistTaskWhereUniqueInput | ChemistTaskWhereUniqueInput[]
    delete?: ChemistTaskWhereUniqueInput | ChemistTaskWhereUniqueInput[]
    connect?: ChemistTaskWhereUniqueInput | ChemistTaskWhereUniqueInput[]
    update?: ChemistTaskUpdateWithWhereUniqueWithoutPlannerInput | ChemistTaskUpdateWithWhereUniqueWithoutPlannerInput[]
    updateMany?: ChemistTaskUpdateManyWithWhereWithoutPlannerInput | ChemistTaskUpdateManyWithWhereWithoutPlannerInput[]
    deleteMany?: ChemistTaskScalarWhereInput | ChemistTaskScalarWhereInput[]
  }

  export type TourPlanTaskUncheckedUpdateManyWithoutPlannerNestedInput = {
    create?: XOR<TourPlanTaskCreateWithoutPlannerInput, TourPlanTaskUncheckedCreateWithoutPlannerInput> | TourPlanTaskCreateWithoutPlannerInput[] | TourPlanTaskUncheckedCreateWithoutPlannerInput[]
    connectOrCreate?: TourPlanTaskCreateOrConnectWithoutPlannerInput | TourPlanTaskCreateOrConnectWithoutPlannerInput[]
    upsert?: TourPlanTaskUpsertWithWhereUniqueWithoutPlannerInput | TourPlanTaskUpsertWithWhereUniqueWithoutPlannerInput[]
    createMany?: TourPlanTaskCreateManyPlannerInputEnvelope
    set?: TourPlanTaskWhereUniqueInput | TourPlanTaskWhereUniqueInput[]
    disconnect?: TourPlanTaskWhereUniqueInput | TourPlanTaskWhereUniqueInput[]
    delete?: TourPlanTaskWhereUniqueInput | TourPlanTaskWhereUniqueInput[]
    connect?: TourPlanTaskWhereUniqueInput | TourPlanTaskWhereUniqueInput[]
    update?: TourPlanTaskUpdateWithWhereUniqueWithoutPlannerInput | TourPlanTaskUpdateWithWhereUniqueWithoutPlannerInput[]
    updateMany?: TourPlanTaskUpdateManyWithWhereWithoutPlannerInput | TourPlanTaskUpdateManyWithWhereWithoutPlannerInput[]
    deleteMany?: TourPlanTaskScalarWhereInput | TourPlanTaskScalarWhereInput[]
  }

  export type TaskPlannerCreateNestedOneWithoutDoctorTasksInput = {
    create?: XOR<TaskPlannerCreateWithoutDoctorTasksInput, TaskPlannerUncheckedCreateWithoutDoctorTasksInput>
    connectOrCreate?: TaskPlannerCreateOrConnectWithoutDoctorTasksInput
    connect?: TaskPlannerWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutDoctorTasksInput = {
    create?: XOR<EmployeeCreateWithoutDoctorTasksInput, EmployeeUncheckedCreateWithoutDoctorTasksInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutDoctorTasksInput
    connect?: EmployeeWhereUniqueInput
  }

  export type DoctorCreateNestedOneWithoutDoctorTaskInput = {
    create?: XOR<DoctorCreateWithoutDoctorTaskInput, DoctorUncheckedCreateWithoutDoctorTaskInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutDoctorTaskInput
    connect?: DoctorWhereUniqueInput
  }

  export type DoctorInteractionCreateNestedManyWithoutDoctorTaskInput = {
    create?: XOR<DoctorInteractionCreateWithoutDoctorTaskInput, DoctorInteractionUncheckedCreateWithoutDoctorTaskInput> | DoctorInteractionCreateWithoutDoctorTaskInput[] | DoctorInteractionUncheckedCreateWithoutDoctorTaskInput[]
    connectOrCreate?: DoctorInteractionCreateOrConnectWithoutDoctorTaskInput | DoctorInteractionCreateOrConnectWithoutDoctorTaskInput[]
    createMany?: DoctorInteractionCreateManyDoctorTaskInputEnvelope
    connect?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
  }

  export type DcrReportCreateNestedManyWithoutDoctorTaskInput = {
    create?: XOR<DcrReportCreateWithoutDoctorTaskInput, DcrReportUncheckedCreateWithoutDoctorTaskInput> | DcrReportCreateWithoutDoctorTaskInput[] | DcrReportUncheckedCreateWithoutDoctorTaskInput[]
    connectOrCreate?: DcrReportCreateOrConnectWithoutDoctorTaskInput | DcrReportCreateOrConnectWithoutDoctorTaskInput[]
    createMany?: DcrReportCreateManyDoctorTaskInputEnvelope
    connect?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
  }

  export type DoctorInteractionUncheckedCreateNestedManyWithoutDoctorTaskInput = {
    create?: XOR<DoctorInteractionCreateWithoutDoctorTaskInput, DoctorInteractionUncheckedCreateWithoutDoctorTaskInput> | DoctorInteractionCreateWithoutDoctorTaskInput[] | DoctorInteractionUncheckedCreateWithoutDoctorTaskInput[]
    connectOrCreate?: DoctorInteractionCreateOrConnectWithoutDoctorTaskInput | DoctorInteractionCreateOrConnectWithoutDoctorTaskInput[]
    createMany?: DoctorInteractionCreateManyDoctorTaskInputEnvelope
    connect?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
  }

  export type DcrReportUncheckedCreateNestedManyWithoutDoctorTaskInput = {
    create?: XOR<DcrReportCreateWithoutDoctorTaskInput, DcrReportUncheckedCreateWithoutDoctorTaskInput> | DcrReportCreateWithoutDoctorTaskInput[] | DcrReportUncheckedCreateWithoutDoctorTaskInput[]
    connectOrCreate?: DcrReportCreateOrConnectWithoutDoctorTaskInput | DcrReportCreateOrConnectWithoutDoctorTaskInput[]
    createMany?: DcrReportCreateManyDoctorTaskInputEnvelope
    connect?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
  }

  export type EnumTaskStatusFieldUpdateOperationsInput = {
    set?: $Enums.TaskStatus
  }

  export type TaskPlannerUpdateOneRequiredWithoutDoctorTasksNestedInput = {
    create?: XOR<TaskPlannerCreateWithoutDoctorTasksInput, TaskPlannerUncheckedCreateWithoutDoctorTasksInput>
    connectOrCreate?: TaskPlannerCreateOrConnectWithoutDoctorTasksInput
    upsert?: TaskPlannerUpsertWithoutDoctorTasksInput
    connect?: TaskPlannerWhereUniqueInput
    update?: XOR<XOR<TaskPlannerUpdateToOneWithWhereWithoutDoctorTasksInput, TaskPlannerUpdateWithoutDoctorTasksInput>, TaskPlannerUncheckedUpdateWithoutDoctorTasksInput>
  }

  export type EmployeeUpdateOneRequiredWithoutDoctorTasksNestedInput = {
    create?: XOR<EmployeeCreateWithoutDoctorTasksInput, EmployeeUncheckedCreateWithoutDoctorTasksInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutDoctorTasksInput
    upsert?: EmployeeUpsertWithoutDoctorTasksInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutDoctorTasksInput, EmployeeUpdateWithoutDoctorTasksInput>, EmployeeUncheckedUpdateWithoutDoctorTasksInput>
  }

  export type DoctorUpdateOneRequiredWithoutDoctorTaskNestedInput = {
    create?: XOR<DoctorCreateWithoutDoctorTaskInput, DoctorUncheckedCreateWithoutDoctorTaskInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutDoctorTaskInput
    upsert?: DoctorUpsertWithoutDoctorTaskInput
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutDoctorTaskInput, DoctorUpdateWithoutDoctorTaskInput>, DoctorUncheckedUpdateWithoutDoctorTaskInput>
  }

  export type DoctorInteractionUpdateManyWithoutDoctorTaskNestedInput = {
    create?: XOR<DoctorInteractionCreateWithoutDoctorTaskInput, DoctorInteractionUncheckedCreateWithoutDoctorTaskInput> | DoctorInteractionCreateWithoutDoctorTaskInput[] | DoctorInteractionUncheckedCreateWithoutDoctorTaskInput[]
    connectOrCreate?: DoctorInteractionCreateOrConnectWithoutDoctorTaskInput | DoctorInteractionCreateOrConnectWithoutDoctorTaskInput[]
    upsert?: DoctorInteractionUpsertWithWhereUniqueWithoutDoctorTaskInput | DoctorInteractionUpsertWithWhereUniqueWithoutDoctorTaskInput[]
    createMany?: DoctorInteractionCreateManyDoctorTaskInputEnvelope
    set?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
    disconnect?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
    delete?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
    connect?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
    update?: DoctorInteractionUpdateWithWhereUniqueWithoutDoctorTaskInput | DoctorInteractionUpdateWithWhereUniqueWithoutDoctorTaskInput[]
    updateMany?: DoctorInteractionUpdateManyWithWhereWithoutDoctorTaskInput | DoctorInteractionUpdateManyWithWhereWithoutDoctorTaskInput[]
    deleteMany?: DoctorInteractionScalarWhereInput | DoctorInteractionScalarWhereInput[]
  }

  export type DcrReportUpdateManyWithoutDoctorTaskNestedInput = {
    create?: XOR<DcrReportCreateWithoutDoctorTaskInput, DcrReportUncheckedCreateWithoutDoctorTaskInput> | DcrReportCreateWithoutDoctorTaskInput[] | DcrReportUncheckedCreateWithoutDoctorTaskInput[]
    connectOrCreate?: DcrReportCreateOrConnectWithoutDoctorTaskInput | DcrReportCreateOrConnectWithoutDoctorTaskInput[]
    upsert?: DcrReportUpsertWithWhereUniqueWithoutDoctorTaskInput | DcrReportUpsertWithWhereUniqueWithoutDoctorTaskInput[]
    createMany?: DcrReportCreateManyDoctorTaskInputEnvelope
    set?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
    disconnect?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
    delete?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
    connect?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
    update?: DcrReportUpdateWithWhereUniqueWithoutDoctorTaskInput | DcrReportUpdateWithWhereUniqueWithoutDoctorTaskInput[]
    updateMany?: DcrReportUpdateManyWithWhereWithoutDoctorTaskInput | DcrReportUpdateManyWithWhereWithoutDoctorTaskInput[]
    deleteMany?: DcrReportScalarWhereInput | DcrReportScalarWhereInput[]
  }

  export type DoctorInteractionUncheckedUpdateManyWithoutDoctorTaskNestedInput = {
    create?: XOR<DoctorInteractionCreateWithoutDoctorTaskInput, DoctorInteractionUncheckedCreateWithoutDoctorTaskInput> | DoctorInteractionCreateWithoutDoctorTaskInput[] | DoctorInteractionUncheckedCreateWithoutDoctorTaskInput[]
    connectOrCreate?: DoctorInteractionCreateOrConnectWithoutDoctorTaskInput | DoctorInteractionCreateOrConnectWithoutDoctorTaskInput[]
    upsert?: DoctorInteractionUpsertWithWhereUniqueWithoutDoctorTaskInput | DoctorInteractionUpsertWithWhereUniqueWithoutDoctorTaskInput[]
    createMany?: DoctorInteractionCreateManyDoctorTaskInputEnvelope
    set?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
    disconnect?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
    delete?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
    connect?: DoctorInteractionWhereUniqueInput | DoctorInteractionWhereUniqueInput[]
    update?: DoctorInteractionUpdateWithWhereUniqueWithoutDoctorTaskInput | DoctorInteractionUpdateWithWhereUniqueWithoutDoctorTaskInput[]
    updateMany?: DoctorInteractionUpdateManyWithWhereWithoutDoctorTaskInput | DoctorInteractionUpdateManyWithWhereWithoutDoctorTaskInput[]
    deleteMany?: DoctorInteractionScalarWhereInput | DoctorInteractionScalarWhereInput[]
  }

  export type DcrReportUncheckedUpdateManyWithoutDoctorTaskNestedInput = {
    create?: XOR<DcrReportCreateWithoutDoctorTaskInput, DcrReportUncheckedCreateWithoutDoctorTaskInput> | DcrReportCreateWithoutDoctorTaskInput[] | DcrReportUncheckedCreateWithoutDoctorTaskInput[]
    connectOrCreate?: DcrReportCreateOrConnectWithoutDoctorTaskInput | DcrReportCreateOrConnectWithoutDoctorTaskInput[]
    upsert?: DcrReportUpsertWithWhereUniqueWithoutDoctorTaskInput | DcrReportUpsertWithWhereUniqueWithoutDoctorTaskInput[]
    createMany?: DcrReportCreateManyDoctorTaskInputEnvelope
    set?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
    disconnect?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
    delete?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
    connect?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
    update?: DcrReportUpdateWithWhereUniqueWithoutDoctorTaskInput | DcrReportUpdateWithWhereUniqueWithoutDoctorTaskInput[]
    updateMany?: DcrReportUpdateManyWithWhereWithoutDoctorTaskInput | DcrReportUpdateManyWithWhereWithoutDoctorTaskInput[]
    deleteMany?: DcrReportScalarWhereInput | DcrReportScalarWhereInput[]
  }

  export type TaskPlannerCreateNestedOneWithoutChemistTasksInput = {
    create?: XOR<TaskPlannerCreateWithoutChemistTasksInput, TaskPlannerUncheckedCreateWithoutChemistTasksInput>
    connectOrCreate?: TaskPlannerCreateOrConnectWithoutChemistTasksInput
    connect?: TaskPlannerWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutChemistTasksInput = {
    create?: XOR<EmployeeCreateWithoutChemistTasksInput, EmployeeUncheckedCreateWithoutChemistTasksInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutChemistTasksInput
    connect?: EmployeeWhereUniqueInput
  }

  export type ChemistCreateNestedOneWithoutChemistTasksInput = {
    create?: XOR<ChemistCreateWithoutChemistTasksInput, ChemistUncheckedCreateWithoutChemistTasksInput>
    connectOrCreate?: ChemistCreateOrConnectWithoutChemistTasksInput
    connect?: ChemistWhereUniqueInput
  }

  export type ChemistInteractionCreateNestedManyWithoutChemistTaskInput = {
    create?: XOR<ChemistInteractionCreateWithoutChemistTaskInput, ChemistInteractionUncheckedCreateWithoutChemistTaskInput> | ChemistInteractionCreateWithoutChemistTaskInput[] | ChemistInteractionUncheckedCreateWithoutChemistTaskInput[]
    connectOrCreate?: ChemistInteractionCreateOrConnectWithoutChemistTaskInput | ChemistInteractionCreateOrConnectWithoutChemistTaskInput[]
    createMany?: ChemistInteractionCreateManyChemistTaskInputEnvelope
    connect?: ChemistInteractionWhereUniqueInput | ChemistInteractionWhereUniqueInput[]
  }

  export type DcrReportCreateNestedManyWithoutChemistTaskInput = {
    create?: XOR<DcrReportCreateWithoutChemistTaskInput, DcrReportUncheckedCreateWithoutChemistTaskInput> | DcrReportCreateWithoutChemistTaskInput[] | DcrReportUncheckedCreateWithoutChemistTaskInput[]
    connectOrCreate?: DcrReportCreateOrConnectWithoutChemistTaskInput | DcrReportCreateOrConnectWithoutChemistTaskInput[]
    createMany?: DcrReportCreateManyChemistTaskInputEnvelope
    connect?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
  }

  export type ChemistInteractionUncheckedCreateNestedManyWithoutChemistTaskInput = {
    create?: XOR<ChemistInteractionCreateWithoutChemistTaskInput, ChemistInteractionUncheckedCreateWithoutChemistTaskInput> | ChemistInteractionCreateWithoutChemistTaskInput[] | ChemistInteractionUncheckedCreateWithoutChemistTaskInput[]
    connectOrCreate?: ChemistInteractionCreateOrConnectWithoutChemistTaskInput | ChemistInteractionCreateOrConnectWithoutChemistTaskInput[]
    createMany?: ChemistInteractionCreateManyChemistTaskInputEnvelope
    connect?: ChemistInteractionWhereUniqueInput | ChemistInteractionWhereUniqueInput[]
  }

  export type DcrReportUncheckedCreateNestedManyWithoutChemistTaskInput = {
    create?: XOR<DcrReportCreateWithoutChemistTaskInput, DcrReportUncheckedCreateWithoutChemistTaskInput> | DcrReportCreateWithoutChemistTaskInput[] | DcrReportUncheckedCreateWithoutChemistTaskInput[]
    connectOrCreate?: DcrReportCreateOrConnectWithoutChemistTaskInput | DcrReportCreateOrConnectWithoutChemistTaskInput[]
    createMany?: DcrReportCreateManyChemistTaskInputEnvelope
    connect?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
  }

  export type TaskPlannerUpdateOneRequiredWithoutChemistTasksNestedInput = {
    create?: XOR<TaskPlannerCreateWithoutChemistTasksInput, TaskPlannerUncheckedCreateWithoutChemistTasksInput>
    connectOrCreate?: TaskPlannerCreateOrConnectWithoutChemistTasksInput
    upsert?: TaskPlannerUpsertWithoutChemistTasksInput
    connect?: TaskPlannerWhereUniqueInput
    update?: XOR<XOR<TaskPlannerUpdateToOneWithWhereWithoutChemistTasksInput, TaskPlannerUpdateWithoutChemistTasksInput>, TaskPlannerUncheckedUpdateWithoutChemistTasksInput>
  }

  export type EmployeeUpdateOneRequiredWithoutChemistTasksNestedInput = {
    create?: XOR<EmployeeCreateWithoutChemistTasksInput, EmployeeUncheckedCreateWithoutChemistTasksInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutChemistTasksInput
    upsert?: EmployeeUpsertWithoutChemistTasksInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutChemistTasksInput, EmployeeUpdateWithoutChemistTasksInput>, EmployeeUncheckedUpdateWithoutChemistTasksInput>
  }

  export type ChemistUpdateOneRequiredWithoutChemistTasksNestedInput = {
    create?: XOR<ChemistCreateWithoutChemistTasksInput, ChemistUncheckedCreateWithoutChemistTasksInput>
    connectOrCreate?: ChemistCreateOrConnectWithoutChemistTasksInput
    upsert?: ChemistUpsertWithoutChemistTasksInput
    connect?: ChemistWhereUniqueInput
    update?: XOR<XOR<ChemistUpdateToOneWithWhereWithoutChemistTasksInput, ChemistUpdateWithoutChemistTasksInput>, ChemistUncheckedUpdateWithoutChemistTasksInput>
  }

  export type ChemistInteractionUpdateManyWithoutChemistTaskNestedInput = {
    create?: XOR<ChemistInteractionCreateWithoutChemistTaskInput, ChemistInteractionUncheckedCreateWithoutChemistTaskInput> | ChemistInteractionCreateWithoutChemistTaskInput[] | ChemistInteractionUncheckedCreateWithoutChemistTaskInput[]
    connectOrCreate?: ChemistInteractionCreateOrConnectWithoutChemistTaskInput | ChemistInteractionCreateOrConnectWithoutChemistTaskInput[]
    upsert?: ChemistInteractionUpsertWithWhereUniqueWithoutChemistTaskInput | ChemistInteractionUpsertWithWhereUniqueWithoutChemistTaskInput[]
    createMany?: ChemistInteractionCreateManyChemistTaskInputEnvelope
    set?: ChemistInteractionWhereUniqueInput | ChemistInteractionWhereUniqueInput[]
    disconnect?: ChemistInteractionWhereUniqueInput | ChemistInteractionWhereUniqueInput[]
    delete?: ChemistInteractionWhereUniqueInput | ChemistInteractionWhereUniqueInput[]
    connect?: ChemistInteractionWhereUniqueInput | ChemistInteractionWhereUniqueInput[]
    update?: ChemistInteractionUpdateWithWhereUniqueWithoutChemistTaskInput | ChemistInteractionUpdateWithWhereUniqueWithoutChemistTaskInput[]
    updateMany?: ChemistInteractionUpdateManyWithWhereWithoutChemistTaskInput | ChemistInteractionUpdateManyWithWhereWithoutChemistTaskInput[]
    deleteMany?: ChemistInteractionScalarWhereInput | ChemistInteractionScalarWhereInput[]
  }

  export type DcrReportUpdateManyWithoutChemistTaskNestedInput = {
    create?: XOR<DcrReportCreateWithoutChemistTaskInput, DcrReportUncheckedCreateWithoutChemistTaskInput> | DcrReportCreateWithoutChemistTaskInput[] | DcrReportUncheckedCreateWithoutChemistTaskInput[]
    connectOrCreate?: DcrReportCreateOrConnectWithoutChemistTaskInput | DcrReportCreateOrConnectWithoutChemistTaskInput[]
    upsert?: DcrReportUpsertWithWhereUniqueWithoutChemistTaskInput | DcrReportUpsertWithWhereUniqueWithoutChemistTaskInput[]
    createMany?: DcrReportCreateManyChemistTaskInputEnvelope
    set?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
    disconnect?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
    delete?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
    connect?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
    update?: DcrReportUpdateWithWhereUniqueWithoutChemistTaskInput | DcrReportUpdateWithWhereUniqueWithoutChemistTaskInput[]
    updateMany?: DcrReportUpdateManyWithWhereWithoutChemistTaskInput | DcrReportUpdateManyWithWhereWithoutChemistTaskInput[]
    deleteMany?: DcrReportScalarWhereInput | DcrReportScalarWhereInput[]
  }

  export type ChemistInteractionUncheckedUpdateManyWithoutChemistTaskNestedInput = {
    create?: XOR<ChemistInteractionCreateWithoutChemistTaskInput, ChemistInteractionUncheckedCreateWithoutChemistTaskInput> | ChemistInteractionCreateWithoutChemistTaskInput[] | ChemistInteractionUncheckedCreateWithoutChemistTaskInput[]
    connectOrCreate?: ChemistInteractionCreateOrConnectWithoutChemistTaskInput | ChemistInteractionCreateOrConnectWithoutChemistTaskInput[]
    upsert?: ChemistInteractionUpsertWithWhereUniqueWithoutChemistTaskInput | ChemistInteractionUpsertWithWhereUniqueWithoutChemistTaskInput[]
    createMany?: ChemistInteractionCreateManyChemistTaskInputEnvelope
    set?: ChemistInteractionWhereUniqueInput | ChemistInteractionWhereUniqueInput[]
    disconnect?: ChemistInteractionWhereUniqueInput | ChemistInteractionWhereUniqueInput[]
    delete?: ChemistInteractionWhereUniqueInput | ChemistInteractionWhereUniqueInput[]
    connect?: ChemistInteractionWhereUniqueInput | ChemistInteractionWhereUniqueInput[]
    update?: ChemistInteractionUpdateWithWhereUniqueWithoutChemistTaskInput | ChemistInteractionUpdateWithWhereUniqueWithoutChemistTaskInput[]
    updateMany?: ChemistInteractionUpdateManyWithWhereWithoutChemistTaskInput | ChemistInteractionUpdateManyWithWhereWithoutChemistTaskInput[]
    deleteMany?: ChemistInteractionScalarWhereInput | ChemistInteractionScalarWhereInput[]
  }

  export type DcrReportUncheckedUpdateManyWithoutChemistTaskNestedInput = {
    create?: XOR<DcrReportCreateWithoutChemistTaskInput, DcrReportUncheckedCreateWithoutChemistTaskInput> | DcrReportCreateWithoutChemistTaskInput[] | DcrReportUncheckedCreateWithoutChemistTaskInput[]
    connectOrCreate?: DcrReportCreateOrConnectWithoutChemistTaskInput | DcrReportCreateOrConnectWithoutChemistTaskInput[]
    upsert?: DcrReportUpsertWithWhereUniqueWithoutChemistTaskInput | DcrReportUpsertWithWhereUniqueWithoutChemistTaskInput[]
    createMany?: DcrReportCreateManyChemistTaskInputEnvelope
    set?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
    disconnect?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
    delete?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
    connect?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
    update?: DcrReportUpdateWithWhereUniqueWithoutChemistTaskInput | DcrReportUpdateWithWhereUniqueWithoutChemistTaskInput[]
    updateMany?: DcrReportUpdateManyWithWhereWithoutChemistTaskInput | DcrReportUpdateManyWithWhereWithoutChemistTaskInput[]
    deleteMany?: DcrReportScalarWhereInput | DcrReportScalarWhereInput[]
  }

  export type TaskPlannerCreateNestedOneWithoutTourPlanTasksInput = {
    create?: XOR<TaskPlannerCreateWithoutTourPlanTasksInput, TaskPlannerUncheckedCreateWithoutTourPlanTasksInput>
    connectOrCreate?: TaskPlannerCreateOrConnectWithoutTourPlanTasksInput
    connect?: TaskPlannerWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutTourPlanTasksInput = {
    create?: XOR<EmployeeCreateWithoutTourPlanTasksInput, EmployeeUncheckedCreateWithoutTourPlanTasksInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutTourPlanTasksInput
    connect?: EmployeeWhereUniqueInput
  }

  export type TourPlanCreateNestedOneWithoutTourTasksInput = {
    create?: XOR<TourPlanCreateWithoutTourTasksInput, TourPlanUncheckedCreateWithoutTourTasksInput>
    connectOrCreate?: TourPlanCreateOrConnectWithoutTourTasksInput
    connect?: TourPlanWhereUniqueInput
  }

  export type TourPlanReportCreateNestedManyWithoutTourTaskInput = {
    create?: XOR<TourPlanReportCreateWithoutTourTaskInput, TourPlanReportUncheckedCreateWithoutTourTaskInput> | TourPlanReportCreateWithoutTourTaskInput[] | TourPlanReportUncheckedCreateWithoutTourTaskInput[]
    connectOrCreate?: TourPlanReportCreateOrConnectWithoutTourTaskInput | TourPlanReportCreateOrConnectWithoutTourTaskInput[]
    createMany?: TourPlanReportCreateManyTourTaskInputEnvelope
    connect?: TourPlanReportWhereUniqueInput | TourPlanReportWhereUniqueInput[]
  }

  export type DcrReportCreateNestedManyWithoutTourPlanTaskInput = {
    create?: XOR<DcrReportCreateWithoutTourPlanTaskInput, DcrReportUncheckedCreateWithoutTourPlanTaskInput> | DcrReportCreateWithoutTourPlanTaskInput[] | DcrReportUncheckedCreateWithoutTourPlanTaskInput[]
    connectOrCreate?: DcrReportCreateOrConnectWithoutTourPlanTaskInput | DcrReportCreateOrConnectWithoutTourPlanTaskInput[]
    createMany?: DcrReportCreateManyTourPlanTaskInputEnvelope
    connect?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
  }

  export type TourPlanReportUncheckedCreateNestedManyWithoutTourTaskInput = {
    create?: XOR<TourPlanReportCreateWithoutTourTaskInput, TourPlanReportUncheckedCreateWithoutTourTaskInput> | TourPlanReportCreateWithoutTourTaskInput[] | TourPlanReportUncheckedCreateWithoutTourTaskInput[]
    connectOrCreate?: TourPlanReportCreateOrConnectWithoutTourTaskInput | TourPlanReportCreateOrConnectWithoutTourTaskInput[]
    createMany?: TourPlanReportCreateManyTourTaskInputEnvelope
    connect?: TourPlanReportWhereUniqueInput | TourPlanReportWhereUniqueInput[]
  }

  export type DcrReportUncheckedCreateNestedManyWithoutTourPlanTaskInput = {
    create?: XOR<DcrReportCreateWithoutTourPlanTaskInput, DcrReportUncheckedCreateWithoutTourPlanTaskInput> | DcrReportCreateWithoutTourPlanTaskInput[] | DcrReportUncheckedCreateWithoutTourPlanTaskInput[]
    connectOrCreate?: DcrReportCreateOrConnectWithoutTourPlanTaskInput | DcrReportCreateOrConnectWithoutTourPlanTaskInput[]
    createMany?: DcrReportCreateManyTourPlanTaskInputEnvelope
    connect?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
  }

  export type TaskPlannerUpdateOneRequiredWithoutTourPlanTasksNestedInput = {
    create?: XOR<TaskPlannerCreateWithoutTourPlanTasksInput, TaskPlannerUncheckedCreateWithoutTourPlanTasksInput>
    connectOrCreate?: TaskPlannerCreateOrConnectWithoutTourPlanTasksInput
    upsert?: TaskPlannerUpsertWithoutTourPlanTasksInput
    connect?: TaskPlannerWhereUniqueInput
    update?: XOR<XOR<TaskPlannerUpdateToOneWithWhereWithoutTourPlanTasksInput, TaskPlannerUpdateWithoutTourPlanTasksInput>, TaskPlannerUncheckedUpdateWithoutTourPlanTasksInput>
  }

  export type EmployeeUpdateOneRequiredWithoutTourPlanTasksNestedInput = {
    create?: XOR<EmployeeCreateWithoutTourPlanTasksInput, EmployeeUncheckedCreateWithoutTourPlanTasksInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutTourPlanTasksInput
    upsert?: EmployeeUpsertWithoutTourPlanTasksInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutTourPlanTasksInput, EmployeeUpdateWithoutTourPlanTasksInput>, EmployeeUncheckedUpdateWithoutTourPlanTasksInput>
  }

  export type TourPlanUpdateOneRequiredWithoutTourTasksNestedInput = {
    create?: XOR<TourPlanCreateWithoutTourTasksInput, TourPlanUncheckedCreateWithoutTourTasksInput>
    connectOrCreate?: TourPlanCreateOrConnectWithoutTourTasksInput
    upsert?: TourPlanUpsertWithoutTourTasksInput
    connect?: TourPlanWhereUniqueInput
    update?: XOR<XOR<TourPlanUpdateToOneWithWhereWithoutTourTasksInput, TourPlanUpdateWithoutTourTasksInput>, TourPlanUncheckedUpdateWithoutTourTasksInput>
  }

  export type TourPlanReportUpdateManyWithoutTourTaskNestedInput = {
    create?: XOR<TourPlanReportCreateWithoutTourTaskInput, TourPlanReportUncheckedCreateWithoutTourTaskInput> | TourPlanReportCreateWithoutTourTaskInput[] | TourPlanReportUncheckedCreateWithoutTourTaskInput[]
    connectOrCreate?: TourPlanReportCreateOrConnectWithoutTourTaskInput | TourPlanReportCreateOrConnectWithoutTourTaskInput[]
    upsert?: TourPlanReportUpsertWithWhereUniqueWithoutTourTaskInput | TourPlanReportUpsertWithWhereUniqueWithoutTourTaskInput[]
    createMany?: TourPlanReportCreateManyTourTaskInputEnvelope
    set?: TourPlanReportWhereUniqueInput | TourPlanReportWhereUniqueInput[]
    disconnect?: TourPlanReportWhereUniqueInput | TourPlanReportWhereUniqueInput[]
    delete?: TourPlanReportWhereUniqueInput | TourPlanReportWhereUniqueInput[]
    connect?: TourPlanReportWhereUniqueInput | TourPlanReportWhereUniqueInput[]
    update?: TourPlanReportUpdateWithWhereUniqueWithoutTourTaskInput | TourPlanReportUpdateWithWhereUniqueWithoutTourTaskInput[]
    updateMany?: TourPlanReportUpdateManyWithWhereWithoutTourTaskInput | TourPlanReportUpdateManyWithWhereWithoutTourTaskInput[]
    deleteMany?: TourPlanReportScalarWhereInput | TourPlanReportScalarWhereInput[]
  }

  export type DcrReportUpdateManyWithoutTourPlanTaskNestedInput = {
    create?: XOR<DcrReportCreateWithoutTourPlanTaskInput, DcrReportUncheckedCreateWithoutTourPlanTaskInput> | DcrReportCreateWithoutTourPlanTaskInput[] | DcrReportUncheckedCreateWithoutTourPlanTaskInput[]
    connectOrCreate?: DcrReportCreateOrConnectWithoutTourPlanTaskInput | DcrReportCreateOrConnectWithoutTourPlanTaskInput[]
    upsert?: DcrReportUpsertWithWhereUniqueWithoutTourPlanTaskInput | DcrReportUpsertWithWhereUniqueWithoutTourPlanTaskInput[]
    createMany?: DcrReportCreateManyTourPlanTaskInputEnvelope
    set?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
    disconnect?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
    delete?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
    connect?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
    update?: DcrReportUpdateWithWhereUniqueWithoutTourPlanTaskInput | DcrReportUpdateWithWhereUniqueWithoutTourPlanTaskInput[]
    updateMany?: DcrReportUpdateManyWithWhereWithoutTourPlanTaskInput | DcrReportUpdateManyWithWhereWithoutTourPlanTaskInput[]
    deleteMany?: DcrReportScalarWhereInput | DcrReportScalarWhereInput[]
  }

  export type TourPlanReportUncheckedUpdateManyWithoutTourTaskNestedInput = {
    create?: XOR<TourPlanReportCreateWithoutTourTaskInput, TourPlanReportUncheckedCreateWithoutTourTaskInput> | TourPlanReportCreateWithoutTourTaskInput[] | TourPlanReportUncheckedCreateWithoutTourTaskInput[]
    connectOrCreate?: TourPlanReportCreateOrConnectWithoutTourTaskInput | TourPlanReportCreateOrConnectWithoutTourTaskInput[]
    upsert?: TourPlanReportUpsertWithWhereUniqueWithoutTourTaskInput | TourPlanReportUpsertWithWhereUniqueWithoutTourTaskInput[]
    createMany?: TourPlanReportCreateManyTourTaskInputEnvelope
    set?: TourPlanReportWhereUniqueInput | TourPlanReportWhereUniqueInput[]
    disconnect?: TourPlanReportWhereUniqueInput | TourPlanReportWhereUniqueInput[]
    delete?: TourPlanReportWhereUniqueInput | TourPlanReportWhereUniqueInput[]
    connect?: TourPlanReportWhereUniqueInput | TourPlanReportWhereUniqueInput[]
    update?: TourPlanReportUpdateWithWhereUniqueWithoutTourTaskInput | TourPlanReportUpdateWithWhereUniqueWithoutTourTaskInput[]
    updateMany?: TourPlanReportUpdateManyWithWhereWithoutTourTaskInput | TourPlanReportUpdateManyWithWhereWithoutTourTaskInput[]
    deleteMany?: TourPlanReportScalarWhereInput | TourPlanReportScalarWhereInput[]
  }

  export type DcrReportUncheckedUpdateManyWithoutTourPlanTaskNestedInput = {
    create?: XOR<DcrReportCreateWithoutTourPlanTaskInput, DcrReportUncheckedCreateWithoutTourPlanTaskInput> | DcrReportCreateWithoutTourPlanTaskInput[] | DcrReportUncheckedCreateWithoutTourPlanTaskInput[]
    connectOrCreate?: DcrReportCreateOrConnectWithoutTourPlanTaskInput | DcrReportCreateOrConnectWithoutTourPlanTaskInput[]
    upsert?: DcrReportUpsertWithWhereUniqueWithoutTourPlanTaskInput | DcrReportUpsertWithWhereUniqueWithoutTourPlanTaskInput[]
    createMany?: DcrReportCreateManyTourPlanTaskInputEnvelope
    set?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
    disconnect?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
    delete?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
    connect?: DcrReportWhereUniqueInput | DcrReportWhereUniqueInput[]
    update?: DcrReportUpdateWithWhereUniqueWithoutTourPlanTaskInput | DcrReportUpdateWithWhereUniqueWithoutTourPlanTaskInput[]
    updateMany?: DcrReportUpdateManyWithWhereWithoutTourPlanTaskInput | DcrReportUpdateManyWithWhereWithoutTourPlanTaskInput[]
    deleteMany?: DcrReportScalarWhereInput | DcrReportScalarWhereInput[]
  }

  export type TourPlanTaskCreateNestedManyWithoutTourPlanInput = {
    create?: XOR<TourPlanTaskCreateWithoutTourPlanInput, TourPlanTaskUncheckedCreateWithoutTourPlanInput> | TourPlanTaskCreateWithoutTourPlanInput[] | TourPlanTaskUncheckedCreateWithoutTourPlanInput[]
    connectOrCreate?: TourPlanTaskCreateOrConnectWithoutTourPlanInput | TourPlanTaskCreateOrConnectWithoutTourPlanInput[]
    createMany?: TourPlanTaskCreateManyTourPlanInputEnvelope
    connect?: TourPlanTaskWhereUniqueInput | TourPlanTaskWhereUniqueInput[]
  }

  export type TourPlanTaskUncheckedCreateNestedManyWithoutTourPlanInput = {
    create?: XOR<TourPlanTaskCreateWithoutTourPlanInput, TourPlanTaskUncheckedCreateWithoutTourPlanInput> | TourPlanTaskCreateWithoutTourPlanInput[] | TourPlanTaskUncheckedCreateWithoutTourPlanInput[]
    connectOrCreate?: TourPlanTaskCreateOrConnectWithoutTourPlanInput | TourPlanTaskCreateOrConnectWithoutTourPlanInput[]
    createMany?: TourPlanTaskCreateManyTourPlanInputEnvelope
    connect?: TourPlanTaskWhereUniqueInput | TourPlanTaskWhereUniqueInput[]
  }

  export type TourPlanTaskUpdateManyWithoutTourPlanNestedInput = {
    create?: XOR<TourPlanTaskCreateWithoutTourPlanInput, TourPlanTaskUncheckedCreateWithoutTourPlanInput> | TourPlanTaskCreateWithoutTourPlanInput[] | TourPlanTaskUncheckedCreateWithoutTourPlanInput[]
    connectOrCreate?: TourPlanTaskCreateOrConnectWithoutTourPlanInput | TourPlanTaskCreateOrConnectWithoutTourPlanInput[]
    upsert?: TourPlanTaskUpsertWithWhereUniqueWithoutTourPlanInput | TourPlanTaskUpsertWithWhereUniqueWithoutTourPlanInput[]
    createMany?: TourPlanTaskCreateManyTourPlanInputEnvelope
    set?: TourPlanTaskWhereUniqueInput | TourPlanTaskWhereUniqueInput[]
    disconnect?: TourPlanTaskWhereUniqueInput | TourPlanTaskWhereUniqueInput[]
    delete?: TourPlanTaskWhereUniqueInput | TourPlanTaskWhereUniqueInput[]
    connect?: TourPlanTaskWhereUniqueInput | TourPlanTaskWhereUniqueInput[]
    update?: TourPlanTaskUpdateWithWhereUniqueWithoutTourPlanInput | TourPlanTaskUpdateWithWhereUniqueWithoutTourPlanInput[]
    updateMany?: TourPlanTaskUpdateManyWithWhereWithoutTourPlanInput | TourPlanTaskUpdateManyWithWhereWithoutTourPlanInput[]
    deleteMany?: TourPlanTaskScalarWhereInput | TourPlanTaskScalarWhereInput[]
  }

  export type TourPlanTaskUncheckedUpdateManyWithoutTourPlanNestedInput = {
    create?: XOR<TourPlanTaskCreateWithoutTourPlanInput, TourPlanTaskUncheckedCreateWithoutTourPlanInput> | TourPlanTaskCreateWithoutTourPlanInput[] | TourPlanTaskUncheckedCreateWithoutTourPlanInput[]
    connectOrCreate?: TourPlanTaskCreateOrConnectWithoutTourPlanInput | TourPlanTaskCreateOrConnectWithoutTourPlanInput[]
    upsert?: TourPlanTaskUpsertWithWhereUniqueWithoutTourPlanInput | TourPlanTaskUpsertWithWhereUniqueWithoutTourPlanInput[]
    createMany?: TourPlanTaskCreateManyTourPlanInputEnvelope
    set?: TourPlanTaskWhereUniqueInput | TourPlanTaskWhereUniqueInput[]
    disconnect?: TourPlanTaskWhereUniqueInput | TourPlanTaskWhereUniqueInput[]
    delete?: TourPlanTaskWhereUniqueInput | TourPlanTaskWhereUniqueInput[]
    connect?: TourPlanTaskWhereUniqueInput | TourPlanTaskWhereUniqueInput[]
    update?: TourPlanTaskUpdateWithWhereUniqueWithoutTourPlanInput | TourPlanTaskUpdateWithWhereUniqueWithoutTourPlanInput[]
    updateMany?: TourPlanTaskUpdateManyWithWhereWithoutTourPlanInput | TourPlanTaskUpdateManyWithWhereWithoutTourPlanInput[]
    deleteMany?: TourPlanTaskScalarWhereInput | TourPlanTaskScalarWhereInput[]
  }

  export type TourPlanTaskCreateNestedOneWithoutTourPlanReportsInput = {
    create?: XOR<TourPlanTaskCreateWithoutTourPlanReportsInput, TourPlanTaskUncheckedCreateWithoutTourPlanReportsInput>
    connectOrCreate?: TourPlanTaskCreateOrConnectWithoutTourPlanReportsInput
    connect?: TourPlanTaskWhereUniqueInput
  }

  export type TourPlanTaskUpdateOneRequiredWithoutTourPlanReportsNestedInput = {
    create?: XOR<TourPlanTaskCreateWithoutTourPlanReportsInput, TourPlanTaskUncheckedCreateWithoutTourPlanReportsInput>
    connectOrCreate?: TourPlanTaskCreateOrConnectWithoutTourPlanReportsInput
    upsert?: TourPlanTaskUpsertWithoutTourPlanReportsInput
    connect?: TourPlanTaskWhereUniqueInput
    update?: XOR<XOR<TourPlanTaskUpdateToOneWithWhereWithoutTourPlanReportsInput, TourPlanTaskUpdateWithoutTourPlanReportsInput>, TourPlanTaskUncheckedUpdateWithoutTourPlanReportsInput>
  }

  export type ExpenseRoleConfigCreateNestedManyWithoutExpenseTypeInput = {
    create?: XOR<ExpenseRoleConfigCreateWithoutExpenseTypeInput, ExpenseRoleConfigUncheckedCreateWithoutExpenseTypeInput> | ExpenseRoleConfigCreateWithoutExpenseTypeInput[] | ExpenseRoleConfigUncheckedCreateWithoutExpenseTypeInput[]
    connectOrCreate?: ExpenseRoleConfigCreateOrConnectWithoutExpenseTypeInput | ExpenseRoleConfigCreateOrConnectWithoutExpenseTypeInput[]
    createMany?: ExpenseRoleConfigCreateManyExpenseTypeInputEnvelope
    connect?: ExpenseRoleConfigWhereUniqueInput | ExpenseRoleConfigWhereUniqueInput[]
  }

  export type ExpenseClaimCreateNestedManyWithoutExpenseTypeInput = {
    create?: XOR<ExpenseClaimCreateWithoutExpenseTypeInput, ExpenseClaimUncheckedCreateWithoutExpenseTypeInput> | ExpenseClaimCreateWithoutExpenseTypeInput[] | ExpenseClaimUncheckedCreateWithoutExpenseTypeInput[]
    connectOrCreate?: ExpenseClaimCreateOrConnectWithoutExpenseTypeInput | ExpenseClaimCreateOrConnectWithoutExpenseTypeInput[]
    createMany?: ExpenseClaimCreateManyExpenseTypeInputEnvelope
    connect?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
  }

  export type ExpenseRoleConfigUncheckedCreateNestedManyWithoutExpenseTypeInput = {
    create?: XOR<ExpenseRoleConfigCreateWithoutExpenseTypeInput, ExpenseRoleConfigUncheckedCreateWithoutExpenseTypeInput> | ExpenseRoleConfigCreateWithoutExpenseTypeInput[] | ExpenseRoleConfigUncheckedCreateWithoutExpenseTypeInput[]
    connectOrCreate?: ExpenseRoleConfigCreateOrConnectWithoutExpenseTypeInput | ExpenseRoleConfigCreateOrConnectWithoutExpenseTypeInput[]
    createMany?: ExpenseRoleConfigCreateManyExpenseTypeInputEnvelope
    connect?: ExpenseRoleConfigWhereUniqueInput | ExpenseRoleConfigWhereUniqueInput[]
  }

  export type ExpenseClaimUncheckedCreateNestedManyWithoutExpenseTypeInput = {
    create?: XOR<ExpenseClaimCreateWithoutExpenseTypeInput, ExpenseClaimUncheckedCreateWithoutExpenseTypeInput> | ExpenseClaimCreateWithoutExpenseTypeInput[] | ExpenseClaimUncheckedCreateWithoutExpenseTypeInput[]
    connectOrCreate?: ExpenseClaimCreateOrConnectWithoutExpenseTypeInput | ExpenseClaimCreateOrConnectWithoutExpenseTypeInput[]
    createMany?: ExpenseClaimCreateManyExpenseTypeInputEnvelope
    connect?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
  }

  export type ExpenseRoleConfigUpdateManyWithoutExpenseTypeNestedInput = {
    create?: XOR<ExpenseRoleConfigCreateWithoutExpenseTypeInput, ExpenseRoleConfigUncheckedCreateWithoutExpenseTypeInput> | ExpenseRoleConfigCreateWithoutExpenseTypeInput[] | ExpenseRoleConfigUncheckedCreateWithoutExpenseTypeInput[]
    connectOrCreate?: ExpenseRoleConfigCreateOrConnectWithoutExpenseTypeInput | ExpenseRoleConfigCreateOrConnectWithoutExpenseTypeInput[]
    upsert?: ExpenseRoleConfigUpsertWithWhereUniqueWithoutExpenseTypeInput | ExpenseRoleConfigUpsertWithWhereUniqueWithoutExpenseTypeInput[]
    createMany?: ExpenseRoleConfigCreateManyExpenseTypeInputEnvelope
    set?: ExpenseRoleConfigWhereUniqueInput | ExpenseRoleConfigWhereUniqueInput[]
    disconnect?: ExpenseRoleConfigWhereUniqueInput | ExpenseRoleConfigWhereUniqueInput[]
    delete?: ExpenseRoleConfigWhereUniqueInput | ExpenseRoleConfigWhereUniqueInput[]
    connect?: ExpenseRoleConfigWhereUniqueInput | ExpenseRoleConfigWhereUniqueInput[]
    update?: ExpenseRoleConfigUpdateWithWhereUniqueWithoutExpenseTypeInput | ExpenseRoleConfigUpdateWithWhereUniqueWithoutExpenseTypeInput[]
    updateMany?: ExpenseRoleConfigUpdateManyWithWhereWithoutExpenseTypeInput | ExpenseRoleConfigUpdateManyWithWhereWithoutExpenseTypeInput[]
    deleteMany?: ExpenseRoleConfigScalarWhereInput | ExpenseRoleConfigScalarWhereInput[]
  }

  export type ExpenseClaimUpdateManyWithoutExpenseTypeNestedInput = {
    create?: XOR<ExpenseClaimCreateWithoutExpenseTypeInput, ExpenseClaimUncheckedCreateWithoutExpenseTypeInput> | ExpenseClaimCreateWithoutExpenseTypeInput[] | ExpenseClaimUncheckedCreateWithoutExpenseTypeInput[]
    connectOrCreate?: ExpenseClaimCreateOrConnectWithoutExpenseTypeInput | ExpenseClaimCreateOrConnectWithoutExpenseTypeInput[]
    upsert?: ExpenseClaimUpsertWithWhereUniqueWithoutExpenseTypeInput | ExpenseClaimUpsertWithWhereUniqueWithoutExpenseTypeInput[]
    createMany?: ExpenseClaimCreateManyExpenseTypeInputEnvelope
    set?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
    disconnect?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
    delete?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
    connect?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
    update?: ExpenseClaimUpdateWithWhereUniqueWithoutExpenseTypeInput | ExpenseClaimUpdateWithWhereUniqueWithoutExpenseTypeInput[]
    updateMany?: ExpenseClaimUpdateManyWithWhereWithoutExpenseTypeInput | ExpenseClaimUpdateManyWithWhereWithoutExpenseTypeInput[]
    deleteMany?: ExpenseClaimScalarWhereInput | ExpenseClaimScalarWhereInput[]
  }

  export type ExpenseRoleConfigUncheckedUpdateManyWithoutExpenseTypeNestedInput = {
    create?: XOR<ExpenseRoleConfigCreateWithoutExpenseTypeInput, ExpenseRoleConfigUncheckedCreateWithoutExpenseTypeInput> | ExpenseRoleConfigCreateWithoutExpenseTypeInput[] | ExpenseRoleConfigUncheckedCreateWithoutExpenseTypeInput[]
    connectOrCreate?: ExpenseRoleConfigCreateOrConnectWithoutExpenseTypeInput | ExpenseRoleConfigCreateOrConnectWithoutExpenseTypeInput[]
    upsert?: ExpenseRoleConfigUpsertWithWhereUniqueWithoutExpenseTypeInput | ExpenseRoleConfigUpsertWithWhereUniqueWithoutExpenseTypeInput[]
    createMany?: ExpenseRoleConfigCreateManyExpenseTypeInputEnvelope
    set?: ExpenseRoleConfigWhereUniqueInput | ExpenseRoleConfigWhereUniqueInput[]
    disconnect?: ExpenseRoleConfigWhereUniqueInput | ExpenseRoleConfigWhereUniqueInput[]
    delete?: ExpenseRoleConfigWhereUniqueInput | ExpenseRoleConfigWhereUniqueInput[]
    connect?: ExpenseRoleConfigWhereUniqueInput | ExpenseRoleConfigWhereUniqueInput[]
    update?: ExpenseRoleConfigUpdateWithWhereUniqueWithoutExpenseTypeInput | ExpenseRoleConfigUpdateWithWhereUniqueWithoutExpenseTypeInput[]
    updateMany?: ExpenseRoleConfigUpdateManyWithWhereWithoutExpenseTypeInput | ExpenseRoleConfigUpdateManyWithWhereWithoutExpenseTypeInput[]
    deleteMany?: ExpenseRoleConfigScalarWhereInput | ExpenseRoleConfigScalarWhereInput[]
  }

  export type ExpenseClaimUncheckedUpdateManyWithoutExpenseTypeNestedInput = {
    create?: XOR<ExpenseClaimCreateWithoutExpenseTypeInput, ExpenseClaimUncheckedCreateWithoutExpenseTypeInput> | ExpenseClaimCreateWithoutExpenseTypeInput[] | ExpenseClaimUncheckedCreateWithoutExpenseTypeInput[]
    connectOrCreate?: ExpenseClaimCreateOrConnectWithoutExpenseTypeInput | ExpenseClaimCreateOrConnectWithoutExpenseTypeInput[]
    upsert?: ExpenseClaimUpsertWithWhereUniqueWithoutExpenseTypeInput | ExpenseClaimUpsertWithWhereUniqueWithoutExpenseTypeInput[]
    createMany?: ExpenseClaimCreateManyExpenseTypeInputEnvelope
    set?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
    disconnect?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
    delete?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
    connect?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
    update?: ExpenseClaimUpdateWithWhereUniqueWithoutExpenseTypeInput | ExpenseClaimUpdateWithWhereUniqueWithoutExpenseTypeInput[]
    updateMany?: ExpenseClaimUpdateManyWithWhereWithoutExpenseTypeInput | ExpenseClaimUpdateManyWithWhereWithoutExpenseTypeInput[]
    deleteMany?: ExpenseClaimScalarWhereInput | ExpenseClaimScalarWhereInput[]
  }

  export type ExpenseTypeCreateNestedOneWithoutRoleConfigsInput = {
    create?: XOR<ExpenseTypeCreateWithoutRoleConfigsInput, ExpenseTypeUncheckedCreateWithoutRoleConfigsInput>
    connectOrCreate?: ExpenseTypeCreateOrConnectWithoutRoleConfigsInput
    connect?: ExpenseTypeWhereUniqueInput
  }

  export type ExpenseClaimCreateNestedManyWithoutExpenseRoleConfigInput = {
    create?: XOR<ExpenseClaimCreateWithoutExpenseRoleConfigInput, ExpenseClaimUncheckedCreateWithoutExpenseRoleConfigInput> | ExpenseClaimCreateWithoutExpenseRoleConfigInput[] | ExpenseClaimUncheckedCreateWithoutExpenseRoleConfigInput[]
    connectOrCreate?: ExpenseClaimCreateOrConnectWithoutExpenseRoleConfigInput | ExpenseClaimCreateOrConnectWithoutExpenseRoleConfigInput[]
    createMany?: ExpenseClaimCreateManyExpenseRoleConfigInputEnvelope
    connect?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
  }

  export type ExpenseClaimUncheckedCreateNestedManyWithoutExpenseRoleConfigInput = {
    create?: XOR<ExpenseClaimCreateWithoutExpenseRoleConfigInput, ExpenseClaimUncheckedCreateWithoutExpenseRoleConfigInput> | ExpenseClaimCreateWithoutExpenseRoleConfigInput[] | ExpenseClaimUncheckedCreateWithoutExpenseRoleConfigInput[]
    connectOrCreate?: ExpenseClaimCreateOrConnectWithoutExpenseRoleConfigInput | ExpenseClaimCreateOrConnectWithoutExpenseRoleConfigInput[]
    createMany?: ExpenseClaimCreateManyExpenseRoleConfigInputEnvelope
    connect?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
  }

  export type ExpenseTypeUpdateOneRequiredWithoutRoleConfigsNestedInput = {
    create?: XOR<ExpenseTypeCreateWithoutRoleConfigsInput, ExpenseTypeUncheckedCreateWithoutRoleConfigsInput>
    connectOrCreate?: ExpenseTypeCreateOrConnectWithoutRoleConfigsInput
    upsert?: ExpenseTypeUpsertWithoutRoleConfigsInput
    connect?: ExpenseTypeWhereUniqueInput
    update?: XOR<XOR<ExpenseTypeUpdateToOneWithWhereWithoutRoleConfigsInput, ExpenseTypeUpdateWithoutRoleConfigsInput>, ExpenseTypeUncheckedUpdateWithoutRoleConfigsInput>
  }

  export type ExpenseClaimUpdateManyWithoutExpenseRoleConfigNestedInput = {
    create?: XOR<ExpenseClaimCreateWithoutExpenseRoleConfigInput, ExpenseClaimUncheckedCreateWithoutExpenseRoleConfigInput> | ExpenseClaimCreateWithoutExpenseRoleConfigInput[] | ExpenseClaimUncheckedCreateWithoutExpenseRoleConfigInput[]
    connectOrCreate?: ExpenseClaimCreateOrConnectWithoutExpenseRoleConfigInput | ExpenseClaimCreateOrConnectWithoutExpenseRoleConfigInput[]
    upsert?: ExpenseClaimUpsertWithWhereUniqueWithoutExpenseRoleConfigInput | ExpenseClaimUpsertWithWhereUniqueWithoutExpenseRoleConfigInput[]
    createMany?: ExpenseClaimCreateManyExpenseRoleConfigInputEnvelope
    set?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
    disconnect?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
    delete?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
    connect?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
    update?: ExpenseClaimUpdateWithWhereUniqueWithoutExpenseRoleConfigInput | ExpenseClaimUpdateWithWhereUniqueWithoutExpenseRoleConfigInput[]
    updateMany?: ExpenseClaimUpdateManyWithWhereWithoutExpenseRoleConfigInput | ExpenseClaimUpdateManyWithWhereWithoutExpenseRoleConfigInput[]
    deleteMany?: ExpenseClaimScalarWhereInput | ExpenseClaimScalarWhereInput[]
  }

  export type ExpenseClaimUncheckedUpdateManyWithoutExpenseRoleConfigNestedInput = {
    create?: XOR<ExpenseClaimCreateWithoutExpenseRoleConfigInput, ExpenseClaimUncheckedCreateWithoutExpenseRoleConfigInput> | ExpenseClaimCreateWithoutExpenseRoleConfigInput[] | ExpenseClaimUncheckedCreateWithoutExpenseRoleConfigInput[]
    connectOrCreate?: ExpenseClaimCreateOrConnectWithoutExpenseRoleConfigInput | ExpenseClaimCreateOrConnectWithoutExpenseRoleConfigInput[]
    upsert?: ExpenseClaimUpsertWithWhereUniqueWithoutExpenseRoleConfigInput | ExpenseClaimUpsertWithWhereUniqueWithoutExpenseRoleConfigInput[]
    createMany?: ExpenseClaimCreateManyExpenseRoleConfigInputEnvelope
    set?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
    disconnect?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
    delete?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
    connect?: ExpenseClaimWhereUniqueInput | ExpenseClaimWhereUniqueInput[]
    update?: ExpenseClaimUpdateWithWhereUniqueWithoutExpenseRoleConfigInput | ExpenseClaimUpdateWithWhereUniqueWithoutExpenseRoleConfigInput[]
    updateMany?: ExpenseClaimUpdateManyWithWhereWithoutExpenseRoleConfigInput | ExpenseClaimUpdateManyWithWhereWithoutExpenseRoleConfigInput[]
    deleteMany?: ExpenseClaimScalarWhereInput | ExpenseClaimScalarWhereInput[]
  }

  export type EmployeeCreateNestedOneWithoutExpenseClaimsInput = {
    create?: XOR<EmployeeCreateWithoutExpenseClaimsInput, EmployeeUncheckedCreateWithoutExpenseClaimsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutExpenseClaimsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type ExpenseTypeCreateNestedOneWithoutExpenseClaimsInput = {
    create?: XOR<ExpenseTypeCreateWithoutExpenseClaimsInput, ExpenseTypeUncheckedCreateWithoutExpenseClaimsInput>
    connectOrCreate?: ExpenseTypeCreateOrConnectWithoutExpenseClaimsInput
    connect?: ExpenseTypeWhereUniqueInput
  }

  export type ExpenseRoleConfigCreateNestedOneWithoutExpenseClaimsInput = {
    create?: XOR<ExpenseRoleConfigCreateWithoutExpenseClaimsInput, ExpenseRoleConfigUncheckedCreateWithoutExpenseClaimsInput>
    connectOrCreate?: ExpenseRoleConfigCreateOrConnectWithoutExpenseClaimsInput
    connect?: ExpenseRoleConfigWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutApprovedClaimsInput = {
    create?: XOR<EmployeeCreateWithoutApprovedClaimsInput, EmployeeUncheckedCreateWithoutApprovedClaimsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutApprovedClaimsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EnumExpenseClaimStatusFieldUpdateOperationsInput = {
    set?: $Enums.ExpenseClaimStatus
  }

  export type EmployeeUpdateOneRequiredWithoutExpenseClaimsNestedInput = {
    create?: XOR<EmployeeCreateWithoutExpenseClaimsInput, EmployeeUncheckedCreateWithoutExpenseClaimsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutExpenseClaimsInput
    upsert?: EmployeeUpsertWithoutExpenseClaimsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutExpenseClaimsInput, EmployeeUpdateWithoutExpenseClaimsInput>, EmployeeUncheckedUpdateWithoutExpenseClaimsInput>
  }

  export type ExpenseTypeUpdateOneRequiredWithoutExpenseClaimsNestedInput = {
    create?: XOR<ExpenseTypeCreateWithoutExpenseClaimsInput, ExpenseTypeUncheckedCreateWithoutExpenseClaimsInput>
    connectOrCreate?: ExpenseTypeCreateOrConnectWithoutExpenseClaimsInput
    upsert?: ExpenseTypeUpsertWithoutExpenseClaimsInput
    connect?: ExpenseTypeWhereUniqueInput
    update?: XOR<XOR<ExpenseTypeUpdateToOneWithWhereWithoutExpenseClaimsInput, ExpenseTypeUpdateWithoutExpenseClaimsInput>, ExpenseTypeUncheckedUpdateWithoutExpenseClaimsInput>
  }

  export type ExpenseRoleConfigUpdateOneRequiredWithoutExpenseClaimsNestedInput = {
    create?: XOR<ExpenseRoleConfigCreateWithoutExpenseClaimsInput, ExpenseRoleConfigUncheckedCreateWithoutExpenseClaimsInput>
    connectOrCreate?: ExpenseRoleConfigCreateOrConnectWithoutExpenseClaimsInput
    upsert?: ExpenseRoleConfigUpsertWithoutExpenseClaimsInput
    connect?: ExpenseRoleConfigWhereUniqueInput
    update?: XOR<XOR<ExpenseRoleConfigUpdateToOneWithWhereWithoutExpenseClaimsInput, ExpenseRoleConfigUpdateWithoutExpenseClaimsInput>, ExpenseRoleConfigUncheckedUpdateWithoutExpenseClaimsInput>
  }

  export type EmployeeUpdateOneWithoutApprovedClaimsNestedInput = {
    create?: XOR<EmployeeCreateWithoutApprovedClaimsInput, EmployeeUncheckedCreateWithoutApprovedClaimsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutApprovedClaimsInput
    upsert?: EmployeeUpsertWithoutApprovedClaimsInput
    disconnect?: EmployeeWhereInput | boolean
    delete?: EmployeeWhereInput | boolean
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutApprovedClaimsInput, EmployeeUpdateWithoutApprovedClaimsInput>, EmployeeUncheckedUpdateWithoutApprovedClaimsInput>
  }

  export type EmployeeCreateNestedOneWithoutGiftsCreatedInput = {
    create?: XOR<EmployeeCreateWithoutGiftsCreatedInput, EmployeeUncheckedCreateWithoutGiftsCreatedInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutGiftsCreatedInput
    connect?: EmployeeWhereUniqueInput
  }

  export type UserGiftInventoryCreateNestedManyWithoutGiftInput = {
    create?: XOR<UserGiftInventoryCreateWithoutGiftInput, UserGiftInventoryUncheckedCreateWithoutGiftInput> | UserGiftInventoryCreateWithoutGiftInput[] | UserGiftInventoryUncheckedCreateWithoutGiftInput[]
    connectOrCreate?: UserGiftInventoryCreateOrConnectWithoutGiftInput | UserGiftInventoryCreateOrConnectWithoutGiftInput[]
    createMany?: UserGiftInventoryCreateManyGiftInputEnvelope
    connect?: UserGiftInventoryWhereUniqueInput | UserGiftInventoryWhereUniqueInput[]
  }

  export type DoctorDistributionGiftItemCreateNestedManyWithoutGiftInput = {
    create?: XOR<DoctorDistributionGiftItemCreateWithoutGiftInput, DoctorDistributionGiftItemUncheckedCreateWithoutGiftInput> | DoctorDistributionGiftItemCreateWithoutGiftInput[] | DoctorDistributionGiftItemUncheckedCreateWithoutGiftInput[]
    connectOrCreate?: DoctorDistributionGiftItemCreateOrConnectWithoutGiftInput | DoctorDistributionGiftItemCreateOrConnectWithoutGiftInput[]
    createMany?: DoctorDistributionGiftItemCreateManyGiftInputEnvelope
    connect?: DoctorDistributionGiftItemWhereUniqueInput | DoctorDistributionGiftItemWhereUniqueInput[]
  }

  export type UserGiftInventoryUncheckedCreateNestedManyWithoutGiftInput = {
    create?: XOR<UserGiftInventoryCreateWithoutGiftInput, UserGiftInventoryUncheckedCreateWithoutGiftInput> | UserGiftInventoryCreateWithoutGiftInput[] | UserGiftInventoryUncheckedCreateWithoutGiftInput[]
    connectOrCreate?: UserGiftInventoryCreateOrConnectWithoutGiftInput | UserGiftInventoryCreateOrConnectWithoutGiftInput[]
    createMany?: UserGiftInventoryCreateManyGiftInputEnvelope
    connect?: UserGiftInventoryWhereUniqueInput | UserGiftInventoryWhereUniqueInput[]
  }

  export type DoctorDistributionGiftItemUncheckedCreateNestedManyWithoutGiftInput = {
    create?: XOR<DoctorDistributionGiftItemCreateWithoutGiftInput, DoctorDistributionGiftItemUncheckedCreateWithoutGiftInput> | DoctorDistributionGiftItemCreateWithoutGiftInput[] | DoctorDistributionGiftItemUncheckedCreateWithoutGiftInput[]
    connectOrCreate?: DoctorDistributionGiftItemCreateOrConnectWithoutGiftInput | DoctorDistributionGiftItemCreateOrConnectWithoutGiftInput[]
    createMany?: DoctorDistributionGiftItemCreateManyGiftInputEnvelope
    connect?: DoctorDistributionGiftItemWhereUniqueInput | DoctorDistributionGiftItemWhereUniqueInput[]
  }

  export type EmployeeUpdateOneRequiredWithoutGiftsCreatedNestedInput = {
    create?: XOR<EmployeeCreateWithoutGiftsCreatedInput, EmployeeUncheckedCreateWithoutGiftsCreatedInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutGiftsCreatedInput
    upsert?: EmployeeUpsertWithoutGiftsCreatedInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutGiftsCreatedInput, EmployeeUpdateWithoutGiftsCreatedInput>, EmployeeUncheckedUpdateWithoutGiftsCreatedInput>
  }

  export type UserGiftInventoryUpdateManyWithoutGiftNestedInput = {
    create?: XOR<UserGiftInventoryCreateWithoutGiftInput, UserGiftInventoryUncheckedCreateWithoutGiftInput> | UserGiftInventoryCreateWithoutGiftInput[] | UserGiftInventoryUncheckedCreateWithoutGiftInput[]
    connectOrCreate?: UserGiftInventoryCreateOrConnectWithoutGiftInput | UserGiftInventoryCreateOrConnectWithoutGiftInput[]
    upsert?: UserGiftInventoryUpsertWithWhereUniqueWithoutGiftInput | UserGiftInventoryUpsertWithWhereUniqueWithoutGiftInput[]
    createMany?: UserGiftInventoryCreateManyGiftInputEnvelope
    set?: UserGiftInventoryWhereUniqueInput | UserGiftInventoryWhereUniqueInput[]
    disconnect?: UserGiftInventoryWhereUniqueInput | UserGiftInventoryWhereUniqueInput[]
    delete?: UserGiftInventoryWhereUniqueInput | UserGiftInventoryWhereUniqueInput[]
    connect?: UserGiftInventoryWhereUniqueInput | UserGiftInventoryWhereUniqueInput[]
    update?: UserGiftInventoryUpdateWithWhereUniqueWithoutGiftInput | UserGiftInventoryUpdateWithWhereUniqueWithoutGiftInput[]
    updateMany?: UserGiftInventoryUpdateManyWithWhereWithoutGiftInput | UserGiftInventoryUpdateManyWithWhereWithoutGiftInput[]
    deleteMany?: UserGiftInventoryScalarWhereInput | UserGiftInventoryScalarWhereInput[]
  }

  export type DoctorDistributionGiftItemUpdateManyWithoutGiftNestedInput = {
    create?: XOR<DoctorDistributionGiftItemCreateWithoutGiftInput, DoctorDistributionGiftItemUncheckedCreateWithoutGiftInput> | DoctorDistributionGiftItemCreateWithoutGiftInput[] | DoctorDistributionGiftItemUncheckedCreateWithoutGiftInput[]
    connectOrCreate?: DoctorDistributionGiftItemCreateOrConnectWithoutGiftInput | DoctorDistributionGiftItemCreateOrConnectWithoutGiftInput[]
    upsert?: DoctorDistributionGiftItemUpsertWithWhereUniqueWithoutGiftInput | DoctorDistributionGiftItemUpsertWithWhereUniqueWithoutGiftInput[]
    createMany?: DoctorDistributionGiftItemCreateManyGiftInputEnvelope
    set?: DoctorDistributionGiftItemWhereUniqueInput | DoctorDistributionGiftItemWhereUniqueInput[]
    disconnect?: DoctorDistributionGiftItemWhereUniqueInput | DoctorDistributionGiftItemWhereUniqueInput[]
    delete?: DoctorDistributionGiftItemWhereUniqueInput | DoctorDistributionGiftItemWhereUniqueInput[]
    connect?: DoctorDistributionGiftItemWhereUniqueInput | DoctorDistributionGiftItemWhereUniqueInput[]
    update?: DoctorDistributionGiftItemUpdateWithWhereUniqueWithoutGiftInput | DoctorDistributionGiftItemUpdateWithWhereUniqueWithoutGiftInput[]
    updateMany?: DoctorDistributionGiftItemUpdateManyWithWhereWithoutGiftInput | DoctorDistributionGiftItemUpdateManyWithWhereWithoutGiftInput[]
    deleteMany?: DoctorDistributionGiftItemScalarWhereInput | DoctorDistributionGiftItemScalarWhereInput[]
  }

  export type UserGiftInventoryUncheckedUpdateManyWithoutGiftNestedInput = {
    create?: XOR<UserGiftInventoryCreateWithoutGiftInput, UserGiftInventoryUncheckedCreateWithoutGiftInput> | UserGiftInventoryCreateWithoutGiftInput[] | UserGiftInventoryUncheckedCreateWithoutGiftInput[]
    connectOrCreate?: UserGiftInventoryCreateOrConnectWithoutGiftInput | UserGiftInventoryCreateOrConnectWithoutGiftInput[]
    upsert?: UserGiftInventoryUpsertWithWhereUniqueWithoutGiftInput | UserGiftInventoryUpsertWithWhereUniqueWithoutGiftInput[]
    createMany?: UserGiftInventoryCreateManyGiftInputEnvelope
    set?: UserGiftInventoryWhereUniqueInput | UserGiftInventoryWhereUniqueInput[]
    disconnect?: UserGiftInventoryWhereUniqueInput | UserGiftInventoryWhereUniqueInput[]
    delete?: UserGiftInventoryWhereUniqueInput | UserGiftInventoryWhereUniqueInput[]
    connect?: UserGiftInventoryWhereUniqueInput | UserGiftInventoryWhereUniqueInput[]
    update?: UserGiftInventoryUpdateWithWhereUniqueWithoutGiftInput | UserGiftInventoryUpdateWithWhereUniqueWithoutGiftInput[]
    updateMany?: UserGiftInventoryUpdateManyWithWhereWithoutGiftInput | UserGiftInventoryUpdateManyWithWhereWithoutGiftInput[]
    deleteMany?: UserGiftInventoryScalarWhereInput | UserGiftInventoryScalarWhereInput[]
  }

  export type DoctorDistributionGiftItemUncheckedUpdateManyWithoutGiftNestedInput = {
    create?: XOR<DoctorDistributionGiftItemCreateWithoutGiftInput, DoctorDistributionGiftItemUncheckedCreateWithoutGiftInput> | DoctorDistributionGiftItemCreateWithoutGiftInput[] | DoctorDistributionGiftItemUncheckedCreateWithoutGiftInput[]
    connectOrCreate?: DoctorDistributionGiftItemCreateOrConnectWithoutGiftInput | DoctorDistributionGiftItemCreateOrConnectWithoutGiftInput[]
    upsert?: DoctorDistributionGiftItemUpsertWithWhereUniqueWithoutGiftInput | DoctorDistributionGiftItemUpsertWithWhereUniqueWithoutGiftInput[]
    createMany?: DoctorDistributionGiftItemCreateManyGiftInputEnvelope
    set?: DoctorDistributionGiftItemWhereUniqueInput | DoctorDistributionGiftItemWhereUniqueInput[]
    disconnect?: DoctorDistributionGiftItemWhereUniqueInput | DoctorDistributionGiftItemWhereUniqueInput[]
    delete?: DoctorDistributionGiftItemWhereUniqueInput | DoctorDistributionGiftItemWhereUniqueInput[]
    connect?: DoctorDistributionGiftItemWhereUniqueInput | DoctorDistributionGiftItemWhereUniqueInput[]
    update?: DoctorDistributionGiftItemUpdateWithWhereUniqueWithoutGiftInput | DoctorDistributionGiftItemUpdateWithWhereUniqueWithoutGiftInput[]
    updateMany?: DoctorDistributionGiftItemUpdateManyWithWhereWithoutGiftInput | DoctorDistributionGiftItemUpdateManyWithWhereWithoutGiftInput[]
    deleteMany?: DoctorDistributionGiftItemScalarWhereInput | DoctorDistributionGiftItemScalarWhereInput[]
  }

  export type EmployeeCreateNestedOneWithoutDrugInventoriesInput = {
    create?: XOR<EmployeeCreateWithoutDrugInventoriesInput, EmployeeUncheckedCreateWithoutDrugInventoriesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutDrugInventoriesInput
    connect?: EmployeeWhereUniqueInput
  }

  export type DrugCreateNestedOneWithoutUserDrugInventoryInput = {
    create?: XOR<DrugCreateWithoutUserDrugInventoryInput, DrugUncheckedCreateWithoutUserDrugInventoryInput>
    connectOrCreate?: DrugCreateOrConnectWithoutUserDrugInventoryInput
    connect?: DrugWhereUniqueInput
  }

  export type DoctorDistributionDrugItemCreateNestedManyWithoutFromInventoryInput = {
    create?: XOR<DoctorDistributionDrugItemCreateWithoutFromInventoryInput, DoctorDistributionDrugItemUncheckedCreateWithoutFromInventoryInput> | DoctorDistributionDrugItemCreateWithoutFromInventoryInput[] | DoctorDistributionDrugItemUncheckedCreateWithoutFromInventoryInput[]
    connectOrCreate?: DoctorDistributionDrugItemCreateOrConnectWithoutFromInventoryInput | DoctorDistributionDrugItemCreateOrConnectWithoutFromInventoryInput[]
    createMany?: DoctorDistributionDrugItemCreateManyFromInventoryInputEnvelope
    connect?: DoctorDistributionDrugItemWhereUniqueInput | DoctorDistributionDrugItemWhereUniqueInput[]
  }

  export type DoctorDistributionDrugItemUncheckedCreateNestedManyWithoutFromInventoryInput = {
    create?: XOR<DoctorDistributionDrugItemCreateWithoutFromInventoryInput, DoctorDistributionDrugItemUncheckedCreateWithoutFromInventoryInput> | DoctorDistributionDrugItemCreateWithoutFromInventoryInput[] | DoctorDistributionDrugItemUncheckedCreateWithoutFromInventoryInput[]
    connectOrCreate?: DoctorDistributionDrugItemCreateOrConnectWithoutFromInventoryInput | DoctorDistributionDrugItemCreateOrConnectWithoutFromInventoryInput[]
    createMany?: DoctorDistributionDrugItemCreateManyFromInventoryInputEnvelope
    connect?: DoctorDistributionDrugItemWhereUniqueInput | DoctorDistributionDrugItemWhereUniqueInput[]
  }

  export type EmployeeUpdateOneRequiredWithoutDrugInventoriesNestedInput = {
    create?: XOR<EmployeeCreateWithoutDrugInventoriesInput, EmployeeUncheckedCreateWithoutDrugInventoriesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutDrugInventoriesInput
    upsert?: EmployeeUpsertWithoutDrugInventoriesInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutDrugInventoriesInput, EmployeeUpdateWithoutDrugInventoriesInput>, EmployeeUncheckedUpdateWithoutDrugInventoriesInput>
  }

  export type DrugUpdateOneRequiredWithoutUserDrugInventoryNestedInput = {
    create?: XOR<DrugCreateWithoutUserDrugInventoryInput, DrugUncheckedCreateWithoutUserDrugInventoryInput>
    connectOrCreate?: DrugCreateOrConnectWithoutUserDrugInventoryInput
    upsert?: DrugUpsertWithoutUserDrugInventoryInput
    connect?: DrugWhereUniqueInput
    update?: XOR<XOR<DrugUpdateToOneWithWhereWithoutUserDrugInventoryInput, DrugUpdateWithoutUserDrugInventoryInput>, DrugUncheckedUpdateWithoutUserDrugInventoryInput>
  }

  export type DoctorDistributionDrugItemUpdateManyWithoutFromInventoryNestedInput = {
    create?: XOR<DoctorDistributionDrugItemCreateWithoutFromInventoryInput, DoctorDistributionDrugItemUncheckedCreateWithoutFromInventoryInput> | DoctorDistributionDrugItemCreateWithoutFromInventoryInput[] | DoctorDistributionDrugItemUncheckedCreateWithoutFromInventoryInput[]
    connectOrCreate?: DoctorDistributionDrugItemCreateOrConnectWithoutFromInventoryInput | DoctorDistributionDrugItemCreateOrConnectWithoutFromInventoryInput[]
    upsert?: DoctorDistributionDrugItemUpsertWithWhereUniqueWithoutFromInventoryInput | DoctorDistributionDrugItemUpsertWithWhereUniqueWithoutFromInventoryInput[]
    createMany?: DoctorDistributionDrugItemCreateManyFromInventoryInputEnvelope
    set?: DoctorDistributionDrugItemWhereUniqueInput | DoctorDistributionDrugItemWhereUniqueInput[]
    disconnect?: DoctorDistributionDrugItemWhereUniqueInput | DoctorDistributionDrugItemWhereUniqueInput[]
    delete?: DoctorDistributionDrugItemWhereUniqueInput | DoctorDistributionDrugItemWhereUniqueInput[]
    connect?: DoctorDistributionDrugItemWhereUniqueInput | DoctorDistributionDrugItemWhereUniqueInput[]
    update?: DoctorDistributionDrugItemUpdateWithWhereUniqueWithoutFromInventoryInput | DoctorDistributionDrugItemUpdateWithWhereUniqueWithoutFromInventoryInput[]
    updateMany?: DoctorDistributionDrugItemUpdateManyWithWhereWithoutFromInventoryInput | DoctorDistributionDrugItemUpdateManyWithWhereWithoutFromInventoryInput[]
    deleteMany?: DoctorDistributionDrugItemScalarWhereInput | DoctorDistributionDrugItemScalarWhereInput[]
  }

  export type DoctorDistributionDrugItemUncheckedUpdateManyWithoutFromInventoryNestedInput = {
    create?: XOR<DoctorDistributionDrugItemCreateWithoutFromInventoryInput, DoctorDistributionDrugItemUncheckedCreateWithoutFromInventoryInput> | DoctorDistributionDrugItemCreateWithoutFromInventoryInput[] | DoctorDistributionDrugItemUncheckedCreateWithoutFromInventoryInput[]
    connectOrCreate?: DoctorDistributionDrugItemCreateOrConnectWithoutFromInventoryInput | DoctorDistributionDrugItemCreateOrConnectWithoutFromInventoryInput[]
    upsert?: DoctorDistributionDrugItemUpsertWithWhereUniqueWithoutFromInventoryInput | DoctorDistributionDrugItemUpsertWithWhereUniqueWithoutFromInventoryInput[]
    createMany?: DoctorDistributionDrugItemCreateManyFromInventoryInputEnvelope
    set?: DoctorDistributionDrugItemWhereUniqueInput | DoctorDistributionDrugItemWhereUniqueInput[]
    disconnect?: DoctorDistributionDrugItemWhereUniqueInput | DoctorDistributionDrugItemWhereUniqueInput[]
    delete?: DoctorDistributionDrugItemWhereUniqueInput | DoctorDistributionDrugItemWhereUniqueInput[]
    connect?: DoctorDistributionDrugItemWhereUniqueInput | DoctorDistributionDrugItemWhereUniqueInput[]
    update?: DoctorDistributionDrugItemUpdateWithWhereUniqueWithoutFromInventoryInput | DoctorDistributionDrugItemUpdateWithWhereUniqueWithoutFromInventoryInput[]
    updateMany?: DoctorDistributionDrugItemUpdateManyWithWhereWithoutFromInventoryInput | DoctorDistributionDrugItemUpdateManyWithWhereWithoutFromInventoryInput[]
    deleteMany?: DoctorDistributionDrugItemScalarWhereInput | DoctorDistributionDrugItemScalarWhereInput[]
  }

  export type EmployeeCreateNestedOneWithoutGiftInventoriesInput = {
    create?: XOR<EmployeeCreateWithoutGiftInventoriesInput, EmployeeUncheckedCreateWithoutGiftInventoriesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutGiftInventoriesInput
    connect?: EmployeeWhereUniqueInput
  }

  export type GiftCreateNestedOneWithoutUserGiftInventoriesInput = {
    create?: XOR<GiftCreateWithoutUserGiftInventoriesInput, GiftUncheckedCreateWithoutUserGiftInventoriesInput>
    connectOrCreate?: GiftCreateOrConnectWithoutUserGiftInventoriesInput
    connect?: GiftWhereUniqueInput
  }

  export type DoctorDistributionGiftItemCreateNestedManyWithoutFromInventoryInput = {
    create?: XOR<DoctorDistributionGiftItemCreateWithoutFromInventoryInput, DoctorDistributionGiftItemUncheckedCreateWithoutFromInventoryInput> | DoctorDistributionGiftItemCreateWithoutFromInventoryInput[] | DoctorDistributionGiftItemUncheckedCreateWithoutFromInventoryInput[]
    connectOrCreate?: DoctorDistributionGiftItemCreateOrConnectWithoutFromInventoryInput | DoctorDistributionGiftItemCreateOrConnectWithoutFromInventoryInput[]
    createMany?: DoctorDistributionGiftItemCreateManyFromInventoryInputEnvelope
    connect?: DoctorDistributionGiftItemWhereUniqueInput | DoctorDistributionGiftItemWhereUniqueInput[]
  }

  export type DoctorDistributionGiftItemUncheckedCreateNestedManyWithoutFromInventoryInput = {
    create?: XOR<DoctorDistributionGiftItemCreateWithoutFromInventoryInput, DoctorDistributionGiftItemUncheckedCreateWithoutFromInventoryInput> | DoctorDistributionGiftItemCreateWithoutFromInventoryInput[] | DoctorDistributionGiftItemUncheckedCreateWithoutFromInventoryInput[]
    connectOrCreate?: DoctorDistributionGiftItemCreateOrConnectWithoutFromInventoryInput | DoctorDistributionGiftItemCreateOrConnectWithoutFromInventoryInput[]
    createMany?: DoctorDistributionGiftItemCreateManyFromInventoryInputEnvelope
    connect?: DoctorDistributionGiftItemWhereUniqueInput | DoctorDistributionGiftItemWhereUniqueInput[]
  }

  export type EmployeeUpdateOneRequiredWithoutGiftInventoriesNestedInput = {
    create?: XOR<EmployeeCreateWithoutGiftInventoriesInput, EmployeeUncheckedCreateWithoutGiftInventoriesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutGiftInventoriesInput
    upsert?: EmployeeUpsertWithoutGiftInventoriesInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutGiftInventoriesInput, EmployeeUpdateWithoutGiftInventoriesInput>, EmployeeUncheckedUpdateWithoutGiftInventoriesInput>
  }

  export type GiftUpdateOneRequiredWithoutUserGiftInventoriesNestedInput = {
    create?: XOR<GiftCreateWithoutUserGiftInventoriesInput, GiftUncheckedCreateWithoutUserGiftInventoriesInput>
    connectOrCreate?: GiftCreateOrConnectWithoutUserGiftInventoriesInput
    upsert?: GiftUpsertWithoutUserGiftInventoriesInput
    connect?: GiftWhereUniqueInput
    update?: XOR<XOR<GiftUpdateToOneWithWhereWithoutUserGiftInventoriesInput, GiftUpdateWithoutUserGiftInventoriesInput>, GiftUncheckedUpdateWithoutUserGiftInventoriesInput>
  }

  export type DoctorDistributionGiftItemUpdateManyWithoutFromInventoryNestedInput = {
    create?: XOR<DoctorDistributionGiftItemCreateWithoutFromInventoryInput, DoctorDistributionGiftItemUncheckedCreateWithoutFromInventoryInput> | DoctorDistributionGiftItemCreateWithoutFromInventoryInput[] | DoctorDistributionGiftItemUncheckedCreateWithoutFromInventoryInput[]
    connectOrCreate?: DoctorDistributionGiftItemCreateOrConnectWithoutFromInventoryInput | DoctorDistributionGiftItemCreateOrConnectWithoutFromInventoryInput[]
    upsert?: DoctorDistributionGiftItemUpsertWithWhereUniqueWithoutFromInventoryInput | DoctorDistributionGiftItemUpsertWithWhereUniqueWithoutFromInventoryInput[]
    createMany?: DoctorDistributionGiftItemCreateManyFromInventoryInputEnvelope
    set?: DoctorDistributionGiftItemWhereUniqueInput | DoctorDistributionGiftItemWhereUniqueInput[]
    disconnect?: DoctorDistributionGiftItemWhereUniqueInput | DoctorDistributionGiftItemWhereUniqueInput[]
    delete?: DoctorDistributionGiftItemWhereUniqueInput | DoctorDistributionGiftItemWhereUniqueInput[]
    connect?: DoctorDistributionGiftItemWhereUniqueInput | DoctorDistributionGiftItemWhereUniqueInput[]
    update?: DoctorDistributionGiftItemUpdateWithWhereUniqueWithoutFromInventoryInput | DoctorDistributionGiftItemUpdateWithWhereUniqueWithoutFromInventoryInput[]
    updateMany?: DoctorDistributionGiftItemUpdateManyWithWhereWithoutFromInventoryInput | DoctorDistributionGiftItemUpdateManyWithWhereWithoutFromInventoryInput[]
    deleteMany?: DoctorDistributionGiftItemScalarWhereInput | DoctorDistributionGiftItemScalarWhereInput[]
  }

  export type DoctorDistributionGiftItemUncheckedUpdateManyWithoutFromInventoryNestedInput = {
    create?: XOR<DoctorDistributionGiftItemCreateWithoutFromInventoryInput, DoctorDistributionGiftItemUncheckedCreateWithoutFromInventoryInput> | DoctorDistributionGiftItemCreateWithoutFromInventoryInput[] | DoctorDistributionGiftItemUncheckedCreateWithoutFromInventoryInput[]
    connectOrCreate?: DoctorDistributionGiftItemCreateOrConnectWithoutFromInventoryInput | DoctorDistributionGiftItemCreateOrConnectWithoutFromInventoryInput[]
    upsert?: DoctorDistributionGiftItemUpsertWithWhereUniqueWithoutFromInventoryInput | DoctorDistributionGiftItemUpsertWithWhereUniqueWithoutFromInventoryInput[]
    createMany?: DoctorDistributionGiftItemCreateManyFromInventoryInputEnvelope
    set?: DoctorDistributionGiftItemWhereUniqueInput | DoctorDistributionGiftItemWhereUniqueInput[]
    disconnect?: DoctorDistributionGiftItemWhereUniqueInput | DoctorDistributionGiftItemWhereUniqueInput[]
    delete?: DoctorDistributionGiftItemWhereUniqueInput | DoctorDistributionGiftItemWhereUniqueInput[]
    connect?: DoctorDistributionGiftItemWhereUniqueInput | DoctorDistributionGiftItemWhereUniqueInput[]
    update?: DoctorDistributionGiftItemUpdateWithWhereUniqueWithoutFromInventoryInput | DoctorDistributionGiftItemUpdateWithWhereUniqueWithoutFromInventoryInput[]
    updateMany?: DoctorDistributionGiftItemUpdateManyWithWhereWithoutFromInventoryInput | DoctorDistributionGiftItemUpdateManyWithWhereWithoutFromInventoryInput[]
    deleteMany?: DoctorDistributionGiftItemScalarWhereInput | DoctorDistributionGiftItemScalarWhereInput[]
  }

  export type DoctorInteractionCreateNestedOneWithoutDoctorDistributionInput = {
    create?: XOR<DoctorInteractionCreateWithoutDoctorDistributionInput, DoctorInteractionUncheckedCreateWithoutDoctorDistributionInput>
    connectOrCreate?: DoctorInteractionCreateOrConnectWithoutDoctorDistributionInput
    connect?: DoctorInteractionWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutDoctorDistributionsInput = {
    create?: XOR<EmployeeCreateWithoutDoctorDistributionsInput, EmployeeUncheckedCreateWithoutDoctorDistributionsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutDoctorDistributionsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type DoctorDistributionDrugItemCreateNestedManyWithoutDoctorDistributionInput = {
    create?: XOR<DoctorDistributionDrugItemCreateWithoutDoctorDistributionInput, DoctorDistributionDrugItemUncheckedCreateWithoutDoctorDistributionInput> | DoctorDistributionDrugItemCreateWithoutDoctorDistributionInput[] | DoctorDistributionDrugItemUncheckedCreateWithoutDoctorDistributionInput[]
    connectOrCreate?: DoctorDistributionDrugItemCreateOrConnectWithoutDoctorDistributionInput | DoctorDistributionDrugItemCreateOrConnectWithoutDoctorDistributionInput[]
    createMany?: DoctorDistributionDrugItemCreateManyDoctorDistributionInputEnvelope
    connect?: DoctorDistributionDrugItemWhereUniqueInput | DoctorDistributionDrugItemWhereUniqueInput[]
  }

  export type DoctorDistributionGiftItemCreateNestedManyWithoutDoctorDistributionInput = {
    create?: XOR<DoctorDistributionGiftItemCreateWithoutDoctorDistributionInput, DoctorDistributionGiftItemUncheckedCreateWithoutDoctorDistributionInput> | DoctorDistributionGiftItemCreateWithoutDoctorDistributionInput[] | DoctorDistributionGiftItemUncheckedCreateWithoutDoctorDistributionInput[]
    connectOrCreate?: DoctorDistributionGiftItemCreateOrConnectWithoutDoctorDistributionInput | DoctorDistributionGiftItemCreateOrConnectWithoutDoctorDistributionInput[]
    createMany?: DoctorDistributionGiftItemCreateManyDoctorDistributionInputEnvelope
    connect?: DoctorDistributionGiftItemWhereUniqueInput | DoctorDistributionGiftItemWhereUniqueInput[]
  }

  export type DoctorDistributionDrugItemUncheckedCreateNestedManyWithoutDoctorDistributionInput = {
    create?: XOR<DoctorDistributionDrugItemCreateWithoutDoctorDistributionInput, DoctorDistributionDrugItemUncheckedCreateWithoutDoctorDistributionInput> | DoctorDistributionDrugItemCreateWithoutDoctorDistributionInput[] | DoctorDistributionDrugItemUncheckedCreateWithoutDoctorDistributionInput[]
    connectOrCreate?: DoctorDistributionDrugItemCreateOrConnectWithoutDoctorDistributionInput | DoctorDistributionDrugItemCreateOrConnectWithoutDoctorDistributionInput[]
    createMany?: DoctorDistributionDrugItemCreateManyDoctorDistributionInputEnvelope
    connect?: DoctorDistributionDrugItemWhereUniqueInput | DoctorDistributionDrugItemWhereUniqueInput[]
  }

  export type DoctorDistributionGiftItemUncheckedCreateNestedManyWithoutDoctorDistributionInput = {
    create?: XOR<DoctorDistributionGiftItemCreateWithoutDoctorDistributionInput, DoctorDistributionGiftItemUncheckedCreateWithoutDoctorDistributionInput> | DoctorDistributionGiftItemCreateWithoutDoctorDistributionInput[] | DoctorDistributionGiftItemUncheckedCreateWithoutDoctorDistributionInput[]
    connectOrCreate?: DoctorDistributionGiftItemCreateOrConnectWithoutDoctorDistributionInput | DoctorDistributionGiftItemCreateOrConnectWithoutDoctorDistributionInput[]
    createMany?: DoctorDistributionGiftItemCreateManyDoctorDistributionInputEnvelope
    connect?: DoctorDistributionGiftItemWhereUniqueInput | DoctorDistributionGiftItemWhereUniqueInput[]
  }

  export type DoctorInteractionUpdateOneRequiredWithoutDoctorDistributionNestedInput = {
    create?: XOR<DoctorInteractionCreateWithoutDoctorDistributionInput, DoctorInteractionUncheckedCreateWithoutDoctorDistributionInput>
    connectOrCreate?: DoctorInteractionCreateOrConnectWithoutDoctorDistributionInput
    upsert?: DoctorInteractionUpsertWithoutDoctorDistributionInput
    connect?: DoctorInteractionWhereUniqueInput
    update?: XOR<XOR<DoctorInteractionUpdateToOneWithWhereWithoutDoctorDistributionInput, DoctorInteractionUpdateWithoutDoctorDistributionInput>, DoctorInteractionUncheckedUpdateWithoutDoctorDistributionInput>
  }

  export type EmployeeUpdateOneRequiredWithoutDoctorDistributionsNestedInput = {
    create?: XOR<EmployeeCreateWithoutDoctorDistributionsInput, EmployeeUncheckedCreateWithoutDoctorDistributionsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutDoctorDistributionsInput
    upsert?: EmployeeUpsertWithoutDoctorDistributionsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutDoctorDistributionsInput, EmployeeUpdateWithoutDoctorDistributionsInput>, EmployeeUncheckedUpdateWithoutDoctorDistributionsInput>
  }

  export type DoctorDistributionDrugItemUpdateManyWithoutDoctorDistributionNestedInput = {
    create?: XOR<DoctorDistributionDrugItemCreateWithoutDoctorDistributionInput, DoctorDistributionDrugItemUncheckedCreateWithoutDoctorDistributionInput> | DoctorDistributionDrugItemCreateWithoutDoctorDistributionInput[] | DoctorDistributionDrugItemUncheckedCreateWithoutDoctorDistributionInput[]
    connectOrCreate?: DoctorDistributionDrugItemCreateOrConnectWithoutDoctorDistributionInput | DoctorDistributionDrugItemCreateOrConnectWithoutDoctorDistributionInput[]
    upsert?: DoctorDistributionDrugItemUpsertWithWhereUniqueWithoutDoctorDistributionInput | DoctorDistributionDrugItemUpsertWithWhereUniqueWithoutDoctorDistributionInput[]
    createMany?: DoctorDistributionDrugItemCreateManyDoctorDistributionInputEnvelope
    set?: DoctorDistributionDrugItemWhereUniqueInput | DoctorDistributionDrugItemWhereUniqueInput[]
    disconnect?: DoctorDistributionDrugItemWhereUniqueInput | DoctorDistributionDrugItemWhereUniqueInput[]
    delete?: DoctorDistributionDrugItemWhereUniqueInput | DoctorDistributionDrugItemWhereUniqueInput[]
    connect?: DoctorDistributionDrugItemWhereUniqueInput | DoctorDistributionDrugItemWhereUniqueInput[]
    update?: DoctorDistributionDrugItemUpdateWithWhereUniqueWithoutDoctorDistributionInput | DoctorDistributionDrugItemUpdateWithWhereUniqueWithoutDoctorDistributionInput[]
    updateMany?: DoctorDistributionDrugItemUpdateManyWithWhereWithoutDoctorDistributionInput | DoctorDistributionDrugItemUpdateManyWithWhereWithoutDoctorDistributionInput[]
    deleteMany?: DoctorDistributionDrugItemScalarWhereInput | DoctorDistributionDrugItemScalarWhereInput[]
  }

  export type DoctorDistributionGiftItemUpdateManyWithoutDoctorDistributionNestedInput = {
    create?: XOR<DoctorDistributionGiftItemCreateWithoutDoctorDistributionInput, DoctorDistributionGiftItemUncheckedCreateWithoutDoctorDistributionInput> | DoctorDistributionGiftItemCreateWithoutDoctorDistributionInput[] | DoctorDistributionGiftItemUncheckedCreateWithoutDoctorDistributionInput[]
    connectOrCreate?: DoctorDistributionGiftItemCreateOrConnectWithoutDoctorDistributionInput | DoctorDistributionGiftItemCreateOrConnectWithoutDoctorDistributionInput[]
    upsert?: DoctorDistributionGiftItemUpsertWithWhereUniqueWithoutDoctorDistributionInput | DoctorDistributionGiftItemUpsertWithWhereUniqueWithoutDoctorDistributionInput[]
    createMany?: DoctorDistributionGiftItemCreateManyDoctorDistributionInputEnvelope
    set?: DoctorDistributionGiftItemWhereUniqueInput | DoctorDistributionGiftItemWhereUniqueInput[]
    disconnect?: DoctorDistributionGiftItemWhereUniqueInput | DoctorDistributionGiftItemWhereUniqueInput[]
    delete?: DoctorDistributionGiftItemWhereUniqueInput | DoctorDistributionGiftItemWhereUniqueInput[]
    connect?: DoctorDistributionGiftItemWhereUniqueInput | DoctorDistributionGiftItemWhereUniqueInput[]
    update?: DoctorDistributionGiftItemUpdateWithWhereUniqueWithoutDoctorDistributionInput | DoctorDistributionGiftItemUpdateWithWhereUniqueWithoutDoctorDistributionInput[]
    updateMany?: DoctorDistributionGiftItemUpdateManyWithWhereWithoutDoctorDistributionInput | DoctorDistributionGiftItemUpdateManyWithWhereWithoutDoctorDistributionInput[]
    deleteMany?: DoctorDistributionGiftItemScalarWhereInput | DoctorDistributionGiftItemScalarWhereInput[]
  }

  export type DoctorDistributionDrugItemUncheckedUpdateManyWithoutDoctorDistributionNestedInput = {
    create?: XOR<DoctorDistributionDrugItemCreateWithoutDoctorDistributionInput, DoctorDistributionDrugItemUncheckedCreateWithoutDoctorDistributionInput> | DoctorDistributionDrugItemCreateWithoutDoctorDistributionInput[] | DoctorDistributionDrugItemUncheckedCreateWithoutDoctorDistributionInput[]
    connectOrCreate?: DoctorDistributionDrugItemCreateOrConnectWithoutDoctorDistributionInput | DoctorDistributionDrugItemCreateOrConnectWithoutDoctorDistributionInput[]
    upsert?: DoctorDistributionDrugItemUpsertWithWhereUniqueWithoutDoctorDistributionInput | DoctorDistributionDrugItemUpsertWithWhereUniqueWithoutDoctorDistributionInput[]
    createMany?: DoctorDistributionDrugItemCreateManyDoctorDistributionInputEnvelope
    set?: DoctorDistributionDrugItemWhereUniqueInput | DoctorDistributionDrugItemWhereUniqueInput[]
    disconnect?: DoctorDistributionDrugItemWhereUniqueInput | DoctorDistributionDrugItemWhereUniqueInput[]
    delete?: DoctorDistributionDrugItemWhereUniqueInput | DoctorDistributionDrugItemWhereUniqueInput[]
    connect?: DoctorDistributionDrugItemWhereUniqueInput | DoctorDistributionDrugItemWhereUniqueInput[]
    update?: DoctorDistributionDrugItemUpdateWithWhereUniqueWithoutDoctorDistributionInput | DoctorDistributionDrugItemUpdateWithWhereUniqueWithoutDoctorDistributionInput[]
    updateMany?: DoctorDistributionDrugItemUpdateManyWithWhereWithoutDoctorDistributionInput | DoctorDistributionDrugItemUpdateManyWithWhereWithoutDoctorDistributionInput[]
    deleteMany?: DoctorDistributionDrugItemScalarWhereInput | DoctorDistributionDrugItemScalarWhereInput[]
  }

  export type DoctorDistributionGiftItemUncheckedUpdateManyWithoutDoctorDistributionNestedInput = {
    create?: XOR<DoctorDistributionGiftItemCreateWithoutDoctorDistributionInput, DoctorDistributionGiftItemUncheckedCreateWithoutDoctorDistributionInput> | DoctorDistributionGiftItemCreateWithoutDoctorDistributionInput[] | DoctorDistributionGiftItemUncheckedCreateWithoutDoctorDistributionInput[]
    connectOrCreate?: DoctorDistributionGiftItemCreateOrConnectWithoutDoctorDistributionInput | DoctorDistributionGiftItemCreateOrConnectWithoutDoctorDistributionInput[]
    upsert?: DoctorDistributionGiftItemUpsertWithWhereUniqueWithoutDoctorDistributionInput | DoctorDistributionGiftItemUpsertWithWhereUniqueWithoutDoctorDistributionInput[]
    createMany?: DoctorDistributionGiftItemCreateManyDoctorDistributionInputEnvelope
    set?: DoctorDistributionGiftItemWhereUniqueInput | DoctorDistributionGiftItemWhereUniqueInput[]
    disconnect?: DoctorDistributionGiftItemWhereUniqueInput | DoctorDistributionGiftItemWhereUniqueInput[]
    delete?: DoctorDistributionGiftItemWhereUniqueInput | DoctorDistributionGiftItemWhereUniqueInput[]
    connect?: DoctorDistributionGiftItemWhereUniqueInput | DoctorDistributionGiftItemWhereUniqueInput[]
    update?: DoctorDistributionGiftItemUpdateWithWhereUniqueWithoutDoctorDistributionInput | DoctorDistributionGiftItemUpdateWithWhereUniqueWithoutDoctorDistributionInput[]
    updateMany?: DoctorDistributionGiftItemUpdateManyWithWhereWithoutDoctorDistributionInput | DoctorDistributionGiftItemUpdateManyWithWhereWithoutDoctorDistributionInput[]
    deleteMany?: DoctorDistributionGiftItemScalarWhereInput | DoctorDistributionGiftItemScalarWhereInput[]
  }

  export type DoctorDistributionCreateNestedOneWithoutDrugItemsInput = {
    create?: XOR<DoctorDistributionCreateWithoutDrugItemsInput, DoctorDistributionUncheckedCreateWithoutDrugItemsInput>
    connectOrCreate?: DoctorDistributionCreateOrConnectWithoutDrugItemsInput
    connect?: DoctorDistributionWhereUniqueInput
  }

  export type DrugCreateNestedOneWithoutDoctorDistributionDrugItemInput = {
    create?: XOR<DrugCreateWithoutDoctorDistributionDrugItemInput, DrugUncheckedCreateWithoutDoctorDistributionDrugItemInput>
    connectOrCreate?: DrugCreateOrConnectWithoutDoctorDistributionDrugItemInput
    connect?: DrugWhereUniqueInput
  }

  export type UserDrugInventoryCreateNestedOneWithoutDoctorDistributionDrugItemsInput = {
    create?: XOR<UserDrugInventoryCreateWithoutDoctorDistributionDrugItemsInput, UserDrugInventoryUncheckedCreateWithoutDoctorDistributionDrugItemsInput>
    connectOrCreate?: UserDrugInventoryCreateOrConnectWithoutDoctorDistributionDrugItemsInput
    connect?: UserDrugInventoryWhereUniqueInput
  }

  export type DoctorDistributionUpdateOneRequiredWithoutDrugItemsNestedInput = {
    create?: XOR<DoctorDistributionCreateWithoutDrugItemsInput, DoctorDistributionUncheckedCreateWithoutDrugItemsInput>
    connectOrCreate?: DoctorDistributionCreateOrConnectWithoutDrugItemsInput
    upsert?: DoctorDistributionUpsertWithoutDrugItemsInput
    connect?: DoctorDistributionWhereUniqueInput
    update?: XOR<XOR<DoctorDistributionUpdateToOneWithWhereWithoutDrugItemsInput, DoctorDistributionUpdateWithoutDrugItemsInput>, DoctorDistributionUncheckedUpdateWithoutDrugItemsInput>
  }

  export type DrugUpdateOneRequiredWithoutDoctorDistributionDrugItemNestedInput = {
    create?: XOR<DrugCreateWithoutDoctorDistributionDrugItemInput, DrugUncheckedCreateWithoutDoctorDistributionDrugItemInput>
    connectOrCreate?: DrugCreateOrConnectWithoutDoctorDistributionDrugItemInput
    upsert?: DrugUpsertWithoutDoctorDistributionDrugItemInput
    connect?: DrugWhereUniqueInput
    update?: XOR<XOR<DrugUpdateToOneWithWhereWithoutDoctorDistributionDrugItemInput, DrugUpdateWithoutDoctorDistributionDrugItemInput>, DrugUncheckedUpdateWithoutDoctorDistributionDrugItemInput>
  }

  export type UserDrugInventoryUpdateOneRequiredWithoutDoctorDistributionDrugItemsNestedInput = {
    create?: XOR<UserDrugInventoryCreateWithoutDoctorDistributionDrugItemsInput, UserDrugInventoryUncheckedCreateWithoutDoctorDistributionDrugItemsInput>
    connectOrCreate?: UserDrugInventoryCreateOrConnectWithoutDoctorDistributionDrugItemsInput
    upsert?: UserDrugInventoryUpsertWithoutDoctorDistributionDrugItemsInput
    connect?: UserDrugInventoryWhereUniqueInput
    update?: XOR<XOR<UserDrugInventoryUpdateToOneWithWhereWithoutDoctorDistributionDrugItemsInput, UserDrugInventoryUpdateWithoutDoctorDistributionDrugItemsInput>, UserDrugInventoryUncheckedUpdateWithoutDoctorDistributionDrugItemsInput>
  }

  export type DoctorDistributionCreateNestedOneWithoutGiftItemsInput = {
    create?: XOR<DoctorDistributionCreateWithoutGiftItemsInput, DoctorDistributionUncheckedCreateWithoutGiftItemsInput>
    connectOrCreate?: DoctorDistributionCreateOrConnectWithoutGiftItemsInput
    connect?: DoctorDistributionWhereUniqueInput
  }

  export type GiftCreateNestedOneWithoutDoctorDistributionGiftItemsInput = {
    create?: XOR<GiftCreateWithoutDoctorDistributionGiftItemsInput, GiftUncheckedCreateWithoutDoctorDistributionGiftItemsInput>
    connectOrCreate?: GiftCreateOrConnectWithoutDoctorDistributionGiftItemsInput
    connect?: GiftWhereUniqueInput
  }

  export type UserGiftInventoryCreateNestedOneWithoutDoctorDistributionGiftItemsInput = {
    create?: XOR<UserGiftInventoryCreateWithoutDoctorDistributionGiftItemsInput, UserGiftInventoryUncheckedCreateWithoutDoctorDistributionGiftItemsInput>
    connectOrCreate?: UserGiftInventoryCreateOrConnectWithoutDoctorDistributionGiftItemsInput
    connect?: UserGiftInventoryWhereUniqueInput
  }

  export type DoctorDistributionUpdateOneRequiredWithoutGiftItemsNestedInput = {
    create?: XOR<DoctorDistributionCreateWithoutGiftItemsInput, DoctorDistributionUncheckedCreateWithoutGiftItemsInput>
    connectOrCreate?: DoctorDistributionCreateOrConnectWithoutGiftItemsInput
    upsert?: DoctorDistributionUpsertWithoutGiftItemsInput
    connect?: DoctorDistributionWhereUniqueInput
    update?: XOR<XOR<DoctorDistributionUpdateToOneWithWhereWithoutGiftItemsInput, DoctorDistributionUpdateWithoutGiftItemsInput>, DoctorDistributionUncheckedUpdateWithoutGiftItemsInput>
  }

  export type GiftUpdateOneRequiredWithoutDoctorDistributionGiftItemsNestedInput = {
    create?: XOR<GiftCreateWithoutDoctorDistributionGiftItemsInput, GiftUncheckedCreateWithoutDoctorDistributionGiftItemsInput>
    connectOrCreate?: GiftCreateOrConnectWithoutDoctorDistributionGiftItemsInput
    upsert?: GiftUpsertWithoutDoctorDistributionGiftItemsInput
    connect?: GiftWhereUniqueInput
    update?: XOR<XOR<GiftUpdateToOneWithWhereWithoutDoctorDistributionGiftItemsInput, GiftUpdateWithoutDoctorDistributionGiftItemsInput>, GiftUncheckedUpdateWithoutDoctorDistributionGiftItemsInput>
  }

  export type UserGiftInventoryUpdateOneRequiredWithoutDoctorDistributionGiftItemsNestedInput = {
    create?: XOR<UserGiftInventoryCreateWithoutDoctorDistributionGiftItemsInput, UserGiftInventoryUncheckedCreateWithoutDoctorDistributionGiftItemsInput>
    connectOrCreate?: UserGiftInventoryCreateOrConnectWithoutDoctorDistributionGiftItemsInput
    upsert?: UserGiftInventoryUpsertWithoutDoctorDistributionGiftItemsInput
    connect?: UserGiftInventoryWhereUniqueInput
    update?: XOR<XOR<UserGiftInventoryUpdateToOneWithWhereWithoutDoctorDistributionGiftItemsInput, UserGiftInventoryUpdateWithoutDoctorDistributionGiftItemsInput>, UserGiftInventoryUncheckedUpdateWithoutDoctorDistributionGiftItemsInput>
  }

  export type EmployeeCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<EmployeeCreateWithoutAuditLogsInput, EmployeeUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutAuditLogsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeUpdateOneWithoutAuditLogsNestedInput = {
    create?: XOR<EmployeeCreateWithoutAuditLogsInput, EmployeeUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutAuditLogsInput
    upsert?: EmployeeUpsertWithoutAuditLogsInput
    disconnect?: EmployeeWhereInput | boolean
    delete?: EmployeeWhereInput | boolean
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutAuditLogsInput, EmployeeUpdateWithoutAuditLogsInput>, EmployeeUncheckedUpdateWithoutAuditLogsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumEmployeeRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.EmployeeRole | EnumEmployeeRoleFieldRefInput<$PrismaModel>
    in?: $Enums.EmployeeRole[] | ListEnumEmployeeRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmployeeRole[] | ListEnumEmployeeRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumEmployeeRoleFilter<$PrismaModel> | $Enums.EmployeeRole
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumEmployeeRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EmployeeRole | EnumEmployeeRoleFieldRefInput<$PrismaModel>
    in?: $Enums.EmployeeRole[] | ListEnumEmployeeRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmployeeRole[] | ListEnumEmployeeRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumEmployeeRoleWithAggregatesFilter<$PrismaModel> | $Enums.EmployeeRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEmployeeRoleFilter<$PrismaModel>
    _max?: NestedEnumEmployeeRoleFilter<$PrismaModel>
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumDayOfWeekFilter<$PrismaModel = never> = {
    equals?: $Enums.DayOfWeek | EnumDayOfWeekFieldRefInput<$PrismaModel>
    in?: $Enums.DayOfWeek[] | ListEnumDayOfWeekFieldRefInput<$PrismaModel>
    notIn?: $Enums.DayOfWeek[] | ListEnumDayOfWeekFieldRefInput<$PrismaModel>
    not?: NestedEnumDayOfWeekFilter<$PrismaModel> | $Enums.DayOfWeek
  }

  export type NestedEnumConsultationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ConsultationType | EnumConsultationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ConsultationType[] | ListEnumConsultationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ConsultationType[] | ListEnumConsultationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumConsultationTypeFilter<$PrismaModel> | $Enums.ConsultationType
  }

  export type NestedEnumDayOfWeekWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DayOfWeek | EnumDayOfWeekFieldRefInput<$PrismaModel>
    in?: $Enums.DayOfWeek[] | ListEnumDayOfWeekFieldRefInput<$PrismaModel>
    notIn?: $Enums.DayOfWeek[] | ListEnumDayOfWeekFieldRefInput<$PrismaModel>
    not?: NestedEnumDayOfWeekWithAggregatesFilter<$PrismaModel> | $Enums.DayOfWeek
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDayOfWeekFilter<$PrismaModel>
    _max?: NestedEnumDayOfWeekFilter<$PrismaModel>
  }

  export type NestedEnumConsultationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ConsultationType | EnumConsultationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ConsultationType[] | ListEnumConsultationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ConsultationType[] | ListEnumConsultationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumConsultationTypeWithAggregatesFilter<$PrismaModel> | $Enums.ConsultationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumConsultationTypeFilter<$PrismaModel>
    _max?: NestedEnumConsultationTypeFilter<$PrismaModel>
  }

  export type NestedEnumInteractionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.InteractionType | EnumInteractionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InteractionType[] | ListEnumInteractionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InteractionType[] | ListEnumInteractionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInteractionTypeFilter<$PrismaModel> | $Enums.InteractionType
  }

  export type NestedEnumInteractionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InteractionType | EnumInteractionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InteractionType[] | ListEnumInteractionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InteractionType[] | ListEnumInteractionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInteractionTypeWithAggregatesFilter<$PrismaModel> | $Enums.InteractionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInteractionTypeFilter<$PrismaModel>
    _max?: NestedEnumInteractionTypeFilter<$PrismaModel>
  }

  export type NestedEnumChemistTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ChemistType | EnumChemistTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ChemistType[] | ListEnumChemistTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChemistType[] | ListEnumChemistTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumChemistTypeFilter<$PrismaModel> | $Enums.ChemistType
  }

  export type NestedEnumChemistTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ChemistType | EnumChemistTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ChemistType[] | ListEnumChemistTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChemistType[] | ListEnumChemistTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumChemistTypeWithAggregatesFilter<$PrismaModel> | $Enums.ChemistType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumChemistTypeFilter<$PrismaModel>
    _max?: NestedEnumChemistTypeFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedEnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumTaskTypeReferenceNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskTypeReference | EnumTaskTypeReferenceFieldRefInput<$PrismaModel> | null
    in?: $Enums.TaskTypeReference[] | ListEnumTaskTypeReferenceFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.TaskTypeReference[] | ListEnumTaskTypeReferenceFieldRefInput<$PrismaModel> | null
    not?: NestedEnumTaskTypeReferenceNullableFilter<$PrismaModel> | $Enums.TaskTypeReference | null
  }

  export type NestedEnumTaskTypeReferenceNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskTypeReference | EnumTaskTypeReferenceFieldRefInput<$PrismaModel> | null
    in?: $Enums.TaskTypeReference[] | ListEnumTaskTypeReferenceFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.TaskTypeReference[] | ListEnumTaskTypeReferenceFieldRefInput<$PrismaModel> | null
    not?: NestedEnumTaskTypeReferenceNullableWithAggregatesFilter<$PrismaModel> | $Enums.TaskTypeReference | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumTaskTypeReferenceNullableFilter<$PrismaModel>
    _max?: NestedEnumTaskTypeReferenceNullableFilter<$PrismaModel>
  }

  export type NestedEnumTaskPlannerStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskPlannerStatus | EnumTaskPlannerStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskPlannerStatus[] | ListEnumTaskPlannerStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskPlannerStatus[] | ListEnumTaskPlannerStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskPlannerStatusFilter<$PrismaModel> | $Enums.TaskPlannerStatus
  }

  export type NestedEnumTaskPlannerStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskPlannerStatus | EnumTaskPlannerStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskPlannerStatus[] | ListEnumTaskPlannerStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskPlannerStatus[] | ListEnumTaskPlannerStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskPlannerStatusWithAggregatesFilter<$PrismaModel> | $Enums.TaskPlannerStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskPlannerStatusFilter<$PrismaModel>
    _max?: NestedEnumTaskPlannerStatusFilter<$PrismaModel>
  }

  export type NestedEnumTaskStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusFilter<$PrismaModel> | $Enums.TaskStatus
  }

  export type NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel> | $Enums.TaskStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskStatusFilter<$PrismaModel>
    _max?: NestedEnumTaskStatusFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumExpenseClaimStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ExpenseClaimStatus | EnumExpenseClaimStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ExpenseClaimStatus[] | ListEnumExpenseClaimStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ExpenseClaimStatus[] | ListEnumExpenseClaimStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumExpenseClaimStatusFilter<$PrismaModel> | $Enums.ExpenseClaimStatus
  }

  export type NestedEnumExpenseClaimStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ExpenseClaimStatus | EnumExpenseClaimStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ExpenseClaimStatus[] | ListEnumExpenseClaimStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ExpenseClaimStatus[] | ListEnumExpenseClaimStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumExpenseClaimStatusWithAggregatesFilter<$PrismaModel> | $Enums.ExpenseClaimStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumExpenseClaimStatusFilter<$PrismaModel>
    _max?: NestedEnumExpenseClaimStatusFilter<$PrismaModel>
  }

  export type EmployeeCreateWithoutSubordinatesInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    reportingManager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    team?: TeamCreateNestedOneWithoutTeamMembersInput
    leadsTeam?: TeamCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutSubordinatesInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    reportingManagerId?: string | null
    teamId?: string | null
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    leadsTeam?: TeamUncheckedCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryUncheckedCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordUncheckedCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteUncheckedCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteUncheckedCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderUncheckedCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorUncheckedCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugUncheckedCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistUncheckedCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftUncheckedCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionUncheckedCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerUncheckedCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskUncheckedCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutSubordinatesInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutSubordinatesInput, EmployeeUncheckedCreateWithoutSubordinatesInput>
  }

  export type EmployeeCreateWithoutReportingManagerInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    subordinates?: EmployeeCreateNestedManyWithoutReportingManagerInput
    team?: TeamCreateNestedOneWithoutTeamMembersInput
    leadsTeam?: TeamCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutReportingManagerInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    teamId?: string | null
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutReportingManagerInput
    leadsTeam?: TeamUncheckedCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryUncheckedCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordUncheckedCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteUncheckedCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteUncheckedCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderUncheckedCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorUncheckedCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugUncheckedCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistUncheckedCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftUncheckedCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionUncheckedCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerUncheckedCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskUncheckedCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutReportingManagerInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutReportingManagerInput, EmployeeUncheckedCreateWithoutReportingManagerInput>
  }

  export type EmployeeCreateManyReportingManagerInputEnvelope = {
    data: EmployeeCreateManyReportingManagerInput | EmployeeCreateManyReportingManagerInput[]
    skipDuplicates?: boolean
  }

  export type TeamCreateWithoutTeamMembersInput = {
    id?: string
    teamName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    leadName: EmployeeCreateNestedOneWithoutLeadsTeamInput
  }

  export type TeamUncheckedCreateWithoutTeamMembersInput = {
    id?: string
    teamName: string
    leadId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
  }

  export type TeamCreateOrConnectWithoutTeamMembersInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutTeamMembersInput, TeamUncheckedCreateWithoutTeamMembersInput>
  }

  export type TeamCreateWithoutLeadNameInput = {
    id?: string
    teamName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    teamMembers?: EmployeeCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutLeadNameInput = {
    id?: string
    teamName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    teamMembers?: EmployeeUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutLeadNameInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutLeadNameInput, TeamUncheckedCreateWithoutLeadNameInput>
  }

  export type EmployeeTerritoryCreateWithoutEmployeeInput = {
    id?: string
    assignedAt: Date | string
    unassignedAt?: Date | string | null
    isPrimary?: boolean
    territory: TerritoryCreateNestedOneWithoutEmployeesInput
  }

  export type EmployeeTerritoryUncheckedCreateWithoutEmployeeInput = {
    id?: string
    territoryId: string
    assignedAt: Date | string
    unassignedAt?: Date | string | null
    isPrimary?: boolean
  }

  export type EmployeeTerritoryCreateOrConnectWithoutEmployeeInput = {
    where: EmployeeTerritoryWhereUniqueInput
    create: XOR<EmployeeTerritoryCreateWithoutEmployeeInput, EmployeeTerritoryUncheckedCreateWithoutEmployeeInput>
  }

  export type EmployeeTerritoryCreateManyEmployeeInputEnvelope = {
    data: EmployeeTerritoryCreateManyEmployeeInput | EmployeeTerritoryCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeTrainingRecordCreateWithoutEmployeeInput = {
    id?: string
    trainingName: string
    description?: string | null
    completionDate: Date | string
    createdAt?: Date | string
  }

  export type EmployeeTrainingRecordUncheckedCreateWithoutEmployeeInput = {
    id?: string
    trainingName: string
    description?: string | null
    completionDate: Date | string
    createdAt?: Date | string
  }

  export type EmployeeTrainingRecordCreateOrConnectWithoutEmployeeInput = {
    where: EmployeeTrainingRecordWhereUniqueInput
    create: XOR<EmployeeTrainingRecordCreateWithoutEmployeeInput, EmployeeTrainingRecordUncheckedCreateWithoutEmployeeInput>
  }

  export type EmployeeTrainingRecordCreateManyEmployeeInputEnvelope = {
    data: EmployeeTrainingRecordCreateManyEmployeeInput | EmployeeTrainingRecordCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type DoctorNoteCreateWithoutCreatedByInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor: DoctorCreateNestedOneWithoutNotesInput
  }

  export type DoctorNoteUncheckedCreateWithoutCreatedByInput = {
    id?: string
    doctorId: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorNoteCreateOrConnectWithoutCreatedByInput = {
    where: DoctorNoteWhereUniqueInput
    create: XOR<DoctorNoteCreateWithoutCreatedByInput, DoctorNoteUncheckedCreateWithoutCreatedByInput>
  }

  export type DoctorNoteCreateManyCreatedByInputEnvelope = {
    data: DoctorNoteCreateManyCreatedByInput | DoctorNoteCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ChemistNoteCreateWithoutCreatedByInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chemist: ChemistCreateNestedOneWithoutNotesInput
  }

  export type ChemistNoteUncheckedCreateWithoutCreatedByInput = {
    id?: string
    chemistId: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChemistNoteCreateOrConnectWithoutCreatedByInput = {
    where: ChemistNoteWhereUniqueInput
    create: XOR<ChemistNoteCreateWithoutCreatedByInput, ChemistNoteUncheckedCreateWithoutCreatedByInput>
  }

  export type ChemistNoteCreateManyCreatedByInputEnvelope = {
    data: ChemistNoteCreateManyCreatedByInput | ChemistNoteCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type DoctorInteractionCreateWithoutEmployeeInput = {
    id?: string
    interactionType: $Enums.InteractionType
    startTime: Date | string
    endTime?: Date | string | null
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    rating?: number | null
    createdAt?: Date | string
    doctor: DoctorCreateNestedOneWithoutInteractionsInput
    hospital?: HospitalCreateNestedOneWithoutDoctorInteractionsInput
    DoctorDistribution?: DoctorDistributionCreateNestedManyWithoutDoctorInteractionInput
    DoctorTask?: DoctorTaskCreateNestedOneWithoutDoctorInteractionsInput
  }

  export type DoctorInteractionUncheckedCreateWithoutEmployeeInput = {
    id?: string
    doctorId: string
    hospitalId?: string | null
    interactionType: $Enums.InteractionType
    startTime: Date | string
    endTime?: Date | string | null
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    rating?: number | null
    createdAt?: Date | string
    doctorTaskId?: string | null
    DoctorDistribution?: DoctorDistributionUncheckedCreateNestedManyWithoutDoctorInteractionInput
  }

  export type DoctorInteractionCreateOrConnectWithoutEmployeeInput = {
    where: DoctorInteractionWhereUniqueInput
    create: XOR<DoctorInteractionCreateWithoutEmployeeInput, DoctorInteractionUncheckedCreateWithoutEmployeeInput>
  }

  export type DoctorInteractionCreateManyEmployeeInputEnvelope = {
    data: DoctorInteractionCreateManyEmployeeInput | DoctorInteractionCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type ChemistInteractionCreateWithoutEmployeeInput = {
    id?: string
    interactionType: $Enums.InteractionType
    startTime: Date | string
    endTime?: Date | string | null
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    rating?: number | null
    createdAt?: Date | string
    chemist: ChemistCreateNestedOneWithoutInteractionsInput
    chemistTask?: ChemistTaskCreateNestedOneWithoutChemistInteractionsInput
  }

  export type ChemistInteractionUncheckedCreateWithoutEmployeeInput = {
    id?: string
    chemistId: string
    interactionType: $Enums.InteractionType
    startTime: Date | string
    endTime?: Date | string | null
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    rating?: number | null
    createdAt?: Date | string
    chemistTaskId?: string | null
  }

  export type ChemistInteractionCreateOrConnectWithoutEmployeeInput = {
    where: ChemistInteractionWhereUniqueInput
    create: XOR<ChemistInteractionCreateWithoutEmployeeInput, ChemistInteractionUncheckedCreateWithoutEmployeeInput>
  }

  export type ChemistInteractionCreateManyEmployeeInputEnvelope = {
    data: ChemistInteractionCreateManyEmployeeInput | ChemistInteractionCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type DcrReportCreateWithoutEmployeeInput = {
    id?: string
    organizationId: string
    taskType?: $Enums.TaskTypeReference | null
    reportDate: Date | string
    productsDiscussed?: string | null
    comments?: string | null
    isDraft?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorTask?: DoctorTaskCreateNestedOneWithoutDcrReportsInput
    chemistTask?: ChemistTaskCreateNestedOneWithoutDcrReportsInput
    tourPlanTask?: TourPlanTaskCreateNestedOneWithoutDcrReportsInput
  }

  export type DcrReportUncheckedCreateWithoutEmployeeInput = {
    id?: string
    organizationId: string
    taskId?: string | null
    taskType?: $Enums.TaskTypeReference | null
    reportDate: Date | string
    productsDiscussed?: string | null
    comments?: string | null
    isDraft?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DcrReportCreateOrConnectWithoutEmployeeInput = {
    where: DcrReportWhereUniqueInput
    create: XOR<DcrReportCreateWithoutEmployeeInput, DcrReportUncheckedCreateWithoutEmployeeInput>
  }

  export type DcrReportCreateManyEmployeeInputEnvelope = {
    data: DcrReportCreateManyEmployeeInput | DcrReportCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type RcpaReportCreateWithoutEmployeeInput = {
    id?: string
    organizationId: string
    remarks?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chemist: ChemistCreateNestedOneWithoutRcpaReportsInput
    drugData?: RcpaDrugDataCreateNestedManyWithoutRcpaReportInput
  }

  export type RcpaReportUncheckedCreateWithoutEmployeeInput = {
    id?: string
    organizationId: string
    chemistId: string
    remarks?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    drugData?: RcpaDrugDataUncheckedCreateNestedManyWithoutRcpaReportInput
  }

  export type RcpaReportCreateOrConnectWithoutEmployeeInput = {
    where: RcpaReportWhereUniqueInput
    create: XOR<RcpaReportCreateWithoutEmployeeInput, RcpaReportUncheckedCreateWithoutEmployeeInput>
  }

  export type RcpaReportCreateManyEmployeeInputEnvelope = {
    data: RcpaReportCreateManyEmployeeInput | RcpaReportCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type CheckInCreateWithoutEmployeeInput = {
    id?: string
    organizationId: string
    checkInTime?: Date | string | null
    checkOutTime?: Date | string | null
    checkInLatitude?: Decimal | DecimalJsLike | number | string | null
    checkInLongitude?: Decimal | DecimalJsLike | number | string | null
    checkOutLatitude?: Decimal | DecimalJsLike | number | string | null
    checkOutLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
  }

  export type CheckInUncheckedCreateWithoutEmployeeInput = {
    id?: string
    organizationId: string
    checkInTime?: Date | string | null
    checkOutTime?: Date | string | null
    checkInLatitude?: Decimal | DecimalJsLike | number | string | null
    checkInLongitude?: Decimal | DecimalJsLike | number | string | null
    checkOutLatitude?: Decimal | DecimalJsLike | number | string | null
    checkOutLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
  }

  export type CheckInCreateOrConnectWithoutEmployeeInput = {
    where: CheckInWhereUniqueInput
    create: XOR<CheckInCreateWithoutEmployeeInput, CheckInUncheckedCreateWithoutEmployeeInput>
  }

  export type CheckInCreateManyEmployeeInputEnvelope = {
    data: CheckInCreateManyEmployeeInput | CheckInCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutEmployeeInput = {
    id?: string
    organizationId: string
    tableName: string
    actionType: string
    recordId: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUncheckedCreateWithoutEmployeeInput = {
    id?: string
    organizationId: string
    tableName: string
    actionType: string
    recordId: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    createdAt?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutEmployeeInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutEmployeeInput, AuditLogUncheckedCreateWithoutEmployeeInput>
  }

  export type AuditLogCreateManyEmployeeInputEnvelope = {
    data: AuditLogCreateManyEmployeeInput | AuditLogCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type OrderCreateWithoutCreatedByInput = {
    id?: string
    organizationId: string
    totalAmount: Decimal | DecimalJsLike | number | string
    status: $Enums.OrderStatus
    orderDate: Date | string
    deliveryDate?: Date | string | null
    specialInstructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chemist?: ChemistCreateNestedOneWithoutOrdersInput
    items?: OrderItemCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutCreatedByInput = {
    id?: string
    organizationId: string
    chemistId?: string | null
    totalAmount: Decimal | DecimalJsLike | number | string
    status: $Enums.OrderStatus
    orderDate: Date | string
    deliveryDate?: Date | string | null
    specialInstructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutCreatedByInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutCreatedByInput, OrderUncheckedCreateWithoutCreatedByInput>
  }

  export type OrderCreateManyCreatedByInputEnvelope = {
    data: OrderCreateManyCreatedByInput | OrderCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type DoctorCreateWithoutCreatedByInput = {
    id?: string
    organizationId: string
    name: string
    designation?: string | null
    specialization?: string | null
    email?: string | null
    phone?: string | null
    description?: string | null
    profilePictureUrl?: string | null
    qualification?: string | null
    experienceYears?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    hospitalAssociations?: DoctorHospitalAssociationCreateNestedManyWithoutDoctorInput
    consultationSchedules?: DoctorConsultationScheduleCreateNestedManyWithoutDoctorInput
    interactions?: DoctorInteractionCreateNestedManyWithoutDoctorInput
    notes?: DoctorNoteCreateNestedManyWithoutDoctorInput
    chemistRelations?: DoctorChemistRelationCreateNestedManyWithoutDoctorInput
    DoctorTask?: DoctorTaskCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutCreatedByInput = {
    id?: string
    organizationId: string
    name: string
    designation?: string | null
    specialization?: string | null
    email?: string | null
    phone?: string | null
    description?: string | null
    profilePictureUrl?: string | null
    qualification?: string | null
    experienceYears?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    hospitalAssociations?: DoctorHospitalAssociationUncheckedCreateNestedManyWithoutDoctorInput
    consultationSchedules?: DoctorConsultationScheduleUncheckedCreateNestedManyWithoutDoctorInput
    interactions?: DoctorInteractionUncheckedCreateNestedManyWithoutDoctorInput
    notes?: DoctorNoteUncheckedCreateNestedManyWithoutDoctorInput
    chemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutDoctorInput
    DoctorTask?: DoctorTaskUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutCreatedByInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutCreatedByInput, DoctorUncheckedCreateWithoutCreatedByInput>
  }

  export type DoctorCreateManyCreatedByInputEnvelope = {
    data: DoctorCreateManyCreatedByInput | DoctorCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type DrugCreateWithoutCreatedByInput = {
    id?: string
    organizationId: string
    name: string
    composition?: string | null
    manufacturer?: string | null
    indications?: string | null
    sideEffects?: string | null
    safetyAdvice?: string | null
    dosageForms?: NullableJsonNullValueInput | InputJsonValue
    price?: Decimal | DecimalJsLike | number | string | null
    schedule?: string | null
    regulatoryApprovals?: string | null
    category?: string | null
    isAvailable?: boolean
    images?: NullableJsonNullValueInput | InputJsonValue
    marketingMaterials?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    orderItems?: OrderItemCreateNestedManyWithoutDrugInput
    rcpaData?: RcpaDrugDataCreateNestedManyWithoutDrugInput
    UserDrugInventory?: UserDrugInventoryCreateNestedManyWithoutDrugInput
    DoctorDistributionDrugItem?: DoctorDistributionDrugItemCreateNestedManyWithoutDrugInput
  }

  export type DrugUncheckedCreateWithoutCreatedByInput = {
    id?: string
    organizationId: string
    name: string
    composition?: string | null
    manufacturer?: string | null
    indications?: string | null
    sideEffects?: string | null
    safetyAdvice?: string | null
    dosageForms?: NullableJsonNullValueInput | InputJsonValue
    price?: Decimal | DecimalJsLike | number | string | null
    schedule?: string | null
    regulatoryApprovals?: string | null
    category?: string | null
    isAvailable?: boolean
    images?: NullableJsonNullValueInput | InputJsonValue
    marketingMaterials?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutDrugInput
    rcpaData?: RcpaDrugDataUncheckedCreateNestedManyWithoutDrugInput
    UserDrugInventory?: UserDrugInventoryUncheckedCreateNestedManyWithoutDrugInput
    DoctorDistributionDrugItem?: DoctorDistributionDrugItemUncheckedCreateNestedManyWithoutDrugInput
  }

  export type DrugCreateOrConnectWithoutCreatedByInput = {
    where: DrugWhereUniqueInput
    create: XOR<DrugCreateWithoutCreatedByInput, DrugUncheckedCreateWithoutCreatedByInput>
  }

  export type DrugCreateManyCreatedByInputEnvelope = {
    data: DrugCreateManyCreatedByInput | DrugCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ChemistCreateWithoutCreatedByInput = {
    id?: string
    organizationId: string
    name: string
    type: $Enums.ChemistType
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    profilePictureUrl?: string | null
    visitingHours?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    chemistChain?: ChemistChainCreateNestedOneWithoutChemistsInput
    territory: TerritoryCreateNestedOneWithoutChemistsInput
    notes?: ChemistNoteCreateNestedManyWithoutChemistInput
    interactions?: ChemistInteractionCreateNestedManyWithoutChemistInput
    doctorRelations?: DoctorChemistRelationCreateNestedManyWithoutChemistInput
    orders?: OrderCreateNestedManyWithoutChemistInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutChemistInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutChemistInput
  }

  export type ChemistUncheckedCreateWithoutCreatedByInput = {
    id?: string
    organizationId: string
    chemistChainId?: string | null
    territoryId: string
    name: string
    type: $Enums.ChemistType
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    profilePictureUrl?: string | null
    visitingHours?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    notes?: ChemistNoteUncheckedCreateNestedManyWithoutChemistInput
    interactions?: ChemistInteractionUncheckedCreateNestedManyWithoutChemistInput
    doctorRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutChemistInput
    orders?: OrderUncheckedCreateNestedManyWithoutChemistInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutChemistInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutChemistInput
  }

  export type ChemistCreateOrConnectWithoutCreatedByInput = {
    where: ChemistWhereUniqueInput
    create: XOR<ChemistCreateWithoutCreatedByInput, ChemistUncheckedCreateWithoutCreatedByInput>
  }

  export type ChemistCreateManyCreatedByInputEnvelope = {
    data: ChemistCreateManyCreatedByInput | ChemistCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type DoctorChemistRelationCreateWithoutCreatedByInput = {
    id?: string
    createdAt?: Date | string
    doctor: DoctorCreateNestedOneWithoutChemistRelationsInput
    chemist: ChemistCreateNestedOneWithoutDoctorRelationsInput
  }

  export type DoctorChemistRelationUncheckedCreateWithoutCreatedByInput = {
    id?: string
    doctorId: string
    chemistId: string
    createdAt?: Date | string
  }

  export type DoctorChemistRelationCreateOrConnectWithoutCreatedByInput = {
    where: DoctorChemistRelationWhereUniqueInput
    create: XOR<DoctorChemistRelationCreateWithoutCreatedByInput, DoctorChemistRelationUncheckedCreateWithoutCreatedByInput>
  }

  export type DoctorChemistRelationCreateManyCreatedByInputEnvelope = {
    data: DoctorChemistRelationCreateManyCreatedByInput | DoctorChemistRelationCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ExpenseClaimCreateWithoutEmployeeInput = {
    id?: string
    claimNumber: string
    expenseData: JsonNullValueInput | InputJsonValue
    status?: $Enums.ExpenseClaimStatus
    submittedAt?: Date | string
    approvedAt?: Date | string | null
    approvalComments?: string | null
    rejectionReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    expenseType: ExpenseTypeCreateNestedOneWithoutExpenseClaimsInput
    expenseRoleConfig: ExpenseRoleConfigCreateNestedOneWithoutExpenseClaimsInput
    approver?: EmployeeCreateNestedOneWithoutApprovedClaimsInput
  }

  export type ExpenseClaimUncheckedCreateWithoutEmployeeInput = {
    id?: string
    claimNumber: string
    expenseTypeId: string
    expenseRoleConfigId: string
    expenseData: JsonNullValueInput | InputJsonValue
    status?: $Enums.ExpenseClaimStatus
    submittedAt?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    approvalComments?: string | null
    rejectionReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExpenseClaimCreateOrConnectWithoutEmployeeInput = {
    where: ExpenseClaimWhereUniqueInput
    create: XOR<ExpenseClaimCreateWithoutEmployeeInput, ExpenseClaimUncheckedCreateWithoutEmployeeInput>
  }

  export type ExpenseClaimCreateManyEmployeeInputEnvelope = {
    data: ExpenseClaimCreateManyEmployeeInput | ExpenseClaimCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type ExpenseClaimCreateWithoutApproverInput = {
    id?: string
    claimNumber: string
    expenseData: JsonNullValueInput | InputJsonValue
    status?: $Enums.ExpenseClaimStatus
    submittedAt?: Date | string
    approvedAt?: Date | string | null
    approvalComments?: string | null
    rejectionReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutExpenseClaimsInput
    expenseType: ExpenseTypeCreateNestedOneWithoutExpenseClaimsInput
    expenseRoleConfig: ExpenseRoleConfigCreateNestedOneWithoutExpenseClaimsInput
  }

  export type ExpenseClaimUncheckedCreateWithoutApproverInput = {
    id?: string
    claimNumber: string
    employeeId: string
    expenseTypeId: string
    expenseRoleConfigId: string
    expenseData: JsonNullValueInput | InputJsonValue
    status?: $Enums.ExpenseClaimStatus
    submittedAt?: Date | string
    approvedAt?: Date | string | null
    approvalComments?: string | null
    rejectionReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExpenseClaimCreateOrConnectWithoutApproverInput = {
    where: ExpenseClaimWhereUniqueInput
    create: XOR<ExpenseClaimCreateWithoutApproverInput, ExpenseClaimUncheckedCreateWithoutApproverInput>
  }

  export type ExpenseClaimCreateManyApproverInputEnvelope = {
    data: ExpenseClaimCreateManyApproverInput | ExpenseClaimCreateManyApproverInput[]
    skipDuplicates?: boolean
  }

  export type UserDrugInventoryCreateWithoutEmployeeInput = {
    id?: string
    quantity: number
    lastRestockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    drug: DrugCreateNestedOneWithoutUserDrugInventoryInput
    doctorDistributionDrugItems?: DoctorDistributionDrugItemCreateNestedManyWithoutFromInventoryInput
  }

  export type UserDrugInventoryUncheckedCreateWithoutEmployeeInput = {
    id?: string
    drugId: string
    quantity: number
    lastRestockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorDistributionDrugItems?: DoctorDistributionDrugItemUncheckedCreateNestedManyWithoutFromInventoryInput
  }

  export type UserDrugInventoryCreateOrConnectWithoutEmployeeInput = {
    where: UserDrugInventoryWhereUniqueInput
    create: XOR<UserDrugInventoryCreateWithoutEmployeeInput, UserDrugInventoryUncheckedCreateWithoutEmployeeInput>
  }

  export type UserDrugInventoryCreateManyEmployeeInputEnvelope = {
    data: UserDrugInventoryCreateManyEmployeeInput | UserDrugInventoryCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type UserGiftInventoryCreateWithoutEmployeeInput = {
    id?: string
    quantity: number
    lastRestockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    gift: GiftCreateNestedOneWithoutUserGiftInventoriesInput
    doctorDistributionGiftItems?: DoctorDistributionGiftItemCreateNestedManyWithoutFromInventoryInput
  }

  export type UserGiftInventoryUncheckedCreateWithoutEmployeeInput = {
    id?: string
    giftId: string
    quantity: number
    lastRestockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorDistributionGiftItems?: DoctorDistributionGiftItemUncheckedCreateNestedManyWithoutFromInventoryInput
  }

  export type UserGiftInventoryCreateOrConnectWithoutEmployeeInput = {
    where: UserGiftInventoryWhereUniqueInput
    create: XOR<UserGiftInventoryCreateWithoutEmployeeInput, UserGiftInventoryUncheckedCreateWithoutEmployeeInput>
  }

  export type UserGiftInventoryCreateManyEmployeeInputEnvelope = {
    data: UserGiftInventoryCreateManyEmployeeInput | UserGiftInventoryCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type GiftCreateWithoutCreatedByInput = {
    id?: string
    name: string
    description?: string | null
    unitCost: Decimal | DecimalJsLike | number | string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    giftImages?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    userGiftInventories?: UserGiftInventoryCreateNestedManyWithoutGiftInput
    doctorDistributionGiftItems?: DoctorDistributionGiftItemCreateNestedManyWithoutGiftInput
  }

  export type GiftUncheckedCreateWithoutCreatedByInput = {
    id?: string
    name: string
    description?: string | null
    unitCost: Decimal | DecimalJsLike | number | string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    giftImages?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    userGiftInventories?: UserGiftInventoryUncheckedCreateNestedManyWithoutGiftInput
    doctorDistributionGiftItems?: DoctorDistributionGiftItemUncheckedCreateNestedManyWithoutGiftInput
  }

  export type GiftCreateOrConnectWithoutCreatedByInput = {
    where: GiftWhereUniqueInput
    create: XOR<GiftCreateWithoutCreatedByInput, GiftUncheckedCreateWithoutCreatedByInput>
  }

  export type GiftCreateManyCreatedByInputEnvelope = {
    data: GiftCreateManyCreatedByInput | GiftCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type DoctorDistributionCreateWithoutEmployeeInput = {
    id?: string
    distributedAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorInteraction: DoctorInteractionCreateNestedOneWithoutDoctorDistributionInput
    drugItems?: DoctorDistributionDrugItemCreateNestedManyWithoutDoctorDistributionInput
    giftItems?: DoctorDistributionGiftItemCreateNestedManyWithoutDoctorDistributionInput
  }

  export type DoctorDistributionUncheckedCreateWithoutEmployeeInput = {
    id?: string
    doctorInteractionId: string
    distributedAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    drugItems?: DoctorDistributionDrugItemUncheckedCreateNestedManyWithoutDoctorDistributionInput
    giftItems?: DoctorDistributionGiftItemUncheckedCreateNestedManyWithoutDoctorDistributionInput
  }

  export type DoctorDistributionCreateOrConnectWithoutEmployeeInput = {
    where: DoctorDistributionWhereUniqueInput
    create: XOR<DoctorDistributionCreateWithoutEmployeeInput, DoctorDistributionUncheckedCreateWithoutEmployeeInput>
  }

  export type DoctorDistributionCreateManyEmployeeInputEnvelope = {
    data: DoctorDistributionCreateManyEmployeeInput | DoctorDistributionCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type TaskPlannerCreateWithoutEmployeeInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.TaskPlannerStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorTasks?: DoctorTaskCreateNestedManyWithoutPlannerInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutPlannerInput
    tourPlanTasks?: TourPlanTaskCreateNestedManyWithoutPlannerInput
  }

  export type TaskPlannerUncheckedCreateWithoutEmployeeInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.TaskPlannerStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorTasks?: DoctorTaskUncheckedCreateNestedManyWithoutPlannerInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutPlannerInput
    tourPlanTasks?: TourPlanTaskUncheckedCreateNestedManyWithoutPlannerInput
  }

  export type TaskPlannerCreateOrConnectWithoutEmployeeInput = {
    where: TaskPlannerWhereUniqueInput
    create: XOR<TaskPlannerCreateWithoutEmployeeInput, TaskPlannerUncheckedCreateWithoutEmployeeInput>
  }

  export type TaskPlannerCreateManyEmployeeInputEnvelope = {
    data: TaskPlannerCreateManyEmployeeInput | TaskPlannerCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type DoctorTaskCreateWithoutEmployeeInput = {
    id?: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    planner: TaskPlannerCreateNestedOneWithoutDoctorTasksInput
    doctor: DoctorCreateNestedOneWithoutDoctorTaskInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutDoctorTaskInput
    dcrReports?: DcrReportCreateNestedManyWithoutDoctorTaskInput
  }

  export type DoctorTaskUncheckedCreateWithoutEmployeeInput = {
    id?: string
    plannerId: string
    doctorId: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutDoctorTaskInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutDoctorTaskInput
  }

  export type DoctorTaskCreateOrConnectWithoutEmployeeInput = {
    where: DoctorTaskWhereUniqueInput
    create: XOR<DoctorTaskCreateWithoutEmployeeInput, DoctorTaskUncheckedCreateWithoutEmployeeInput>
  }

  export type DoctorTaskCreateManyEmployeeInputEnvelope = {
    data: DoctorTaskCreateManyEmployeeInput | DoctorTaskCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type ChemistTaskCreateWithoutEmployeeInput = {
    id?: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    planner: TaskPlannerCreateNestedOneWithoutChemistTasksInput
    chemist: ChemistCreateNestedOneWithoutChemistTasksInput
    chemistInteractions?: ChemistInteractionCreateNestedManyWithoutChemistTaskInput
    dcrReports?: DcrReportCreateNestedManyWithoutChemistTaskInput
  }

  export type ChemistTaskUncheckedCreateWithoutEmployeeInput = {
    id?: string
    plannerId: string
    chemistId: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    chemistInteractions?: ChemistInteractionUncheckedCreateNestedManyWithoutChemistTaskInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutChemistTaskInput
  }

  export type ChemistTaskCreateOrConnectWithoutEmployeeInput = {
    where: ChemistTaskWhereUniqueInput
    create: XOR<ChemistTaskCreateWithoutEmployeeInput, ChemistTaskUncheckedCreateWithoutEmployeeInput>
  }

  export type ChemistTaskCreateManyEmployeeInputEnvelope = {
    data: ChemistTaskCreateManyEmployeeInput | ChemistTaskCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type TourPlanTaskCreateWithoutEmployeeInput = {
    id?: string
    location: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    planner: TaskPlannerCreateNestedOneWithoutTourPlanTasksInput
    tourPlan: TourPlanCreateNestedOneWithoutTourTasksInput
    tourPlanReports?: TourPlanReportCreateNestedManyWithoutTourTaskInput
    dcrReports?: DcrReportCreateNestedManyWithoutTourPlanTaskInput
  }

  export type TourPlanTaskUncheckedCreateWithoutEmployeeInput = {
    id?: string
    plannerId: string
    tourPlanId: string
    location: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    tourPlanReports?: TourPlanReportUncheckedCreateNestedManyWithoutTourTaskInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutTourPlanTaskInput
  }

  export type TourPlanTaskCreateOrConnectWithoutEmployeeInput = {
    where: TourPlanTaskWhereUniqueInput
    create: XOR<TourPlanTaskCreateWithoutEmployeeInput, TourPlanTaskUncheckedCreateWithoutEmployeeInput>
  }

  export type TourPlanTaskCreateManyEmployeeInputEnvelope = {
    data: TourPlanTaskCreateManyEmployeeInput | TourPlanTaskCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeUpsertWithoutSubordinatesInput = {
    update: XOR<EmployeeUpdateWithoutSubordinatesInput, EmployeeUncheckedUpdateWithoutSubordinatesInput>
    create: XOR<EmployeeCreateWithoutSubordinatesInput, EmployeeUncheckedCreateWithoutSubordinatesInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutSubordinatesInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutSubordinatesInput, EmployeeUncheckedUpdateWithoutSubordinatesInput>
  }

  export type EmployeeUpdateWithoutSubordinatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    reportingManager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    team?: TeamUpdateOneWithoutTeamMembersNestedInput
    leadsTeam?: TeamUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutSubordinatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    reportingManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    leadsTeam?: TeamUncheckedUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUncheckedUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUncheckedUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUncheckedUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUncheckedUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUpsertWithWhereUniqueWithoutReportingManagerInput = {
    where: EmployeeWhereUniqueInput
    update: XOR<EmployeeUpdateWithoutReportingManagerInput, EmployeeUncheckedUpdateWithoutReportingManagerInput>
    create: XOR<EmployeeCreateWithoutReportingManagerInput, EmployeeUncheckedCreateWithoutReportingManagerInput>
  }

  export type EmployeeUpdateWithWhereUniqueWithoutReportingManagerInput = {
    where: EmployeeWhereUniqueInput
    data: XOR<EmployeeUpdateWithoutReportingManagerInput, EmployeeUncheckedUpdateWithoutReportingManagerInput>
  }

  export type EmployeeUpdateManyWithWhereWithoutReportingManagerInput = {
    where: EmployeeScalarWhereInput
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyWithoutReportingManagerInput>
  }

  export type EmployeeScalarWhereInput = {
    AND?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
    OR?: EmployeeScalarWhereInput[]
    NOT?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
    id?: StringFilter<"Employee"> | string
    organizationId?: StringFilter<"Employee"> | string
    email?: StringFilter<"Employee"> | string
    passwordHash?: StringFilter<"Employee"> | string
    firstName?: StringFilter<"Employee"> | string
    lastName?: StringNullableFilter<"Employee"> | string | null
    phone?: StringNullableFilter<"Employee"> | string | null
    profilePic?: StringNullableFilter<"Employee"> | string | null
    role?: EnumEmployeeRoleFilter<"Employee"> | $Enums.EmployeeRole
    reportingManagerId?: StringNullableFilter<"Employee"> | string | null
    teamId?: StringNullableFilter<"Employee"> | string | null
    employeeCode?: StringNullableFilter<"Employee"> | string | null
    city?: StringNullableFilter<"Employee"> | string | null
    state?: StringNullableFilter<"Employee"> | string | null
    assignedLatitude?: DecimalNullableFilter<"Employee"> | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: DecimalNullableFilter<"Employee"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"Employee"> | Date | string
    updatedAt?: DateTimeFilter<"Employee"> | Date | string
    lastLoginAt?: DateTimeNullableFilter<"Employee"> | Date | string | null
    isActive?: BoolFilter<"Employee"> | boolean
  }

  export type TeamUpsertWithoutTeamMembersInput = {
    update: XOR<TeamUpdateWithoutTeamMembersInput, TeamUncheckedUpdateWithoutTeamMembersInput>
    create: XOR<TeamCreateWithoutTeamMembersInput, TeamUncheckedCreateWithoutTeamMembersInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutTeamMembersInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutTeamMembersInput, TeamUncheckedUpdateWithoutTeamMembersInput>
  }

  export type TeamUpdateWithoutTeamMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    leadName?: EmployeeUpdateOneRequiredWithoutLeadsTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutTeamMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamName?: StringFieldUpdateOperationsInput | string
    leadId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TeamUpsertWithoutLeadNameInput = {
    update: XOR<TeamUpdateWithoutLeadNameInput, TeamUncheckedUpdateWithoutLeadNameInput>
    create: XOR<TeamCreateWithoutLeadNameInput, TeamUncheckedCreateWithoutLeadNameInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutLeadNameInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutLeadNameInput, TeamUncheckedUpdateWithoutLeadNameInput>
  }

  export type TeamUpdateWithoutLeadNameInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: EmployeeUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutLeadNameInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: EmployeeUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type EmployeeTerritoryUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: EmployeeTerritoryWhereUniqueInput
    update: XOR<EmployeeTerritoryUpdateWithoutEmployeeInput, EmployeeTerritoryUncheckedUpdateWithoutEmployeeInput>
    create: XOR<EmployeeTerritoryCreateWithoutEmployeeInput, EmployeeTerritoryUncheckedCreateWithoutEmployeeInput>
  }

  export type EmployeeTerritoryUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: EmployeeTerritoryWhereUniqueInput
    data: XOR<EmployeeTerritoryUpdateWithoutEmployeeInput, EmployeeTerritoryUncheckedUpdateWithoutEmployeeInput>
  }

  export type EmployeeTerritoryUpdateManyWithWhereWithoutEmployeeInput = {
    where: EmployeeTerritoryScalarWhereInput
    data: XOR<EmployeeTerritoryUpdateManyMutationInput, EmployeeTerritoryUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type EmployeeTerritoryScalarWhereInput = {
    AND?: EmployeeTerritoryScalarWhereInput | EmployeeTerritoryScalarWhereInput[]
    OR?: EmployeeTerritoryScalarWhereInput[]
    NOT?: EmployeeTerritoryScalarWhereInput | EmployeeTerritoryScalarWhereInput[]
    id?: StringFilter<"EmployeeTerritory"> | string
    employeeId?: StringFilter<"EmployeeTerritory"> | string
    territoryId?: StringFilter<"EmployeeTerritory"> | string
    assignedAt?: DateTimeFilter<"EmployeeTerritory"> | Date | string
    unassignedAt?: DateTimeNullableFilter<"EmployeeTerritory"> | Date | string | null
    isPrimary?: BoolFilter<"EmployeeTerritory"> | boolean
  }

  export type EmployeeTrainingRecordUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: EmployeeTrainingRecordWhereUniqueInput
    update: XOR<EmployeeTrainingRecordUpdateWithoutEmployeeInput, EmployeeTrainingRecordUncheckedUpdateWithoutEmployeeInput>
    create: XOR<EmployeeTrainingRecordCreateWithoutEmployeeInput, EmployeeTrainingRecordUncheckedCreateWithoutEmployeeInput>
  }

  export type EmployeeTrainingRecordUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: EmployeeTrainingRecordWhereUniqueInput
    data: XOR<EmployeeTrainingRecordUpdateWithoutEmployeeInput, EmployeeTrainingRecordUncheckedUpdateWithoutEmployeeInput>
  }

  export type EmployeeTrainingRecordUpdateManyWithWhereWithoutEmployeeInput = {
    where: EmployeeTrainingRecordScalarWhereInput
    data: XOR<EmployeeTrainingRecordUpdateManyMutationInput, EmployeeTrainingRecordUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type EmployeeTrainingRecordScalarWhereInput = {
    AND?: EmployeeTrainingRecordScalarWhereInput | EmployeeTrainingRecordScalarWhereInput[]
    OR?: EmployeeTrainingRecordScalarWhereInput[]
    NOT?: EmployeeTrainingRecordScalarWhereInput | EmployeeTrainingRecordScalarWhereInput[]
    id?: StringFilter<"EmployeeTrainingRecord"> | string
    employeeId?: StringFilter<"EmployeeTrainingRecord"> | string
    trainingName?: StringFilter<"EmployeeTrainingRecord"> | string
    description?: StringNullableFilter<"EmployeeTrainingRecord"> | string | null
    completionDate?: DateTimeFilter<"EmployeeTrainingRecord"> | Date | string
    createdAt?: DateTimeFilter<"EmployeeTrainingRecord"> | Date | string
  }

  export type DoctorNoteUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: DoctorNoteWhereUniqueInput
    update: XOR<DoctorNoteUpdateWithoutCreatedByInput, DoctorNoteUncheckedUpdateWithoutCreatedByInput>
    create: XOR<DoctorNoteCreateWithoutCreatedByInput, DoctorNoteUncheckedCreateWithoutCreatedByInput>
  }

  export type DoctorNoteUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: DoctorNoteWhereUniqueInput
    data: XOR<DoctorNoteUpdateWithoutCreatedByInput, DoctorNoteUncheckedUpdateWithoutCreatedByInput>
  }

  export type DoctorNoteUpdateManyWithWhereWithoutCreatedByInput = {
    where: DoctorNoteScalarWhereInput
    data: XOR<DoctorNoteUpdateManyMutationInput, DoctorNoteUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type DoctorNoteScalarWhereInput = {
    AND?: DoctorNoteScalarWhereInput | DoctorNoteScalarWhereInput[]
    OR?: DoctorNoteScalarWhereInput[]
    NOT?: DoctorNoteScalarWhereInput | DoctorNoteScalarWhereInput[]
    id?: StringFilter<"DoctorNote"> | string
    doctorId?: StringFilter<"DoctorNote"> | string
    createdById?: StringFilter<"DoctorNote"> | string
    content?: StringFilter<"DoctorNote"> | string
    createdAt?: DateTimeFilter<"DoctorNote"> | Date | string
    updatedAt?: DateTimeFilter<"DoctorNote"> | Date | string
  }

  export type ChemistNoteUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ChemistNoteWhereUniqueInput
    update: XOR<ChemistNoteUpdateWithoutCreatedByInput, ChemistNoteUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ChemistNoteCreateWithoutCreatedByInput, ChemistNoteUncheckedCreateWithoutCreatedByInput>
  }

  export type ChemistNoteUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ChemistNoteWhereUniqueInput
    data: XOR<ChemistNoteUpdateWithoutCreatedByInput, ChemistNoteUncheckedUpdateWithoutCreatedByInput>
  }

  export type ChemistNoteUpdateManyWithWhereWithoutCreatedByInput = {
    where: ChemistNoteScalarWhereInput
    data: XOR<ChemistNoteUpdateManyMutationInput, ChemistNoteUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ChemistNoteScalarWhereInput = {
    AND?: ChemistNoteScalarWhereInput | ChemistNoteScalarWhereInput[]
    OR?: ChemistNoteScalarWhereInput[]
    NOT?: ChemistNoteScalarWhereInput | ChemistNoteScalarWhereInput[]
    id?: StringFilter<"ChemistNote"> | string
    chemistId?: StringFilter<"ChemistNote"> | string
    createdById?: StringFilter<"ChemistNote"> | string
    content?: StringFilter<"ChemistNote"> | string
    createdAt?: DateTimeFilter<"ChemistNote"> | Date | string
    updatedAt?: DateTimeFilter<"ChemistNote"> | Date | string
  }

  export type DoctorInteractionUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: DoctorInteractionWhereUniqueInput
    update: XOR<DoctorInteractionUpdateWithoutEmployeeInput, DoctorInteractionUncheckedUpdateWithoutEmployeeInput>
    create: XOR<DoctorInteractionCreateWithoutEmployeeInput, DoctorInteractionUncheckedCreateWithoutEmployeeInput>
  }

  export type DoctorInteractionUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: DoctorInteractionWhereUniqueInput
    data: XOR<DoctorInteractionUpdateWithoutEmployeeInput, DoctorInteractionUncheckedUpdateWithoutEmployeeInput>
  }

  export type DoctorInteractionUpdateManyWithWhereWithoutEmployeeInput = {
    where: DoctorInteractionScalarWhereInput
    data: XOR<DoctorInteractionUpdateManyMutationInput, DoctorInteractionUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type DoctorInteractionScalarWhereInput = {
    AND?: DoctorInteractionScalarWhereInput | DoctorInteractionScalarWhereInput[]
    OR?: DoctorInteractionScalarWhereInput[]
    NOT?: DoctorInteractionScalarWhereInput | DoctorInteractionScalarWhereInput[]
    id?: StringFilter<"DoctorInteraction"> | string
    doctorId?: StringFilter<"DoctorInteraction"> | string
    employeeId?: StringFilter<"DoctorInteraction"> | string
    hospitalId?: StringNullableFilter<"DoctorInteraction"> | string | null
    interactionType?: EnumInteractionTypeFilter<"DoctorInteraction"> | $Enums.InteractionType
    startTime?: DateTimeFilter<"DoctorInteraction"> | Date | string
    endTime?: DateTimeNullableFilter<"DoctorInteraction"> | Date | string | null
    purpose?: StringNullableFilter<"DoctorInteraction"> | string | null
    outcome?: StringNullableFilter<"DoctorInteraction"> | string | null
    comments?: StringNullableFilter<"DoctorInteraction"> | string | null
    rating?: IntNullableFilter<"DoctorInteraction"> | number | null
    createdAt?: DateTimeFilter<"DoctorInteraction"> | Date | string
    doctorTaskId?: StringNullableFilter<"DoctorInteraction"> | string | null
  }

  export type ChemistInteractionUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: ChemistInteractionWhereUniqueInput
    update: XOR<ChemistInteractionUpdateWithoutEmployeeInput, ChemistInteractionUncheckedUpdateWithoutEmployeeInput>
    create: XOR<ChemistInteractionCreateWithoutEmployeeInput, ChemistInteractionUncheckedCreateWithoutEmployeeInput>
  }

  export type ChemistInteractionUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: ChemistInteractionWhereUniqueInput
    data: XOR<ChemistInteractionUpdateWithoutEmployeeInput, ChemistInteractionUncheckedUpdateWithoutEmployeeInput>
  }

  export type ChemistInteractionUpdateManyWithWhereWithoutEmployeeInput = {
    where: ChemistInteractionScalarWhereInput
    data: XOR<ChemistInteractionUpdateManyMutationInput, ChemistInteractionUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type ChemistInteractionScalarWhereInput = {
    AND?: ChemistInteractionScalarWhereInput | ChemistInteractionScalarWhereInput[]
    OR?: ChemistInteractionScalarWhereInput[]
    NOT?: ChemistInteractionScalarWhereInput | ChemistInteractionScalarWhereInput[]
    id?: StringFilter<"ChemistInteraction"> | string
    chemistId?: StringFilter<"ChemistInteraction"> | string
    employeeId?: StringFilter<"ChemistInteraction"> | string
    interactionType?: EnumInteractionTypeFilter<"ChemistInteraction"> | $Enums.InteractionType
    startTime?: DateTimeFilter<"ChemistInteraction"> | Date | string
    endTime?: DateTimeNullableFilter<"ChemistInteraction"> | Date | string | null
    purpose?: StringNullableFilter<"ChemistInteraction"> | string | null
    outcome?: StringNullableFilter<"ChemistInteraction"> | string | null
    comments?: StringNullableFilter<"ChemistInteraction"> | string | null
    rating?: IntNullableFilter<"ChemistInteraction"> | number | null
    createdAt?: DateTimeFilter<"ChemistInteraction"> | Date | string
    chemistTaskId?: StringNullableFilter<"ChemistInteraction"> | string | null
  }

  export type DcrReportUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: DcrReportWhereUniqueInput
    update: XOR<DcrReportUpdateWithoutEmployeeInput, DcrReportUncheckedUpdateWithoutEmployeeInput>
    create: XOR<DcrReportCreateWithoutEmployeeInput, DcrReportUncheckedCreateWithoutEmployeeInput>
  }

  export type DcrReportUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: DcrReportWhereUniqueInput
    data: XOR<DcrReportUpdateWithoutEmployeeInput, DcrReportUncheckedUpdateWithoutEmployeeInput>
  }

  export type DcrReportUpdateManyWithWhereWithoutEmployeeInput = {
    where: DcrReportScalarWhereInput
    data: XOR<DcrReportUpdateManyMutationInput, DcrReportUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type DcrReportScalarWhereInput = {
    AND?: DcrReportScalarWhereInput | DcrReportScalarWhereInput[]
    OR?: DcrReportScalarWhereInput[]
    NOT?: DcrReportScalarWhereInput | DcrReportScalarWhereInput[]
    id?: StringFilter<"DcrReport"> | string
    organizationId?: StringFilter<"DcrReport"> | string
    employeeId?: StringFilter<"DcrReport"> | string
    taskId?: StringNullableFilter<"DcrReport"> | string | null
    taskType?: EnumTaskTypeReferenceNullableFilter<"DcrReport"> | $Enums.TaskTypeReference | null
    reportDate?: DateTimeFilter<"DcrReport"> | Date | string
    productsDiscussed?: StringNullableFilter<"DcrReport"> | string | null
    comments?: StringNullableFilter<"DcrReport"> | string | null
    isDraft?: BoolFilter<"DcrReport"> | boolean
    createdAt?: DateTimeFilter<"DcrReport"> | Date | string
    updatedAt?: DateTimeFilter<"DcrReport"> | Date | string
  }

  export type RcpaReportUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: RcpaReportWhereUniqueInput
    update: XOR<RcpaReportUpdateWithoutEmployeeInput, RcpaReportUncheckedUpdateWithoutEmployeeInput>
    create: XOR<RcpaReportCreateWithoutEmployeeInput, RcpaReportUncheckedCreateWithoutEmployeeInput>
  }

  export type RcpaReportUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: RcpaReportWhereUniqueInput
    data: XOR<RcpaReportUpdateWithoutEmployeeInput, RcpaReportUncheckedUpdateWithoutEmployeeInput>
  }

  export type RcpaReportUpdateManyWithWhereWithoutEmployeeInput = {
    where: RcpaReportScalarWhereInput
    data: XOR<RcpaReportUpdateManyMutationInput, RcpaReportUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type RcpaReportScalarWhereInput = {
    AND?: RcpaReportScalarWhereInput | RcpaReportScalarWhereInput[]
    OR?: RcpaReportScalarWhereInput[]
    NOT?: RcpaReportScalarWhereInput | RcpaReportScalarWhereInput[]
    id?: StringFilter<"RcpaReport"> | string
    organizationId?: StringFilter<"RcpaReport"> | string
    employeeId?: StringFilter<"RcpaReport"> | string
    chemistId?: StringFilter<"RcpaReport"> | string
    remarks?: StringNullableFilter<"RcpaReport"> | string | null
    createdAt?: DateTimeFilter<"RcpaReport"> | Date | string
    updatedAt?: DateTimeFilter<"RcpaReport"> | Date | string
  }

  export type CheckInUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: CheckInWhereUniqueInput
    update: XOR<CheckInUpdateWithoutEmployeeInput, CheckInUncheckedUpdateWithoutEmployeeInput>
    create: XOR<CheckInCreateWithoutEmployeeInput, CheckInUncheckedCreateWithoutEmployeeInput>
  }

  export type CheckInUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: CheckInWhereUniqueInput
    data: XOR<CheckInUpdateWithoutEmployeeInput, CheckInUncheckedUpdateWithoutEmployeeInput>
  }

  export type CheckInUpdateManyWithWhereWithoutEmployeeInput = {
    where: CheckInScalarWhereInput
    data: XOR<CheckInUpdateManyMutationInput, CheckInUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type CheckInScalarWhereInput = {
    AND?: CheckInScalarWhereInput | CheckInScalarWhereInput[]
    OR?: CheckInScalarWhereInput[]
    NOT?: CheckInScalarWhereInput | CheckInScalarWhereInput[]
    id?: StringFilter<"CheckIn"> | string
    organizationId?: StringFilter<"CheckIn"> | string
    employeeId?: StringFilter<"CheckIn"> | string
    checkInTime?: DateTimeNullableFilter<"CheckIn"> | Date | string | null
    checkOutTime?: DateTimeNullableFilter<"CheckIn"> | Date | string | null
    checkInLatitude?: DecimalNullableFilter<"CheckIn"> | Decimal | DecimalJsLike | number | string | null
    checkInLongitude?: DecimalNullableFilter<"CheckIn"> | Decimal | DecimalJsLike | number | string | null
    checkOutLatitude?: DecimalNullableFilter<"CheckIn"> | Decimal | DecimalJsLike | number | string | null
    checkOutLongitude?: DecimalNullableFilter<"CheckIn"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"CheckIn"> | Date | string
  }

  export type AuditLogUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutEmployeeInput, AuditLogUncheckedUpdateWithoutEmployeeInput>
    create: XOR<AuditLogCreateWithoutEmployeeInput, AuditLogUncheckedCreateWithoutEmployeeInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutEmployeeInput, AuditLogUncheckedUpdateWithoutEmployeeInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutEmployeeInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    organizationId?: StringFilter<"AuditLog"> | string
    employeeId?: StringNullableFilter<"AuditLog"> | string | null
    tableName?: StringFilter<"AuditLog"> | string
    actionType?: StringFilter<"AuditLog"> | string
    recordId?: StringFilter<"AuditLog"> | string
    oldValues?: JsonNullableFilter<"AuditLog">
    newValues?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type OrderUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutCreatedByInput, OrderUncheckedUpdateWithoutCreatedByInput>
    create: XOR<OrderCreateWithoutCreatedByInput, OrderUncheckedCreateWithoutCreatedByInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutCreatedByInput, OrderUncheckedUpdateWithoutCreatedByInput>
  }

  export type OrderUpdateManyWithWhereWithoutCreatedByInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type OrderScalarWhereInput = {
    AND?: OrderScalarWhereInput | OrderScalarWhereInput[]
    OR?: OrderScalarWhereInput[]
    NOT?: OrderScalarWhereInput | OrderScalarWhereInput[]
    id?: StringFilter<"Order"> | string
    organizationId?: StringFilter<"Order"> | string
    chemistId?: StringNullableFilter<"Order"> | string | null
    totalAmount?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus
    orderDate?: DateTimeFilter<"Order"> | Date | string
    deliveryDate?: DateTimeNullableFilter<"Order"> | Date | string | null
    specialInstructions?: StringNullableFilter<"Order"> | string | null
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
    createdById?: StringFilter<"Order"> | string
  }

  export type DoctorUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: DoctorWhereUniqueInput
    update: XOR<DoctorUpdateWithoutCreatedByInput, DoctorUncheckedUpdateWithoutCreatedByInput>
    create: XOR<DoctorCreateWithoutCreatedByInput, DoctorUncheckedCreateWithoutCreatedByInput>
  }

  export type DoctorUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: DoctorWhereUniqueInput
    data: XOR<DoctorUpdateWithoutCreatedByInput, DoctorUncheckedUpdateWithoutCreatedByInput>
  }

  export type DoctorUpdateManyWithWhereWithoutCreatedByInput = {
    where: DoctorScalarWhereInput
    data: XOR<DoctorUpdateManyMutationInput, DoctorUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type DoctorScalarWhereInput = {
    AND?: DoctorScalarWhereInput | DoctorScalarWhereInput[]
    OR?: DoctorScalarWhereInput[]
    NOT?: DoctorScalarWhereInput | DoctorScalarWhereInput[]
    id?: StringFilter<"Doctor"> | string
    organizationId?: StringFilter<"Doctor"> | string
    name?: StringFilter<"Doctor"> | string
    designation?: StringNullableFilter<"Doctor"> | string | null
    specialization?: StringNullableFilter<"Doctor"> | string | null
    email?: StringNullableFilter<"Doctor"> | string | null
    phone?: StringNullableFilter<"Doctor"> | string | null
    description?: StringNullableFilter<"Doctor"> | string | null
    profilePictureUrl?: StringNullableFilter<"Doctor"> | string | null
    qualification?: StringNullableFilter<"Doctor"> | string | null
    experienceYears?: IntNullableFilter<"Doctor"> | number | null
    createdAt?: DateTimeFilter<"Doctor"> | Date | string
    updatedAt?: DateTimeFilter<"Doctor"> | Date | string
    createdById?: StringFilter<"Doctor"> | string
    isActive?: BoolFilter<"Doctor"> | boolean
  }

  export type DrugUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: DrugWhereUniqueInput
    update: XOR<DrugUpdateWithoutCreatedByInput, DrugUncheckedUpdateWithoutCreatedByInput>
    create: XOR<DrugCreateWithoutCreatedByInput, DrugUncheckedCreateWithoutCreatedByInput>
  }

  export type DrugUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: DrugWhereUniqueInput
    data: XOR<DrugUpdateWithoutCreatedByInput, DrugUncheckedUpdateWithoutCreatedByInput>
  }

  export type DrugUpdateManyWithWhereWithoutCreatedByInput = {
    where: DrugScalarWhereInput
    data: XOR<DrugUpdateManyMutationInput, DrugUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type DrugScalarWhereInput = {
    AND?: DrugScalarWhereInput | DrugScalarWhereInput[]
    OR?: DrugScalarWhereInput[]
    NOT?: DrugScalarWhereInput | DrugScalarWhereInput[]
    id?: StringFilter<"Drug"> | string
    organizationId?: StringFilter<"Drug"> | string
    name?: StringFilter<"Drug"> | string
    composition?: StringNullableFilter<"Drug"> | string | null
    manufacturer?: StringNullableFilter<"Drug"> | string | null
    indications?: StringNullableFilter<"Drug"> | string | null
    sideEffects?: StringNullableFilter<"Drug"> | string | null
    safetyAdvice?: StringNullableFilter<"Drug"> | string | null
    dosageForms?: JsonNullableFilter<"Drug">
    price?: DecimalNullableFilter<"Drug"> | Decimal | DecimalJsLike | number | string | null
    schedule?: StringNullableFilter<"Drug"> | string | null
    regulatoryApprovals?: StringNullableFilter<"Drug"> | string | null
    category?: StringNullableFilter<"Drug"> | string | null
    isAvailable?: BoolFilter<"Drug"> | boolean
    images?: JsonNullableFilter<"Drug">
    marketingMaterials?: JsonNullableFilter<"Drug">
    createdAt?: DateTimeFilter<"Drug"> | Date | string
    updatedAt?: DateTimeFilter<"Drug"> | Date | string
    createdById?: StringFilter<"Drug"> | string
    isActive?: BoolFilter<"Drug"> | boolean
  }

  export type ChemistUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ChemistWhereUniqueInput
    update: XOR<ChemistUpdateWithoutCreatedByInput, ChemistUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ChemistCreateWithoutCreatedByInput, ChemistUncheckedCreateWithoutCreatedByInput>
  }

  export type ChemistUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ChemistWhereUniqueInput
    data: XOR<ChemistUpdateWithoutCreatedByInput, ChemistUncheckedUpdateWithoutCreatedByInput>
  }

  export type ChemistUpdateManyWithWhereWithoutCreatedByInput = {
    where: ChemistScalarWhereInput
    data: XOR<ChemistUpdateManyMutationInput, ChemistUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ChemistScalarWhereInput = {
    AND?: ChemistScalarWhereInput | ChemistScalarWhereInput[]
    OR?: ChemistScalarWhereInput[]
    NOT?: ChemistScalarWhereInput | ChemistScalarWhereInput[]
    id?: StringFilter<"Chemist"> | string
    organizationId?: StringFilter<"Chemist"> | string
    chemistChainId?: StringNullableFilter<"Chemist"> | string | null
    territoryId?: StringFilter<"Chemist"> | string
    name?: StringFilter<"Chemist"> | string
    type?: EnumChemistTypeFilter<"Chemist"> | $Enums.ChemistType
    email?: StringNullableFilter<"Chemist"> | string | null
    phone?: StringNullableFilter<"Chemist"> | string | null
    address?: StringNullableFilter<"Chemist"> | string | null
    city?: StringNullableFilter<"Chemist"> | string | null
    state?: StringNullableFilter<"Chemist"> | string | null
    pincode?: StringNullableFilter<"Chemist"> | string | null
    latitude?: DecimalNullableFilter<"Chemist"> | Decimal | DecimalJsLike | number | string | null
    longitude?: DecimalNullableFilter<"Chemist"> | Decimal | DecimalJsLike | number | string | null
    description?: StringNullableFilter<"Chemist"> | string | null
    profilePictureUrl?: StringNullableFilter<"Chemist"> | string | null
    visitingHours?: StringNullableFilter<"Chemist"> | string | null
    createdAt?: DateTimeFilter<"Chemist"> | Date | string
    updatedAt?: DateTimeFilter<"Chemist"> | Date | string
    createdById?: StringFilter<"Chemist"> | string
    isActive?: BoolFilter<"Chemist"> | boolean
  }

  export type DoctorChemistRelationUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: DoctorChemistRelationWhereUniqueInput
    update: XOR<DoctorChemistRelationUpdateWithoutCreatedByInput, DoctorChemistRelationUncheckedUpdateWithoutCreatedByInput>
    create: XOR<DoctorChemistRelationCreateWithoutCreatedByInput, DoctorChemistRelationUncheckedCreateWithoutCreatedByInput>
  }

  export type DoctorChemistRelationUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: DoctorChemistRelationWhereUniqueInput
    data: XOR<DoctorChemistRelationUpdateWithoutCreatedByInput, DoctorChemistRelationUncheckedUpdateWithoutCreatedByInput>
  }

  export type DoctorChemistRelationUpdateManyWithWhereWithoutCreatedByInput = {
    where: DoctorChemistRelationScalarWhereInput
    data: XOR<DoctorChemistRelationUpdateManyMutationInput, DoctorChemistRelationUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type DoctorChemistRelationScalarWhereInput = {
    AND?: DoctorChemistRelationScalarWhereInput | DoctorChemistRelationScalarWhereInput[]
    OR?: DoctorChemistRelationScalarWhereInput[]
    NOT?: DoctorChemistRelationScalarWhereInput | DoctorChemistRelationScalarWhereInput[]
    id?: StringFilter<"DoctorChemistRelation"> | string
    doctorId?: StringFilter<"DoctorChemistRelation"> | string
    chemistId?: StringFilter<"DoctorChemistRelation"> | string
    createdAt?: DateTimeFilter<"DoctorChemistRelation"> | Date | string
    createdById?: StringFilter<"DoctorChemistRelation"> | string
  }

  export type ExpenseClaimUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: ExpenseClaimWhereUniqueInput
    update: XOR<ExpenseClaimUpdateWithoutEmployeeInput, ExpenseClaimUncheckedUpdateWithoutEmployeeInput>
    create: XOR<ExpenseClaimCreateWithoutEmployeeInput, ExpenseClaimUncheckedCreateWithoutEmployeeInput>
  }

  export type ExpenseClaimUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: ExpenseClaimWhereUniqueInput
    data: XOR<ExpenseClaimUpdateWithoutEmployeeInput, ExpenseClaimUncheckedUpdateWithoutEmployeeInput>
  }

  export type ExpenseClaimUpdateManyWithWhereWithoutEmployeeInput = {
    where: ExpenseClaimScalarWhereInput
    data: XOR<ExpenseClaimUpdateManyMutationInput, ExpenseClaimUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type ExpenseClaimScalarWhereInput = {
    AND?: ExpenseClaimScalarWhereInput | ExpenseClaimScalarWhereInput[]
    OR?: ExpenseClaimScalarWhereInput[]
    NOT?: ExpenseClaimScalarWhereInput | ExpenseClaimScalarWhereInput[]
    id?: StringFilter<"ExpenseClaim"> | string
    claimNumber?: StringFilter<"ExpenseClaim"> | string
    employeeId?: StringFilter<"ExpenseClaim"> | string
    expenseTypeId?: StringFilter<"ExpenseClaim"> | string
    expenseRoleConfigId?: StringFilter<"ExpenseClaim"> | string
    expenseData?: JsonFilter<"ExpenseClaim">
    status?: EnumExpenseClaimStatusFilter<"ExpenseClaim"> | $Enums.ExpenseClaimStatus
    submittedAt?: DateTimeFilter<"ExpenseClaim"> | Date | string
    approvedAt?: DateTimeNullableFilter<"ExpenseClaim"> | Date | string | null
    approvedBy?: StringNullableFilter<"ExpenseClaim"> | string | null
    approvalComments?: StringNullableFilter<"ExpenseClaim"> | string | null
    rejectionReason?: StringNullableFilter<"ExpenseClaim"> | string | null
    createdAt?: DateTimeFilter<"ExpenseClaim"> | Date | string
    updatedAt?: DateTimeFilter<"ExpenseClaim"> | Date | string
  }

  export type ExpenseClaimUpsertWithWhereUniqueWithoutApproverInput = {
    where: ExpenseClaimWhereUniqueInput
    update: XOR<ExpenseClaimUpdateWithoutApproverInput, ExpenseClaimUncheckedUpdateWithoutApproverInput>
    create: XOR<ExpenseClaimCreateWithoutApproverInput, ExpenseClaimUncheckedCreateWithoutApproverInput>
  }

  export type ExpenseClaimUpdateWithWhereUniqueWithoutApproverInput = {
    where: ExpenseClaimWhereUniqueInput
    data: XOR<ExpenseClaimUpdateWithoutApproverInput, ExpenseClaimUncheckedUpdateWithoutApproverInput>
  }

  export type ExpenseClaimUpdateManyWithWhereWithoutApproverInput = {
    where: ExpenseClaimScalarWhereInput
    data: XOR<ExpenseClaimUpdateManyMutationInput, ExpenseClaimUncheckedUpdateManyWithoutApproverInput>
  }

  export type UserDrugInventoryUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: UserDrugInventoryWhereUniqueInput
    update: XOR<UserDrugInventoryUpdateWithoutEmployeeInput, UserDrugInventoryUncheckedUpdateWithoutEmployeeInput>
    create: XOR<UserDrugInventoryCreateWithoutEmployeeInput, UserDrugInventoryUncheckedCreateWithoutEmployeeInput>
  }

  export type UserDrugInventoryUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: UserDrugInventoryWhereUniqueInput
    data: XOR<UserDrugInventoryUpdateWithoutEmployeeInput, UserDrugInventoryUncheckedUpdateWithoutEmployeeInput>
  }

  export type UserDrugInventoryUpdateManyWithWhereWithoutEmployeeInput = {
    where: UserDrugInventoryScalarWhereInput
    data: XOR<UserDrugInventoryUpdateManyMutationInput, UserDrugInventoryUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type UserDrugInventoryScalarWhereInput = {
    AND?: UserDrugInventoryScalarWhereInput | UserDrugInventoryScalarWhereInput[]
    OR?: UserDrugInventoryScalarWhereInput[]
    NOT?: UserDrugInventoryScalarWhereInput | UserDrugInventoryScalarWhereInput[]
    id?: StringFilter<"UserDrugInventory"> | string
    employeeId?: StringFilter<"UserDrugInventory"> | string
    drugId?: StringFilter<"UserDrugInventory"> | string
    quantity?: IntFilter<"UserDrugInventory"> | number
    lastRestockedAt?: DateTimeNullableFilter<"UserDrugInventory"> | Date | string | null
    createdAt?: DateTimeFilter<"UserDrugInventory"> | Date | string
    updatedAt?: DateTimeFilter<"UserDrugInventory"> | Date | string
  }

  export type UserGiftInventoryUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: UserGiftInventoryWhereUniqueInput
    update: XOR<UserGiftInventoryUpdateWithoutEmployeeInput, UserGiftInventoryUncheckedUpdateWithoutEmployeeInput>
    create: XOR<UserGiftInventoryCreateWithoutEmployeeInput, UserGiftInventoryUncheckedCreateWithoutEmployeeInput>
  }

  export type UserGiftInventoryUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: UserGiftInventoryWhereUniqueInput
    data: XOR<UserGiftInventoryUpdateWithoutEmployeeInput, UserGiftInventoryUncheckedUpdateWithoutEmployeeInput>
  }

  export type UserGiftInventoryUpdateManyWithWhereWithoutEmployeeInput = {
    where: UserGiftInventoryScalarWhereInput
    data: XOR<UserGiftInventoryUpdateManyMutationInput, UserGiftInventoryUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type UserGiftInventoryScalarWhereInput = {
    AND?: UserGiftInventoryScalarWhereInput | UserGiftInventoryScalarWhereInput[]
    OR?: UserGiftInventoryScalarWhereInput[]
    NOT?: UserGiftInventoryScalarWhereInput | UserGiftInventoryScalarWhereInput[]
    id?: StringFilter<"UserGiftInventory"> | string
    employeeId?: StringFilter<"UserGiftInventory"> | string
    giftId?: StringFilter<"UserGiftInventory"> | string
    quantity?: IntFilter<"UserGiftInventory"> | number
    lastRestockedAt?: DateTimeNullableFilter<"UserGiftInventory"> | Date | string | null
    createdAt?: DateTimeFilter<"UserGiftInventory"> | Date | string
    updatedAt?: DateTimeFilter<"UserGiftInventory"> | Date | string
  }

  export type GiftUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: GiftWhereUniqueInput
    update: XOR<GiftUpdateWithoutCreatedByInput, GiftUncheckedUpdateWithoutCreatedByInput>
    create: XOR<GiftCreateWithoutCreatedByInput, GiftUncheckedCreateWithoutCreatedByInput>
  }

  export type GiftUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: GiftWhereUniqueInput
    data: XOR<GiftUpdateWithoutCreatedByInput, GiftUncheckedUpdateWithoutCreatedByInput>
  }

  export type GiftUpdateManyWithWhereWithoutCreatedByInput = {
    where: GiftScalarWhereInput
    data: XOR<GiftUpdateManyMutationInput, GiftUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type GiftScalarWhereInput = {
    AND?: GiftScalarWhereInput | GiftScalarWhereInput[]
    OR?: GiftScalarWhereInput[]
    NOT?: GiftScalarWhereInput | GiftScalarWhereInput[]
    id?: StringFilter<"Gift"> | string
    name?: StringFilter<"Gift"> | string
    description?: StringNullableFilter<"Gift"> | string | null
    unitCost?: DecimalFilter<"Gift"> | Decimal | DecimalJsLike | number | string
    specifications?: JsonNullableFilter<"Gift">
    giftImages?: JsonNullableFilter<"Gift">
    createdAt?: DateTimeFilter<"Gift"> | Date | string
    updatedAt?: DateTimeFilter<"Gift"> | Date | string
    createdById?: StringFilter<"Gift"> | string
    isActive?: BoolFilter<"Gift"> | boolean
  }

  export type DoctorDistributionUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: DoctorDistributionWhereUniqueInput
    update: XOR<DoctorDistributionUpdateWithoutEmployeeInput, DoctorDistributionUncheckedUpdateWithoutEmployeeInput>
    create: XOR<DoctorDistributionCreateWithoutEmployeeInput, DoctorDistributionUncheckedCreateWithoutEmployeeInput>
  }

  export type DoctorDistributionUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: DoctorDistributionWhereUniqueInput
    data: XOR<DoctorDistributionUpdateWithoutEmployeeInput, DoctorDistributionUncheckedUpdateWithoutEmployeeInput>
  }

  export type DoctorDistributionUpdateManyWithWhereWithoutEmployeeInput = {
    where: DoctorDistributionScalarWhereInput
    data: XOR<DoctorDistributionUpdateManyMutationInput, DoctorDistributionUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type DoctorDistributionScalarWhereInput = {
    AND?: DoctorDistributionScalarWhereInput | DoctorDistributionScalarWhereInput[]
    OR?: DoctorDistributionScalarWhereInput[]
    NOT?: DoctorDistributionScalarWhereInput | DoctorDistributionScalarWhereInput[]
    id?: StringFilter<"DoctorDistribution"> | string
    doctorInteractionId?: StringFilter<"DoctorDistribution"> | string
    employeeId?: StringFilter<"DoctorDistribution"> | string
    distributedAt?: DateTimeFilter<"DoctorDistribution"> | Date | string
    createdAt?: DateTimeFilter<"DoctorDistribution"> | Date | string
    updatedAt?: DateTimeFilter<"DoctorDistribution"> | Date | string
  }

  export type TaskPlannerUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: TaskPlannerWhereUniqueInput
    update: XOR<TaskPlannerUpdateWithoutEmployeeInput, TaskPlannerUncheckedUpdateWithoutEmployeeInput>
    create: XOR<TaskPlannerCreateWithoutEmployeeInput, TaskPlannerUncheckedCreateWithoutEmployeeInput>
  }

  export type TaskPlannerUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: TaskPlannerWhereUniqueInput
    data: XOR<TaskPlannerUpdateWithoutEmployeeInput, TaskPlannerUncheckedUpdateWithoutEmployeeInput>
  }

  export type TaskPlannerUpdateManyWithWhereWithoutEmployeeInput = {
    where: TaskPlannerScalarWhereInput
    data: XOR<TaskPlannerUpdateManyMutationInput, TaskPlannerUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type TaskPlannerScalarWhereInput = {
    AND?: TaskPlannerScalarWhereInput | TaskPlannerScalarWhereInput[]
    OR?: TaskPlannerScalarWhereInput[]
    NOT?: TaskPlannerScalarWhereInput | TaskPlannerScalarWhereInput[]
    id?: StringFilter<"TaskPlanner"> | string
    employeeId?: StringFilter<"TaskPlanner"> | string
    startDate?: DateTimeFilter<"TaskPlanner"> | Date | string
    endDate?: DateTimeFilter<"TaskPlanner"> | Date | string
    status?: EnumTaskPlannerStatusFilter<"TaskPlanner"> | $Enums.TaskPlannerStatus
    createdAt?: DateTimeFilter<"TaskPlanner"> | Date | string
    updatedAt?: DateTimeFilter<"TaskPlanner"> | Date | string
  }

  export type DoctorTaskUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: DoctorTaskWhereUniqueInput
    update: XOR<DoctorTaskUpdateWithoutEmployeeInput, DoctorTaskUncheckedUpdateWithoutEmployeeInput>
    create: XOR<DoctorTaskCreateWithoutEmployeeInput, DoctorTaskUncheckedCreateWithoutEmployeeInput>
  }

  export type DoctorTaskUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: DoctorTaskWhereUniqueInput
    data: XOR<DoctorTaskUpdateWithoutEmployeeInput, DoctorTaskUncheckedUpdateWithoutEmployeeInput>
  }

  export type DoctorTaskUpdateManyWithWhereWithoutEmployeeInput = {
    where: DoctorTaskScalarWhereInput
    data: XOR<DoctorTaskUpdateManyMutationInput, DoctorTaskUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type DoctorTaskScalarWhereInput = {
    AND?: DoctorTaskScalarWhereInput | DoctorTaskScalarWhereInput[]
    OR?: DoctorTaskScalarWhereInput[]
    NOT?: DoctorTaskScalarWhereInput | DoctorTaskScalarWhereInput[]
    id?: StringFilter<"DoctorTask"> | string
    plannerId?: StringFilter<"DoctorTask"> | string
    employeeId?: StringFilter<"DoctorTask"> | string
    doctorId?: StringFilter<"DoctorTask"> | string
    taskDate?: DateTimeFilter<"DoctorTask"> | Date | string
    startTime?: DateTimeFilter<"DoctorTask"> | Date | string
    endTime?: DateTimeFilter<"DoctorTask"> | Date | string
    taskStatus?: EnumTaskStatusFilter<"DoctorTask"> | $Enums.TaskStatus
    createdAt?: DateTimeFilter<"DoctorTask"> | Date | string
    updatedAt?: DateTimeFilter<"DoctorTask"> | Date | string
  }

  export type ChemistTaskUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: ChemistTaskWhereUniqueInput
    update: XOR<ChemistTaskUpdateWithoutEmployeeInput, ChemistTaskUncheckedUpdateWithoutEmployeeInput>
    create: XOR<ChemistTaskCreateWithoutEmployeeInput, ChemistTaskUncheckedCreateWithoutEmployeeInput>
  }

  export type ChemistTaskUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: ChemistTaskWhereUniqueInput
    data: XOR<ChemistTaskUpdateWithoutEmployeeInput, ChemistTaskUncheckedUpdateWithoutEmployeeInput>
  }

  export type ChemistTaskUpdateManyWithWhereWithoutEmployeeInput = {
    where: ChemistTaskScalarWhereInput
    data: XOR<ChemistTaskUpdateManyMutationInput, ChemistTaskUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type ChemistTaskScalarWhereInput = {
    AND?: ChemistTaskScalarWhereInput | ChemistTaskScalarWhereInput[]
    OR?: ChemistTaskScalarWhereInput[]
    NOT?: ChemistTaskScalarWhereInput | ChemistTaskScalarWhereInput[]
    id?: StringFilter<"ChemistTask"> | string
    plannerId?: StringFilter<"ChemistTask"> | string
    employeeId?: StringFilter<"ChemistTask"> | string
    chemistId?: StringFilter<"ChemistTask"> | string
    taskDate?: DateTimeFilter<"ChemistTask"> | Date | string
    startTime?: DateTimeFilter<"ChemistTask"> | Date | string
    endTime?: DateTimeFilter<"ChemistTask"> | Date | string
    taskStatus?: EnumTaskStatusFilter<"ChemistTask"> | $Enums.TaskStatus
    createdAt?: DateTimeFilter<"ChemistTask"> | Date | string
    updatedAt?: DateTimeFilter<"ChemistTask"> | Date | string
  }

  export type TourPlanTaskUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: TourPlanTaskWhereUniqueInput
    update: XOR<TourPlanTaskUpdateWithoutEmployeeInput, TourPlanTaskUncheckedUpdateWithoutEmployeeInput>
    create: XOR<TourPlanTaskCreateWithoutEmployeeInput, TourPlanTaskUncheckedCreateWithoutEmployeeInput>
  }

  export type TourPlanTaskUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: TourPlanTaskWhereUniqueInput
    data: XOR<TourPlanTaskUpdateWithoutEmployeeInput, TourPlanTaskUncheckedUpdateWithoutEmployeeInput>
  }

  export type TourPlanTaskUpdateManyWithWhereWithoutEmployeeInput = {
    where: TourPlanTaskScalarWhereInput
    data: XOR<TourPlanTaskUpdateManyMutationInput, TourPlanTaskUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type TourPlanTaskScalarWhereInput = {
    AND?: TourPlanTaskScalarWhereInput | TourPlanTaskScalarWhereInput[]
    OR?: TourPlanTaskScalarWhereInput[]
    NOT?: TourPlanTaskScalarWhereInput | TourPlanTaskScalarWhereInput[]
    id?: StringFilter<"TourPlanTask"> | string
    plannerId?: StringFilter<"TourPlanTask"> | string
    employeeId?: StringFilter<"TourPlanTask"> | string
    tourPlanId?: StringFilter<"TourPlanTask"> | string
    location?: StringFilter<"TourPlanTask"> | string
    taskDate?: DateTimeFilter<"TourPlanTask"> | Date | string
    startTime?: DateTimeFilter<"TourPlanTask"> | Date | string
    endTime?: DateTimeFilter<"TourPlanTask"> | Date | string
    taskStatus?: EnumTaskStatusFilter<"TourPlanTask"> | $Enums.TaskStatus
    createdAt?: DateTimeFilter<"TourPlanTask"> | Date | string
    updatedAt?: DateTimeFilter<"TourPlanTask"> | Date | string
  }

  export type EmployeeCreateWithoutLeadsTeamInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    reportingManager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutReportingManagerInput
    team?: TeamCreateNestedOneWithoutTeamMembersInput
    territories?: EmployeeTerritoryCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutLeadsTeamInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    reportingManagerId?: string | null
    teamId?: string | null
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutReportingManagerInput
    territories?: EmployeeTerritoryUncheckedCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordUncheckedCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteUncheckedCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteUncheckedCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderUncheckedCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorUncheckedCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugUncheckedCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistUncheckedCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftUncheckedCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionUncheckedCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerUncheckedCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskUncheckedCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutLeadsTeamInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutLeadsTeamInput, EmployeeUncheckedCreateWithoutLeadsTeamInput>
  }

  export type EmployeeCreateWithoutTeamInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    reportingManager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutReportingManagerInput
    leadsTeam?: TeamCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutTeamInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    reportingManagerId?: string | null
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutReportingManagerInput
    leadsTeam?: TeamUncheckedCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryUncheckedCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordUncheckedCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteUncheckedCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteUncheckedCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderUncheckedCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorUncheckedCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugUncheckedCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistUncheckedCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftUncheckedCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionUncheckedCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerUncheckedCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskUncheckedCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutTeamInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutTeamInput, EmployeeUncheckedCreateWithoutTeamInput>
  }

  export type EmployeeCreateManyTeamInputEnvelope = {
    data: EmployeeCreateManyTeamInput | EmployeeCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeUpsertWithoutLeadsTeamInput = {
    update: XOR<EmployeeUpdateWithoutLeadsTeamInput, EmployeeUncheckedUpdateWithoutLeadsTeamInput>
    create: XOR<EmployeeCreateWithoutLeadsTeamInput, EmployeeUncheckedCreateWithoutLeadsTeamInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutLeadsTeamInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutLeadsTeamInput, EmployeeUncheckedUpdateWithoutLeadsTeamInput>
  }

  export type EmployeeUpdateWithoutLeadsTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    reportingManager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutReportingManagerNestedInput
    team?: TeamUpdateOneWithoutTeamMembersNestedInput
    territories?: EmployeeTerritoryUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutLeadsTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    reportingManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    subordinates?: EmployeeUncheckedUpdateManyWithoutReportingManagerNestedInput
    territories?: EmployeeTerritoryUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUncheckedUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUncheckedUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUncheckedUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUncheckedUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUpsertWithWhereUniqueWithoutTeamInput = {
    where: EmployeeWhereUniqueInput
    update: XOR<EmployeeUpdateWithoutTeamInput, EmployeeUncheckedUpdateWithoutTeamInput>
    create: XOR<EmployeeCreateWithoutTeamInput, EmployeeUncheckedCreateWithoutTeamInput>
  }

  export type EmployeeUpdateWithWhereUniqueWithoutTeamInput = {
    where: EmployeeWhereUniqueInput
    data: XOR<EmployeeUpdateWithoutTeamInput, EmployeeUncheckedUpdateWithoutTeamInput>
  }

  export type EmployeeUpdateManyWithWhereWithoutTeamInput = {
    where: EmployeeScalarWhereInput
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyWithoutTeamInput>
  }

  export type TerritoryCreateWithoutChildTerritoriesInput = {
    id?: string
    organizationId: string
    name: string
    type: string
    boundaries?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    parentTerritory?: TerritoryCreateNestedOneWithoutChildTerritoriesInput
    employees?: EmployeeTerritoryCreateNestedManyWithoutTerritoryInput
    hospitals?: HospitalCreateNestedManyWithoutTerritoryInput
    chemists?: ChemistCreateNestedManyWithoutTerritoryInput
  }

  export type TerritoryUncheckedCreateWithoutChildTerritoriesInput = {
    id?: string
    organizationId: string
    name: string
    type: string
    parentTerritoryId?: string | null
    boundaries?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    employees?: EmployeeTerritoryUncheckedCreateNestedManyWithoutTerritoryInput
    hospitals?: HospitalUncheckedCreateNestedManyWithoutTerritoryInput
    chemists?: ChemistUncheckedCreateNestedManyWithoutTerritoryInput
  }

  export type TerritoryCreateOrConnectWithoutChildTerritoriesInput = {
    where: TerritoryWhereUniqueInput
    create: XOR<TerritoryCreateWithoutChildTerritoriesInput, TerritoryUncheckedCreateWithoutChildTerritoriesInput>
  }

  export type TerritoryCreateWithoutParentTerritoryInput = {
    id?: string
    organizationId: string
    name: string
    type: string
    boundaries?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    childTerritories?: TerritoryCreateNestedManyWithoutParentTerritoryInput
    employees?: EmployeeTerritoryCreateNestedManyWithoutTerritoryInput
    hospitals?: HospitalCreateNestedManyWithoutTerritoryInput
    chemists?: ChemistCreateNestedManyWithoutTerritoryInput
  }

  export type TerritoryUncheckedCreateWithoutParentTerritoryInput = {
    id?: string
    organizationId: string
    name: string
    type: string
    boundaries?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    childTerritories?: TerritoryUncheckedCreateNestedManyWithoutParentTerritoryInput
    employees?: EmployeeTerritoryUncheckedCreateNestedManyWithoutTerritoryInput
    hospitals?: HospitalUncheckedCreateNestedManyWithoutTerritoryInput
    chemists?: ChemistUncheckedCreateNestedManyWithoutTerritoryInput
  }

  export type TerritoryCreateOrConnectWithoutParentTerritoryInput = {
    where: TerritoryWhereUniqueInput
    create: XOR<TerritoryCreateWithoutParentTerritoryInput, TerritoryUncheckedCreateWithoutParentTerritoryInput>
  }

  export type TerritoryCreateManyParentTerritoryInputEnvelope = {
    data: TerritoryCreateManyParentTerritoryInput | TerritoryCreateManyParentTerritoryInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeTerritoryCreateWithoutTerritoryInput = {
    id?: string
    assignedAt: Date | string
    unassignedAt?: Date | string | null
    isPrimary?: boolean
    employee: EmployeeCreateNestedOneWithoutTerritoriesInput
  }

  export type EmployeeTerritoryUncheckedCreateWithoutTerritoryInput = {
    id?: string
    employeeId: string
    assignedAt: Date | string
    unassignedAt?: Date | string | null
    isPrimary?: boolean
  }

  export type EmployeeTerritoryCreateOrConnectWithoutTerritoryInput = {
    where: EmployeeTerritoryWhereUniqueInput
    create: XOR<EmployeeTerritoryCreateWithoutTerritoryInput, EmployeeTerritoryUncheckedCreateWithoutTerritoryInput>
  }

  export type EmployeeTerritoryCreateManyTerritoryInputEnvelope = {
    data: EmployeeTerritoryCreateManyTerritoryInput | EmployeeTerritoryCreateManyTerritoryInput[]
    skipDuplicates?: boolean
  }

  export type HospitalCreateWithoutTerritoryInput = {
    id?: string
    organizationId: string
    name: string
    type: string
    address: string
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    hospitalChain?: HospitalChainCreateNestedOneWithoutHospitalsInput
    doctorAssociations?: DoctorHospitalAssociationCreateNestedManyWithoutHospitalInput
    consultationSchedules?: DoctorConsultationScheduleCreateNestedManyWithoutHospitalInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateWithoutTerritoryInput = {
    id?: string
    organizationId: string
    hospitalChainId?: string | null
    name: string
    type: string
    address: string
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    doctorAssociations?: DoctorHospitalAssociationUncheckedCreateNestedManyWithoutHospitalInput
    consultationSchedules?: DoctorConsultationScheduleUncheckedCreateNestedManyWithoutHospitalInput
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalCreateOrConnectWithoutTerritoryInput = {
    where: HospitalWhereUniqueInput
    create: XOR<HospitalCreateWithoutTerritoryInput, HospitalUncheckedCreateWithoutTerritoryInput>
  }

  export type HospitalCreateManyTerritoryInputEnvelope = {
    data: HospitalCreateManyTerritoryInput | HospitalCreateManyTerritoryInput[]
    skipDuplicates?: boolean
  }

  export type ChemistCreateWithoutTerritoryInput = {
    id?: string
    organizationId: string
    name: string
    type: $Enums.ChemistType
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    profilePictureUrl?: string | null
    visitingHours?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    chemistChain?: ChemistChainCreateNestedOneWithoutChemistsInput
    createdBy: EmployeeCreateNestedOneWithoutChemistsCreatedInput
    notes?: ChemistNoteCreateNestedManyWithoutChemistInput
    interactions?: ChemistInteractionCreateNestedManyWithoutChemistInput
    doctorRelations?: DoctorChemistRelationCreateNestedManyWithoutChemistInput
    orders?: OrderCreateNestedManyWithoutChemistInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutChemistInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutChemistInput
  }

  export type ChemistUncheckedCreateWithoutTerritoryInput = {
    id?: string
    organizationId: string
    chemistChainId?: string | null
    name: string
    type: $Enums.ChemistType
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    profilePictureUrl?: string | null
    visitingHours?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isActive?: boolean
    notes?: ChemistNoteUncheckedCreateNestedManyWithoutChemistInput
    interactions?: ChemistInteractionUncheckedCreateNestedManyWithoutChemistInput
    doctorRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutChemistInput
    orders?: OrderUncheckedCreateNestedManyWithoutChemistInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutChemistInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutChemistInput
  }

  export type ChemistCreateOrConnectWithoutTerritoryInput = {
    where: ChemistWhereUniqueInput
    create: XOR<ChemistCreateWithoutTerritoryInput, ChemistUncheckedCreateWithoutTerritoryInput>
  }

  export type ChemistCreateManyTerritoryInputEnvelope = {
    data: ChemistCreateManyTerritoryInput | ChemistCreateManyTerritoryInput[]
    skipDuplicates?: boolean
  }

  export type TerritoryUpsertWithoutChildTerritoriesInput = {
    update: XOR<TerritoryUpdateWithoutChildTerritoriesInput, TerritoryUncheckedUpdateWithoutChildTerritoriesInput>
    create: XOR<TerritoryCreateWithoutChildTerritoriesInput, TerritoryUncheckedCreateWithoutChildTerritoriesInput>
    where?: TerritoryWhereInput
  }

  export type TerritoryUpdateToOneWithWhereWithoutChildTerritoriesInput = {
    where?: TerritoryWhereInput
    data: XOR<TerritoryUpdateWithoutChildTerritoriesInput, TerritoryUncheckedUpdateWithoutChildTerritoriesInput>
  }

  export type TerritoryUpdateWithoutChildTerritoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    boundaries?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentTerritory?: TerritoryUpdateOneWithoutChildTerritoriesNestedInput
    employees?: EmployeeTerritoryUpdateManyWithoutTerritoryNestedInput
    hospitals?: HospitalUpdateManyWithoutTerritoryNestedInput
    chemists?: ChemistUpdateManyWithoutTerritoryNestedInput
  }

  export type TerritoryUncheckedUpdateWithoutChildTerritoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    parentTerritoryId?: NullableStringFieldUpdateOperationsInput | string | null
    boundaries?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employees?: EmployeeTerritoryUncheckedUpdateManyWithoutTerritoryNestedInput
    hospitals?: HospitalUncheckedUpdateManyWithoutTerritoryNestedInput
    chemists?: ChemistUncheckedUpdateManyWithoutTerritoryNestedInput
  }

  export type TerritoryUpsertWithWhereUniqueWithoutParentTerritoryInput = {
    where: TerritoryWhereUniqueInput
    update: XOR<TerritoryUpdateWithoutParentTerritoryInput, TerritoryUncheckedUpdateWithoutParentTerritoryInput>
    create: XOR<TerritoryCreateWithoutParentTerritoryInput, TerritoryUncheckedCreateWithoutParentTerritoryInput>
  }

  export type TerritoryUpdateWithWhereUniqueWithoutParentTerritoryInput = {
    where: TerritoryWhereUniqueInput
    data: XOR<TerritoryUpdateWithoutParentTerritoryInput, TerritoryUncheckedUpdateWithoutParentTerritoryInput>
  }

  export type TerritoryUpdateManyWithWhereWithoutParentTerritoryInput = {
    where: TerritoryScalarWhereInput
    data: XOR<TerritoryUpdateManyMutationInput, TerritoryUncheckedUpdateManyWithoutParentTerritoryInput>
  }

  export type TerritoryScalarWhereInput = {
    AND?: TerritoryScalarWhereInput | TerritoryScalarWhereInput[]
    OR?: TerritoryScalarWhereInput[]
    NOT?: TerritoryScalarWhereInput | TerritoryScalarWhereInput[]
    id?: StringFilter<"Territory"> | string
    organizationId?: StringFilter<"Territory"> | string
    name?: StringFilter<"Territory"> | string
    type?: StringFilter<"Territory"> | string
    parentTerritoryId?: StringNullableFilter<"Territory"> | string | null
    boundaries?: JsonNullableFilter<"Territory">
    createdAt?: DateTimeFilter<"Territory"> | Date | string
    updatedAt?: DateTimeFilter<"Territory"> | Date | string
  }

  export type EmployeeTerritoryUpsertWithWhereUniqueWithoutTerritoryInput = {
    where: EmployeeTerritoryWhereUniqueInput
    update: XOR<EmployeeTerritoryUpdateWithoutTerritoryInput, EmployeeTerritoryUncheckedUpdateWithoutTerritoryInput>
    create: XOR<EmployeeTerritoryCreateWithoutTerritoryInput, EmployeeTerritoryUncheckedCreateWithoutTerritoryInput>
  }

  export type EmployeeTerritoryUpdateWithWhereUniqueWithoutTerritoryInput = {
    where: EmployeeTerritoryWhereUniqueInput
    data: XOR<EmployeeTerritoryUpdateWithoutTerritoryInput, EmployeeTerritoryUncheckedUpdateWithoutTerritoryInput>
  }

  export type EmployeeTerritoryUpdateManyWithWhereWithoutTerritoryInput = {
    where: EmployeeTerritoryScalarWhereInput
    data: XOR<EmployeeTerritoryUpdateManyMutationInput, EmployeeTerritoryUncheckedUpdateManyWithoutTerritoryInput>
  }

  export type HospitalUpsertWithWhereUniqueWithoutTerritoryInput = {
    where: HospitalWhereUniqueInput
    update: XOR<HospitalUpdateWithoutTerritoryInput, HospitalUncheckedUpdateWithoutTerritoryInput>
    create: XOR<HospitalCreateWithoutTerritoryInput, HospitalUncheckedCreateWithoutTerritoryInput>
  }

  export type HospitalUpdateWithWhereUniqueWithoutTerritoryInput = {
    where: HospitalWhereUniqueInput
    data: XOR<HospitalUpdateWithoutTerritoryInput, HospitalUncheckedUpdateWithoutTerritoryInput>
  }

  export type HospitalUpdateManyWithWhereWithoutTerritoryInput = {
    where: HospitalScalarWhereInput
    data: XOR<HospitalUpdateManyMutationInput, HospitalUncheckedUpdateManyWithoutTerritoryInput>
  }

  export type HospitalScalarWhereInput = {
    AND?: HospitalScalarWhereInput | HospitalScalarWhereInput[]
    OR?: HospitalScalarWhereInput[]
    NOT?: HospitalScalarWhereInput | HospitalScalarWhereInput[]
    id?: StringFilter<"Hospital"> | string
    organizationId?: StringFilter<"Hospital"> | string
    hospitalChainId?: StringNullableFilter<"Hospital"> | string | null
    territoryId?: StringFilter<"Hospital"> | string
    name?: StringFilter<"Hospital"> | string
    type?: StringFilter<"Hospital"> | string
    address?: StringFilter<"Hospital"> | string
    city?: StringNullableFilter<"Hospital"> | string | null
    state?: StringNullableFilter<"Hospital"> | string | null
    pincode?: StringNullableFilter<"Hospital"> | string | null
    latitude?: DecimalNullableFilter<"Hospital"> | Decimal | DecimalJsLike | number | string | null
    longitude?: DecimalNullableFilter<"Hospital"> | Decimal | DecimalJsLike | number | string | null
    phone?: StringNullableFilter<"Hospital"> | string | null
    email?: StringNullableFilter<"Hospital"> | string | null
    website?: StringNullableFilter<"Hospital"> | string | null
    description?: StringNullableFilter<"Hospital"> | string | null
    createdAt?: DateTimeFilter<"Hospital"> | Date | string
    updatedAt?: DateTimeFilter<"Hospital"> | Date | string
    isActive?: BoolFilter<"Hospital"> | boolean
  }

  export type ChemistUpsertWithWhereUniqueWithoutTerritoryInput = {
    where: ChemistWhereUniqueInput
    update: XOR<ChemistUpdateWithoutTerritoryInput, ChemistUncheckedUpdateWithoutTerritoryInput>
    create: XOR<ChemistCreateWithoutTerritoryInput, ChemistUncheckedCreateWithoutTerritoryInput>
  }

  export type ChemistUpdateWithWhereUniqueWithoutTerritoryInput = {
    where: ChemistWhereUniqueInput
    data: XOR<ChemistUpdateWithoutTerritoryInput, ChemistUncheckedUpdateWithoutTerritoryInput>
  }

  export type ChemistUpdateManyWithWhereWithoutTerritoryInput = {
    where: ChemistScalarWhereInput
    data: XOR<ChemistUpdateManyMutationInput, ChemistUncheckedUpdateManyWithoutTerritoryInput>
  }

  export type EmployeeCreateWithoutTerritoriesInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    reportingManager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutReportingManagerInput
    team?: TeamCreateNestedOneWithoutTeamMembersInput
    leadsTeam?: TeamCreateNestedOneWithoutLeadNameInput
    trainingRecords?: EmployeeTrainingRecordCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutTerritoriesInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    reportingManagerId?: string | null
    teamId?: string | null
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutReportingManagerInput
    leadsTeam?: TeamUncheckedCreateNestedOneWithoutLeadNameInput
    trainingRecords?: EmployeeTrainingRecordUncheckedCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteUncheckedCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteUncheckedCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderUncheckedCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorUncheckedCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugUncheckedCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistUncheckedCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftUncheckedCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionUncheckedCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerUncheckedCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskUncheckedCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutTerritoriesInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutTerritoriesInput, EmployeeUncheckedCreateWithoutTerritoriesInput>
  }

  export type TerritoryCreateWithoutEmployeesInput = {
    id?: string
    organizationId: string
    name: string
    type: string
    boundaries?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    parentTerritory?: TerritoryCreateNestedOneWithoutChildTerritoriesInput
    childTerritories?: TerritoryCreateNestedManyWithoutParentTerritoryInput
    hospitals?: HospitalCreateNestedManyWithoutTerritoryInput
    chemists?: ChemistCreateNestedManyWithoutTerritoryInput
  }

  export type TerritoryUncheckedCreateWithoutEmployeesInput = {
    id?: string
    organizationId: string
    name: string
    type: string
    parentTerritoryId?: string | null
    boundaries?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    childTerritories?: TerritoryUncheckedCreateNestedManyWithoutParentTerritoryInput
    hospitals?: HospitalUncheckedCreateNestedManyWithoutTerritoryInput
    chemists?: ChemistUncheckedCreateNestedManyWithoutTerritoryInput
  }

  export type TerritoryCreateOrConnectWithoutEmployeesInput = {
    where: TerritoryWhereUniqueInput
    create: XOR<TerritoryCreateWithoutEmployeesInput, TerritoryUncheckedCreateWithoutEmployeesInput>
  }

  export type EmployeeUpsertWithoutTerritoriesInput = {
    update: XOR<EmployeeUpdateWithoutTerritoriesInput, EmployeeUncheckedUpdateWithoutTerritoriesInput>
    create: XOR<EmployeeCreateWithoutTerritoriesInput, EmployeeUncheckedCreateWithoutTerritoriesInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutTerritoriesInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutTerritoriesInput, EmployeeUncheckedUpdateWithoutTerritoriesInput>
  }

  export type EmployeeUpdateWithoutTerritoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    reportingManager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutReportingManagerNestedInput
    team?: TeamUpdateOneWithoutTeamMembersNestedInput
    leadsTeam?: TeamUpdateOneWithoutLeadNameNestedInput
    trainingRecords?: EmployeeTrainingRecordUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutTerritoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    reportingManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    subordinates?: EmployeeUncheckedUpdateManyWithoutReportingManagerNestedInput
    leadsTeam?: TeamUncheckedUpdateOneWithoutLeadNameNestedInput
    trainingRecords?: EmployeeTrainingRecordUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUncheckedUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUncheckedUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUncheckedUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUncheckedUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type TerritoryUpsertWithoutEmployeesInput = {
    update: XOR<TerritoryUpdateWithoutEmployeesInput, TerritoryUncheckedUpdateWithoutEmployeesInput>
    create: XOR<TerritoryCreateWithoutEmployeesInput, TerritoryUncheckedCreateWithoutEmployeesInput>
    where?: TerritoryWhereInput
  }

  export type TerritoryUpdateToOneWithWhereWithoutEmployeesInput = {
    where?: TerritoryWhereInput
    data: XOR<TerritoryUpdateWithoutEmployeesInput, TerritoryUncheckedUpdateWithoutEmployeesInput>
  }

  export type TerritoryUpdateWithoutEmployeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    boundaries?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentTerritory?: TerritoryUpdateOneWithoutChildTerritoriesNestedInput
    childTerritories?: TerritoryUpdateManyWithoutParentTerritoryNestedInput
    hospitals?: HospitalUpdateManyWithoutTerritoryNestedInput
    chemists?: ChemistUpdateManyWithoutTerritoryNestedInput
  }

  export type TerritoryUncheckedUpdateWithoutEmployeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    parentTerritoryId?: NullableStringFieldUpdateOperationsInput | string | null
    boundaries?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    childTerritories?: TerritoryUncheckedUpdateManyWithoutParentTerritoryNestedInput
    hospitals?: HospitalUncheckedUpdateManyWithoutTerritoryNestedInput
    chemists?: ChemistUncheckedUpdateManyWithoutTerritoryNestedInput
  }

  export type EmployeeCreateWithoutTrainingRecordsInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    reportingManager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutReportingManagerInput
    team?: TeamCreateNestedOneWithoutTeamMembersInput
    leadsTeam?: TeamCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutTrainingRecordsInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    reportingManagerId?: string | null
    teamId?: string | null
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutReportingManagerInput
    leadsTeam?: TeamUncheckedCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryUncheckedCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteUncheckedCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteUncheckedCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderUncheckedCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorUncheckedCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugUncheckedCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistUncheckedCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftUncheckedCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionUncheckedCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerUncheckedCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskUncheckedCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutTrainingRecordsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutTrainingRecordsInput, EmployeeUncheckedCreateWithoutTrainingRecordsInput>
  }

  export type EmployeeUpsertWithoutTrainingRecordsInput = {
    update: XOR<EmployeeUpdateWithoutTrainingRecordsInput, EmployeeUncheckedUpdateWithoutTrainingRecordsInput>
    create: XOR<EmployeeCreateWithoutTrainingRecordsInput, EmployeeUncheckedCreateWithoutTrainingRecordsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutTrainingRecordsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutTrainingRecordsInput, EmployeeUncheckedUpdateWithoutTrainingRecordsInput>
  }

  export type EmployeeUpdateWithoutTrainingRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    reportingManager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutReportingManagerNestedInput
    team?: TeamUpdateOneWithoutTeamMembersNestedInput
    leadsTeam?: TeamUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutTrainingRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    reportingManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    subordinates?: EmployeeUncheckedUpdateManyWithoutReportingManagerNestedInput
    leadsTeam?: TeamUncheckedUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUncheckedUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUncheckedUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUncheckedUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUncheckedUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type HospitalCreateWithoutHospitalChainInput = {
    id?: string
    organizationId: string
    name: string
    type: string
    address: string
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    territory: TerritoryCreateNestedOneWithoutHospitalsInput
    doctorAssociations?: DoctorHospitalAssociationCreateNestedManyWithoutHospitalInput
    consultationSchedules?: DoctorConsultationScheduleCreateNestedManyWithoutHospitalInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateWithoutHospitalChainInput = {
    id?: string
    organizationId: string
    territoryId: string
    name: string
    type: string
    address: string
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    doctorAssociations?: DoctorHospitalAssociationUncheckedCreateNestedManyWithoutHospitalInput
    consultationSchedules?: DoctorConsultationScheduleUncheckedCreateNestedManyWithoutHospitalInput
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalCreateOrConnectWithoutHospitalChainInput = {
    where: HospitalWhereUniqueInput
    create: XOR<HospitalCreateWithoutHospitalChainInput, HospitalUncheckedCreateWithoutHospitalChainInput>
  }

  export type HospitalCreateManyHospitalChainInputEnvelope = {
    data: HospitalCreateManyHospitalChainInput | HospitalCreateManyHospitalChainInput[]
    skipDuplicates?: boolean
  }

  export type HospitalUpsertWithWhereUniqueWithoutHospitalChainInput = {
    where: HospitalWhereUniqueInput
    update: XOR<HospitalUpdateWithoutHospitalChainInput, HospitalUncheckedUpdateWithoutHospitalChainInput>
    create: XOR<HospitalCreateWithoutHospitalChainInput, HospitalUncheckedCreateWithoutHospitalChainInput>
  }

  export type HospitalUpdateWithWhereUniqueWithoutHospitalChainInput = {
    where: HospitalWhereUniqueInput
    data: XOR<HospitalUpdateWithoutHospitalChainInput, HospitalUncheckedUpdateWithoutHospitalChainInput>
  }

  export type HospitalUpdateManyWithWhereWithoutHospitalChainInput = {
    where: HospitalScalarWhereInput
    data: XOR<HospitalUpdateManyMutationInput, HospitalUncheckedUpdateManyWithoutHospitalChainInput>
  }

  export type ChemistCreateWithoutChemistChainInput = {
    id?: string
    organizationId: string
    name: string
    type: $Enums.ChemistType
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    profilePictureUrl?: string | null
    visitingHours?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    territory: TerritoryCreateNestedOneWithoutChemistsInput
    createdBy: EmployeeCreateNestedOneWithoutChemistsCreatedInput
    notes?: ChemistNoteCreateNestedManyWithoutChemistInput
    interactions?: ChemistInteractionCreateNestedManyWithoutChemistInput
    doctorRelations?: DoctorChemistRelationCreateNestedManyWithoutChemistInput
    orders?: OrderCreateNestedManyWithoutChemistInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutChemistInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutChemistInput
  }

  export type ChemistUncheckedCreateWithoutChemistChainInput = {
    id?: string
    organizationId: string
    territoryId: string
    name: string
    type: $Enums.ChemistType
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    profilePictureUrl?: string | null
    visitingHours?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isActive?: boolean
    notes?: ChemistNoteUncheckedCreateNestedManyWithoutChemistInput
    interactions?: ChemistInteractionUncheckedCreateNestedManyWithoutChemistInput
    doctorRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutChemistInput
    orders?: OrderUncheckedCreateNestedManyWithoutChemistInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutChemistInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutChemistInput
  }

  export type ChemistCreateOrConnectWithoutChemistChainInput = {
    where: ChemistWhereUniqueInput
    create: XOR<ChemistCreateWithoutChemistChainInput, ChemistUncheckedCreateWithoutChemistChainInput>
  }

  export type ChemistCreateManyChemistChainInputEnvelope = {
    data: ChemistCreateManyChemistChainInput | ChemistCreateManyChemistChainInput[]
    skipDuplicates?: boolean
  }

  export type ChemistUpsertWithWhereUniqueWithoutChemistChainInput = {
    where: ChemistWhereUniqueInput
    update: XOR<ChemistUpdateWithoutChemistChainInput, ChemistUncheckedUpdateWithoutChemistChainInput>
    create: XOR<ChemistCreateWithoutChemistChainInput, ChemistUncheckedCreateWithoutChemistChainInput>
  }

  export type ChemistUpdateWithWhereUniqueWithoutChemistChainInput = {
    where: ChemistWhereUniqueInput
    data: XOR<ChemistUpdateWithoutChemistChainInput, ChemistUncheckedUpdateWithoutChemistChainInput>
  }

  export type ChemistUpdateManyWithWhereWithoutChemistChainInput = {
    where: ChemistScalarWhereInput
    data: XOR<ChemistUpdateManyMutationInput, ChemistUncheckedUpdateManyWithoutChemistChainInput>
  }

  export type HospitalChainCreateWithoutHospitalsInput = {
    id?: string
    organizationId: string
    name: string
    headquartersAddress?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
  }

  export type HospitalChainUncheckedCreateWithoutHospitalsInput = {
    id?: string
    organizationId: string
    name: string
    headquartersAddress?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
  }

  export type HospitalChainCreateOrConnectWithoutHospitalsInput = {
    where: HospitalChainWhereUniqueInput
    create: XOR<HospitalChainCreateWithoutHospitalsInput, HospitalChainUncheckedCreateWithoutHospitalsInput>
  }

  export type TerritoryCreateWithoutHospitalsInput = {
    id?: string
    organizationId: string
    name: string
    type: string
    boundaries?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    parentTerritory?: TerritoryCreateNestedOneWithoutChildTerritoriesInput
    childTerritories?: TerritoryCreateNestedManyWithoutParentTerritoryInput
    employees?: EmployeeTerritoryCreateNestedManyWithoutTerritoryInput
    chemists?: ChemistCreateNestedManyWithoutTerritoryInput
  }

  export type TerritoryUncheckedCreateWithoutHospitalsInput = {
    id?: string
    organizationId: string
    name: string
    type: string
    parentTerritoryId?: string | null
    boundaries?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    childTerritories?: TerritoryUncheckedCreateNestedManyWithoutParentTerritoryInput
    employees?: EmployeeTerritoryUncheckedCreateNestedManyWithoutTerritoryInput
    chemists?: ChemistUncheckedCreateNestedManyWithoutTerritoryInput
  }

  export type TerritoryCreateOrConnectWithoutHospitalsInput = {
    where: TerritoryWhereUniqueInput
    create: XOR<TerritoryCreateWithoutHospitalsInput, TerritoryUncheckedCreateWithoutHospitalsInput>
  }

  export type DoctorHospitalAssociationCreateWithoutHospitalInput = {
    id?: string
    department?: string | null
    position?: string | null
    isPrimary?: boolean
    associationStartDate?: Date | string | null
    associationEndDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor: DoctorCreateNestedOneWithoutHospitalAssociationsInput
  }

  export type DoctorHospitalAssociationUncheckedCreateWithoutHospitalInput = {
    id?: string
    doctorId: string
    department?: string | null
    position?: string | null
    isPrimary?: boolean
    associationStartDate?: Date | string | null
    associationEndDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorHospitalAssociationCreateOrConnectWithoutHospitalInput = {
    where: DoctorHospitalAssociationWhereUniqueInput
    create: XOR<DoctorHospitalAssociationCreateWithoutHospitalInput, DoctorHospitalAssociationUncheckedCreateWithoutHospitalInput>
  }

  export type DoctorHospitalAssociationCreateManyHospitalInputEnvelope = {
    data: DoctorHospitalAssociationCreateManyHospitalInput | DoctorHospitalAssociationCreateManyHospitalInput[]
    skipDuplicates?: boolean
  }

  export type DoctorConsultationScheduleCreateWithoutHospitalInput = {
    id?: string
    dayOfWeek: $Enums.DayOfWeek
    startTime: Date | string
    endTime: Date | string
    consultationType: $Enums.ConsultationType
    isActive?: boolean
    effectiveFrom?: Date | string | null
    effectiveTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor: DoctorCreateNestedOneWithoutConsultationSchedulesInput
  }

  export type DoctorConsultationScheduleUncheckedCreateWithoutHospitalInput = {
    id?: string
    doctorId: string
    dayOfWeek: $Enums.DayOfWeek
    startTime: Date | string
    endTime: Date | string
    consultationType: $Enums.ConsultationType
    isActive?: boolean
    effectiveFrom?: Date | string | null
    effectiveTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorConsultationScheduleCreateOrConnectWithoutHospitalInput = {
    where: DoctorConsultationScheduleWhereUniqueInput
    create: XOR<DoctorConsultationScheduleCreateWithoutHospitalInput, DoctorConsultationScheduleUncheckedCreateWithoutHospitalInput>
  }

  export type DoctorConsultationScheduleCreateManyHospitalInputEnvelope = {
    data: DoctorConsultationScheduleCreateManyHospitalInput | DoctorConsultationScheduleCreateManyHospitalInput[]
    skipDuplicates?: boolean
  }

  export type DoctorInteractionCreateWithoutHospitalInput = {
    id?: string
    interactionType: $Enums.InteractionType
    startTime: Date | string
    endTime?: Date | string | null
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    rating?: number | null
    createdAt?: Date | string
    doctor: DoctorCreateNestedOneWithoutInteractionsInput
    employee: EmployeeCreateNestedOneWithoutDoctorInteractionsInput
    DoctorDistribution?: DoctorDistributionCreateNestedManyWithoutDoctorInteractionInput
    DoctorTask?: DoctorTaskCreateNestedOneWithoutDoctorInteractionsInput
  }

  export type DoctorInteractionUncheckedCreateWithoutHospitalInput = {
    id?: string
    doctorId: string
    employeeId: string
    interactionType: $Enums.InteractionType
    startTime: Date | string
    endTime?: Date | string | null
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    rating?: number | null
    createdAt?: Date | string
    doctorTaskId?: string | null
    DoctorDistribution?: DoctorDistributionUncheckedCreateNestedManyWithoutDoctorInteractionInput
  }

  export type DoctorInteractionCreateOrConnectWithoutHospitalInput = {
    where: DoctorInteractionWhereUniqueInput
    create: XOR<DoctorInteractionCreateWithoutHospitalInput, DoctorInteractionUncheckedCreateWithoutHospitalInput>
  }

  export type DoctorInteractionCreateManyHospitalInputEnvelope = {
    data: DoctorInteractionCreateManyHospitalInput | DoctorInteractionCreateManyHospitalInput[]
    skipDuplicates?: boolean
  }

  export type HospitalChainUpsertWithoutHospitalsInput = {
    update: XOR<HospitalChainUpdateWithoutHospitalsInput, HospitalChainUncheckedUpdateWithoutHospitalsInput>
    create: XOR<HospitalChainCreateWithoutHospitalsInput, HospitalChainUncheckedCreateWithoutHospitalsInput>
    where?: HospitalChainWhereInput
  }

  export type HospitalChainUpdateToOneWithWhereWithoutHospitalsInput = {
    where?: HospitalChainWhereInput
    data: XOR<HospitalChainUpdateWithoutHospitalsInput, HospitalChainUncheckedUpdateWithoutHospitalsInput>
  }

  export type HospitalChainUpdateWithoutHospitalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    headquartersAddress?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type HospitalChainUncheckedUpdateWithoutHospitalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    headquartersAddress?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TerritoryUpsertWithoutHospitalsInput = {
    update: XOR<TerritoryUpdateWithoutHospitalsInput, TerritoryUncheckedUpdateWithoutHospitalsInput>
    create: XOR<TerritoryCreateWithoutHospitalsInput, TerritoryUncheckedCreateWithoutHospitalsInput>
    where?: TerritoryWhereInput
  }

  export type TerritoryUpdateToOneWithWhereWithoutHospitalsInput = {
    where?: TerritoryWhereInput
    data: XOR<TerritoryUpdateWithoutHospitalsInput, TerritoryUncheckedUpdateWithoutHospitalsInput>
  }

  export type TerritoryUpdateWithoutHospitalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    boundaries?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentTerritory?: TerritoryUpdateOneWithoutChildTerritoriesNestedInput
    childTerritories?: TerritoryUpdateManyWithoutParentTerritoryNestedInput
    employees?: EmployeeTerritoryUpdateManyWithoutTerritoryNestedInput
    chemists?: ChemistUpdateManyWithoutTerritoryNestedInput
  }

  export type TerritoryUncheckedUpdateWithoutHospitalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    parentTerritoryId?: NullableStringFieldUpdateOperationsInput | string | null
    boundaries?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    childTerritories?: TerritoryUncheckedUpdateManyWithoutParentTerritoryNestedInput
    employees?: EmployeeTerritoryUncheckedUpdateManyWithoutTerritoryNestedInput
    chemists?: ChemistUncheckedUpdateManyWithoutTerritoryNestedInput
  }

  export type DoctorHospitalAssociationUpsertWithWhereUniqueWithoutHospitalInput = {
    where: DoctorHospitalAssociationWhereUniqueInput
    update: XOR<DoctorHospitalAssociationUpdateWithoutHospitalInput, DoctorHospitalAssociationUncheckedUpdateWithoutHospitalInput>
    create: XOR<DoctorHospitalAssociationCreateWithoutHospitalInput, DoctorHospitalAssociationUncheckedCreateWithoutHospitalInput>
  }

  export type DoctorHospitalAssociationUpdateWithWhereUniqueWithoutHospitalInput = {
    where: DoctorHospitalAssociationWhereUniqueInput
    data: XOR<DoctorHospitalAssociationUpdateWithoutHospitalInput, DoctorHospitalAssociationUncheckedUpdateWithoutHospitalInput>
  }

  export type DoctorHospitalAssociationUpdateManyWithWhereWithoutHospitalInput = {
    where: DoctorHospitalAssociationScalarWhereInput
    data: XOR<DoctorHospitalAssociationUpdateManyMutationInput, DoctorHospitalAssociationUncheckedUpdateManyWithoutHospitalInput>
  }

  export type DoctorHospitalAssociationScalarWhereInput = {
    AND?: DoctorHospitalAssociationScalarWhereInput | DoctorHospitalAssociationScalarWhereInput[]
    OR?: DoctorHospitalAssociationScalarWhereInput[]
    NOT?: DoctorHospitalAssociationScalarWhereInput | DoctorHospitalAssociationScalarWhereInput[]
    id?: StringFilter<"DoctorHospitalAssociation"> | string
    doctorId?: StringFilter<"DoctorHospitalAssociation"> | string
    hospitalId?: StringFilter<"DoctorHospitalAssociation"> | string
    department?: StringNullableFilter<"DoctorHospitalAssociation"> | string | null
    position?: StringNullableFilter<"DoctorHospitalAssociation"> | string | null
    isPrimary?: BoolFilter<"DoctorHospitalAssociation"> | boolean
    associationStartDate?: DateTimeNullableFilter<"DoctorHospitalAssociation"> | Date | string | null
    associationEndDate?: DateTimeNullableFilter<"DoctorHospitalAssociation"> | Date | string | null
    createdAt?: DateTimeFilter<"DoctorHospitalAssociation"> | Date | string
    updatedAt?: DateTimeFilter<"DoctorHospitalAssociation"> | Date | string
  }

  export type DoctorConsultationScheduleUpsertWithWhereUniqueWithoutHospitalInput = {
    where: DoctorConsultationScheduleWhereUniqueInput
    update: XOR<DoctorConsultationScheduleUpdateWithoutHospitalInput, DoctorConsultationScheduleUncheckedUpdateWithoutHospitalInput>
    create: XOR<DoctorConsultationScheduleCreateWithoutHospitalInput, DoctorConsultationScheduleUncheckedCreateWithoutHospitalInput>
  }

  export type DoctorConsultationScheduleUpdateWithWhereUniqueWithoutHospitalInput = {
    where: DoctorConsultationScheduleWhereUniqueInput
    data: XOR<DoctorConsultationScheduleUpdateWithoutHospitalInput, DoctorConsultationScheduleUncheckedUpdateWithoutHospitalInput>
  }

  export type DoctorConsultationScheduleUpdateManyWithWhereWithoutHospitalInput = {
    where: DoctorConsultationScheduleScalarWhereInput
    data: XOR<DoctorConsultationScheduleUpdateManyMutationInput, DoctorConsultationScheduleUncheckedUpdateManyWithoutHospitalInput>
  }

  export type DoctorConsultationScheduleScalarWhereInput = {
    AND?: DoctorConsultationScheduleScalarWhereInput | DoctorConsultationScheduleScalarWhereInput[]
    OR?: DoctorConsultationScheduleScalarWhereInput[]
    NOT?: DoctorConsultationScheduleScalarWhereInput | DoctorConsultationScheduleScalarWhereInput[]
    id?: StringFilter<"DoctorConsultationSchedule"> | string
    doctorId?: StringFilter<"DoctorConsultationSchedule"> | string
    hospitalId?: StringFilter<"DoctorConsultationSchedule"> | string
    dayOfWeek?: EnumDayOfWeekFilter<"DoctorConsultationSchedule"> | $Enums.DayOfWeek
    startTime?: DateTimeFilter<"DoctorConsultationSchedule"> | Date | string
    endTime?: DateTimeFilter<"DoctorConsultationSchedule"> | Date | string
    consultationType?: EnumConsultationTypeFilter<"DoctorConsultationSchedule"> | $Enums.ConsultationType
    isActive?: BoolFilter<"DoctorConsultationSchedule"> | boolean
    effectiveFrom?: DateTimeNullableFilter<"DoctorConsultationSchedule"> | Date | string | null
    effectiveTo?: DateTimeNullableFilter<"DoctorConsultationSchedule"> | Date | string | null
    createdAt?: DateTimeFilter<"DoctorConsultationSchedule"> | Date | string
    updatedAt?: DateTimeFilter<"DoctorConsultationSchedule"> | Date | string
  }

  export type DoctorInteractionUpsertWithWhereUniqueWithoutHospitalInput = {
    where: DoctorInteractionWhereUniqueInput
    update: XOR<DoctorInteractionUpdateWithoutHospitalInput, DoctorInteractionUncheckedUpdateWithoutHospitalInput>
    create: XOR<DoctorInteractionCreateWithoutHospitalInput, DoctorInteractionUncheckedCreateWithoutHospitalInput>
  }

  export type DoctorInteractionUpdateWithWhereUniqueWithoutHospitalInput = {
    where: DoctorInteractionWhereUniqueInput
    data: XOR<DoctorInteractionUpdateWithoutHospitalInput, DoctorInteractionUncheckedUpdateWithoutHospitalInput>
  }

  export type DoctorInteractionUpdateManyWithWhereWithoutHospitalInput = {
    where: DoctorInteractionScalarWhereInput
    data: XOR<DoctorInteractionUpdateManyMutationInput, DoctorInteractionUncheckedUpdateManyWithoutHospitalInput>
  }

  export type EmployeeCreateWithoutDoctorsCreatedInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    reportingManager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutReportingManagerInput
    team?: TeamCreateNestedOneWithoutTeamMembersInput
    leadsTeam?: TeamCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutDoctorsCreatedInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    reportingManagerId?: string | null
    teamId?: string | null
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutReportingManagerInput
    leadsTeam?: TeamUncheckedCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryUncheckedCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordUncheckedCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteUncheckedCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteUncheckedCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderUncheckedCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugUncheckedCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistUncheckedCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftUncheckedCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionUncheckedCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerUncheckedCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskUncheckedCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutDoctorsCreatedInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutDoctorsCreatedInput, EmployeeUncheckedCreateWithoutDoctorsCreatedInput>
  }

  export type DoctorHospitalAssociationCreateWithoutDoctorInput = {
    id?: string
    department?: string | null
    position?: string | null
    isPrimary?: boolean
    associationStartDate?: Date | string | null
    associationEndDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    hospital: HospitalCreateNestedOneWithoutDoctorAssociationsInput
  }

  export type DoctorHospitalAssociationUncheckedCreateWithoutDoctorInput = {
    id?: string
    hospitalId: string
    department?: string | null
    position?: string | null
    isPrimary?: boolean
    associationStartDate?: Date | string | null
    associationEndDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorHospitalAssociationCreateOrConnectWithoutDoctorInput = {
    where: DoctorHospitalAssociationWhereUniqueInput
    create: XOR<DoctorHospitalAssociationCreateWithoutDoctorInput, DoctorHospitalAssociationUncheckedCreateWithoutDoctorInput>
  }

  export type DoctorHospitalAssociationCreateManyDoctorInputEnvelope = {
    data: DoctorHospitalAssociationCreateManyDoctorInput | DoctorHospitalAssociationCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type DoctorConsultationScheduleCreateWithoutDoctorInput = {
    id?: string
    dayOfWeek: $Enums.DayOfWeek
    startTime: Date | string
    endTime: Date | string
    consultationType: $Enums.ConsultationType
    isActive?: boolean
    effectiveFrom?: Date | string | null
    effectiveTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    hospital: HospitalCreateNestedOneWithoutConsultationSchedulesInput
  }

  export type DoctorConsultationScheduleUncheckedCreateWithoutDoctorInput = {
    id?: string
    hospitalId: string
    dayOfWeek: $Enums.DayOfWeek
    startTime: Date | string
    endTime: Date | string
    consultationType: $Enums.ConsultationType
    isActive?: boolean
    effectiveFrom?: Date | string | null
    effectiveTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorConsultationScheduleCreateOrConnectWithoutDoctorInput = {
    where: DoctorConsultationScheduleWhereUniqueInput
    create: XOR<DoctorConsultationScheduleCreateWithoutDoctorInput, DoctorConsultationScheduleUncheckedCreateWithoutDoctorInput>
  }

  export type DoctorConsultationScheduleCreateManyDoctorInputEnvelope = {
    data: DoctorConsultationScheduleCreateManyDoctorInput | DoctorConsultationScheduleCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type DoctorInteractionCreateWithoutDoctorInput = {
    id?: string
    interactionType: $Enums.InteractionType
    startTime: Date | string
    endTime?: Date | string | null
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    rating?: number | null
    createdAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutDoctorInteractionsInput
    hospital?: HospitalCreateNestedOneWithoutDoctorInteractionsInput
    DoctorDistribution?: DoctorDistributionCreateNestedManyWithoutDoctorInteractionInput
    DoctorTask?: DoctorTaskCreateNestedOneWithoutDoctorInteractionsInput
  }

  export type DoctorInteractionUncheckedCreateWithoutDoctorInput = {
    id?: string
    employeeId: string
    hospitalId?: string | null
    interactionType: $Enums.InteractionType
    startTime: Date | string
    endTime?: Date | string | null
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    rating?: number | null
    createdAt?: Date | string
    doctorTaskId?: string | null
    DoctorDistribution?: DoctorDistributionUncheckedCreateNestedManyWithoutDoctorInteractionInput
  }

  export type DoctorInteractionCreateOrConnectWithoutDoctorInput = {
    where: DoctorInteractionWhereUniqueInput
    create: XOR<DoctorInteractionCreateWithoutDoctorInput, DoctorInteractionUncheckedCreateWithoutDoctorInput>
  }

  export type DoctorInteractionCreateManyDoctorInputEnvelope = {
    data: DoctorInteractionCreateManyDoctorInput | DoctorInteractionCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type DoctorNoteCreateWithoutDoctorInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: EmployeeCreateNestedOneWithoutDoctorNotesInput
  }

  export type DoctorNoteUncheckedCreateWithoutDoctorInput = {
    id?: string
    createdById: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorNoteCreateOrConnectWithoutDoctorInput = {
    where: DoctorNoteWhereUniqueInput
    create: XOR<DoctorNoteCreateWithoutDoctorInput, DoctorNoteUncheckedCreateWithoutDoctorInput>
  }

  export type DoctorNoteCreateManyDoctorInputEnvelope = {
    data: DoctorNoteCreateManyDoctorInput | DoctorNoteCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type DoctorChemistRelationCreateWithoutDoctorInput = {
    id?: string
    createdAt?: Date | string
    chemist: ChemistCreateNestedOneWithoutDoctorRelationsInput
    createdBy: EmployeeCreateNestedOneWithoutDoctorChemistRelationsInput
  }

  export type DoctorChemistRelationUncheckedCreateWithoutDoctorInput = {
    id?: string
    chemistId: string
    createdAt?: Date | string
    createdById: string
  }

  export type DoctorChemistRelationCreateOrConnectWithoutDoctorInput = {
    where: DoctorChemistRelationWhereUniqueInput
    create: XOR<DoctorChemistRelationCreateWithoutDoctorInput, DoctorChemistRelationUncheckedCreateWithoutDoctorInput>
  }

  export type DoctorChemistRelationCreateManyDoctorInputEnvelope = {
    data: DoctorChemistRelationCreateManyDoctorInput | DoctorChemistRelationCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type DoctorTaskCreateWithoutDoctorInput = {
    id?: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    planner: TaskPlannerCreateNestedOneWithoutDoctorTasksInput
    employee: EmployeeCreateNestedOneWithoutDoctorTasksInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutDoctorTaskInput
    dcrReports?: DcrReportCreateNestedManyWithoutDoctorTaskInput
  }

  export type DoctorTaskUncheckedCreateWithoutDoctorInput = {
    id?: string
    plannerId: string
    employeeId: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutDoctorTaskInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutDoctorTaskInput
  }

  export type DoctorTaskCreateOrConnectWithoutDoctorInput = {
    where: DoctorTaskWhereUniqueInput
    create: XOR<DoctorTaskCreateWithoutDoctorInput, DoctorTaskUncheckedCreateWithoutDoctorInput>
  }

  export type DoctorTaskCreateManyDoctorInputEnvelope = {
    data: DoctorTaskCreateManyDoctorInput | DoctorTaskCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeUpsertWithoutDoctorsCreatedInput = {
    update: XOR<EmployeeUpdateWithoutDoctorsCreatedInput, EmployeeUncheckedUpdateWithoutDoctorsCreatedInput>
    create: XOR<EmployeeCreateWithoutDoctorsCreatedInput, EmployeeUncheckedCreateWithoutDoctorsCreatedInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutDoctorsCreatedInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutDoctorsCreatedInput, EmployeeUncheckedUpdateWithoutDoctorsCreatedInput>
  }

  export type EmployeeUpdateWithoutDoctorsCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    reportingManager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutReportingManagerNestedInput
    team?: TeamUpdateOneWithoutTeamMembersNestedInput
    leadsTeam?: TeamUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutDoctorsCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    reportingManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    subordinates?: EmployeeUncheckedUpdateManyWithoutReportingManagerNestedInput
    leadsTeam?: TeamUncheckedUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUncheckedUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUncheckedUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUncheckedUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUncheckedUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type DoctorHospitalAssociationUpsertWithWhereUniqueWithoutDoctorInput = {
    where: DoctorHospitalAssociationWhereUniqueInput
    update: XOR<DoctorHospitalAssociationUpdateWithoutDoctorInput, DoctorHospitalAssociationUncheckedUpdateWithoutDoctorInput>
    create: XOR<DoctorHospitalAssociationCreateWithoutDoctorInput, DoctorHospitalAssociationUncheckedCreateWithoutDoctorInput>
  }

  export type DoctorHospitalAssociationUpdateWithWhereUniqueWithoutDoctorInput = {
    where: DoctorHospitalAssociationWhereUniqueInput
    data: XOR<DoctorHospitalAssociationUpdateWithoutDoctorInput, DoctorHospitalAssociationUncheckedUpdateWithoutDoctorInput>
  }

  export type DoctorHospitalAssociationUpdateManyWithWhereWithoutDoctorInput = {
    where: DoctorHospitalAssociationScalarWhereInput
    data: XOR<DoctorHospitalAssociationUpdateManyMutationInput, DoctorHospitalAssociationUncheckedUpdateManyWithoutDoctorInput>
  }

  export type DoctorConsultationScheduleUpsertWithWhereUniqueWithoutDoctorInput = {
    where: DoctorConsultationScheduleWhereUniqueInput
    update: XOR<DoctorConsultationScheduleUpdateWithoutDoctorInput, DoctorConsultationScheduleUncheckedUpdateWithoutDoctorInput>
    create: XOR<DoctorConsultationScheduleCreateWithoutDoctorInput, DoctorConsultationScheduleUncheckedCreateWithoutDoctorInput>
  }

  export type DoctorConsultationScheduleUpdateWithWhereUniqueWithoutDoctorInput = {
    where: DoctorConsultationScheduleWhereUniqueInput
    data: XOR<DoctorConsultationScheduleUpdateWithoutDoctorInput, DoctorConsultationScheduleUncheckedUpdateWithoutDoctorInput>
  }

  export type DoctorConsultationScheduleUpdateManyWithWhereWithoutDoctorInput = {
    where: DoctorConsultationScheduleScalarWhereInput
    data: XOR<DoctorConsultationScheduleUpdateManyMutationInput, DoctorConsultationScheduleUncheckedUpdateManyWithoutDoctorInput>
  }

  export type DoctorInteractionUpsertWithWhereUniqueWithoutDoctorInput = {
    where: DoctorInteractionWhereUniqueInput
    update: XOR<DoctorInteractionUpdateWithoutDoctorInput, DoctorInteractionUncheckedUpdateWithoutDoctorInput>
    create: XOR<DoctorInteractionCreateWithoutDoctorInput, DoctorInteractionUncheckedCreateWithoutDoctorInput>
  }

  export type DoctorInteractionUpdateWithWhereUniqueWithoutDoctorInput = {
    where: DoctorInteractionWhereUniqueInput
    data: XOR<DoctorInteractionUpdateWithoutDoctorInput, DoctorInteractionUncheckedUpdateWithoutDoctorInput>
  }

  export type DoctorInteractionUpdateManyWithWhereWithoutDoctorInput = {
    where: DoctorInteractionScalarWhereInput
    data: XOR<DoctorInteractionUpdateManyMutationInput, DoctorInteractionUncheckedUpdateManyWithoutDoctorInput>
  }

  export type DoctorNoteUpsertWithWhereUniqueWithoutDoctorInput = {
    where: DoctorNoteWhereUniqueInput
    update: XOR<DoctorNoteUpdateWithoutDoctorInput, DoctorNoteUncheckedUpdateWithoutDoctorInput>
    create: XOR<DoctorNoteCreateWithoutDoctorInput, DoctorNoteUncheckedCreateWithoutDoctorInput>
  }

  export type DoctorNoteUpdateWithWhereUniqueWithoutDoctorInput = {
    where: DoctorNoteWhereUniqueInput
    data: XOR<DoctorNoteUpdateWithoutDoctorInput, DoctorNoteUncheckedUpdateWithoutDoctorInput>
  }

  export type DoctorNoteUpdateManyWithWhereWithoutDoctorInput = {
    where: DoctorNoteScalarWhereInput
    data: XOR<DoctorNoteUpdateManyMutationInput, DoctorNoteUncheckedUpdateManyWithoutDoctorInput>
  }

  export type DoctorChemistRelationUpsertWithWhereUniqueWithoutDoctorInput = {
    where: DoctorChemistRelationWhereUniqueInput
    update: XOR<DoctorChemistRelationUpdateWithoutDoctorInput, DoctorChemistRelationUncheckedUpdateWithoutDoctorInput>
    create: XOR<DoctorChemistRelationCreateWithoutDoctorInput, DoctorChemistRelationUncheckedCreateWithoutDoctorInput>
  }

  export type DoctorChemistRelationUpdateWithWhereUniqueWithoutDoctorInput = {
    where: DoctorChemistRelationWhereUniqueInput
    data: XOR<DoctorChemistRelationUpdateWithoutDoctorInput, DoctorChemistRelationUncheckedUpdateWithoutDoctorInput>
  }

  export type DoctorChemistRelationUpdateManyWithWhereWithoutDoctorInput = {
    where: DoctorChemistRelationScalarWhereInput
    data: XOR<DoctorChemistRelationUpdateManyMutationInput, DoctorChemistRelationUncheckedUpdateManyWithoutDoctorInput>
  }

  export type DoctorTaskUpsertWithWhereUniqueWithoutDoctorInput = {
    where: DoctorTaskWhereUniqueInput
    update: XOR<DoctorTaskUpdateWithoutDoctorInput, DoctorTaskUncheckedUpdateWithoutDoctorInput>
    create: XOR<DoctorTaskCreateWithoutDoctorInput, DoctorTaskUncheckedCreateWithoutDoctorInput>
  }

  export type DoctorTaskUpdateWithWhereUniqueWithoutDoctorInput = {
    where: DoctorTaskWhereUniqueInput
    data: XOR<DoctorTaskUpdateWithoutDoctorInput, DoctorTaskUncheckedUpdateWithoutDoctorInput>
  }

  export type DoctorTaskUpdateManyWithWhereWithoutDoctorInput = {
    where: DoctorTaskScalarWhereInput
    data: XOR<DoctorTaskUpdateManyMutationInput, DoctorTaskUncheckedUpdateManyWithoutDoctorInput>
  }

  export type DoctorCreateWithoutHospitalAssociationsInput = {
    id?: string
    organizationId: string
    name: string
    designation?: string | null
    specialization?: string | null
    email?: string | null
    phone?: string | null
    description?: string | null
    profilePictureUrl?: string | null
    qualification?: string | null
    experienceYears?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    createdBy: EmployeeCreateNestedOneWithoutDoctorsCreatedInput
    consultationSchedules?: DoctorConsultationScheduleCreateNestedManyWithoutDoctorInput
    interactions?: DoctorInteractionCreateNestedManyWithoutDoctorInput
    notes?: DoctorNoteCreateNestedManyWithoutDoctorInput
    chemistRelations?: DoctorChemistRelationCreateNestedManyWithoutDoctorInput
    DoctorTask?: DoctorTaskCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutHospitalAssociationsInput = {
    id?: string
    organizationId: string
    name: string
    designation?: string | null
    specialization?: string | null
    email?: string | null
    phone?: string | null
    description?: string | null
    profilePictureUrl?: string | null
    qualification?: string | null
    experienceYears?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isActive?: boolean
    consultationSchedules?: DoctorConsultationScheduleUncheckedCreateNestedManyWithoutDoctorInput
    interactions?: DoctorInteractionUncheckedCreateNestedManyWithoutDoctorInput
    notes?: DoctorNoteUncheckedCreateNestedManyWithoutDoctorInput
    chemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutDoctorInput
    DoctorTask?: DoctorTaskUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutHospitalAssociationsInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutHospitalAssociationsInput, DoctorUncheckedCreateWithoutHospitalAssociationsInput>
  }

  export type HospitalCreateWithoutDoctorAssociationsInput = {
    id?: string
    organizationId: string
    name: string
    type: string
    address: string
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    hospitalChain?: HospitalChainCreateNestedOneWithoutHospitalsInput
    territory: TerritoryCreateNestedOneWithoutHospitalsInput
    consultationSchedules?: DoctorConsultationScheduleCreateNestedManyWithoutHospitalInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateWithoutDoctorAssociationsInput = {
    id?: string
    organizationId: string
    hospitalChainId?: string | null
    territoryId: string
    name: string
    type: string
    address: string
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    consultationSchedules?: DoctorConsultationScheduleUncheckedCreateNestedManyWithoutHospitalInput
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalCreateOrConnectWithoutDoctorAssociationsInput = {
    where: HospitalWhereUniqueInput
    create: XOR<HospitalCreateWithoutDoctorAssociationsInput, HospitalUncheckedCreateWithoutDoctorAssociationsInput>
  }

  export type DoctorUpsertWithoutHospitalAssociationsInput = {
    update: XOR<DoctorUpdateWithoutHospitalAssociationsInput, DoctorUncheckedUpdateWithoutHospitalAssociationsInput>
    create: XOR<DoctorCreateWithoutHospitalAssociationsInput, DoctorUncheckedCreateWithoutHospitalAssociationsInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutHospitalAssociationsInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutHospitalAssociationsInput, DoctorUncheckedUpdateWithoutHospitalAssociationsInput>
  }

  export type DoctorUpdateWithoutHospitalAssociationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qualification?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: EmployeeUpdateOneRequiredWithoutDoctorsCreatedNestedInput
    consultationSchedules?: DoctorConsultationScheduleUpdateManyWithoutDoctorNestedInput
    interactions?: DoctorInteractionUpdateManyWithoutDoctorNestedInput
    notes?: DoctorNoteUpdateManyWithoutDoctorNestedInput
    chemistRelations?: DoctorChemistRelationUpdateManyWithoutDoctorNestedInput
    DoctorTask?: DoctorTaskUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutHospitalAssociationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qualification?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    consultationSchedules?: DoctorConsultationScheduleUncheckedUpdateManyWithoutDoctorNestedInput
    interactions?: DoctorInteractionUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: DoctorNoteUncheckedUpdateManyWithoutDoctorNestedInput
    chemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutDoctorNestedInput
    DoctorTask?: DoctorTaskUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type HospitalUpsertWithoutDoctorAssociationsInput = {
    update: XOR<HospitalUpdateWithoutDoctorAssociationsInput, HospitalUncheckedUpdateWithoutDoctorAssociationsInput>
    create: XOR<HospitalCreateWithoutDoctorAssociationsInput, HospitalUncheckedCreateWithoutDoctorAssociationsInput>
    where?: HospitalWhereInput
  }

  export type HospitalUpdateToOneWithWhereWithoutDoctorAssociationsInput = {
    where?: HospitalWhereInput
    data: XOR<HospitalUpdateWithoutDoctorAssociationsInput, HospitalUncheckedUpdateWithoutDoctorAssociationsInput>
  }

  export type HospitalUpdateWithoutDoctorAssociationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hospitalChain?: HospitalChainUpdateOneWithoutHospitalsNestedInput
    territory?: TerritoryUpdateOneRequiredWithoutHospitalsNestedInput
    consultationSchedules?: DoctorConsultationScheduleUpdateManyWithoutHospitalNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateWithoutDoctorAssociationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    hospitalChainId?: NullableStringFieldUpdateOperationsInput | string | null
    territoryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    consultationSchedules?: DoctorConsultationScheduleUncheckedUpdateManyWithoutHospitalNestedInput
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type DoctorCreateWithoutConsultationSchedulesInput = {
    id?: string
    organizationId: string
    name: string
    designation?: string | null
    specialization?: string | null
    email?: string | null
    phone?: string | null
    description?: string | null
    profilePictureUrl?: string | null
    qualification?: string | null
    experienceYears?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    createdBy: EmployeeCreateNestedOneWithoutDoctorsCreatedInput
    hospitalAssociations?: DoctorHospitalAssociationCreateNestedManyWithoutDoctorInput
    interactions?: DoctorInteractionCreateNestedManyWithoutDoctorInput
    notes?: DoctorNoteCreateNestedManyWithoutDoctorInput
    chemistRelations?: DoctorChemistRelationCreateNestedManyWithoutDoctorInput
    DoctorTask?: DoctorTaskCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutConsultationSchedulesInput = {
    id?: string
    organizationId: string
    name: string
    designation?: string | null
    specialization?: string | null
    email?: string | null
    phone?: string | null
    description?: string | null
    profilePictureUrl?: string | null
    qualification?: string | null
    experienceYears?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isActive?: boolean
    hospitalAssociations?: DoctorHospitalAssociationUncheckedCreateNestedManyWithoutDoctorInput
    interactions?: DoctorInteractionUncheckedCreateNestedManyWithoutDoctorInput
    notes?: DoctorNoteUncheckedCreateNestedManyWithoutDoctorInput
    chemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutDoctorInput
    DoctorTask?: DoctorTaskUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutConsultationSchedulesInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutConsultationSchedulesInput, DoctorUncheckedCreateWithoutConsultationSchedulesInput>
  }

  export type HospitalCreateWithoutConsultationSchedulesInput = {
    id?: string
    organizationId: string
    name: string
    type: string
    address: string
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    hospitalChain?: HospitalChainCreateNestedOneWithoutHospitalsInput
    territory: TerritoryCreateNestedOneWithoutHospitalsInput
    doctorAssociations?: DoctorHospitalAssociationCreateNestedManyWithoutHospitalInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateWithoutConsultationSchedulesInput = {
    id?: string
    organizationId: string
    hospitalChainId?: string | null
    territoryId: string
    name: string
    type: string
    address: string
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    doctorAssociations?: DoctorHospitalAssociationUncheckedCreateNestedManyWithoutHospitalInput
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalCreateOrConnectWithoutConsultationSchedulesInput = {
    where: HospitalWhereUniqueInput
    create: XOR<HospitalCreateWithoutConsultationSchedulesInput, HospitalUncheckedCreateWithoutConsultationSchedulesInput>
  }

  export type DoctorUpsertWithoutConsultationSchedulesInput = {
    update: XOR<DoctorUpdateWithoutConsultationSchedulesInput, DoctorUncheckedUpdateWithoutConsultationSchedulesInput>
    create: XOR<DoctorCreateWithoutConsultationSchedulesInput, DoctorUncheckedCreateWithoutConsultationSchedulesInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutConsultationSchedulesInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutConsultationSchedulesInput, DoctorUncheckedUpdateWithoutConsultationSchedulesInput>
  }

  export type DoctorUpdateWithoutConsultationSchedulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qualification?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: EmployeeUpdateOneRequiredWithoutDoctorsCreatedNestedInput
    hospitalAssociations?: DoctorHospitalAssociationUpdateManyWithoutDoctorNestedInput
    interactions?: DoctorInteractionUpdateManyWithoutDoctorNestedInput
    notes?: DoctorNoteUpdateManyWithoutDoctorNestedInput
    chemistRelations?: DoctorChemistRelationUpdateManyWithoutDoctorNestedInput
    DoctorTask?: DoctorTaskUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutConsultationSchedulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qualification?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hospitalAssociations?: DoctorHospitalAssociationUncheckedUpdateManyWithoutDoctorNestedInput
    interactions?: DoctorInteractionUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: DoctorNoteUncheckedUpdateManyWithoutDoctorNestedInput
    chemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutDoctorNestedInput
    DoctorTask?: DoctorTaskUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type HospitalUpsertWithoutConsultationSchedulesInput = {
    update: XOR<HospitalUpdateWithoutConsultationSchedulesInput, HospitalUncheckedUpdateWithoutConsultationSchedulesInput>
    create: XOR<HospitalCreateWithoutConsultationSchedulesInput, HospitalUncheckedCreateWithoutConsultationSchedulesInput>
    where?: HospitalWhereInput
  }

  export type HospitalUpdateToOneWithWhereWithoutConsultationSchedulesInput = {
    where?: HospitalWhereInput
    data: XOR<HospitalUpdateWithoutConsultationSchedulesInput, HospitalUncheckedUpdateWithoutConsultationSchedulesInput>
  }

  export type HospitalUpdateWithoutConsultationSchedulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hospitalChain?: HospitalChainUpdateOneWithoutHospitalsNestedInput
    territory?: TerritoryUpdateOneRequiredWithoutHospitalsNestedInput
    doctorAssociations?: DoctorHospitalAssociationUpdateManyWithoutHospitalNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateWithoutConsultationSchedulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    hospitalChainId?: NullableStringFieldUpdateOperationsInput | string | null
    territoryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    doctorAssociations?: DoctorHospitalAssociationUncheckedUpdateManyWithoutHospitalNestedInput
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type DoctorCreateWithoutNotesInput = {
    id?: string
    organizationId: string
    name: string
    designation?: string | null
    specialization?: string | null
    email?: string | null
    phone?: string | null
    description?: string | null
    profilePictureUrl?: string | null
    qualification?: string | null
    experienceYears?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    createdBy: EmployeeCreateNestedOneWithoutDoctorsCreatedInput
    hospitalAssociations?: DoctorHospitalAssociationCreateNestedManyWithoutDoctorInput
    consultationSchedules?: DoctorConsultationScheduleCreateNestedManyWithoutDoctorInput
    interactions?: DoctorInteractionCreateNestedManyWithoutDoctorInput
    chemistRelations?: DoctorChemistRelationCreateNestedManyWithoutDoctorInput
    DoctorTask?: DoctorTaskCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutNotesInput = {
    id?: string
    organizationId: string
    name: string
    designation?: string | null
    specialization?: string | null
    email?: string | null
    phone?: string | null
    description?: string | null
    profilePictureUrl?: string | null
    qualification?: string | null
    experienceYears?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isActive?: boolean
    hospitalAssociations?: DoctorHospitalAssociationUncheckedCreateNestedManyWithoutDoctorInput
    consultationSchedules?: DoctorConsultationScheduleUncheckedCreateNestedManyWithoutDoctorInput
    interactions?: DoctorInteractionUncheckedCreateNestedManyWithoutDoctorInput
    chemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutDoctorInput
    DoctorTask?: DoctorTaskUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutNotesInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutNotesInput, DoctorUncheckedCreateWithoutNotesInput>
  }

  export type EmployeeCreateWithoutDoctorNotesInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    reportingManager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutReportingManagerInput
    team?: TeamCreateNestedOneWithoutTeamMembersInput
    leadsTeam?: TeamCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordCreateNestedManyWithoutEmployeeInput
    chemistNotes?: ChemistNoteCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutDoctorNotesInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    reportingManagerId?: string | null
    teamId?: string | null
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutReportingManagerInput
    leadsTeam?: TeamUncheckedCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryUncheckedCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordUncheckedCreateNestedManyWithoutEmployeeInput
    chemistNotes?: ChemistNoteUncheckedCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderUncheckedCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorUncheckedCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugUncheckedCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistUncheckedCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftUncheckedCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionUncheckedCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerUncheckedCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskUncheckedCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutDoctorNotesInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutDoctorNotesInput, EmployeeUncheckedCreateWithoutDoctorNotesInput>
  }

  export type DoctorUpsertWithoutNotesInput = {
    update: XOR<DoctorUpdateWithoutNotesInput, DoctorUncheckedUpdateWithoutNotesInput>
    create: XOR<DoctorCreateWithoutNotesInput, DoctorUncheckedCreateWithoutNotesInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutNotesInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutNotesInput, DoctorUncheckedUpdateWithoutNotesInput>
  }

  export type DoctorUpdateWithoutNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qualification?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: EmployeeUpdateOneRequiredWithoutDoctorsCreatedNestedInput
    hospitalAssociations?: DoctorHospitalAssociationUpdateManyWithoutDoctorNestedInput
    consultationSchedules?: DoctorConsultationScheduleUpdateManyWithoutDoctorNestedInput
    interactions?: DoctorInteractionUpdateManyWithoutDoctorNestedInput
    chemistRelations?: DoctorChemistRelationUpdateManyWithoutDoctorNestedInput
    DoctorTask?: DoctorTaskUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qualification?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hospitalAssociations?: DoctorHospitalAssociationUncheckedUpdateManyWithoutDoctorNestedInput
    consultationSchedules?: DoctorConsultationScheduleUncheckedUpdateManyWithoutDoctorNestedInput
    interactions?: DoctorInteractionUncheckedUpdateManyWithoutDoctorNestedInput
    chemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutDoctorNestedInput
    DoctorTask?: DoctorTaskUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type EmployeeUpsertWithoutDoctorNotesInput = {
    update: XOR<EmployeeUpdateWithoutDoctorNotesInput, EmployeeUncheckedUpdateWithoutDoctorNotesInput>
    create: XOR<EmployeeCreateWithoutDoctorNotesInput, EmployeeUncheckedCreateWithoutDoctorNotesInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutDoctorNotesInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutDoctorNotesInput, EmployeeUncheckedUpdateWithoutDoctorNotesInput>
  }

  export type EmployeeUpdateWithoutDoctorNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    reportingManager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutReportingManagerNestedInput
    team?: TeamUpdateOneWithoutTeamMembersNestedInput
    leadsTeam?: TeamUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUpdateManyWithoutEmployeeNestedInput
    chemistNotes?: ChemistNoteUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutDoctorNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    reportingManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    subordinates?: EmployeeUncheckedUpdateManyWithoutReportingManagerNestedInput
    leadsTeam?: TeamUncheckedUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistNotes?: ChemistNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUncheckedUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUncheckedUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUncheckedUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUncheckedUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type DoctorCreateWithoutInteractionsInput = {
    id?: string
    organizationId: string
    name: string
    designation?: string | null
    specialization?: string | null
    email?: string | null
    phone?: string | null
    description?: string | null
    profilePictureUrl?: string | null
    qualification?: string | null
    experienceYears?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    createdBy: EmployeeCreateNestedOneWithoutDoctorsCreatedInput
    hospitalAssociations?: DoctorHospitalAssociationCreateNestedManyWithoutDoctorInput
    consultationSchedules?: DoctorConsultationScheduleCreateNestedManyWithoutDoctorInput
    notes?: DoctorNoteCreateNestedManyWithoutDoctorInput
    chemistRelations?: DoctorChemistRelationCreateNestedManyWithoutDoctorInput
    DoctorTask?: DoctorTaskCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutInteractionsInput = {
    id?: string
    organizationId: string
    name: string
    designation?: string | null
    specialization?: string | null
    email?: string | null
    phone?: string | null
    description?: string | null
    profilePictureUrl?: string | null
    qualification?: string | null
    experienceYears?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isActive?: boolean
    hospitalAssociations?: DoctorHospitalAssociationUncheckedCreateNestedManyWithoutDoctorInput
    consultationSchedules?: DoctorConsultationScheduleUncheckedCreateNestedManyWithoutDoctorInput
    notes?: DoctorNoteUncheckedCreateNestedManyWithoutDoctorInput
    chemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutDoctorInput
    DoctorTask?: DoctorTaskUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutInteractionsInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutInteractionsInput, DoctorUncheckedCreateWithoutInteractionsInput>
  }

  export type EmployeeCreateWithoutDoctorInteractionsInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    reportingManager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutReportingManagerInput
    team?: TeamCreateNestedOneWithoutTeamMembersInput
    leadsTeam?: TeamCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteCreateNestedManyWithoutCreatedByInput
    chemistInteractions?: ChemistInteractionCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutDoctorInteractionsInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    reportingManagerId?: string | null
    teamId?: string | null
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutReportingManagerInput
    leadsTeam?: TeamUncheckedCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryUncheckedCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordUncheckedCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteUncheckedCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteUncheckedCreateNestedManyWithoutCreatedByInput
    chemistInteractions?: ChemistInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderUncheckedCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorUncheckedCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugUncheckedCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistUncheckedCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftUncheckedCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionUncheckedCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerUncheckedCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskUncheckedCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutDoctorInteractionsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutDoctorInteractionsInput, EmployeeUncheckedCreateWithoutDoctorInteractionsInput>
  }

  export type HospitalCreateWithoutDoctorInteractionsInput = {
    id?: string
    organizationId: string
    name: string
    type: string
    address: string
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    hospitalChain?: HospitalChainCreateNestedOneWithoutHospitalsInput
    territory: TerritoryCreateNestedOneWithoutHospitalsInput
    doctorAssociations?: DoctorHospitalAssociationCreateNestedManyWithoutHospitalInput
    consultationSchedules?: DoctorConsultationScheduleCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateWithoutDoctorInteractionsInput = {
    id?: string
    organizationId: string
    hospitalChainId?: string | null
    territoryId: string
    name: string
    type: string
    address: string
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    doctorAssociations?: DoctorHospitalAssociationUncheckedCreateNestedManyWithoutHospitalInput
    consultationSchedules?: DoctorConsultationScheduleUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalCreateOrConnectWithoutDoctorInteractionsInput = {
    where: HospitalWhereUniqueInput
    create: XOR<HospitalCreateWithoutDoctorInteractionsInput, HospitalUncheckedCreateWithoutDoctorInteractionsInput>
  }

  export type DoctorDistributionCreateWithoutDoctorInteractionInput = {
    id?: string
    distributedAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutDoctorDistributionsInput
    drugItems?: DoctorDistributionDrugItemCreateNestedManyWithoutDoctorDistributionInput
    giftItems?: DoctorDistributionGiftItemCreateNestedManyWithoutDoctorDistributionInput
  }

  export type DoctorDistributionUncheckedCreateWithoutDoctorInteractionInput = {
    id?: string
    employeeId: string
    distributedAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    drugItems?: DoctorDistributionDrugItemUncheckedCreateNestedManyWithoutDoctorDistributionInput
    giftItems?: DoctorDistributionGiftItemUncheckedCreateNestedManyWithoutDoctorDistributionInput
  }

  export type DoctorDistributionCreateOrConnectWithoutDoctorInteractionInput = {
    where: DoctorDistributionWhereUniqueInput
    create: XOR<DoctorDistributionCreateWithoutDoctorInteractionInput, DoctorDistributionUncheckedCreateWithoutDoctorInteractionInput>
  }

  export type DoctorDistributionCreateManyDoctorInteractionInputEnvelope = {
    data: DoctorDistributionCreateManyDoctorInteractionInput | DoctorDistributionCreateManyDoctorInteractionInput[]
    skipDuplicates?: boolean
  }

  export type DoctorTaskCreateWithoutDoctorInteractionsInput = {
    id?: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    planner: TaskPlannerCreateNestedOneWithoutDoctorTasksInput
    employee: EmployeeCreateNestedOneWithoutDoctorTasksInput
    doctor: DoctorCreateNestedOneWithoutDoctorTaskInput
    dcrReports?: DcrReportCreateNestedManyWithoutDoctorTaskInput
  }

  export type DoctorTaskUncheckedCreateWithoutDoctorInteractionsInput = {
    id?: string
    plannerId: string
    employeeId: string
    doctorId: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutDoctorTaskInput
  }

  export type DoctorTaskCreateOrConnectWithoutDoctorInteractionsInput = {
    where: DoctorTaskWhereUniqueInput
    create: XOR<DoctorTaskCreateWithoutDoctorInteractionsInput, DoctorTaskUncheckedCreateWithoutDoctorInteractionsInput>
  }

  export type DoctorUpsertWithoutInteractionsInput = {
    update: XOR<DoctorUpdateWithoutInteractionsInput, DoctorUncheckedUpdateWithoutInteractionsInput>
    create: XOR<DoctorCreateWithoutInteractionsInput, DoctorUncheckedCreateWithoutInteractionsInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutInteractionsInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutInteractionsInput, DoctorUncheckedUpdateWithoutInteractionsInput>
  }

  export type DoctorUpdateWithoutInteractionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qualification?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: EmployeeUpdateOneRequiredWithoutDoctorsCreatedNestedInput
    hospitalAssociations?: DoctorHospitalAssociationUpdateManyWithoutDoctorNestedInput
    consultationSchedules?: DoctorConsultationScheduleUpdateManyWithoutDoctorNestedInput
    notes?: DoctorNoteUpdateManyWithoutDoctorNestedInput
    chemistRelations?: DoctorChemistRelationUpdateManyWithoutDoctorNestedInput
    DoctorTask?: DoctorTaskUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutInteractionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qualification?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hospitalAssociations?: DoctorHospitalAssociationUncheckedUpdateManyWithoutDoctorNestedInput
    consultationSchedules?: DoctorConsultationScheduleUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: DoctorNoteUncheckedUpdateManyWithoutDoctorNestedInput
    chemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutDoctorNestedInput
    DoctorTask?: DoctorTaskUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type EmployeeUpsertWithoutDoctorInteractionsInput = {
    update: XOR<EmployeeUpdateWithoutDoctorInteractionsInput, EmployeeUncheckedUpdateWithoutDoctorInteractionsInput>
    create: XOR<EmployeeCreateWithoutDoctorInteractionsInput, EmployeeUncheckedCreateWithoutDoctorInteractionsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutDoctorInteractionsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutDoctorInteractionsInput, EmployeeUncheckedUpdateWithoutDoctorInteractionsInput>
  }

  export type EmployeeUpdateWithoutDoctorInteractionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    reportingManager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutReportingManagerNestedInput
    team?: TeamUpdateOneWithoutTeamMembersNestedInput
    leadsTeam?: TeamUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUpdateManyWithoutCreatedByNestedInput
    chemistInteractions?: ChemistInteractionUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutDoctorInteractionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    reportingManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    subordinates?: EmployeeUncheckedUpdateManyWithoutReportingManagerNestedInput
    leadsTeam?: TeamUncheckedUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistInteractions?: ChemistInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUncheckedUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUncheckedUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUncheckedUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUncheckedUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type HospitalUpsertWithoutDoctorInteractionsInput = {
    update: XOR<HospitalUpdateWithoutDoctorInteractionsInput, HospitalUncheckedUpdateWithoutDoctorInteractionsInput>
    create: XOR<HospitalCreateWithoutDoctorInteractionsInput, HospitalUncheckedCreateWithoutDoctorInteractionsInput>
    where?: HospitalWhereInput
  }

  export type HospitalUpdateToOneWithWhereWithoutDoctorInteractionsInput = {
    where?: HospitalWhereInput
    data: XOR<HospitalUpdateWithoutDoctorInteractionsInput, HospitalUncheckedUpdateWithoutDoctorInteractionsInput>
  }

  export type HospitalUpdateWithoutDoctorInteractionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hospitalChain?: HospitalChainUpdateOneWithoutHospitalsNestedInput
    territory?: TerritoryUpdateOneRequiredWithoutHospitalsNestedInput
    doctorAssociations?: DoctorHospitalAssociationUpdateManyWithoutHospitalNestedInput
    consultationSchedules?: DoctorConsultationScheduleUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateWithoutDoctorInteractionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    hospitalChainId?: NullableStringFieldUpdateOperationsInput | string | null
    territoryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    doctorAssociations?: DoctorHospitalAssociationUncheckedUpdateManyWithoutHospitalNestedInput
    consultationSchedules?: DoctorConsultationScheduleUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type DoctorDistributionUpsertWithWhereUniqueWithoutDoctorInteractionInput = {
    where: DoctorDistributionWhereUniqueInput
    update: XOR<DoctorDistributionUpdateWithoutDoctorInteractionInput, DoctorDistributionUncheckedUpdateWithoutDoctorInteractionInput>
    create: XOR<DoctorDistributionCreateWithoutDoctorInteractionInput, DoctorDistributionUncheckedCreateWithoutDoctorInteractionInput>
  }

  export type DoctorDistributionUpdateWithWhereUniqueWithoutDoctorInteractionInput = {
    where: DoctorDistributionWhereUniqueInput
    data: XOR<DoctorDistributionUpdateWithoutDoctorInteractionInput, DoctorDistributionUncheckedUpdateWithoutDoctorInteractionInput>
  }

  export type DoctorDistributionUpdateManyWithWhereWithoutDoctorInteractionInput = {
    where: DoctorDistributionScalarWhereInput
    data: XOR<DoctorDistributionUpdateManyMutationInput, DoctorDistributionUncheckedUpdateManyWithoutDoctorInteractionInput>
  }

  export type DoctorTaskUpsertWithoutDoctorInteractionsInput = {
    update: XOR<DoctorTaskUpdateWithoutDoctorInteractionsInput, DoctorTaskUncheckedUpdateWithoutDoctorInteractionsInput>
    create: XOR<DoctorTaskCreateWithoutDoctorInteractionsInput, DoctorTaskUncheckedCreateWithoutDoctorInteractionsInput>
    where?: DoctorTaskWhereInput
  }

  export type DoctorTaskUpdateToOneWithWhereWithoutDoctorInteractionsInput = {
    where?: DoctorTaskWhereInput
    data: XOR<DoctorTaskUpdateWithoutDoctorInteractionsInput, DoctorTaskUncheckedUpdateWithoutDoctorInteractionsInput>
  }

  export type DoctorTaskUpdateWithoutDoctorInteractionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    planner?: TaskPlannerUpdateOneRequiredWithoutDoctorTasksNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutDoctorTasksNestedInput
    doctor?: DoctorUpdateOneRequiredWithoutDoctorTaskNestedInput
    dcrReports?: DcrReportUpdateManyWithoutDoctorTaskNestedInput
  }

  export type DoctorTaskUncheckedUpdateWithoutDoctorInteractionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    plannerId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dcrReports?: DcrReportUncheckedUpdateManyWithoutDoctorTaskNestedInput
  }

  export type EmployeeCreateWithoutDrugsCreatedInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    reportingManager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutReportingManagerInput
    team?: TeamCreateNestedOneWithoutTeamMembersInput
    leadsTeam?: TeamCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutDrugsCreatedInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    reportingManagerId?: string | null
    teamId?: string | null
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutReportingManagerInput
    leadsTeam?: TeamUncheckedCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryUncheckedCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordUncheckedCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteUncheckedCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteUncheckedCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderUncheckedCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorUncheckedCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistUncheckedCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftUncheckedCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionUncheckedCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerUncheckedCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskUncheckedCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutDrugsCreatedInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutDrugsCreatedInput, EmployeeUncheckedCreateWithoutDrugsCreatedInput>
  }

  export type OrderItemCreateWithoutDrugInput = {
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    subtotal: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    order: OrderCreateNestedOneWithoutItemsInput
  }

  export type OrderItemUncheckedCreateWithoutDrugInput = {
    orderId: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    subtotal: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
  }

  export type OrderItemCreateOrConnectWithoutDrugInput = {
    where: OrderItemWhereUniqueInput
    create: XOR<OrderItemCreateWithoutDrugInput, OrderItemUncheckedCreateWithoutDrugInput>
  }

  export type OrderItemCreateManyDrugInputEnvelope = {
    data: OrderItemCreateManyDrugInput | OrderItemCreateManyDrugInput[]
    skipDuplicates?: boolean
  }

  export type RcpaDrugDataCreateWithoutDrugInput = {
    id?: string
    competitorDrugName?: string | null
    ownQuantity: number
    competitorQuantity: number
    createdAt?: Date | string
    rcpaReport: RcpaReportCreateNestedOneWithoutDrugDataInput
  }

  export type RcpaDrugDataUncheckedCreateWithoutDrugInput = {
    id?: string
    rcpaReportId: string
    competitorDrugName?: string | null
    ownQuantity: number
    competitorQuantity: number
    createdAt?: Date | string
  }

  export type RcpaDrugDataCreateOrConnectWithoutDrugInput = {
    where: RcpaDrugDataWhereUniqueInput
    create: XOR<RcpaDrugDataCreateWithoutDrugInput, RcpaDrugDataUncheckedCreateWithoutDrugInput>
  }

  export type RcpaDrugDataCreateManyDrugInputEnvelope = {
    data: RcpaDrugDataCreateManyDrugInput | RcpaDrugDataCreateManyDrugInput[]
    skipDuplicates?: boolean
  }

  export type UserDrugInventoryCreateWithoutDrugInput = {
    id?: string
    quantity: number
    lastRestockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutDrugInventoriesInput
    doctorDistributionDrugItems?: DoctorDistributionDrugItemCreateNestedManyWithoutFromInventoryInput
  }

  export type UserDrugInventoryUncheckedCreateWithoutDrugInput = {
    id?: string
    employeeId: string
    quantity: number
    lastRestockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorDistributionDrugItems?: DoctorDistributionDrugItemUncheckedCreateNestedManyWithoutFromInventoryInput
  }

  export type UserDrugInventoryCreateOrConnectWithoutDrugInput = {
    where: UserDrugInventoryWhereUniqueInput
    create: XOR<UserDrugInventoryCreateWithoutDrugInput, UserDrugInventoryUncheckedCreateWithoutDrugInput>
  }

  export type UserDrugInventoryCreateManyDrugInputEnvelope = {
    data: UserDrugInventoryCreateManyDrugInput | UserDrugInventoryCreateManyDrugInput[]
    skipDuplicates?: boolean
  }

  export type DoctorDistributionDrugItemCreateWithoutDrugInput = {
    id?: string
    quantity: number
    unitCost: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorDistribution: DoctorDistributionCreateNestedOneWithoutDrugItemsInput
    fromInventory: UserDrugInventoryCreateNestedOneWithoutDoctorDistributionDrugItemsInput
  }

  export type DoctorDistributionDrugItemUncheckedCreateWithoutDrugInput = {
    id?: string
    doctorDistributionId: string
    fromInventoryId: string
    quantity: number
    unitCost: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorDistributionDrugItemCreateOrConnectWithoutDrugInput = {
    where: DoctorDistributionDrugItemWhereUniqueInput
    create: XOR<DoctorDistributionDrugItemCreateWithoutDrugInput, DoctorDistributionDrugItemUncheckedCreateWithoutDrugInput>
  }

  export type DoctorDistributionDrugItemCreateManyDrugInputEnvelope = {
    data: DoctorDistributionDrugItemCreateManyDrugInput | DoctorDistributionDrugItemCreateManyDrugInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeUpsertWithoutDrugsCreatedInput = {
    update: XOR<EmployeeUpdateWithoutDrugsCreatedInput, EmployeeUncheckedUpdateWithoutDrugsCreatedInput>
    create: XOR<EmployeeCreateWithoutDrugsCreatedInput, EmployeeUncheckedCreateWithoutDrugsCreatedInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutDrugsCreatedInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutDrugsCreatedInput, EmployeeUncheckedUpdateWithoutDrugsCreatedInput>
  }

  export type EmployeeUpdateWithoutDrugsCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    reportingManager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutReportingManagerNestedInput
    team?: TeamUpdateOneWithoutTeamMembersNestedInput
    leadsTeam?: TeamUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutDrugsCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    reportingManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    subordinates?: EmployeeUncheckedUpdateManyWithoutReportingManagerNestedInput
    leadsTeam?: TeamUncheckedUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUncheckedUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUncheckedUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUncheckedUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type OrderItemUpsertWithWhereUniqueWithoutDrugInput = {
    where: OrderItemWhereUniqueInput
    update: XOR<OrderItemUpdateWithoutDrugInput, OrderItemUncheckedUpdateWithoutDrugInput>
    create: XOR<OrderItemCreateWithoutDrugInput, OrderItemUncheckedCreateWithoutDrugInput>
  }

  export type OrderItemUpdateWithWhereUniqueWithoutDrugInput = {
    where: OrderItemWhereUniqueInput
    data: XOR<OrderItemUpdateWithoutDrugInput, OrderItemUncheckedUpdateWithoutDrugInput>
  }

  export type OrderItemUpdateManyWithWhereWithoutDrugInput = {
    where: OrderItemScalarWhereInput
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyWithoutDrugInput>
  }

  export type OrderItemScalarWhereInput = {
    AND?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
    OR?: OrderItemScalarWhereInput[]
    NOT?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
    orderId?: StringFilter<"OrderItem"> | string
    drugId?: StringFilter<"OrderItem"> | string
    quantity?: IntFilter<"OrderItem"> | number
    unitPrice?: DecimalFilter<"OrderItem"> | Decimal | DecimalJsLike | number | string
    subtotal?: DecimalFilter<"OrderItem"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"OrderItem"> | Date | string
  }

  export type RcpaDrugDataUpsertWithWhereUniqueWithoutDrugInput = {
    where: RcpaDrugDataWhereUniqueInput
    update: XOR<RcpaDrugDataUpdateWithoutDrugInput, RcpaDrugDataUncheckedUpdateWithoutDrugInput>
    create: XOR<RcpaDrugDataCreateWithoutDrugInput, RcpaDrugDataUncheckedCreateWithoutDrugInput>
  }

  export type RcpaDrugDataUpdateWithWhereUniqueWithoutDrugInput = {
    where: RcpaDrugDataWhereUniqueInput
    data: XOR<RcpaDrugDataUpdateWithoutDrugInput, RcpaDrugDataUncheckedUpdateWithoutDrugInput>
  }

  export type RcpaDrugDataUpdateManyWithWhereWithoutDrugInput = {
    where: RcpaDrugDataScalarWhereInput
    data: XOR<RcpaDrugDataUpdateManyMutationInput, RcpaDrugDataUncheckedUpdateManyWithoutDrugInput>
  }

  export type RcpaDrugDataScalarWhereInput = {
    AND?: RcpaDrugDataScalarWhereInput | RcpaDrugDataScalarWhereInput[]
    OR?: RcpaDrugDataScalarWhereInput[]
    NOT?: RcpaDrugDataScalarWhereInput | RcpaDrugDataScalarWhereInput[]
    id?: StringFilter<"RcpaDrugData"> | string
    rcpaReportId?: StringFilter<"RcpaDrugData"> | string
    drugId?: StringNullableFilter<"RcpaDrugData"> | string | null
    competitorDrugName?: StringNullableFilter<"RcpaDrugData"> | string | null
    ownQuantity?: IntFilter<"RcpaDrugData"> | number
    competitorQuantity?: IntFilter<"RcpaDrugData"> | number
    createdAt?: DateTimeFilter<"RcpaDrugData"> | Date | string
  }

  export type UserDrugInventoryUpsertWithWhereUniqueWithoutDrugInput = {
    where: UserDrugInventoryWhereUniqueInput
    update: XOR<UserDrugInventoryUpdateWithoutDrugInput, UserDrugInventoryUncheckedUpdateWithoutDrugInput>
    create: XOR<UserDrugInventoryCreateWithoutDrugInput, UserDrugInventoryUncheckedCreateWithoutDrugInput>
  }

  export type UserDrugInventoryUpdateWithWhereUniqueWithoutDrugInput = {
    where: UserDrugInventoryWhereUniqueInput
    data: XOR<UserDrugInventoryUpdateWithoutDrugInput, UserDrugInventoryUncheckedUpdateWithoutDrugInput>
  }

  export type UserDrugInventoryUpdateManyWithWhereWithoutDrugInput = {
    where: UserDrugInventoryScalarWhereInput
    data: XOR<UserDrugInventoryUpdateManyMutationInput, UserDrugInventoryUncheckedUpdateManyWithoutDrugInput>
  }

  export type DoctorDistributionDrugItemUpsertWithWhereUniqueWithoutDrugInput = {
    where: DoctorDistributionDrugItemWhereUniqueInput
    update: XOR<DoctorDistributionDrugItemUpdateWithoutDrugInput, DoctorDistributionDrugItemUncheckedUpdateWithoutDrugInput>
    create: XOR<DoctorDistributionDrugItemCreateWithoutDrugInput, DoctorDistributionDrugItemUncheckedCreateWithoutDrugInput>
  }

  export type DoctorDistributionDrugItemUpdateWithWhereUniqueWithoutDrugInput = {
    where: DoctorDistributionDrugItemWhereUniqueInput
    data: XOR<DoctorDistributionDrugItemUpdateWithoutDrugInput, DoctorDistributionDrugItemUncheckedUpdateWithoutDrugInput>
  }

  export type DoctorDistributionDrugItemUpdateManyWithWhereWithoutDrugInput = {
    where: DoctorDistributionDrugItemScalarWhereInput
    data: XOR<DoctorDistributionDrugItemUpdateManyMutationInput, DoctorDistributionDrugItemUncheckedUpdateManyWithoutDrugInput>
  }

  export type DoctorDistributionDrugItemScalarWhereInput = {
    AND?: DoctorDistributionDrugItemScalarWhereInput | DoctorDistributionDrugItemScalarWhereInput[]
    OR?: DoctorDistributionDrugItemScalarWhereInput[]
    NOT?: DoctorDistributionDrugItemScalarWhereInput | DoctorDistributionDrugItemScalarWhereInput[]
    id?: StringFilter<"DoctorDistributionDrugItem"> | string
    doctorDistributionId?: StringFilter<"DoctorDistributionDrugItem"> | string
    drugId?: StringFilter<"DoctorDistributionDrugItem"> | string
    fromInventoryId?: StringFilter<"DoctorDistributionDrugItem"> | string
    quantity?: IntFilter<"DoctorDistributionDrugItem"> | number
    unitCost?: DecimalFilter<"DoctorDistributionDrugItem"> | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFilter<"DoctorDistributionDrugItem"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"DoctorDistributionDrugItem"> | Date | string
    updatedAt?: DateTimeFilter<"DoctorDistributionDrugItem"> | Date | string
  }

  export type ChemistChainCreateWithoutChemistsInput = {
    id?: string
    organizationId: string
    name: string
    headquartersAddress?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
  }

  export type ChemistChainUncheckedCreateWithoutChemistsInput = {
    id?: string
    organizationId: string
    name: string
    headquartersAddress?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
  }

  export type ChemistChainCreateOrConnectWithoutChemistsInput = {
    where: ChemistChainWhereUniqueInput
    create: XOR<ChemistChainCreateWithoutChemistsInput, ChemistChainUncheckedCreateWithoutChemistsInput>
  }

  export type TerritoryCreateWithoutChemistsInput = {
    id?: string
    organizationId: string
    name: string
    type: string
    boundaries?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    parentTerritory?: TerritoryCreateNestedOneWithoutChildTerritoriesInput
    childTerritories?: TerritoryCreateNestedManyWithoutParentTerritoryInput
    employees?: EmployeeTerritoryCreateNestedManyWithoutTerritoryInput
    hospitals?: HospitalCreateNestedManyWithoutTerritoryInput
  }

  export type TerritoryUncheckedCreateWithoutChemistsInput = {
    id?: string
    organizationId: string
    name: string
    type: string
    parentTerritoryId?: string | null
    boundaries?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    childTerritories?: TerritoryUncheckedCreateNestedManyWithoutParentTerritoryInput
    employees?: EmployeeTerritoryUncheckedCreateNestedManyWithoutTerritoryInput
    hospitals?: HospitalUncheckedCreateNestedManyWithoutTerritoryInput
  }

  export type TerritoryCreateOrConnectWithoutChemistsInput = {
    where: TerritoryWhereUniqueInput
    create: XOR<TerritoryCreateWithoutChemistsInput, TerritoryUncheckedCreateWithoutChemistsInput>
  }

  export type EmployeeCreateWithoutChemistsCreatedInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    reportingManager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutReportingManagerInput
    team?: TeamCreateNestedOneWithoutTeamMembersInput
    leadsTeam?: TeamCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutChemistsCreatedInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    reportingManagerId?: string | null
    teamId?: string | null
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutReportingManagerInput
    leadsTeam?: TeamUncheckedCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryUncheckedCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordUncheckedCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteUncheckedCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteUncheckedCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderUncheckedCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorUncheckedCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugUncheckedCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftUncheckedCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionUncheckedCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerUncheckedCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskUncheckedCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutChemistsCreatedInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutChemistsCreatedInput, EmployeeUncheckedCreateWithoutChemistsCreatedInput>
  }

  export type ChemistNoteCreateWithoutChemistInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: EmployeeCreateNestedOneWithoutChemistNotesInput
  }

  export type ChemistNoteUncheckedCreateWithoutChemistInput = {
    id?: string
    createdById: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChemistNoteCreateOrConnectWithoutChemistInput = {
    where: ChemistNoteWhereUniqueInput
    create: XOR<ChemistNoteCreateWithoutChemistInput, ChemistNoteUncheckedCreateWithoutChemistInput>
  }

  export type ChemistNoteCreateManyChemistInputEnvelope = {
    data: ChemistNoteCreateManyChemistInput | ChemistNoteCreateManyChemistInput[]
    skipDuplicates?: boolean
  }

  export type ChemistInteractionCreateWithoutChemistInput = {
    id?: string
    interactionType: $Enums.InteractionType
    startTime: Date | string
    endTime?: Date | string | null
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    rating?: number | null
    createdAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutChemistInteractionsInput
    chemistTask?: ChemistTaskCreateNestedOneWithoutChemistInteractionsInput
  }

  export type ChemistInteractionUncheckedCreateWithoutChemistInput = {
    id?: string
    employeeId: string
    interactionType: $Enums.InteractionType
    startTime: Date | string
    endTime?: Date | string | null
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    rating?: number | null
    createdAt?: Date | string
    chemistTaskId?: string | null
  }

  export type ChemistInteractionCreateOrConnectWithoutChemistInput = {
    where: ChemistInteractionWhereUniqueInput
    create: XOR<ChemistInteractionCreateWithoutChemistInput, ChemistInteractionUncheckedCreateWithoutChemistInput>
  }

  export type ChemistInteractionCreateManyChemistInputEnvelope = {
    data: ChemistInteractionCreateManyChemistInput | ChemistInteractionCreateManyChemistInput[]
    skipDuplicates?: boolean
  }

  export type DoctorChemistRelationCreateWithoutChemistInput = {
    id?: string
    createdAt?: Date | string
    doctor: DoctorCreateNestedOneWithoutChemistRelationsInput
    createdBy: EmployeeCreateNestedOneWithoutDoctorChemistRelationsInput
  }

  export type DoctorChemistRelationUncheckedCreateWithoutChemistInput = {
    id?: string
    doctorId: string
    createdAt?: Date | string
    createdById: string
  }

  export type DoctorChemistRelationCreateOrConnectWithoutChemistInput = {
    where: DoctorChemistRelationWhereUniqueInput
    create: XOR<DoctorChemistRelationCreateWithoutChemistInput, DoctorChemistRelationUncheckedCreateWithoutChemistInput>
  }

  export type DoctorChemistRelationCreateManyChemistInputEnvelope = {
    data: DoctorChemistRelationCreateManyChemistInput | DoctorChemistRelationCreateManyChemistInput[]
    skipDuplicates?: boolean
  }

  export type OrderCreateWithoutChemistInput = {
    id?: string
    organizationId: string
    totalAmount: Decimal | DecimalJsLike | number | string
    status: $Enums.OrderStatus
    orderDate: Date | string
    deliveryDate?: Date | string | null
    specialInstructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: EmployeeCreateNestedOneWithoutOrdersCreatedInput
    items?: OrderItemCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutChemistInput = {
    id?: string
    organizationId: string
    totalAmount: Decimal | DecimalJsLike | number | string
    status: $Enums.OrderStatus
    orderDate: Date | string
    deliveryDate?: Date | string | null
    specialInstructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    items?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutChemistInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutChemistInput, OrderUncheckedCreateWithoutChemistInput>
  }

  export type OrderCreateManyChemistInputEnvelope = {
    data: OrderCreateManyChemistInput | OrderCreateManyChemistInput[]
    skipDuplicates?: boolean
  }

  export type RcpaReportCreateWithoutChemistInput = {
    id?: string
    organizationId: string
    remarks?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutRcpaReportsInput
    drugData?: RcpaDrugDataCreateNestedManyWithoutRcpaReportInput
  }

  export type RcpaReportUncheckedCreateWithoutChemistInput = {
    id?: string
    organizationId: string
    employeeId: string
    remarks?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    drugData?: RcpaDrugDataUncheckedCreateNestedManyWithoutRcpaReportInput
  }

  export type RcpaReportCreateOrConnectWithoutChemistInput = {
    where: RcpaReportWhereUniqueInput
    create: XOR<RcpaReportCreateWithoutChemistInput, RcpaReportUncheckedCreateWithoutChemistInput>
  }

  export type RcpaReportCreateManyChemistInputEnvelope = {
    data: RcpaReportCreateManyChemistInput | RcpaReportCreateManyChemistInput[]
    skipDuplicates?: boolean
  }

  export type ChemistTaskCreateWithoutChemistInput = {
    id?: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    planner: TaskPlannerCreateNestedOneWithoutChemistTasksInput
    employee: EmployeeCreateNestedOneWithoutChemistTasksInput
    chemistInteractions?: ChemistInteractionCreateNestedManyWithoutChemistTaskInput
    dcrReports?: DcrReportCreateNestedManyWithoutChemistTaskInput
  }

  export type ChemistTaskUncheckedCreateWithoutChemistInput = {
    id?: string
    plannerId: string
    employeeId: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    chemistInteractions?: ChemistInteractionUncheckedCreateNestedManyWithoutChemistTaskInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutChemistTaskInput
  }

  export type ChemistTaskCreateOrConnectWithoutChemistInput = {
    where: ChemistTaskWhereUniqueInput
    create: XOR<ChemistTaskCreateWithoutChemistInput, ChemistTaskUncheckedCreateWithoutChemistInput>
  }

  export type ChemistTaskCreateManyChemistInputEnvelope = {
    data: ChemistTaskCreateManyChemistInput | ChemistTaskCreateManyChemistInput[]
    skipDuplicates?: boolean
  }

  export type ChemistChainUpsertWithoutChemistsInput = {
    update: XOR<ChemistChainUpdateWithoutChemistsInput, ChemistChainUncheckedUpdateWithoutChemistsInput>
    create: XOR<ChemistChainCreateWithoutChemistsInput, ChemistChainUncheckedCreateWithoutChemistsInput>
    where?: ChemistChainWhereInput
  }

  export type ChemistChainUpdateToOneWithWhereWithoutChemistsInput = {
    where?: ChemistChainWhereInput
    data: XOR<ChemistChainUpdateWithoutChemistsInput, ChemistChainUncheckedUpdateWithoutChemistsInput>
  }

  export type ChemistChainUpdateWithoutChemistsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    headquartersAddress?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ChemistChainUncheckedUpdateWithoutChemistsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    headquartersAddress?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TerritoryUpsertWithoutChemistsInput = {
    update: XOR<TerritoryUpdateWithoutChemistsInput, TerritoryUncheckedUpdateWithoutChemistsInput>
    create: XOR<TerritoryCreateWithoutChemistsInput, TerritoryUncheckedCreateWithoutChemistsInput>
    where?: TerritoryWhereInput
  }

  export type TerritoryUpdateToOneWithWhereWithoutChemistsInput = {
    where?: TerritoryWhereInput
    data: XOR<TerritoryUpdateWithoutChemistsInput, TerritoryUncheckedUpdateWithoutChemistsInput>
  }

  export type TerritoryUpdateWithoutChemistsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    boundaries?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentTerritory?: TerritoryUpdateOneWithoutChildTerritoriesNestedInput
    childTerritories?: TerritoryUpdateManyWithoutParentTerritoryNestedInput
    employees?: EmployeeTerritoryUpdateManyWithoutTerritoryNestedInput
    hospitals?: HospitalUpdateManyWithoutTerritoryNestedInput
  }

  export type TerritoryUncheckedUpdateWithoutChemistsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    parentTerritoryId?: NullableStringFieldUpdateOperationsInput | string | null
    boundaries?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    childTerritories?: TerritoryUncheckedUpdateManyWithoutParentTerritoryNestedInput
    employees?: EmployeeTerritoryUncheckedUpdateManyWithoutTerritoryNestedInput
    hospitals?: HospitalUncheckedUpdateManyWithoutTerritoryNestedInput
  }

  export type EmployeeUpsertWithoutChemistsCreatedInput = {
    update: XOR<EmployeeUpdateWithoutChemistsCreatedInput, EmployeeUncheckedUpdateWithoutChemistsCreatedInput>
    create: XOR<EmployeeCreateWithoutChemistsCreatedInput, EmployeeUncheckedCreateWithoutChemistsCreatedInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutChemistsCreatedInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutChemistsCreatedInput, EmployeeUncheckedUpdateWithoutChemistsCreatedInput>
  }

  export type EmployeeUpdateWithoutChemistsCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    reportingManager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutReportingManagerNestedInput
    team?: TeamUpdateOneWithoutTeamMembersNestedInput
    leadsTeam?: TeamUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutChemistsCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    reportingManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    subordinates?: EmployeeUncheckedUpdateManyWithoutReportingManagerNestedInput
    leadsTeam?: TeamUncheckedUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUncheckedUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUncheckedUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUncheckedUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUncheckedUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type ChemistNoteUpsertWithWhereUniqueWithoutChemistInput = {
    where: ChemistNoteWhereUniqueInput
    update: XOR<ChemistNoteUpdateWithoutChemistInput, ChemistNoteUncheckedUpdateWithoutChemistInput>
    create: XOR<ChemistNoteCreateWithoutChemistInput, ChemistNoteUncheckedCreateWithoutChemistInput>
  }

  export type ChemistNoteUpdateWithWhereUniqueWithoutChemistInput = {
    where: ChemistNoteWhereUniqueInput
    data: XOR<ChemistNoteUpdateWithoutChemistInput, ChemistNoteUncheckedUpdateWithoutChemistInput>
  }

  export type ChemistNoteUpdateManyWithWhereWithoutChemistInput = {
    where: ChemistNoteScalarWhereInput
    data: XOR<ChemistNoteUpdateManyMutationInput, ChemistNoteUncheckedUpdateManyWithoutChemistInput>
  }

  export type ChemistInteractionUpsertWithWhereUniqueWithoutChemistInput = {
    where: ChemistInteractionWhereUniqueInput
    update: XOR<ChemistInteractionUpdateWithoutChemistInput, ChemistInteractionUncheckedUpdateWithoutChemistInput>
    create: XOR<ChemistInteractionCreateWithoutChemistInput, ChemistInteractionUncheckedCreateWithoutChemistInput>
  }

  export type ChemistInteractionUpdateWithWhereUniqueWithoutChemistInput = {
    where: ChemistInteractionWhereUniqueInput
    data: XOR<ChemistInteractionUpdateWithoutChemistInput, ChemistInteractionUncheckedUpdateWithoutChemistInput>
  }

  export type ChemistInteractionUpdateManyWithWhereWithoutChemistInput = {
    where: ChemistInteractionScalarWhereInput
    data: XOR<ChemistInteractionUpdateManyMutationInput, ChemistInteractionUncheckedUpdateManyWithoutChemistInput>
  }

  export type DoctorChemistRelationUpsertWithWhereUniqueWithoutChemistInput = {
    where: DoctorChemistRelationWhereUniqueInput
    update: XOR<DoctorChemistRelationUpdateWithoutChemistInput, DoctorChemistRelationUncheckedUpdateWithoutChemistInput>
    create: XOR<DoctorChemistRelationCreateWithoutChemistInput, DoctorChemistRelationUncheckedCreateWithoutChemistInput>
  }

  export type DoctorChemistRelationUpdateWithWhereUniqueWithoutChemistInput = {
    where: DoctorChemistRelationWhereUniqueInput
    data: XOR<DoctorChemistRelationUpdateWithoutChemistInput, DoctorChemistRelationUncheckedUpdateWithoutChemistInput>
  }

  export type DoctorChemistRelationUpdateManyWithWhereWithoutChemistInput = {
    where: DoctorChemistRelationScalarWhereInput
    data: XOR<DoctorChemistRelationUpdateManyMutationInput, DoctorChemistRelationUncheckedUpdateManyWithoutChemistInput>
  }

  export type OrderUpsertWithWhereUniqueWithoutChemistInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutChemistInput, OrderUncheckedUpdateWithoutChemistInput>
    create: XOR<OrderCreateWithoutChemistInput, OrderUncheckedCreateWithoutChemistInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutChemistInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutChemistInput, OrderUncheckedUpdateWithoutChemistInput>
  }

  export type OrderUpdateManyWithWhereWithoutChemistInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutChemistInput>
  }

  export type RcpaReportUpsertWithWhereUniqueWithoutChemistInput = {
    where: RcpaReportWhereUniqueInput
    update: XOR<RcpaReportUpdateWithoutChemistInput, RcpaReportUncheckedUpdateWithoutChemistInput>
    create: XOR<RcpaReportCreateWithoutChemistInput, RcpaReportUncheckedCreateWithoutChemistInput>
  }

  export type RcpaReportUpdateWithWhereUniqueWithoutChemistInput = {
    where: RcpaReportWhereUniqueInput
    data: XOR<RcpaReportUpdateWithoutChemistInput, RcpaReportUncheckedUpdateWithoutChemistInput>
  }

  export type RcpaReportUpdateManyWithWhereWithoutChemistInput = {
    where: RcpaReportScalarWhereInput
    data: XOR<RcpaReportUpdateManyMutationInput, RcpaReportUncheckedUpdateManyWithoutChemistInput>
  }

  export type ChemistTaskUpsertWithWhereUniqueWithoutChemistInput = {
    where: ChemistTaskWhereUniqueInput
    update: XOR<ChemistTaskUpdateWithoutChemistInput, ChemistTaskUncheckedUpdateWithoutChemistInput>
    create: XOR<ChemistTaskCreateWithoutChemistInput, ChemistTaskUncheckedCreateWithoutChemistInput>
  }

  export type ChemistTaskUpdateWithWhereUniqueWithoutChemistInput = {
    where: ChemistTaskWhereUniqueInput
    data: XOR<ChemistTaskUpdateWithoutChemistInput, ChemistTaskUncheckedUpdateWithoutChemistInput>
  }

  export type ChemistTaskUpdateManyWithWhereWithoutChemistInput = {
    where: ChemistTaskScalarWhereInput
    data: XOR<ChemistTaskUpdateManyMutationInput, ChemistTaskUncheckedUpdateManyWithoutChemistInput>
  }

  export type ChemistCreateWithoutNotesInput = {
    id?: string
    organizationId: string
    name: string
    type: $Enums.ChemistType
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    profilePictureUrl?: string | null
    visitingHours?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    chemistChain?: ChemistChainCreateNestedOneWithoutChemistsInput
    territory: TerritoryCreateNestedOneWithoutChemistsInput
    createdBy: EmployeeCreateNestedOneWithoutChemistsCreatedInput
    interactions?: ChemistInteractionCreateNestedManyWithoutChemistInput
    doctorRelations?: DoctorChemistRelationCreateNestedManyWithoutChemistInput
    orders?: OrderCreateNestedManyWithoutChemistInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutChemistInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutChemistInput
  }

  export type ChemistUncheckedCreateWithoutNotesInput = {
    id?: string
    organizationId: string
    chemistChainId?: string | null
    territoryId: string
    name: string
    type: $Enums.ChemistType
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    profilePictureUrl?: string | null
    visitingHours?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isActive?: boolean
    interactions?: ChemistInteractionUncheckedCreateNestedManyWithoutChemistInput
    doctorRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutChemistInput
    orders?: OrderUncheckedCreateNestedManyWithoutChemistInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutChemistInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutChemistInput
  }

  export type ChemistCreateOrConnectWithoutNotesInput = {
    where: ChemistWhereUniqueInput
    create: XOR<ChemistCreateWithoutNotesInput, ChemistUncheckedCreateWithoutNotesInput>
  }

  export type EmployeeCreateWithoutChemistNotesInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    reportingManager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutReportingManagerInput
    team?: TeamCreateNestedOneWithoutTeamMembersInput
    leadsTeam?: TeamCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutChemistNotesInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    reportingManagerId?: string | null
    teamId?: string | null
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutReportingManagerInput
    leadsTeam?: TeamUncheckedCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryUncheckedCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordUncheckedCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteUncheckedCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderUncheckedCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorUncheckedCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugUncheckedCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistUncheckedCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftUncheckedCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionUncheckedCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerUncheckedCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskUncheckedCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutChemistNotesInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutChemistNotesInput, EmployeeUncheckedCreateWithoutChemistNotesInput>
  }

  export type ChemistUpsertWithoutNotesInput = {
    update: XOR<ChemistUpdateWithoutNotesInput, ChemistUncheckedUpdateWithoutNotesInput>
    create: XOR<ChemistCreateWithoutNotesInput, ChemistUncheckedCreateWithoutNotesInput>
    where?: ChemistWhereInput
  }

  export type ChemistUpdateToOneWithWhereWithoutNotesInput = {
    where?: ChemistWhereInput
    data: XOR<ChemistUpdateWithoutNotesInput, ChemistUncheckedUpdateWithoutNotesInput>
  }

  export type ChemistUpdateWithoutNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChemistTypeFieldUpdateOperationsInput | $Enums.ChemistType
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    visitingHours?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    chemistChain?: ChemistChainUpdateOneWithoutChemistsNestedInput
    territory?: TerritoryUpdateOneRequiredWithoutChemistsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutChemistsCreatedNestedInput
    interactions?: ChemistInteractionUpdateManyWithoutChemistNestedInput
    doctorRelations?: DoctorChemistRelationUpdateManyWithoutChemistNestedInput
    orders?: OrderUpdateManyWithoutChemistNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutChemistNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutChemistNestedInput
  }

  export type ChemistUncheckedUpdateWithoutNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    chemistChainId?: NullableStringFieldUpdateOperationsInput | string | null
    territoryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChemistTypeFieldUpdateOperationsInput | $Enums.ChemistType
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    visitingHours?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    interactions?: ChemistInteractionUncheckedUpdateManyWithoutChemistNestedInput
    doctorRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutChemistNestedInput
    orders?: OrderUncheckedUpdateManyWithoutChemistNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutChemistNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutChemistNestedInput
  }

  export type EmployeeUpsertWithoutChemistNotesInput = {
    update: XOR<EmployeeUpdateWithoutChemistNotesInput, EmployeeUncheckedUpdateWithoutChemistNotesInput>
    create: XOR<EmployeeCreateWithoutChemistNotesInput, EmployeeUncheckedCreateWithoutChemistNotesInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutChemistNotesInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutChemistNotesInput, EmployeeUncheckedUpdateWithoutChemistNotesInput>
  }

  export type EmployeeUpdateWithoutChemistNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    reportingManager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutReportingManagerNestedInput
    team?: TeamUpdateOneWithoutTeamMembersNestedInput
    leadsTeam?: TeamUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutChemistNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    reportingManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    subordinates?: EmployeeUncheckedUpdateManyWithoutReportingManagerNestedInput
    leadsTeam?: TeamUncheckedUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUncheckedUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUncheckedUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUncheckedUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUncheckedUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type ChemistCreateWithoutInteractionsInput = {
    id?: string
    organizationId: string
    name: string
    type: $Enums.ChemistType
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    profilePictureUrl?: string | null
    visitingHours?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    chemistChain?: ChemistChainCreateNestedOneWithoutChemistsInput
    territory: TerritoryCreateNestedOneWithoutChemistsInput
    createdBy: EmployeeCreateNestedOneWithoutChemistsCreatedInput
    notes?: ChemistNoteCreateNestedManyWithoutChemistInput
    doctorRelations?: DoctorChemistRelationCreateNestedManyWithoutChemistInput
    orders?: OrderCreateNestedManyWithoutChemistInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutChemistInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutChemistInput
  }

  export type ChemistUncheckedCreateWithoutInteractionsInput = {
    id?: string
    organizationId: string
    chemistChainId?: string | null
    territoryId: string
    name: string
    type: $Enums.ChemistType
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    profilePictureUrl?: string | null
    visitingHours?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isActive?: boolean
    notes?: ChemistNoteUncheckedCreateNestedManyWithoutChemistInput
    doctorRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutChemistInput
    orders?: OrderUncheckedCreateNestedManyWithoutChemistInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutChemistInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutChemistInput
  }

  export type ChemistCreateOrConnectWithoutInteractionsInput = {
    where: ChemistWhereUniqueInput
    create: XOR<ChemistCreateWithoutInteractionsInput, ChemistUncheckedCreateWithoutInteractionsInput>
  }

  export type EmployeeCreateWithoutChemistInteractionsInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    reportingManager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutReportingManagerInput
    team?: TeamCreateNestedOneWithoutTeamMembersInput
    leadsTeam?: TeamCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutChemistInteractionsInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    reportingManagerId?: string | null
    teamId?: string | null
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutReportingManagerInput
    leadsTeam?: TeamUncheckedCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryUncheckedCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordUncheckedCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteUncheckedCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteUncheckedCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderUncheckedCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorUncheckedCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugUncheckedCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistUncheckedCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftUncheckedCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionUncheckedCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerUncheckedCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskUncheckedCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutChemistInteractionsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutChemistInteractionsInput, EmployeeUncheckedCreateWithoutChemistInteractionsInput>
  }

  export type ChemistTaskCreateWithoutChemistInteractionsInput = {
    id?: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    planner: TaskPlannerCreateNestedOneWithoutChemistTasksInput
    employee: EmployeeCreateNestedOneWithoutChemistTasksInput
    chemist: ChemistCreateNestedOneWithoutChemistTasksInput
    dcrReports?: DcrReportCreateNestedManyWithoutChemistTaskInput
  }

  export type ChemistTaskUncheckedCreateWithoutChemistInteractionsInput = {
    id?: string
    plannerId: string
    employeeId: string
    chemistId: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutChemistTaskInput
  }

  export type ChemistTaskCreateOrConnectWithoutChemistInteractionsInput = {
    where: ChemistTaskWhereUniqueInput
    create: XOR<ChemistTaskCreateWithoutChemistInteractionsInput, ChemistTaskUncheckedCreateWithoutChemistInteractionsInput>
  }

  export type ChemistUpsertWithoutInteractionsInput = {
    update: XOR<ChemistUpdateWithoutInteractionsInput, ChemistUncheckedUpdateWithoutInteractionsInput>
    create: XOR<ChemistCreateWithoutInteractionsInput, ChemistUncheckedCreateWithoutInteractionsInput>
    where?: ChemistWhereInput
  }

  export type ChemistUpdateToOneWithWhereWithoutInteractionsInput = {
    where?: ChemistWhereInput
    data: XOR<ChemistUpdateWithoutInteractionsInput, ChemistUncheckedUpdateWithoutInteractionsInput>
  }

  export type ChemistUpdateWithoutInteractionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChemistTypeFieldUpdateOperationsInput | $Enums.ChemistType
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    visitingHours?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    chemistChain?: ChemistChainUpdateOneWithoutChemistsNestedInput
    territory?: TerritoryUpdateOneRequiredWithoutChemistsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutChemistsCreatedNestedInput
    notes?: ChemistNoteUpdateManyWithoutChemistNestedInput
    doctorRelations?: DoctorChemistRelationUpdateManyWithoutChemistNestedInput
    orders?: OrderUpdateManyWithoutChemistNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutChemistNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutChemistNestedInput
  }

  export type ChemistUncheckedUpdateWithoutInteractionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    chemistChainId?: NullableStringFieldUpdateOperationsInput | string | null
    territoryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChemistTypeFieldUpdateOperationsInput | $Enums.ChemistType
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    visitingHours?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: ChemistNoteUncheckedUpdateManyWithoutChemistNestedInput
    doctorRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutChemistNestedInput
    orders?: OrderUncheckedUpdateManyWithoutChemistNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutChemistNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutChemistNestedInput
  }

  export type EmployeeUpsertWithoutChemistInteractionsInput = {
    update: XOR<EmployeeUpdateWithoutChemistInteractionsInput, EmployeeUncheckedUpdateWithoutChemistInteractionsInput>
    create: XOR<EmployeeCreateWithoutChemistInteractionsInput, EmployeeUncheckedCreateWithoutChemistInteractionsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutChemistInteractionsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutChemistInteractionsInput, EmployeeUncheckedUpdateWithoutChemistInteractionsInput>
  }

  export type EmployeeUpdateWithoutChemistInteractionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    reportingManager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutReportingManagerNestedInput
    team?: TeamUpdateOneWithoutTeamMembersNestedInput
    leadsTeam?: TeamUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutChemistInteractionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    reportingManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    subordinates?: EmployeeUncheckedUpdateManyWithoutReportingManagerNestedInput
    leadsTeam?: TeamUncheckedUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUncheckedUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUncheckedUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUncheckedUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUncheckedUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type ChemistTaskUpsertWithoutChemistInteractionsInput = {
    update: XOR<ChemistTaskUpdateWithoutChemistInteractionsInput, ChemistTaskUncheckedUpdateWithoutChemistInteractionsInput>
    create: XOR<ChemistTaskCreateWithoutChemistInteractionsInput, ChemistTaskUncheckedCreateWithoutChemistInteractionsInput>
    where?: ChemistTaskWhereInput
  }

  export type ChemistTaskUpdateToOneWithWhereWithoutChemistInteractionsInput = {
    where?: ChemistTaskWhereInput
    data: XOR<ChemistTaskUpdateWithoutChemistInteractionsInput, ChemistTaskUncheckedUpdateWithoutChemistInteractionsInput>
  }

  export type ChemistTaskUpdateWithoutChemistInteractionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    planner?: TaskPlannerUpdateOneRequiredWithoutChemistTasksNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutChemistTasksNestedInput
    chemist?: ChemistUpdateOneRequiredWithoutChemistTasksNestedInput
    dcrReports?: DcrReportUpdateManyWithoutChemistTaskNestedInput
  }

  export type ChemistTaskUncheckedUpdateWithoutChemistInteractionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    plannerId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    chemistId?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dcrReports?: DcrReportUncheckedUpdateManyWithoutChemistTaskNestedInput
  }

  export type DoctorCreateWithoutChemistRelationsInput = {
    id?: string
    organizationId: string
    name: string
    designation?: string | null
    specialization?: string | null
    email?: string | null
    phone?: string | null
    description?: string | null
    profilePictureUrl?: string | null
    qualification?: string | null
    experienceYears?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    createdBy: EmployeeCreateNestedOneWithoutDoctorsCreatedInput
    hospitalAssociations?: DoctorHospitalAssociationCreateNestedManyWithoutDoctorInput
    consultationSchedules?: DoctorConsultationScheduleCreateNestedManyWithoutDoctorInput
    interactions?: DoctorInteractionCreateNestedManyWithoutDoctorInput
    notes?: DoctorNoteCreateNestedManyWithoutDoctorInput
    DoctorTask?: DoctorTaskCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutChemistRelationsInput = {
    id?: string
    organizationId: string
    name: string
    designation?: string | null
    specialization?: string | null
    email?: string | null
    phone?: string | null
    description?: string | null
    profilePictureUrl?: string | null
    qualification?: string | null
    experienceYears?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isActive?: boolean
    hospitalAssociations?: DoctorHospitalAssociationUncheckedCreateNestedManyWithoutDoctorInput
    consultationSchedules?: DoctorConsultationScheduleUncheckedCreateNestedManyWithoutDoctorInput
    interactions?: DoctorInteractionUncheckedCreateNestedManyWithoutDoctorInput
    notes?: DoctorNoteUncheckedCreateNestedManyWithoutDoctorInput
    DoctorTask?: DoctorTaskUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutChemistRelationsInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutChemistRelationsInput, DoctorUncheckedCreateWithoutChemistRelationsInput>
  }

  export type ChemistCreateWithoutDoctorRelationsInput = {
    id?: string
    organizationId: string
    name: string
    type: $Enums.ChemistType
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    profilePictureUrl?: string | null
    visitingHours?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    chemistChain?: ChemistChainCreateNestedOneWithoutChemistsInput
    territory: TerritoryCreateNestedOneWithoutChemistsInput
    createdBy: EmployeeCreateNestedOneWithoutChemistsCreatedInput
    notes?: ChemistNoteCreateNestedManyWithoutChemistInput
    interactions?: ChemistInteractionCreateNestedManyWithoutChemistInput
    orders?: OrderCreateNestedManyWithoutChemistInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutChemistInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutChemistInput
  }

  export type ChemistUncheckedCreateWithoutDoctorRelationsInput = {
    id?: string
    organizationId: string
    chemistChainId?: string | null
    territoryId: string
    name: string
    type: $Enums.ChemistType
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    profilePictureUrl?: string | null
    visitingHours?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isActive?: boolean
    notes?: ChemistNoteUncheckedCreateNestedManyWithoutChemistInput
    interactions?: ChemistInteractionUncheckedCreateNestedManyWithoutChemistInput
    orders?: OrderUncheckedCreateNestedManyWithoutChemistInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutChemistInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutChemistInput
  }

  export type ChemistCreateOrConnectWithoutDoctorRelationsInput = {
    where: ChemistWhereUniqueInput
    create: XOR<ChemistCreateWithoutDoctorRelationsInput, ChemistUncheckedCreateWithoutDoctorRelationsInput>
  }

  export type EmployeeCreateWithoutDoctorChemistRelationsInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    reportingManager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutReportingManagerInput
    team?: TeamCreateNestedOneWithoutTeamMembersInput
    leadsTeam?: TeamCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutDoctorChemistRelationsInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    reportingManagerId?: string | null
    teamId?: string | null
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutReportingManagerInput
    leadsTeam?: TeamUncheckedCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryUncheckedCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordUncheckedCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteUncheckedCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteUncheckedCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderUncheckedCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorUncheckedCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugUncheckedCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistUncheckedCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftUncheckedCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionUncheckedCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerUncheckedCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskUncheckedCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutDoctorChemistRelationsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutDoctorChemistRelationsInput, EmployeeUncheckedCreateWithoutDoctorChemistRelationsInput>
  }

  export type DoctorUpsertWithoutChemistRelationsInput = {
    update: XOR<DoctorUpdateWithoutChemistRelationsInput, DoctorUncheckedUpdateWithoutChemistRelationsInput>
    create: XOR<DoctorCreateWithoutChemistRelationsInput, DoctorUncheckedCreateWithoutChemistRelationsInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutChemistRelationsInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutChemistRelationsInput, DoctorUncheckedUpdateWithoutChemistRelationsInput>
  }

  export type DoctorUpdateWithoutChemistRelationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qualification?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: EmployeeUpdateOneRequiredWithoutDoctorsCreatedNestedInput
    hospitalAssociations?: DoctorHospitalAssociationUpdateManyWithoutDoctorNestedInput
    consultationSchedules?: DoctorConsultationScheduleUpdateManyWithoutDoctorNestedInput
    interactions?: DoctorInteractionUpdateManyWithoutDoctorNestedInput
    notes?: DoctorNoteUpdateManyWithoutDoctorNestedInput
    DoctorTask?: DoctorTaskUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutChemistRelationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qualification?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hospitalAssociations?: DoctorHospitalAssociationUncheckedUpdateManyWithoutDoctorNestedInput
    consultationSchedules?: DoctorConsultationScheduleUncheckedUpdateManyWithoutDoctorNestedInput
    interactions?: DoctorInteractionUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: DoctorNoteUncheckedUpdateManyWithoutDoctorNestedInput
    DoctorTask?: DoctorTaskUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type ChemistUpsertWithoutDoctorRelationsInput = {
    update: XOR<ChemistUpdateWithoutDoctorRelationsInput, ChemistUncheckedUpdateWithoutDoctorRelationsInput>
    create: XOR<ChemistCreateWithoutDoctorRelationsInput, ChemistUncheckedCreateWithoutDoctorRelationsInput>
    where?: ChemistWhereInput
  }

  export type ChemistUpdateToOneWithWhereWithoutDoctorRelationsInput = {
    where?: ChemistWhereInput
    data: XOR<ChemistUpdateWithoutDoctorRelationsInput, ChemistUncheckedUpdateWithoutDoctorRelationsInput>
  }

  export type ChemistUpdateWithoutDoctorRelationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChemistTypeFieldUpdateOperationsInput | $Enums.ChemistType
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    visitingHours?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    chemistChain?: ChemistChainUpdateOneWithoutChemistsNestedInput
    territory?: TerritoryUpdateOneRequiredWithoutChemistsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutChemistsCreatedNestedInput
    notes?: ChemistNoteUpdateManyWithoutChemistNestedInput
    interactions?: ChemistInteractionUpdateManyWithoutChemistNestedInput
    orders?: OrderUpdateManyWithoutChemistNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutChemistNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutChemistNestedInput
  }

  export type ChemistUncheckedUpdateWithoutDoctorRelationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    chemistChainId?: NullableStringFieldUpdateOperationsInput | string | null
    territoryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChemistTypeFieldUpdateOperationsInput | $Enums.ChemistType
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    visitingHours?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: ChemistNoteUncheckedUpdateManyWithoutChemistNestedInput
    interactions?: ChemistInteractionUncheckedUpdateManyWithoutChemistNestedInput
    orders?: OrderUncheckedUpdateManyWithoutChemistNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutChemistNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutChemistNestedInput
  }

  export type EmployeeUpsertWithoutDoctorChemistRelationsInput = {
    update: XOR<EmployeeUpdateWithoutDoctorChemistRelationsInput, EmployeeUncheckedUpdateWithoutDoctorChemistRelationsInput>
    create: XOR<EmployeeCreateWithoutDoctorChemistRelationsInput, EmployeeUncheckedCreateWithoutDoctorChemistRelationsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutDoctorChemistRelationsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutDoctorChemistRelationsInput, EmployeeUncheckedUpdateWithoutDoctorChemistRelationsInput>
  }

  export type EmployeeUpdateWithoutDoctorChemistRelationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    reportingManager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutReportingManagerNestedInput
    team?: TeamUpdateOneWithoutTeamMembersNestedInput
    leadsTeam?: TeamUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutDoctorChemistRelationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    reportingManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    subordinates?: EmployeeUncheckedUpdateManyWithoutReportingManagerNestedInput
    leadsTeam?: TeamUncheckedUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUncheckedUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUncheckedUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUncheckedUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUncheckedUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUncheckedUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type ChemistCreateWithoutOrdersInput = {
    id?: string
    organizationId: string
    name: string
    type: $Enums.ChemistType
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    profilePictureUrl?: string | null
    visitingHours?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    chemistChain?: ChemistChainCreateNestedOneWithoutChemistsInput
    territory: TerritoryCreateNestedOneWithoutChemistsInput
    createdBy: EmployeeCreateNestedOneWithoutChemistsCreatedInput
    notes?: ChemistNoteCreateNestedManyWithoutChemistInput
    interactions?: ChemistInteractionCreateNestedManyWithoutChemistInput
    doctorRelations?: DoctorChemistRelationCreateNestedManyWithoutChemistInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutChemistInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutChemistInput
  }

  export type ChemistUncheckedCreateWithoutOrdersInput = {
    id?: string
    organizationId: string
    chemistChainId?: string | null
    territoryId: string
    name: string
    type: $Enums.ChemistType
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    profilePictureUrl?: string | null
    visitingHours?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isActive?: boolean
    notes?: ChemistNoteUncheckedCreateNestedManyWithoutChemistInput
    interactions?: ChemistInteractionUncheckedCreateNestedManyWithoutChemistInput
    doctorRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutChemistInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutChemistInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutChemistInput
  }

  export type ChemistCreateOrConnectWithoutOrdersInput = {
    where: ChemistWhereUniqueInput
    create: XOR<ChemistCreateWithoutOrdersInput, ChemistUncheckedCreateWithoutOrdersInput>
  }

  export type EmployeeCreateWithoutOrdersCreatedInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    reportingManager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutReportingManagerInput
    team?: TeamCreateNestedOneWithoutTeamMembersInput
    leadsTeam?: TeamCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogCreateNestedManyWithoutEmployeeInput
    doctorsCreated?: DoctorCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutOrdersCreatedInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    reportingManagerId?: string | null
    teamId?: string | null
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutReportingManagerInput
    leadsTeam?: TeamUncheckedCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryUncheckedCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordUncheckedCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteUncheckedCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteUncheckedCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutEmployeeInput
    doctorsCreated?: DoctorUncheckedCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugUncheckedCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistUncheckedCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftUncheckedCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionUncheckedCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerUncheckedCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskUncheckedCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutOrdersCreatedInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutOrdersCreatedInput, EmployeeUncheckedCreateWithoutOrdersCreatedInput>
  }

  export type OrderItemCreateWithoutOrderInput = {
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    subtotal: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    drug: DrugCreateNestedOneWithoutOrderItemsInput
  }

  export type OrderItemUncheckedCreateWithoutOrderInput = {
    drugId: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    subtotal: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
  }

  export type OrderItemCreateOrConnectWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    create: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput>
  }

  export type OrderItemCreateManyOrderInputEnvelope = {
    data: OrderItemCreateManyOrderInput | OrderItemCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type ChemistUpsertWithoutOrdersInput = {
    update: XOR<ChemistUpdateWithoutOrdersInput, ChemistUncheckedUpdateWithoutOrdersInput>
    create: XOR<ChemistCreateWithoutOrdersInput, ChemistUncheckedCreateWithoutOrdersInput>
    where?: ChemistWhereInput
  }

  export type ChemistUpdateToOneWithWhereWithoutOrdersInput = {
    where?: ChemistWhereInput
    data: XOR<ChemistUpdateWithoutOrdersInput, ChemistUncheckedUpdateWithoutOrdersInput>
  }

  export type ChemistUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChemistTypeFieldUpdateOperationsInput | $Enums.ChemistType
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    visitingHours?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    chemistChain?: ChemistChainUpdateOneWithoutChemistsNestedInput
    territory?: TerritoryUpdateOneRequiredWithoutChemistsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutChemistsCreatedNestedInput
    notes?: ChemistNoteUpdateManyWithoutChemistNestedInput
    interactions?: ChemistInteractionUpdateManyWithoutChemistNestedInput
    doctorRelations?: DoctorChemistRelationUpdateManyWithoutChemistNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutChemistNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutChemistNestedInput
  }

  export type ChemistUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    chemistChainId?: NullableStringFieldUpdateOperationsInput | string | null
    territoryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChemistTypeFieldUpdateOperationsInput | $Enums.ChemistType
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    visitingHours?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: ChemistNoteUncheckedUpdateManyWithoutChemistNestedInput
    interactions?: ChemistInteractionUncheckedUpdateManyWithoutChemistNestedInput
    doctorRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutChemistNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutChemistNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutChemistNestedInput
  }

  export type EmployeeUpsertWithoutOrdersCreatedInput = {
    update: XOR<EmployeeUpdateWithoutOrdersCreatedInput, EmployeeUncheckedUpdateWithoutOrdersCreatedInput>
    create: XOR<EmployeeCreateWithoutOrdersCreatedInput, EmployeeUncheckedCreateWithoutOrdersCreatedInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutOrdersCreatedInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutOrdersCreatedInput, EmployeeUncheckedUpdateWithoutOrdersCreatedInput>
  }

  export type EmployeeUpdateWithoutOrdersCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    reportingManager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutReportingManagerNestedInput
    team?: TeamUpdateOneWithoutTeamMembersNestedInput
    leadsTeam?: TeamUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutEmployeeNestedInput
    doctorsCreated?: DoctorUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutOrdersCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    reportingManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    subordinates?: EmployeeUncheckedUpdateManyWithoutReportingManagerNestedInput
    leadsTeam?: TeamUncheckedUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorsCreated?: DoctorUncheckedUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUncheckedUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUncheckedUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUncheckedUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type OrderItemUpsertWithWhereUniqueWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    update: XOR<OrderItemUpdateWithoutOrderInput, OrderItemUncheckedUpdateWithoutOrderInput>
    create: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput>
  }

  export type OrderItemUpdateWithWhereUniqueWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    data: XOR<OrderItemUpdateWithoutOrderInput, OrderItemUncheckedUpdateWithoutOrderInput>
  }

  export type OrderItemUpdateManyWithWhereWithoutOrderInput = {
    where: OrderItemScalarWhereInput
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyWithoutOrderInput>
  }

  export type OrderCreateWithoutItemsInput = {
    id?: string
    organizationId: string
    totalAmount: Decimal | DecimalJsLike | number | string
    status: $Enums.OrderStatus
    orderDate: Date | string
    deliveryDate?: Date | string | null
    specialInstructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chemist?: ChemistCreateNestedOneWithoutOrdersInput
    createdBy: EmployeeCreateNestedOneWithoutOrdersCreatedInput
  }

  export type OrderUncheckedCreateWithoutItemsInput = {
    id?: string
    organizationId: string
    chemistId?: string | null
    totalAmount: Decimal | DecimalJsLike | number | string
    status: $Enums.OrderStatus
    orderDate: Date | string
    deliveryDate?: Date | string | null
    specialInstructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
  }

  export type OrderCreateOrConnectWithoutItemsInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutItemsInput, OrderUncheckedCreateWithoutItemsInput>
  }

  export type DrugCreateWithoutOrderItemsInput = {
    id?: string
    organizationId: string
    name: string
    composition?: string | null
    manufacturer?: string | null
    indications?: string | null
    sideEffects?: string | null
    safetyAdvice?: string | null
    dosageForms?: NullableJsonNullValueInput | InputJsonValue
    price?: Decimal | DecimalJsLike | number | string | null
    schedule?: string | null
    regulatoryApprovals?: string | null
    category?: string | null
    isAvailable?: boolean
    images?: NullableJsonNullValueInput | InputJsonValue
    marketingMaterials?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    createdBy: EmployeeCreateNestedOneWithoutDrugsCreatedInput
    rcpaData?: RcpaDrugDataCreateNestedManyWithoutDrugInput
    UserDrugInventory?: UserDrugInventoryCreateNestedManyWithoutDrugInput
    DoctorDistributionDrugItem?: DoctorDistributionDrugItemCreateNestedManyWithoutDrugInput
  }

  export type DrugUncheckedCreateWithoutOrderItemsInput = {
    id?: string
    organizationId: string
    name: string
    composition?: string | null
    manufacturer?: string | null
    indications?: string | null
    sideEffects?: string | null
    safetyAdvice?: string | null
    dosageForms?: NullableJsonNullValueInput | InputJsonValue
    price?: Decimal | DecimalJsLike | number | string | null
    schedule?: string | null
    regulatoryApprovals?: string | null
    category?: string | null
    isAvailable?: boolean
    images?: NullableJsonNullValueInput | InputJsonValue
    marketingMaterials?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isActive?: boolean
    rcpaData?: RcpaDrugDataUncheckedCreateNestedManyWithoutDrugInput
    UserDrugInventory?: UserDrugInventoryUncheckedCreateNestedManyWithoutDrugInput
    DoctorDistributionDrugItem?: DoctorDistributionDrugItemUncheckedCreateNestedManyWithoutDrugInput
  }

  export type DrugCreateOrConnectWithoutOrderItemsInput = {
    where: DrugWhereUniqueInput
    create: XOR<DrugCreateWithoutOrderItemsInput, DrugUncheckedCreateWithoutOrderItemsInput>
  }

  export type OrderUpsertWithoutItemsInput = {
    update: XOR<OrderUpdateWithoutItemsInput, OrderUncheckedUpdateWithoutItemsInput>
    create: XOR<OrderCreateWithoutItemsInput, OrderUncheckedCreateWithoutItemsInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutItemsInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutItemsInput, OrderUncheckedUpdateWithoutItemsInput>
  }

  export type OrderUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chemist?: ChemistUpdateOneWithoutOrdersNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutOrdersCreatedNestedInput
  }

  export type OrderUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    chemistId?: NullableStringFieldUpdateOperationsInput | string | null
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type DrugUpsertWithoutOrderItemsInput = {
    update: XOR<DrugUpdateWithoutOrderItemsInput, DrugUncheckedUpdateWithoutOrderItemsInput>
    create: XOR<DrugCreateWithoutOrderItemsInput, DrugUncheckedCreateWithoutOrderItemsInput>
    where?: DrugWhereInput
  }

  export type DrugUpdateToOneWithWhereWithoutOrderItemsInput = {
    where?: DrugWhereInput
    data: XOR<DrugUpdateWithoutOrderItemsInput, DrugUncheckedUpdateWithoutOrderItemsInput>
  }

  export type DrugUpdateWithoutOrderItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    indications?: NullableStringFieldUpdateOperationsInput | string | null
    sideEffects?: NullableStringFieldUpdateOperationsInput | string | null
    safetyAdvice?: NullableStringFieldUpdateOperationsInput | string | null
    dosageForms?: NullableJsonNullValueInput | InputJsonValue
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryApprovals?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    images?: NullableJsonNullValueInput | InputJsonValue
    marketingMaterials?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: EmployeeUpdateOneRequiredWithoutDrugsCreatedNestedInput
    rcpaData?: RcpaDrugDataUpdateManyWithoutDrugNestedInput
    UserDrugInventory?: UserDrugInventoryUpdateManyWithoutDrugNestedInput
    DoctorDistributionDrugItem?: DoctorDistributionDrugItemUpdateManyWithoutDrugNestedInput
  }

  export type DrugUncheckedUpdateWithoutOrderItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    indications?: NullableStringFieldUpdateOperationsInput | string | null
    sideEffects?: NullableStringFieldUpdateOperationsInput | string | null
    safetyAdvice?: NullableStringFieldUpdateOperationsInput | string | null
    dosageForms?: NullableJsonNullValueInput | InputJsonValue
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryApprovals?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    images?: NullableJsonNullValueInput | InputJsonValue
    marketingMaterials?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    rcpaData?: RcpaDrugDataUncheckedUpdateManyWithoutDrugNestedInput
    UserDrugInventory?: UserDrugInventoryUncheckedUpdateManyWithoutDrugNestedInput
    DoctorDistributionDrugItem?: DoctorDistributionDrugItemUncheckedUpdateManyWithoutDrugNestedInput
  }

  export type EmployeeCreateWithoutDcrReportsInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    reportingManager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutReportingManagerInput
    team?: TeamCreateNestedOneWithoutTeamMembersInput
    leadsTeam?: TeamCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutDcrReportsInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    reportingManagerId?: string | null
    teamId?: string | null
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutReportingManagerInput
    leadsTeam?: TeamUncheckedCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryUncheckedCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordUncheckedCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteUncheckedCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteUncheckedCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderUncheckedCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorUncheckedCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugUncheckedCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistUncheckedCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftUncheckedCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionUncheckedCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerUncheckedCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskUncheckedCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutDcrReportsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutDcrReportsInput, EmployeeUncheckedCreateWithoutDcrReportsInput>
  }

  export type DoctorTaskCreateWithoutDcrReportsInput = {
    id?: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    planner: TaskPlannerCreateNestedOneWithoutDoctorTasksInput
    employee: EmployeeCreateNestedOneWithoutDoctorTasksInput
    doctor: DoctorCreateNestedOneWithoutDoctorTaskInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutDoctorTaskInput
  }

  export type DoctorTaskUncheckedCreateWithoutDcrReportsInput = {
    id?: string
    plannerId: string
    employeeId: string
    doctorId: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutDoctorTaskInput
  }

  export type DoctorTaskCreateOrConnectWithoutDcrReportsInput = {
    where: DoctorTaskWhereUniqueInput
    create: XOR<DoctorTaskCreateWithoutDcrReportsInput, DoctorTaskUncheckedCreateWithoutDcrReportsInput>
  }

  export type ChemistTaskCreateWithoutDcrReportsInput = {
    id?: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    planner: TaskPlannerCreateNestedOneWithoutChemistTasksInput
    employee: EmployeeCreateNestedOneWithoutChemistTasksInput
    chemist: ChemistCreateNestedOneWithoutChemistTasksInput
    chemistInteractions?: ChemistInteractionCreateNestedManyWithoutChemistTaskInput
  }

  export type ChemistTaskUncheckedCreateWithoutDcrReportsInput = {
    id?: string
    plannerId: string
    employeeId: string
    chemistId: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    chemistInteractions?: ChemistInteractionUncheckedCreateNestedManyWithoutChemistTaskInput
  }

  export type ChemistTaskCreateOrConnectWithoutDcrReportsInput = {
    where: ChemistTaskWhereUniqueInput
    create: XOR<ChemistTaskCreateWithoutDcrReportsInput, ChemistTaskUncheckedCreateWithoutDcrReportsInput>
  }

  export type TourPlanTaskCreateWithoutDcrReportsInput = {
    id?: string
    location: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    planner: TaskPlannerCreateNestedOneWithoutTourPlanTasksInput
    employee: EmployeeCreateNestedOneWithoutTourPlanTasksInput
    tourPlan: TourPlanCreateNestedOneWithoutTourTasksInput
    tourPlanReports?: TourPlanReportCreateNestedManyWithoutTourTaskInput
  }

  export type TourPlanTaskUncheckedCreateWithoutDcrReportsInput = {
    id?: string
    plannerId: string
    employeeId: string
    tourPlanId: string
    location: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    tourPlanReports?: TourPlanReportUncheckedCreateNestedManyWithoutTourTaskInput
  }

  export type TourPlanTaskCreateOrConnectWithoutDcrReportsInput = {
    where: TourPlanTaskWhereUniqueInput
    create: XOR<TourPlanTaskCreateWithoutDcrReportsInput, TourPlanTaskUncheckedCreateWithoutDcrReportsInput>
  }

  export type EmployeeUpsertWithoutDcrReportsInput = {
    update: XOR<EmployeeUpdateWithoutDcrReportsInput, EmployeeUncheckedUpdateWithoutDcrReportsInput>
    create: XOR<EmployeeCreateWithoutDcrReportsInput, EmployeeUncheckedCreateWithoutDcrReportsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutDcrReportsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutDcrReportsInput, EmployeeUncheckedUpdateWithoutDcrReportsInput>
  }

  export type EmployeeUpdateWithoutDcrReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    reportingManager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutReportingManagerNestedInput
    team?: TeamUpdateOneWithoutTeamMembersNestedInput
    leadsTeam?: TeamUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutDcrReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    reportingManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    subordinates?: EmployeeUncheckedUpdateManyWithoutReportingManagerNestedInput
    leadsTeam?: TeamUncheckedUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUncheckedUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUncheckedUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUncheckedUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUncheckedUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type DoctorTaskUpsertWithoutDcrReportsInput = {
    update: XOR<DoctorTaskUpdateWithoutDcrReportsInput, DoctorTaskUncheckedUpdateWithoutDcrReportsInput>
    create: XOR<DoctorTaskCreateWithoutDcrReportsInput, DoctorTaskUncheckedCreateWithoutDcrReportsInput>
    where?: DoctorTaskWhereInput
  }

  export type DoctorTaskUpdateToOneWithWhereWithoutDcrReportsInput = {
    where?: DoctorTaskWhereInput
    data: XOR<DoctorTaskUpdateWithoutDcrReportsInput, DoctorTaskUncheckedUpdateWithoutDcrReportsInput>
  }

  export type DoctorTaskUpdateWithoutDcrReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    planner?: TaskPlannerUpdateOneRequiredWithoutDoctorTasksNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutDoctorTasksNestedInput
    doctor?: DoctorUpdateOneRequiredWithoutDoctorTaskNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutDoctorTaskNestedInput
  }

  export type DoctorTaskUncheckedUpdateWithoutDcrReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    plannerId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutDoctorTaskNestedInput
  }

  export type ChemistTaskUpsertWithoutDcrReportsInput = {
    update: XOR<ChemistTaskUpdateWithoutDcrReportsInput, ChemistTaskUncheckedUpdateWithoutDcrReportsInput>
    create: XOR<ChemistTaskCreateWithoutDcrReportsInput, ChemistTaskUncheckedCreateWithoutDcrReportsInput>
    where?: ChemistTaskWhereInput
  }

  export type ChemistTaskUpdateToOneWithWhereWithoutDcrReportsInput = {
    where?: ChemistTaskWhereInput
    data: XOR<ChemistTaskUpdateWithoutDcrReportsInput, ChemistTaskUncheckedUpdateWithoutDcrReportsInput>
  }

  export type ChemistTaskUpdateWithoutDcrReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    planner?: TaskPlannerUpdateOneRequiredWithoutChemistTasksNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutChemistTasksNestedInput
    chemist?: ChemistUpdateOneRequiredWithoutChemistTasksNestedInput
    chemistInteractions?: ChemistInteractionUpdateManyWithoutChemistTaskNestedInput
  }

  export type ChemistTaskUncheckedUpdateWithoutDcrReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    plannerId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    chemistId?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chemistInteractions?: ChemistInteractionUncheckedUpdateManyWithoutChemistTaskNestedInput
  }

  export type TourPlanTaskUpsertWithoutDcrReportsInput = {
    update: XOR<TourPlanTaskUpdateWithoutDcrReportsInput, TourPlanTaskUncheckedUpdateWithoutDcrReportsInput>
    create: XOR<TourPlanTaskCreateWithoutDcrReportsInput, TourPlanTaskUncheckedCreateWithoutDcrReportsInput>
    where?: TourPlanTaskWhereInput
  }

  export type TourPlanTaskUpdateToOneWithWhereWithoutDcrReportsInput = {
    where?: TourPlanTaskWhereInput
    data: XOR<TourPlanTaskUpdateWithoutDcrReportsInput, TourPlanTaskUncheckedUpdateWithoutDcrReportsInput>
  }

  export type TourPlanTaskUpdateWithoutDcrReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    planner?: TaskPlannerUpdateOneRequiredWithoutTourPlanTasksNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutTourPlanTasksNestedInput
    tourPlan?: TourPlanUpdateOneRequiredWithoutTourTasksNestedInput
    tourPlanReports?: TourPlanReportUpdateManyWithoutTourTaskNestedInput
  }

  export type TourPlanTaskUncheckedUpdateWithoutDcrReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    plannerId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    tourPlanId?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tourPlanReports?: TourPlanReportUncheckedUpdateManyWithoutTourTaskNestedInput
  }

  export type EmployeeCreateWithoutRcpaReportsInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    reportingManager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutReportingManagerInput
    team?: TeamCreateNestedOneWithoutTeamMembersInput
    leadsTeam?: TeamCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutRcpaReportsInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    reportingManagerId?: string | null
    teamId?: string | null
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutReportingManagerInput
    leadsTeam?: TeamUncheckedCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryUncheckedCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordUncheckedCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteUncheckedCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteUncheckedCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderUncheckedCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorUncheckedCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugUncheckedCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistUncheckedCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftUncheckedCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionUncheckedCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerUncheckedCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskUncheckedCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutRcpaReportsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutRcpaReportsInput, EmployeeUncheckedCreateWithoutRcpaReportsInput>
  }

  export type ChemistCreateWithoutRcpaReportsInput = {
    id?: string
    organizationId: string
    name: string
    type: $Enums.ChemistType
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    profilePictureUrl?: string | null
    visitingHours?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    chemistChain?: ChemistChainCreateNestedOneWithoutChemistsInput
    territory: TerritoryCreateNestedOneWithoutChemistsInput
    createdBy: EmployeeCreateNestedOneWithoutChemistsCreatedInput
    notes?: ChemistNoteCreateNestedManyWithoutChemistInput
    interactions?: ChemistInteractionCreateNestedManyWithoutChemistInput
    doctorRelations?: DoctorChemistRelationCreateNestedManyWithoutChemistInput
    orders?: OrderCreateNestedManyWithoutChemistInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutChemistInput
  }

  export type ChemistUncheckedCreateWithoutRcpaReportsInput = {
    id?: string
    organizationId: string
    chemistChainId?: string | null
    territoryId: string
    name: string
    type: $Enums.ChemistType
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    profilePictureUrl?: string | null
    visitingHours?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isActive?: boolean
    notes?: ChemistNoteUncheckedCreateNestedManyWithoutChemistInput
    interactions?: ChemistInteractionUncheckedCreateNestedManyWithoutChemistInput
    doctorRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutChemistInput
    orders?: OrderUncheckedCreateNestedManyWithoutChemistInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutChemistInput
  }

  export type ChemistCreateOrConnectWithoutRcpaReportsInput = {
    where: ChemistWhereUniqueInput
    create: XOR<ChemistCreateWithoutRcpaReportsInput, ChemistUncheckedCreateWithoutRcpaReportsInput>
  }

  export type RcpaDrugDataCreateWithoutRcpaReportInput = {
    id?: string
    competitorDrugName?: string | null
    ownQuantity: number
    competitorQuantity: number
    createdAt?: Date | string
    drug?: DrugCreateNestedOneWithoutRcpaDataInput
  }

  export type RcpaDrugDataUncheckedCreateWithoutRcpaReportInput = {
    id?: string
    drugId?: string | null
    competitorDrugName?: string | null
    ownQuantity: number
    competitorQuantity: number
    createdAt?: Date | string
  }

  export type RcpaDrugDataCreateOrConnectWithoutRcpaReportInput = {
    where: RcpaDrugDataWhereUniqueInput
    create: XOR<RcpaDrugDataCreateWithoutRcpaReportInput, RcpaDrugDataUncheckedCreateWithoutRcpaReportInput>
  }

  export type RcpaDrugDataCreateManyRcpaReportInputEnvelope = {
    data: RcpaDrugDataCreateManyRcpaReportInput | RcpaDrugDataCreateManyRcpaReportInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeUpsertWithoutRcpaReportsInput = {
    update: XOR<EmployeeUpdateWithoutRcpaReportsInput, EmployeeUncheckedUpdateWithoutRcpaReportsInput>
    create: XOR<EmployeeCreateWithoutRcpaReportsInput, EmployeeUncheckedCreateWithoutRcpaReportsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutRcpaReportsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutRcpaReportsInput, EmployeeUncheckedUpdateWithoutRcpaReportsInput>
  }

  export type EmployeeUpdateWithoutRcpaReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    reportingManager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutReportingManagerNestedInput
    team?: TeamUpdateOneWithoutTeamMembersNestedInput
    leadsTeam?: TeamUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutRcpaReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    reportingManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    subordinates?: EmployeeUncheckedUpdateManyWithoutReportingManagerNestedInput
    leadsTeam?: TeamUncheckedUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUncheckedUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUncheckedUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUncheckedUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUncheckedUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type ChemistUpsertWithoutRcpaReportsInput = {
    update: XOR<ChemistUpdateWithoutRcpaReportsInput, ChemistUncheckedUpdateWithoutRcpaReportsInput>
    create: XOR<ChemistCreateWithoutRcpaReportsInput, ChemistUncheckedCreateWithoutRcpaReportsInput>
    where?: ChemistWhereInput
  }

  export type ChemistUpdateToOneWithWhereWithoutRcpaReportsInput = {
    where?: ChemistWhereInput
    data: XOR<ChemistUpdateWithoutRcpaReportsInput, ChemistUncheckedUpdateWithoutRcpaReportsInput>
  }

  export type ChemistUpdateWithoutRcpaReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChemistTypeFieldUpdateOperationsInput | $Enums.ChemistType
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    visitingHours?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    chemistChain?: ChemistChainUpdateOneWithoutChemistsNestedInput
    territory?: TerritoryUpdateOneRequiredWithoutChemistsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutChemistsCreatedNestedInput
    notes?: ChemistNoteUpdateManyWithoutChemistNestedInput
    interactions?: ChemistInteractionUpdateManyWithoutChemistNestedInput
    doctorRelations?: DoctorChemistRelationUpdateManyWithoutChemistNestedInput
    orders?: OrderUpdateManyWithoutChemistNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutChemistNestedInput
  }

  export type ChemistUncheckedUpdateWithoutRcpaReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    chemistChainId?: NullableStringFieldUpdateOperationsInput | string | null
    territoryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChemistTypeFieldUpdateOperationsInput | $Enums.ChemistType
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    visitingHours?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: ChemistNoteUncheckedUpdateManyWithoutChemistNestedInput
    interactions?: ChemistInteractionUncheckedUpdateManyWithoutChemistNestedInput
    doctorRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutChemistNestedInput
    orders?: OrderUncheckedUpdateManyWithoutChemistNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutChemistNestedInput
  }

  export type RcpaDrugDataUpsertWithWhereUniqueWithoutRcpaReportInput = {
    where: RcpaDrugDataWhereUniqueInput
    update: XOR<RcpaDrugDataUpdateWithoutRcpaReportInput, RcpaDrugDataUncheckedUpdateWithoutRcpaReportInput>
    create: XOR<RcpaDrugDataCreateWithoutRcpaReportInput, RcpaDrugDataUncheckedCreateWithoutRcpaReportInput>
  }

  export type RcpaDrugDataUpdateWithWhereUniqueWithoutRcpaReportInput = {
    where: RcpaDrugDataWhereUniqueInput
    data: XOR<RcpaDrugDataUpdateWithoutRcpaReportInput, RcpaDrugDataUncheckedUpdateWithoutRcpaReportInput>
  }

  export type RcpaDrugDataUpdateManyWithWhereWithoutRcpaReportInput = {
    where: RcpaDrugDataScalarWhereInput
    data: XOR<RcpaDrugDataUpdateManyMutationInput, RcpaDrugDataUncheckedUpdateManyWithoutRcpaReportInput>
  }

  export type RcpaReportCreateWithoutDrugDataInput = {
    id?: string
    organizationId: string
    remarks?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutRcpaReportsInput
    chemist: ChemistCreateNestedOneWithoutRcpaReportsInput
  }

  export type RcpaReportUncheckedCreateWithoutDrugDataInput = {
    id?: string
    organizationId: string
    employeeId: string
    chemistId: string
    remarks?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RcpaReportCreateOrConnectWithoutDrugDataInput = {
    where: RcpaReportWhereUniqueInput
    create: XOR<RcpaReportCreateWithoutDrugDataInput, RcpaReportUncheckedCreateWithoutDrugDataInput>
  }

  export type DrugCreateWithoutRcpaDataInput = {
    id?: string
    organizationId: string
    name: string
    composition?: string | null
    manufacturer?: string | null
    indications?: string | null
    sideEffects?: string | null
    safetyAdvice?: string | null
    dosageForms?: NullableJsonNullValueInput | InputJsonValue
    price?: Decimal | DecimalJsLike | number | string | null
    schedule?: string | null
    regulatoryApprovals?: string | null
    category?: string | null
    isAvailable?: boolean
    images?: NullableJsonNullValueInput | InputJsonValue
    marketingMaterials?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    createdBy: EmployeeCreateNestedOneWithoutDrugsCreatedInput
    orderItems?: OrderItemCreateNestedManyWithoutDrugInput
    UserDrugInventory?: UserDrugInventoryCreateNestedManyWithoutDrugInput
    DoctorDistributionDrugItem?: DoctorDistributionDrugItemCreateNestedManyWithoutDrugInput
  }

  export type DrugUncheckedCreateWithoutRcpaDataInput = {
    id?: string
    organizationId: string
    name: string
    composition?: string | null
    manufacturer?: string | null
    indications?: string | null
    sideEffects?: string | null
    safetyAdvice?: string | null
    dosageForms?: NullableJsonNullValueInput | InputJsonValue
    price?: Decimal | DecimalJsLike | number | string | null
    schedule?: string | null
    regulatoryApprovals?: string | null
    category?: string | null
    isAvailable?: boolean
    images?: NullableJsonNullValueInput | InputJsonValue
    marketingMaterials?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isActive?: boolean
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutDrugInput
    UserDrugInventory?: UserDrugInventoryUncheckedCreateNestedManyWithoutDrugInput
    DoctorDistributionDrugItem?: DoctorDistributionDrugItemUncheckedCreateNestedManyWithoutDrugInput
  }

  export type DrugCreateOrConnectWithoutRcpaDataInput = {
    where: DrugWhereUniqueInput
    create: XOR<DrugCreateWithoutRcpaDataInput, DrugUncheckedCreateWithoutRcpaDataInput>
  }

  export type RcpaReportUpsertWithoutDrugDataInput = {
    update: XOR<RcpaReportUpdateWithoutDrugDataInput, RcpaReportUncheckedUpdateWithoutDrugDataInput>
    create: XOR<RcpaReportCreateWithoutDrugDataInput, RcpaReportUncheckedCreateWithoutDrugDataInput>
    where?: RcpaReportWhereInput
  }

  export type RcpaReportUpdateToOneWithWhereWithoutDrugDataInput = {
    where?: RcpaReportWhereInput
    data: XOR<RcpaReportUpdateWithoutDrugDataInput, RcpaReportUncheckedUpdateWithoutDrugDataInput>
  }

  export type RcpaReportUpdateWithoutDrugDataInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutRcpaReportsNestedInput
    chemist?: ChemistUpdateOneRequiredWithoutRcpaReportsNestedInput
  }

  export type RcpaReportUncheckedUpdateWithoutDrugDataInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    chemistId?: StringFieldUpdateOperationsInput | string
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DrugUpsertWithoutRcpaDataInput = {
    update: XOR<DrugUpdateWithoutRcpaDataInput, DrugUncheckedUpdateWithoutRcpaDataInput>
    create: XOR<DrugCreateWithoutRcpaDataInput, DrugUncheckedCreateWithoutRcpaDataInput>
    where?: DrugWhereInput
  }

  export type DrugUpdateToOneWithWhereWithoutRcpaDataInput = {
    where?: DrugWhereInput
    data: XOR<DrugUpdateWithoutRcpaDataInput, DrugUncheckedUpdateWithoutRcpaDataInput>
  }

  export type DrugUpdateWithoutRcpaDataInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    indications?: NullableStringFieldUpdateOperationsInput | string | null
    sideEffects?: NullableStringFieldUpdateOperationsInput | string | null
    safetyAdvice?: NullableStringFieldUpdateOperationsInput | string | null
    dosageForms?: NullableJsonNullValueInput | InputJsonValue
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryApprovals?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    images?: NullableJsonNullValueInput | InputJsonValue
    marketingMaterials?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: EmployeeUpdateOneRequiredWithoutDrugsCreatedNestedInput
    orderItems?: OrderItemUpdateManyWithoutDrugNestedInput
    UserDrugInventory?: UserDrugInventoryUpdateManyWithoutDrugNestedInput
    DoctorDistributionDrugItem?: DoctorDistributionDrugItemUpdateManyWithoutDrugNestedInput
  }

  export type DrugUncheckedUpdateWithoutRcpaDataInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    indications?: NullableStringFieldUpdateOperationsInput | string | null
    sideEffects?: NullableStringFieldUpdateOperationsInput | string | null
    safetyAdvice?: NullableStringFieldUpdateOperationsInput | string | null
    dosageForms?: NullableJsonNullValueInput | InputJsonValue
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryApprovals?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    images?: NullableJsonNullValueInput | InputJsonValue
    marketingMaterials?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    orderItems?: OrderItemUncheckedUpdateManyWithoutDrugNestedInput
    UserDrugInventory?: UserDrugInventoryUncheckedUpdateManyWithoutDrugNestedInput
    DoctorDistributionDrugItem?: DoctorDistributionDrugItemUncheckedUpdateManyWithoutDrugNestedInput
  }

  export type EmployeeCreateWithoutCheckInsInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    reportingManager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutReportingManagerInput
    team?: TeamCreateNestedOneWithoutTeamMembersInput
    leadsTeam?: TeamCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutCheckInsInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    reportingManagerId?: string | null
    teamId?: string | null
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutReportingManagerInput
    leadsTeam?: TeamUncheckedCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryUncheckedCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordUncheckedCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteUncheckedCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteUncheckedCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderUncheckedCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorUncheckedCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugUncheckedCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistUncheckedCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftUncheckedCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionUncheckedCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerUncheckedCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskUncheckedCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutCheckInsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutCheckInsInput, EmployeeUncheckedCreateWithoutCheckInsInput>
  }

  export type EmployeeUpsertWithoutCheckInsInput = {
    update: XOR<EmployeeUpdateWithoutCheckInsInput, EmployeeUncheckedUpdateWithoutCheckInsInput>
    create: XOR<EmployeeCreateWithoutCheckInsInput, EmployeeUncheckedCreateWithoutCheckInsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutCheckInsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutCheckInsInput, EmployeeUncheckedUpdateWithoutCheckInsInput>
  }

  export type EmployeeUpdateWithoutCheckInsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    reportingManager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutReportingManagerNestedInput
    team?: TeamUpdateOneWithoutTeamMembersNestedInput
    leadsTeam?: TeamUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutCheckInsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    reportingManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    subordinates?: EmployeeUncheckedUpdateManyWithoutReportingManagerNestedInput
    leadsTeam?: TeamUncheckedUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUncheckedUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUncheckedUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUncheckedUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUncheckedUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeCreateWithoutTaskPlansInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    reportingManager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutReportingManagerInput
    team?: TeamCreateNestedOneWithoutTeamMembersInput
    leadsTeam?: TeamCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutTaskPlansInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    reportingManagerId?: string | null
    teamId?: string | null
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutReportingManagerInput
    leadsTeam?: TeamUncheckedCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryUncheckedCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordUncheckedCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteUncheckedCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteUncheckedCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderUncheckedCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorUncheckedCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugUncheckedCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistUncheckedCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftUncheckedCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionUncheckedCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskUncheckedCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutTaskPlansInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutTaskPlansInput, EmployeeUncheckedCreateWithoutTaskPlansInput>
  }

  export type DoctorTaskCreateWithoutPlannerInput = {
    id?: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutDoctorTasksInput
    doctor: DoctorCreateNestedOneWithoutDoctorTaskInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutDoctorTaskInput
    dcrReports?: DcrReportCreateNestedManyWithoutDoctorTaskInput
  }

  export type DoctorTaskUncheckedCreateWithoutPlannerInput = {
    id?: string
    employeeId: string
    doctorId: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutDoctorTaskInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutDoctorTaskInput
  }

  export type DoctorTaskCreateOrConnectWithoutPlannerInput = {
    where: DoctorTaskWhereUniqueInput
    create: XOR<DoctorTaskCreateWithoutPlannerInput, DoctorTaskUncheckedCreateWithoutPlannerInput>
  }

  export type DoctorTaskCreateManyPlannerInputEnvelope = {
    data: DoctorTaskCreateManyPlannerInput | DoctorTaskCreateManyPlannerInput[]
    skipDuplicates?: boolean
  }

  export type ChemistTaskCreateWithoutPlannerInput = {
    id?: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutChemistTasksInput
    chemist: ChemistCreateNestedOneWithoutChemistTasksInput
    chemistInteractions?: ChemistInteractionCreateNestedManyWithoutChemistTaskInput
    dcrReports?: DcrReportCreateNestedManyWithoutChemistTaskInput
  }

  export type ChemistTaskUncheckedCreateWithoutPlannerInput = {
    id?: string
    employeeId: string
    chemistId: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    chemistInteractions?: ChemistInteractionUncheckedCreateNestedManyWithoutChemistTaskInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutChemistTaskInput
  }

  export type ChemistTaskCreateOrConnectWithoutPlannerInput = {
    where: ChemistTaskWhereUniqueInput
    create: XOR<ChemistTaskCreateWithoutPlannerInput, ChemistTaskUncheckedCreateWithoutPlannerInput>
  }

  export type ChemistTaskCreateManyPlannerInputEnvelope = {
    data: ChemistTaskCreateManyPlannerInput | ChemistTaskCreateManyPlannerInput[]
    skipDuplicates?: boolean
  }

  export type TourPlanTaskCreateWithoutPlannerInput = {
    id?: string
    location: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutTourPlanTasksInput
    tourPlan: TourPlanCreateNestedOneWithoutTourTasksInput
    tourPlanReports?: TourPlanReportCreateNestedManyWithoutTourTaskInput
    dcrReports?: DcrReportCreateNestedManyWithoutTourPlanTaskInput
  }

  export type TourPlanTaskUncheckedCreateWithoutPlannerInput = {
    id?: string
    employeeId: string
    tourPlanId: string
    location: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    tourPlanReports?: TourPlanReportUncheckedCreateNestedManyWithoutTourTaskInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutTourPlanTaskInput
  }

  export type TourPlanTaskCreateOrConnectWithoutPlannerInput = {
    where: TourPlanTaskWhereUniqueInput
    create: XOR<TourPlanTaskCreateWithoutPlannerInput, TourPlanTaskUncheckedCreateWithoutPlannerInput>
  }

  export type TourPlanTaskCreateManyPlannerInputEnvelope = {
    data: TourPlanTaskCreateManyPlannerInput | TourPlanTaskCreateManyPlannerInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeUpsertWithoutTaskPlansInput = {
    update: XOR<EmployeeUpdateWithoutTaskPlansInput, EmployeeUncheckedUpdateWithoutTaskPlansInput>
    create: XOR<EmployeeCreateWithoutTaskPlansInput, EmployeeUncheckedCreateWithoutTaskPlansInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutTaskPlansInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutTaskPlansInput, EmployeeUncheckedUpdateWithoutTaskPlansInput>
  }

  export type EmployeeUpdateWithoutTaskPlansInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    reportingManager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutReportingManagerNestedInput
    team?: TeamUpdateOneWithoutTeamMembersNestedInput
    leadsTeam?: TeamUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutTaskPlansInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    reportingManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    subordinates?: EmployeeUncheckedUpdateManyWithoutReportingManagerNestedInput
    leadsTeam?: TeamUncheckedUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUncheckedUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUncheckedUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUncheckedUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type DoctorTaskUpsertWithWhereUniqueWithoutPlannerInput = {
    where: DoctorTaskWhereUniqueInput
    update: XOR<DoctorTaskUpdateWithoutPlannerInput, DoctorTaskUncheckedUpdateWithoutPlannerInput>
    create: XOR<DoctorTaskCreateWithoutPlannerInput, DoctorTaskUncheckedCreateWithoutPlannerInput>
  }

  export type DoctorTaskUpdateWithWhereUniqueWithoutPlannerInput = {
    where: DoctorTaskWhereUniqueInput
    data: XOR<DoctorTaskUpdateWithoutPlannerInput, DoctorTaskUncheckedUpdateWithoutPlannerInput>
  }

  export type DoctorTaskUpdateManyWithWhereWithoutPlannerInput = {
    where: DoctorTaskScalarWhereInput
    data: XOR<DoctorTaskUpdateManyMutationInput, DoctorTaskUncheckedUpdateManyWithoutPlannerInput>
  }

  export type ChemistTaskUpsertWithWhereUniqueWithoutPlannerInput = {
    where: ChemistTaskWhereUniqueInput
    update: XOR<ChemistTaskUpdateWithoutPlannerInput, ChemistTaskUncheckedUpdateWithoutPlannerInput>
    create: XOR<ChemistTaskCreateWithoutPlannerInput, ChemistTaskUncheckedCreateWithoutPlannerInput>
  }

  export type ChemistTaskUpdateWithWhereUniqueWithoutPlannerInput = {
    where: ChemistTaskWhereUniqueInput
    data: XOR<ChemistTaskUpdateWithoutPlannerInput, ChemistTaskUncheckedUpdateWithoutPlannerInput>
  }

  export type ChemistTaskUpdateManyWithWhereWithoutPlannerInput = {
    where: ChemistTaskScalarWhereInput
    data: XOR<ChemistTaskUpdateManyMutationInput, ChemistTaskUncheckedUpdateManyWithoutPlannerInput>
  }

  export type TourPlanTaskUpsertWithWhereUniqueWithoutPlannerInput = {
    where: TourPlanTaskWhereUniqueInput
    update: XOR<TourPlanTaskUpdateWithoutPlannerInput, TourPlanTaskUncheckedUpdateWithoutPlannerInput>
    create: XOR<TourPlanTaskCreateWithoutPlannerInput, TourPlanTaskUncheckedCreateWithoutPlannerInput>
  }

  export type TourPlanTaskUpdateWithWhereUniqueWithoutPlannerInput = {
    where: TourPlanTaskWhereUniqueInput
    data: XOR<TourPlanTaskUpdateWithoutPlannerInput, TourPlanTaskUncheckedUpdateWithoutPlannerInput>
  }

  export type TourPlanTaskUpdateManyWithWhereWithoutPlannerInput = {
    where: TourPlanTaskScalarWhereInput
    data: XOR<TourPlanTaskUpdateManyMutationInput, TourPlanTaskUncheckedUpdateManyWithoutPlannerInput>
  }

  export type TaskPlannerCreateWithoutDoctorTasksInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.TaskPlannerStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutTaskPlansInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutPlannerInput
    tourPlanTasks?: TourPlanTaskCreateNestedManyWithoutPlannerInput
  }

  export type TaskPlannerUncheckedCreateWithoutDoctorTasksInput = {
    id?: string
    employeeId: string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.TaskPlannerStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutPlannerInput
    tourPlanTasks?: TourPlanTaskUncheckedCreateNestedManyWithoutPlannerInput
  }

  export type TaskPlannerCreateOrConnectWithoutDoctorTasksInput = {
    where: TaskPlannerWhereUniqueInput
    create: XOR<TaskPlannerCreateWithoutDoctorTasksInput, TaskPlannerUncheckedCreateWithoutDoctorTasksInput>
  }

  export type EmployeeCreateWithoutDoctorTasksInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    reportingManager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutReportingManagerInput
    team?: TeamCreateNestedOneWithoutTeamMembersInput
    leadsTeam?: TeamCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutDoctorTasksInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    reportingManagerId?: string | null
    teamId?: string | null
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutReportingManagerInput
    leadsTeam?: TeamUncheckedCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryUncheckedCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordUncheckedCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteUncheckedCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteUncheckedCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderUncheckedCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorUncheckedCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugUncheckedCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistUncheckedCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftUncheckedCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionUncheckedCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerUncheckedCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutDoctorTasksInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutDoctorTasksInput, EmployeeUncheckedCreateWithoutDoctorTasksInput>
  }

  export type DoctorCreateWithoutDoctorTaskInput = {
    id?: string
    organizationId: string
    name: string
    designation?: string | null
    specialization?: string | null
    email?: string | null
    phone?: string | null
    description?: string | null
    profilePictureUrl?: string | null
    qualification?: string | null
    experienceYears?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    createdBy: EmployeeCreateNestedOneWithoutDoctorsCreatedInput
    hospitalAssociations?: DoctorHospitalAssociationCreateNestedManyWithoutDoctorInput
    consultationSchedules?: DoctorConsultationScheduleCreateNestedManyWithoutDoctorInput
    interactions?: DoctorInteractionCreateNestedManyWithoutDoctorInput
    notes?: DoctorNoteCreateNestedManyWithoutDoctorInput
    chemistRelations?: DoctorChemistRelationCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutDoctorTaskInput = {
    id?: string
    organizationId: string
    name: string
    designation?: string | null
    specialization?: string | null
    email?: string | null
    phone?: string | null
    description?: string | null
    profilePictureUrl?: string | null
    qualification?: string | null
    experienceYears?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isActive?: boolean
    hospitalAssociations?: DoctorHospitalAssociationUncheckedCreateNestedManyWithoutDoctorInput
    consultationSchedules?: DoctorConsultationScheduleUncheckedCreateNestedManyWithoutDoctorInput
    interactions?: DoctorInteractionUncheckedCreateNestedManyWithoutDoctorInput
    notes?: DoctorNoteUncheckedCreateNestedManyWithoutDoctorInput
    chemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutDoctorTaskInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutDoctorTaskInput, DoctorUncheckedCreateWithoutDoctorTaskInput>
  }

  export type DoctorInteractionCreateWithoutDoctorTaskInput = {
    id?: string
    interactionType: $Enums.InteractionType
    startTime: Date | string
    endTime?: Date | string | null
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    rating?: number | null
    createdAt?: Date | string
    doctor: DoctorCreateNestedOneWithoutInteractionsInput
    employee: EmployeeCreateNestedOneWithoutDoctorInteractionsInput
    hospital?: HospitalCreateNestedOneWithoutDoctorInteractionsInput
    DoctorDistribution?: DoctorDistributionCreateNestedManyWithoutDoctorInteractionInput
  }

  export type DoctorInteractionUncheckedCreateWithoutDoctorTaskInput = {
    id?: string
    doctorId: string
    employeeId: string
    hospitalId?: string | null
    interactionType: $Enums.InteractionType
    startTime: Date | string
    endTime?: Date | string | null
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    rating?: number | null
    createdAt?: Date | string
    DoctorDistribution?: DoctorDistributionUncheckedCreateNestedManyWithoutDoctorInteractionInput
  }

  export type DoctorInteractionCreateOrConnectWithoutDoctorTaskInput = {
    where: DoctorInteractionWhereUniqueInput
    create: XOR<DoctorInteractionCreateWithoutDoctorTaskInput, DoctorInteractionUncheckedCreateWithoutDoctorTaskInput>
  }

  export type DoctorInteractionCreateManyDoctorTaskInputEnvelope = {
    data: DoctorInteractionCreateManyDoctorTaskInput | DoctorInteractionCreateManyDoctorTaskInput[]
    skipDuplicates?: boolean
  }

  export type DcrReportCreateWithoutDoctorTaskInput = {
    id?: string
    organizationId: string
    taskType?: $Enums.TaskTypeReference | null
    reportDate: Date | string
    productsDiscussed?: string | null
    comments?: string | null
    isDraft?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutDcrReportsInput
    chemistTask?: ChemistTaskCreateNestedOneWithoutDcrReportsInput
    tourPlanTask?: TourPlanTaskCreateNestedOneWithoutDcrReportsInput
  }

  export type DcrReportUncheckedCreateWithoutDoctorTaskInput = {
    id?: string
    organizationId: string
    employeeId: string
    taskType?: $Enums.TaskTypeReference | null
    reportDate: Date | string
    productsDiscussed?: string | null
    comments?: string | null
    isDraft?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DcrReportCreateOrConnectWithoutDoctorTaskInput = {
    where: DcrReportWhereUniqueInput
    create: XOR<DcrReportCreateWithoutDoctorTaskInput, DcrReportUncheckedCreateWithoutDoctorTaskInput>
  }

  export type DcrReportCreateManyDoctorTaskInputEnvelope = {
    data: DcrReportCreateManyDoctorTaskInput | DcrReportCreateManyDoctorTaskInput[]
    skipDuplicates?: boolean
  }

  export type TaskPlannerUpsertWithoutDoctorTasksInput = {
    update: XOR<TaskPlannerUpdateWithoutDoctorTasksInput, TaskPlannerUncheckedUpdateWithoutDoctorTasksInput>
    create: XOR<TaskPlannerCreateWithoutDoctorTasksInput, TaskPlannerUncheckedCreateWithoutDoctorTasksInput>
    where?: TaskPlannerWhereInput
  }

  export type TaskPlannerUpdateToOneWithWhereWithoutDoctorTasksInput = {
    where?: TaskPlannerWhereInput
    data: XOR<TaskPlannerUpdateWithoutDoctorTasksInput, TaskPlannerUncheckedUpdateWithoutDoctorTasksInput>
  }

  export type TaskPlannerUpdateWithoutDoctorTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTaskPlannerStatusFieldUpdateOperationsInput | $Enums.TaskPlannerStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutTaskPlansNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutPlannerNestedInput
    tourPlanTasks?: TourPlanTaskUpdateManyWithoutPlannerNestedInput
  }

  export type TaskPlannerUncheckedUpdateWithoutDoctorTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTaskPlannerStatusFieldUpdateOperationsInput | $Enums.TaskPlannerStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutPlannerNestedInput
    tourPlanTasks?: TourPlanTaskUncheckedUpdateManyWithoutPlannerNestedInput
  }

  export type EmployeeUpsertWithoutDoctorTasksInput = {
    update: XOR<EmployeeUpdateWithoutDoctorTasksInput, EmployeeUncheckedUpdateWithoutDoctorTasksInput>
    create: XOR<EmployeeCreateWithoutDoctorTasksInput, EmployeeUncheckedCreateWithoutDoctorTasksInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutDoctorTasksInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutDoctorTasksInput, EmployeeUncheckedUpdateWithoutDoctorTasksInput>
  }

  export type EmployeeUpdateWithoutDoctorTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    reportingManager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutReportingManagerNestedInput
    team?: TeamUpdateOneWithoutTeamMembersNestedInput
    leadsTeam?: TeamUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutDoctorTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    reportingManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    subordinates?: EmployeeUncheckedUpdateManyWithoutReportingManagerNestedInput
    leadsTeam?: TeamUncheckedUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUncheckedUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUncheckedUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUncheckedUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUncheckedUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type DoctorUpsertWithoutDoctorTaskInput = {
    update: XOR<DoctorUpdateWithoutDoctorTaskInput, DoctorUncheckedUpdateWithoutDoctorTaskInput>
    create: XOR<DoctorCreateWithoutDoctorTaskInput, DoctorUncheckedCreateWithoutDoctorTaskInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutDoctorTaskInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutDoctorTaskInput, DoctorUncheckedUpdateWithoutDoctorTaskInput>
  }

  export type DoctorUpdateWithoutDoctorTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qualification?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: EmployeeUpdateOneRequiredWithoutDoctorsCreatedNestedInput
    hospitalAssociations?: DoctorHospitalAssociationUpdateManyWithoutDoctorNestedInput
    consultationSchedules?: DoctorConsultationScheduleUpdateManyWithoutDoctorNestedInput
    interactions?: DoctorInteractionUpdateManyWithoutDoctorNestedInput
    notes?: DoctorNoteUpdateManyWithoutDoctorNestedInput
    chemistRelations?: DoctorChemistRelationUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutDoctorTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qualification?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hospitalAssociations?: DoctorHospitalAssociationUncheckedUpdateManyWithoutDoctorNestedInput
    consultationSchedules?: DoctorConsultationScheduleUncheckedUpdateManyWithoutDoctorNestedInput
    interactions?: DoctorInteractionUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: DoctorNoteUncheckedUpdateManyWithoutDoctorNestedInput
    chemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorInteractionUpsertWithWhereUniqueWithoutDoctorTaskInput = {
    where: DoctorInteractionWhereUniqueInput
    update: XOR<DoctorInteractionUpdateWithoutDoctorTaskInput, DoctorInteractionUncheckedUpdateWithoutDoctorTaskInput>
    create: XOR<DoctorInteractionCreateWithoutDoctorTaskInput, DoctorInteractionUncheckedCreateWithoutDoctorTaskInput>
  }

  export type DoctorInteractionUpdateWithWhereUniqueWithoutDoctorTaskInput = {
    where: DoctorInteractionWhereUniqueInput
    data: XOR<DoctorInteractionUpdateWithoutDoctorTaskInput, DoctorInteractionUncheckedUpdateWithoutDoctorTaskInput>
  }

  export type DoctorInteractionUpdateManyWithWhereWithoutDoctorTaskInput = {
    where: DoctorInteractionScalarWhereInput
    data: XOR<DoctorInteractionUpdateManyMutationInput, DoctorInteractionUncheckedUpdateManyWithoutDoctorTaskInput>
  }

  export type DcrReportUpsertWithWhereUniqueWithoutDoctorTaskInput = {
    where: DcrReportWhereUniqueInput
    update: XOR<DcrReportUpdateWithoutDoctorTaskInput, DcrReportUncheckedUpdateWithoutDoctorTaskInput>
    create: XOR<DcrReportCreateWithoutDoctorTaskInput, DcrReportUncheckedCreateWithoutDoctorTaskInput>
  }

  export type DcrReportUpdateWithWhereUniqueWithoutDoctorTaskInput = {
    where: DcrReportWhereUniqueInput
    data: XOR<DcrReportUpdateWithoutDoctorTaskInput, DcrReportUncheckedUpdateWithoutDoctorTaskInput>
  }

  export type DcrReportUpdateManyWithWhereWithoutDoctorTaskInput = {
    where: DcrReportScalarWhereInput
    data: XOR<DcrReportUpdateManyMutationInput, DcrReportUncheckedUpdateManyWithoutDoctorTaskInput>
  }

  export type TaskPlannerCreateWithoutChemistTasksInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.TaskPlannerStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutTaskPlansInput
    doctorTasks?: DoctorTaskCreateNestedManyWithoutPlannerInput
    tourPlanTasks?: TourPlanTaskCreateNestedManyWithoutPlannerInput
  }

  export type TaskPlannerUncheckedCreateWithoutChemistTasksInput = {
    id?: string
    employeeId: string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.TaskPlannerStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorTasks?: DoctorTaskUncheckedCreateNestedManyWithoutPlannerInput
    tourPlanTasks?: TourPlanTaskUncheckedCreateNestedManyWithoutPlannerInput
  }

  export type TaskPlannerCreateOrConnectWithoutChemistTasksInput = {
    where: TaskPlannerWhereUniqueInput
    create: XOR<TaskPlannerCreateWithoutChemistTasksInput, TaskPlannerUncheckedCreateWithoutChemistTasksInput>
  }

  export type EmployeeCreateWithoutChemistTasksInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    reportingManager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutReportingManagerInput
    team?: TeamCreateNestedOneWithoutTeamMembersInput
    leadsTeam?: TeamCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutChemistTasksInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    reportingManagerId?: string | null
    teamId?: string | null
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutReportingManagerInput
    leadsTeam?: TeamUncheckedCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryUncheckedCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordUncheckedCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteUncheckedCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteUncheckedCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderUncheckedCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorUncheckedCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugUncheckedCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistUncheckedCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftUncheckedCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionUncheckedCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerUncheckedCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskUncheckedCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutChemistTasksInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutChemistTasksInput, EmployeeUncheckedCreateWithoutChemistTasksInput>
  }

  export type ChemistCreateWithoutChemistTasksInput = {
    id?: string
    organizationId: string
    name: string
    type: $Enums.ChemistType
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    profilePictureUrl?: string | null
    visitingHours?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    chemistChain?: ChemistChainCreateNestedOneWithoutChemistsInput
    territory: TerritoryCreateNestedOneWithoutChemistsInput
    createdBy: EmployeeCreateNestedOneWithoutChemistsCreatedInput
    notes?: ChemistNoteCreateNestedManyWithoutChemistInput
    interactions?: ChemistInteractionCreateNestedManyWithoutChemistInput
    doctorRelations?: DoctorChemistRelationCreateNestedManyWithoutChemistInput
    orders?: OrderCreateNestedManyWithoutChemistInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutChemistInput
  }

  export type ChemistUncheckedCreateWithoutChemistTasksInput = {
    id?: string
    organizationId: string
    chemistChainId?: string | null
    territoryId: string
    name: string
    type: $Enums.ChemistType
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    profilePictureUrl?: string | null
    visitingHours?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isActive?: boolean
    notes?: ChemistNoteUncheckedCreateNestedManyWithoutChemistInput
    interactions?: ChemistInteractionUncheckedCreateNestedManyWithoutChemistInput
    doctorRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutChemistInput
    orders?: OrderUncheckedCreateNestedManyWithoutChemistInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutChemistInput
  }

  export type ChemistCreateOrConnectWithoutChemistTasksInput = {
    where: ChemistWhereUniqueInput
    create: XOR<ChemistCreateWithoutChemistTasksInput, ChemistUncheckedCreateWithoutChemistTasksInput>
  }

  export type ChemistInteractionCreateWithoutChemistTaskInput = {
    id?: string
    interactionType: $Enums.InteractionType
    startTime: Date | string
    endTime?: Date | string | null
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    rating?: number | null
    createdAt?: Date | string
    chemist: ChemistCreateNestedOneWithoutInteractionsInput
    employee: EmployeeCreateNestedOneWithoutChemistInteractionsInput
  }

  export type ChemistInteractionUncheckedCreateWithoutChemistTaskInput = {
    id?: string
    chemistId: string
    employeeId: string
    interactionType: $Enums.InteractionType
    startTime: Date | string
    endTime?: Date | string | null
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    rating?: number | null
    createdAt?: Date | string
  }

  export type ChemistInteractionCreateOrConnectWithoutChemistTaskInput = {
    where: ChemistInteractionWhereUniqueInput
    create: XOR<ChemistInteractionCreateWithoutChemistTaskInput, ChemistInteractionUncheckedCreateWithoutChemistTaskInput>
  }

  export type ChemistInteractionCreateManyChemistTaskInputEnvelope = {
    data: ChemistInteractionCreateManyChemistTaskInput | ChemistInteractionCreateManyChemistTaskInput[]
    skipDuplicates?: boolean
  }

  export type DcrReportCreateWithoutChemistTaskInput = {
    id?: string
    organizationId: string
    taskType?: $Enums.TaskTypeReference | null
    reportDate: Date | string
    productsDiscussed?: string | null
    comments?: string | null
    isDraft?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutDcrReportsInput
    doctorTask?: DoctorTaskCreateNestedOneWithoutDcrReportsInput
    tourPlanTask?: TourPlanTaskCreateNestedOneWithoutDcrReportsInput
  }

  export type DcrReportUncheckedCreateWithoutChemistTaskInput = {
    id?: string
    organizationId: string
    employeeId: string
    taskType?: $Enums.TaskTypeReference | null
    reportDate: Date | string
    productsDiscussed?: string | null
    comments?: string | null
    isDraft?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DcrReportCreateOrConnectWithoutChemistTaskInput = {
    where: DcrReportWhereUniqueInput
    create: XOR<DcrReportCreateWithoutChemistTaskInput, DcrReportUncheckedCreateWithoutChemistTaskInput>
  }

  export type DcrReportCreateManyChemistTaskInputEnvelope = {
    data: DcrReportCreateManyChemistTaskInput | DcrReportCreateManyChemistTaskInput[]
    skipDuplicates?: boolean
  }

  export type TaskPlannerUpsertWithoutChemistTasksInput = {
    update: XOR<TaskPlannerUpdateWithoutChemistTasksInput, TaskPlannerUncheckedUpdateWithoutChemistTasksInput>
    create: XOR<TaskPlannerCreateWithoutChemistTasksInput, TaskPlannerUncheckedCreateWithoutChemistTasksInput>
    where?: TaskPlannerWhereInput
  }

  export type TaskPlannerUpdateToOneWithWhereWithoutChemistTasksInput = {
    where?: TaskPlannerWhereInput
    data: XOR<TaskPlannerUpdateWithoutChemistTasksInput, TaskPlannerUncheckedUpdateWithoutChemistTasksInput>
  }

  export type TaskPlannerUpdateWithoutChemistTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTaskPlannerStatusFieldUpdateOperationsInput | $Enums.TaskPlannerStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutTaskPlansNestedInput
    doctorTasks?: DoctorTaskUpdateManyWithoutPlannerNestedInput
    tourPlanTasks?: TourPlanTaskUpdateManyWithoutPlannerNestedInput
  }

  export type TaskPlannerUncheckedUpdateWithoutChemistTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTaskPlannerStatusFieldUpdateOperationsInput | $Enums.TaskPlannerStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorTasks?: DoctorTaskUncheckedUpdateManyWithoutPlannerNestedInput
    tourPlanTasks?: TourPlanTaskUncheckedUpdateManyWithoutPlannerNestedInput
  }

  export type EmployeeUpsertWithoutChemistTasksInput = {
    update: XOR<EmployeeUpdateWithoutChemistTasksInput, EmployeeUncheckedUpdateWithoutChemistTasksInput>
    create: XOR<EmployeeCreateWithoutChemistTasksInput, EmployeeUncheckedCreateWithoutChemistTasksInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutChemistTasksInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutChemistTasksInput, EmployeeUncheckedUpdateWithoutChemistTasksInput>
  }

  export type EmployeeUpdateWithoutChemistTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    reportingManager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutReportingManagerNestedInput
    team?: TeamUpdateOneWithoutTeamMembersNestedInput
    leadsTeam?: TeamUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutChemistTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    reportingManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    subordinates?: EmployeeUncheckedUpdateManyWithoutReportingManagerNestedInput
    leadsTeam?: TeamUncheckedUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUncheckedUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUncheckedUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUncheckedUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUncheckedUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type ChemistUpsertWithoutChemistTasksInput = {
    update: XOR<ChemistUpdateWithoutChemistTasksInput, ChemistUncheckedUpdateWithoutChemistTasksInput>
    create: XOR<ChemistCreateWithoutChemistTasksInput, ChemistUncheckedCreateWithoutChemistTasksInput>
    where?: ChemistWhereInput
  }

  export type ChemistUpdateToOneWithWhereWithoutChemistTasksInput = {
    where?: ChemistWhereInput
    data: XOR<ChemistUpdateWithoutChemistTasksInput, ChemistUncheckedUpdateWithoutChemistTasksInput>
  }

  export type ChemistUpdateWithoutChemistTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChemistTypeFieldUpdateOperationsInput | $Enums.ChemistType
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    visitingHours?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    chemistChain?: ChemistChainUpdateOneWithoutChemistsNestedInput
    territory?: TerritoryUpdateOneRequiredWithoutChemistsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutChemistsCreatedNestedInput
    notes?: ChemistNoteUpdateManyWithoutChemistNestedInput
    interactions?: ChemistInteractionUpdateManyWithoutChemistNestedInput
    doctorRelations?: DoctorChemistRelationUpdateManyWithoutChemistNestedInput
    orders?: OrderUpdateManyWithoutChemistNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutChemistNestedInput
  }

  export type ChemistUncheckedUpdateWithoutChemistTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    chemistChainId?: NullableStringFieldUpdateOperationsInput | string | null
    territoryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChemistTypeFieldUpdateOperationsInput | $Enums.ChemistType
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    visitingHours?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: ChemistNoteUncheckedUpdateManyWithoutChemistNestedInput
    interactions?: ChemistInteractionUncheckedUpdateManyWithoutChemistNestedInput
    doctorRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutChemistNestedInput
    orders?: OrderUncheckedUpdateManyWithoutChemistNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutChemistNestedInput
  }

  export type ChemistInteractionUpsertWithWhereUniqueWithoutChemistTaskInput = {
    where: ChemistInteractionWhereUniqueInput
    update: XOR<ChemistInteractionUpdateWithoutChemistTaskInput, ChemistInteractionUncheckedUpdateWithoutChemistTaskInput>
    create: XOR<ChemistInteractionCreateWithoutChemistTaskInput, ChemistInteractionUncheckedCreateWithoutChemistTaskInput>
  }

  export type ChemistInteractionUpdateWithWhereUniqueWithoutChemistTaskInput = {
    where: ChemistInteractionWhereUniqueInput
    data: XOR<ChemistInteractionUpdateWithoutChemistTaskInput, ChemistInteractionUncheckedUpdateWithoutChemistTaskInput>
  }

  export type ChemistInteractionUpdateManyWithWhereWithoutChemistTaskInput = {
    where: ChemistInteractionScalarWhereInput
    data: XOR<ChemistInteractionUpdateManyMutationInput, ChemistInteractionUncheckedUpdateManyWithoutChemistTaskInput>
  }

  export type DcrReportUpsertWithWhereUniqueWithoutChemistTaskInput = {
    where: DcrReportWhereUniqueInput
    update: XOR<DcrReportUpdateWithoutChemistTaskInput, DcrReportUncheckedUpdateWithoutChemistTaskInput>
    create: XOR<DcrReportCreateWithoutChemistTaskInput, DcrReportUncheckedCreateWithoutChemistTaskInput>
  }

  export type DcrReportUpdateWithWhereUniqueWithoutChemistTaskInput = {
    where: DcrReportWhereUniqueInput
    data: XOR<DcrReportUpdateWithoutChemistTaskInput, DcrReportUncheckedUpdateWithoutChemistTaskInput>
  }

  export type DcrReportUpdateManyWithWhereWithoutChemistTaskInput = {
    where: DcrReportScalarWhereInput
    data: XOR<DcrReportUpdateManyMutationInput, DcrReportUncheckedUpdateManyWithoutChemistTaskInput>
  }

  export type TaskPlannerCreateWithoutTourPlanTasksInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.TaskPlannerStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutTaskPlansInput
    doctorTasks?: DoctorTaskCreateNestedManyWithoutPlannerInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutPlannerInput
  }

  export type TaskPlannerUncheckedCreateWithoutTourPlanTasksInput = {
    id?: string
    employeeId: string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.TaskPlannerStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorTasks?: DoctorTaskUncheckedCreateNestedManyWithoutPlannerInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutPlannerInput
  }

  export type TaskPlannerCreateOrConnectWithoutTourPlanTasksInput = {
    where: TaskPlannerWhereUniqueInput
    create: XOR<TaskPlannerCreateWithoutTourPlanTasksInput, TaskPlannerUncheckedCreateWithoutTourPlanTasksInput>
  }

  export type EmployeeCreateWithoutTourPlanTasksInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    reportingManager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutReportingManagerInput
    team?: TeamCreateNestedOneWithoutTeamMembersInput
    leadsTeam?: TeamCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutTourPlanTasksInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    reportingManagerId?: string | null
    teamId?: string | null
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutReportingManagerInput
    leadsTeam?: TeamUncheckedCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryUncheckedCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordUncheckedCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteUncheckedCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteUncheckedCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderUncheckedCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorUncheckedCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugUncheckedCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistUncheckedCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftUncheckedCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionUncheckedCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerUncheckedCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskUncheckedCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutTourPlanTasksInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutTourPlanTasksInput, EmployeeUncheckedCreateWithoutTourPlanTasksInput>
  }

  export type TourPlanCreateWithoutTourTasksInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TourPlanUncheckedCreateWithoutTourTasksInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TourPlanCreateOrConnectWithoutTourTasksInput = {
    where: TourPlanWhereUniqueInput
    create: XOR<TourPlanCreateWithoutTourTasksInput, TourPlanUncheckedCreateWithoutTourTasksInput>
  }

  export type TourPlanReportCreateWithoutTourTaskInput = {
    id?: string
    interactionTime?: Date | string
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TourPlanReportUncheckedCreateWithoutTourTaskInput = {
    id?: string
    interactionTime?: Date | string
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TourPlanReportCreateOrConnectWithoutTourTaskInput = {
    where: TourPlanReportWhereUniqueInput
    create: XOR<TourPlanReportCreateWithoutTourTaskInput, TourPlanReportUncheckedCreateWithoutTourTaskInput>
  }

  export type TourPlanReportCreateManyTourTaskInputEnvelope = {
    data: TourPlanReportCreateManyTourTaskInput | TourPlanReportCreateManyTourTaskInput[]
    skipDuplicates?: boolean
  }

  export type DcrReportCreateWithoutTourPlanTaskInput = {
    id?: string
    organizationId: string
    taskType?: $Enums.TaskTypeReference | null
    reportDate: Date | string
    productsDiscussed?: string | null
    comments?: string | null
    isDraft?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutDcrReportsInput
    doctorTask?: DoctorTaskCreateNestedOneWithoutDcrReportsInput
    chemistTask?: ChemistTaskCreateNestedOneWithoutDcrReportsInput
  }

  export type DcrReportUncheckedCreateWithoutTourPlanTaskInput = {
    id?: string
    organizationId: string
    employeeId: string
    taskType?: $Enums.TaskTypeReference | null
    reportDate: Date | string
    productsDiscussed?: string | null
    comments?: string | null
    isDraft?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DcrReportCreateOrConnectWithoutTourPlanTaskInput = {
    where: DcrReportWhereUniqueInput
    create: XOR<DcrReportCreateWithoutTourPlanTaskInput, DcrReportUncheckedCreateWithoutTourPlanTaskInput>
  }

  export type DcrReportCreateManyTourPlanTaskInputEnvelope = {
    data: DcrReportCreateManyTourPlanTaskInput | DcrReportCreateManyTourPlanTaskInput[]
    skipDuplicates?: boolean
  }

  export type TaskPlannerUpsertWithoutTourPlanTasksInput = {
    update: XOR<TaskPlannerUpdateWithoutTourPlanTasksInput, TaskPlannerUncheckedUpdateWithoutTourPlanTasksInput>
    create: XOR<TaskPlannerCreateWithoutTourPlanTasksInput, TaskPlannerUncheckedCreateWithoutTourPlanTasksInput>
    where?: TaskPlannerWhereInput
  }

  export type TaskPlannerUpdateToOneWithWhereWithoutTourPlanTasksInput = {
    where?: TaskPlannerWhereInput
    data: XOR<TaskPlannerUpdateWithoutTourPlanTasksInput, TaskPlannerUncheckedUpdateWithoutTourPlanTasksInput>
  }

  export type TaskPlannerUpdateWithoutTourPlanTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTaskPlannerStatusFieldUpdateOperationsInput | $Enums.TaskPlannerStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutTaskPlansNestedInput
    doctorTasks?: DoctorTaskUpdateManyWithoutPlannerNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutPlannerNestedInput
  }

  export type TaskPlannerUncheckedUpdateWithoutTourPlanTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTaskPlannerStatusFieldUpdateOperationsInput | $Enums.TaskPlannerStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorTasks?: DoctorTaskUncheckedUpdateManyWithoutPlannerNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutPlannerNestedInput
  }

  export type EmployeeUpsertWithoutTourPlanTasksInput = {
    update: XOR<EmployeeUpdateWithoutTourPlanTasksInput, EmployeeUncheckedUpdateWithoutTourPlanTasksInput>
    create: XOR<EmployeeCreateWithoutTourPlanTasksInput, EmployeeUncheckedCreateWithoutTourPlanTasksInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutTourPlanTasksInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutTourPlanTasksInput, EmployeeUncheckedUpdateWithoutTourPlanTasksInput>
  }

  export type EmployeeUpdateWithoutTourPlanTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    reportingManager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutReportingManagerNestedInput
    team?: TeamUpdateOneWithoutTeamMembersNestedInput
    leadsTeam?: TeamUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutTourPlanTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    reportingManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    subordinates?: EmployeeUncheckedUpdateManyWithoutReportingManagerNestedInput
    leadsTeam?: TeamUncheckedUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUncheckedUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUncheckedUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUncheckedUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUncheckedUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type TourPlanUpsertWithoutTourTasksInput = {
    update: XOR<TourPlanUpdateWithoutTourTasksInput, TourPlanUncheckedUpdateWithoutTourTasksInput>
    create: XOR<TourPlanCreateWithoutTourTasksInput, TourPlanUncheckedCreateWithoutTourTasksInput>
    where?: TourPlanWhereInput
  }

  export type TourPlanUpdateToOneWithWhereWithoutTourTasksInput = {
    where?: TourPlanWhereInput
    data: XOR<TourPlanUpdateWithoutTourTasksInput, TourPlanUncheckedUpdateWithoutTourTasksInput>
  }

  export type TourPlanUpdateWithoutTourTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TourPlanUncheckedUpdateWithoutTourTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TourPlanReportUpsertWithWhereUniqueWithoutTourTaskInput = {
    where: TourPlanReportWhereUniqueInput
    update: XOR<TourPlanReportUpdateWithoutTourTaskInput, TourPlanReportUncheckedUpdateWithoutTourTaskInput>
    create: XOR<TourPlanReportCreateWithoutTourTaskInput, TourPlanReportUncheckedCreateWithoutTourTaskInput>
  }

  export type TourPlanReportUpdateWithWhereUniqueWithoutTourTaskInput = {
    where: TourPlanReportWhereUniqueInput
    data: XOR<TourPlanReportUpdateWithoutTourTaskInput, TourPlanReportUncheckedUpdateWithoutTourTaskInput>
  }

  export type TourPlanReportUpdateManyWithWhereWithoutTourTaskInput = {
    where: TourPlanReportScalarWhereInput
    data: XOR<TourPlanReportUpdateManyMutationInput, TourPlanReportUncheckedUpdateManyWithoutTourTaskInput>
  }

  export type TourPlanReportScalarWhereInput = {
    AND?: TourPlanReportScalarWhereInput | TourPlanReportScalarWhereInput[]
    OR?: TourPlanReportScalarWhereInput[]
    NOT?: TourPlanReportScalarWhereInput | TourPlanReportScalarWhereInput[]
    id?: StringFilter<"TourPlanReport"> | string
    tourTaskId?: StringFilter<"TourPlanReport"> | string
    interactionTime?: DateTimeFilter<"TourPlanReport"> | Date | string
    purpose?: StringNullableFilter<"TourPlanReport"> | string | null
    outcome?: StringNullableFilter<"TourPlanReport"> | string | null
    comments?: StringNullableFilter<"TourPlanReport"> | string | null
    createdAt?: DateTimeFilter<"TourPlanReport"> | Date | string
    updatedAt?: DateTimeFilter<"TourPlanReport"> | Date | string
  }

  export type DcrReportUpsertWithWhereUniqueWithoutTourPlanTaskInput = {
    where: DcrReportWhereUniqueInput
    update: XOR<DcrReportUpdateWithoutTourPlanTaskInput, DcrReportUncheckedUpdateWithoutTourPlanTaskInput>
    create: XOR<DcrReportCreateWithoutTourPlanTaskInput, DcrReportUncheckedCreateWithoutTourPlanTaskInput>
  }

  export type DcrReportUpdateWithWhereUniqueWithoutTourPlanTaskInput = {
    where: DcrReportWhereUniqueInput
    data: XOR<DcrReportUpdateWithoutTourPlanTaskInput, DcrReportUncheckedUpdateWithoutTourPlanTaskInput>
  }

  export type DcrReportUpdateManyWithWhereWithoutTourPlanTaskInput = {
    where: DcrReportScalarWhereInput
    data: XOR<DcrReportUpdateManyMutationInput, DcrReportUncheckedUpdateManyWithoutTourPlanTaskInput>
  }

  export type TourPlanTaskCreateWithoutTourPlanInput = {
    id?: string
    location: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    planner: TaskPlannerCreateNestedOneWithoutTourPlanTasksInput
    employee: EmployeeCreateNestedOneWithoutTourPlanTasksInput
    tourPlanReports?: TourPlanReportCreateNestedManyWithoutTourTaskInput
    dcrReports?: DcrReportCreateNestedManyWithoutTourPlanTaskInput
  }

  export type TourPlanTaskUncheckedCreateWithoutTourPlanInput = {
    id?: string
    plannerId: string
    employeeId: string
    location: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    tourPlanReports?: TourPlanReportUncheckedCreateNestedManyWithoutTourTaskInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutTourPlanTaskInput
  }

  export type TourPlanTaskCreateOrConnectWithoutTourPlanInput = {
    where: TourPlanTaskWhereUniqueInput
    create: XOR<TourPlanTaskCreateWithoutTourPlanInput, TourPlanTaskUncheckedCreateWithoutTourPlanInput>
  }

  export type TourPlanTaskCreateManyTourPlanInputEnvelope = {
    data: TourPlanTaskCreateManyTourPlanInput | TourPlanTaskCreateManyTourPlanInput[]
    skipDuplicates?: boolean
  }

  export type TourPlanTaskUpsertWithWhereUniqueWithoutTourPlanInput = {
    where: TourPlanTaskWhereUniqueInput
    update: XOR<TourPlanTaskUpdateWithoutTourPlanInput, TourPlanTaskUncheckedUpdateWithoutTourPlanInput>
    create: XOR<TourPlanTaskCreateWithoutTourPlanInput, TourPlanTaskUncheckedCreateWithoutTourPlanInput>
  }

  export type TourPlanTaskUpdateWithWhereUniqueWithoutTourPlanInput = {
    where: TourPlanTaskWhereUniqueInput
    data: XOR<TourPlanTaskUpdateWithoutTourPlanInput, TourPlanTaskUncheckedUpdateWithoutTourPlanInput>
  }

  export type TourPlanTaskUpdateManyWithWhereWithoutTourPlanInput = {
    where: TourPlanTaskScalarWhereInput
    data: XOR<TourPlanTaskUpdateManyMutationInput, TourPlanTaskUncheckedUpdateManyWithoutTourPlanInput>
  }

  export type TourPlanTaskCreateWithoutTourPlanReportsInput = {
    id?: string
    location: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    planner: TaskPlannerCreateNestedOneWithoutTourPlanTasksInput
    employee: EmployeeCreateNestedOneWithoutTourPlanTasksInput
    tourPlan: TourPlanCreateNestedOneWithoutTourTasksInput
    dcrReports?: DcrReportCreateNestedManyWithoutTourPlanTaskInput
  }

  export type TourPlanTaskUncheckedCreateWithoutTourPlanReportsInput = {
    id?: string
    plannerId: string
    employeeId: string
    tourPlanId: string
    location: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutTourPlanTaskInput
  }

  export type TourPlanTaskCreateOrConnectWithoutTourPlanReportsInput = {
    where: TourPlanTaskWhereUniqueInput
    create: XOR<TourPlanTaskCreateWithoutTourPlanReportsInput, TourPlanTaskUncheckedCreateWithoutTourPlanReportsInput>
  }

  export type TourPlanTaskUpsertWithoutTourPlanReportsInput = {
    update: XOR<TourPlanTaskUpdateWithoutTourPlanReportsInput, TourPlanTaskUncheckedUpdateWithoutTourPlanReportsInput>
    create: XOR<TourPlanTaskCreateWithoutTourPlanReportsInput, TourPlanTaskUncheckedCreateWithoutTourPlanReportsInput>
    where?: TourPlanTaskWhereInput
  }

  export type TourPlanTaskUpdateToOneWithWhereWithoutTourPlanReportsInput = {
    where?: TourPlanTaskWhereInput
    data: XOR<TourPlanTaskUpdateWithoutTourPlanReportsInput, TourPlanTaskUncheckedUpdateWithoutTourPlanReportsInput>
  }

  export type TourPlanTaskUpdateWithoutTourPlanReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    planner?: TaskPlannerUpdateOneRequiredWithoutTourPlanTasksNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutTourPlanTasksNestedInput
    tourPlan?: TourPlanUpdateOneRequiredWithoutTourTasksNestedInput
    dcrReports?: DcrReportUpdateManyWithoutTourPlanTaskNestedInput
  }

  export type TourPlanTaskUncheckedUpdateWithoutTourPlanReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    plannerId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    tourPlanId?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dcrReports?: DcrReportUncheckedUpdateManyWithoutTourPlanTaskNestedInput
  }

  export type ExpenseRoleConfigCreateWithoutExpenseTypeInput = {
    id?: string
    role: $Enums.EmployeeRole
    limits: JsonNullValueInput | InputJsonValue
    rates?: NullableJsonNullValueInput | InputJsonValue
    validationRules: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    expenseClaims?: ExpenseClaimCreateNestedManyWithoutExpenseRoleConfigInput
  }

  export type ExpenseRoleConfigUncheckedCreateWithoutExpenseTypeInput = {
    id?: string
    role: $Enums.EmployeeRole
    limits: JsonNullValueInput | InputJsonValue
    rates?: NullableJsonNullValueInput | InputJsonValue
    validationRules: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    expenseClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutExpenseRoleConfigInput
  }

  export type ExpenseRoleConfigCreateOrConnectWithoutExpenseTypeInput = {
    where: ExpenseRoleConfigWhereUniqueInput
    create: XOR<ExpenseRoleConfigCreateWithoutExpenseTypeInput, ExpenseRoleConfigUncheckedCreateWithoutExpenseTypeInput>
  }

  export type ExpenseRoleConfigCreateManyExpenseTypeInputEnvelope = {
    data: ExpenseRoleConfigCreateManyExpenseTypeInput | ExpenseRoleConfigCreateManyExpenseTypeInput[]
    skipDuplicates?: boolean
  }

  export type ExpenseClaimCreateWithoutExpenseTypeInput = {
    id?: string
    claimNumber: string
    expenseData: JsonNullValueInput | InputJsonValue
    status?: $Enums.ExpenseClaimStatus
    submittedAt?: Date | string
    approvedAt?: Date | string | null
    approvalComments?: string | null
    rejectionReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutExpenseClaimsInput
    expenseRoleConfig: ExpenseRoleConfigCreateNestedOneWithoutExpenseClaimsInput
    approver?: EmployeeCreateNestedOneWithoutApprovedClaimsInput
  }

  export type ExpenseClaimUncheckedCreateWithoutExpenseTypeInput = {
    id?: string
    claimNumber: string
    employeeId: string
    expenseRoleConfigId: string
    expenseData: JsonNullValueInput | InputJsonValue
    status?: $Enums.ExpenseClaimStatus
    submittedAt?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    approvalComments?: string | null
    rejectionReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExpenseClaimCreateOrConnectWithoutExpenseTypeInput = {
    where: ExpenseClaimWhereUniqueInput
    create: XOR<ExpenseClaimCreateWithoutExpenseTypeInput, ExpenseClaimUncheckedCreateWithoutExpenseTypeInput>
  }

  export type ExpenseClaimCreateManyExpenseTypeInputEnvelope = {
    data: ExpenseClaimCreateManyExpenseTypeInput | ExpenseClaimCreateManyExpenseTypeInput[]
    skipDuplicates?: boolean
  }

  export type ExpenseRoleConfigUpsertWithWhereUniqueWithoutExpenseTypeInput = {
    where: ExpenseRoleConfigWhereUniqueInput
    update: XOR<ExpenseRoleConfigUpdateWithoutExpenseTypeInput, ExpenseRoleConfigUncheckedUpdateWithoutExpenseTypeInput>
    create: XOR<ExpenseRoleConfigCreateWithoutExpenseTypeInput, ExpenseRoleConfigUncheckedCreateWithoutExpenseTypeInput>
  }

  export type ExpenseRoleConfigUpdateWithWhereUniqueWithoutExpenseTypeInput = {
    where: ExpenseRoleConfigWhereUniqueInput
    data: XOR<ExpenseRoleConfigUpdateWithoutExpenseTypeInput, ExpenseRoleConfigUncheckedUpdateWithoutExpenseTypeInput>
  }

  export type ExpenseRoleConfigUpdateManyWithWhereWithoutExpenseTypeInput = {
    where: ExpenseRoleConfigScalarWhereInput
    data: XOR<ExpenseRoleConfigUpdateManyMutationInput, ExpenseRoleConfigUncheckedUpdateManyWithoutExpenseTypeInput>
  }

  export type ExpenseRoleConfigScalarWhereInput = {
    AND?: ExpenseRoleConfigScalarWhereInput | ExpenseRoleConfigScalarWhereInput[]
    OR?: ExpenseRoleConfigScalarWhereInput[]
    NOT?: ExpenseRoleConfigScalarWhereInput | ExpenseRoleConfigScalarWhereInput[]
    id?: StringFilter<"ExpenseRoleConfig"> | string
    expenseTypeId?: StringFilter<"ExpenseRoleConfig"> | string
    role?: EnumEmployeeRoleFilter<"ExpenseRoleConfig"> | $Enums.EmployeeRole
    limits?: JsonFilter<"ExpenseRoleConfig">
    rates?: JsonNullableFilter<"ExpenseRoleConfig">
    validationRules?: JsonFilter<"ExpenseRoleConfig">
    isActive?: BoolFilter<"ExpenseRoleConfig"> | boolean
    createdAt?: DateTimeFilter<"ExpenseRoleConfig"> | Date | string
    updatedAt?: DateTimeFilter<"ExpenseRoleConfig"> | Date | string
  }

  export type ExpenseClaimUpsertWithWhereUniqueWithoutExpenseTypeInput = {
    where: ExpenseClaimWhereUniqueInput
    update: XOR<ExpenseClaimUpdateWithoutExpenseTypeInput, ExpenseClaimUncheckedUpdateWithoutExpenseTypeInput>
    create: XOR<ExpenseClaimCreateWithoutExpenseTypeInput, ExpenseClaimUncheckedCreateWithoutExpenseTypeInput>
  }

  export type ExpenseClaimUpdateWithWhereUniqueWithoutExpenseTypeInput = {
    where: ExpenseClaimWhereUniqueInput
    data: XOR<ExpenseClaimUpdateWithoutExpenseTypeInput, ExpenseClaimUncheckedUpdateWithoutExpenseTypeInput>
  }

  export type ExpenseClaimUpdateManyWithWhereWithoutExpenseTypeInput = {
    where: ExpenseClaimScalarWhereInput
    data: XOR<ExpenseClaimUpdateManyMutationInput, ExpenseClaimUncheckedUpdateManyWithoutExpenseTypeInput>
  }

  export type ExpenseTypeCreateWithoutRoleConfigsInput = {
    id?: string
    name: string
    description?: string | null
    icon?: string | null
    formFields: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    expenseClaims?: ExpenseClaimCreateNestedManyWithoutExpenseTypeInput
  }

  export type ExpenseTypeUncheckedCreateWithoutRoleConfigsInput = {
    id?: string
    name: string
    description?: string | null
    icon?: string | null
    formFields: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    expenseClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutExpenseTypeInput
  }

  export type ExpenseTypeCreateOrConnectWithoutRoleConfigsInput = {
    where: ExpenseTypeWhereUniqueInput
    create: XOR<ExpenseTypeCreateWithoutRoleConfigsInput, ExpenseTypeUncheckedCreateWithoutRoleConfigsInput>
  }

  export type ExpenseClaimCreateWithoutExpenseRoleConfigInput = {
    id?: string
    claimNumber: string
    expenseData: JsonNullValueInput | InputJsonValue
    status?: $Enums.ExpenseClaimStatus
    submittedAt?: Date | string
    approvedAt?: Date | string | null
    approvalComments?: string | null
    rejectionReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutExpenseClaimsInput
    expenseType: ExpenseTypeCreateNestedOneWithoutExpenseClaimsInput
    approver?: EmployeeCreateNestedOneWithoutApprovedClaimsInput
  }

  export type ExpenseClaimUncheckedCreateWithoutExpenseRoleConfigInput = {
    id?: string
    claimNumber: string
    employeeId: string
    expenseTypeId: string
    expenseData: JsonNullValueInput | InputJsonValue
    status?: $Enums.ExpenseClaimStatus
    submittedAt?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    approvalComments?: string | null
    rejectionReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExpenseClaimCreateOrConnectWithoutExpenseRoleConfigInput = {
    where: ExpenseClaimWhereUniqueInput
    create: XOR<ExpenseClaimCreateWithoutExpenseRoleConfigInput, ExpenseClaimUncheckedCreateWithoutExpenseRoleConfigInput>
  }

  export type ExpenseClaimCreateManyExpenseRoleConfigInputEnvelope = {
    data: ExpenseClaimCreateManyExpenseRoleConfigInput | ExpenseClaimCreateManyExpenseRoleConfigInput[]
    skipDuplicates?: boolean
  }

  export type ExpenseTypeUpsertWithoutRoleConfigsInput = {
    update: XOR<ExpenseTypeUpdateWithoutRoleConfigsInput, ExpenseTypeUncheckedUpdateWithoutRoleConfigsInput>
    create: XOR<ExpenseTypeCreateWithoutRoleConfigsInput, ExpenseTypeUncheckedCreateWithoutRoleConfigsInput>
    where?: ExpenseTypeWhereInput
  }

  export type ExpenseTypeUpdateToOneWithWhereWithoutRoleConfigsInput = {
    where?: ExpenseTypeWhereInput
    data: XOR<ExpenseTypeUpdateWithoutRoleConfigsInput, ExpenseTypeUncheckedUpdateWithoutRoleConfigsInput>
  }

  export type ExpenseTypeUpdateWithoutRoleConfigsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    formFields?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expenseClaims?: ExpenseClaimUpdateManyWithoutExpenseTypeNestedInput
  }

  export type ExpenseTypeUncheckedUpdateWithoutRoleConfigsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    formFields?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expenseClaims?: ExpenseClaimUncheckedUpdateManyWithoutExpenseTypeNestedInput
  }

  export type ExpenseClaimUpsertWithWhereUniqueWithoutExpenseRoleConfigInput = {
    where: ExpenseClaimWhereUniqueInput
    update: XOR<ExpenseClaimUpdateWithoutExpenseRoleConfigInput, ExpenseClaimUncheckedUpdateWithoutExpenseRoleConfigInput>
    create: XOR<ExpenseClaimCreateWithoutExpenseRoleConfigInput, ExpenseClaimUncheckedCreateWithoutExpenseRoleConfigInput>
  }

  export type ExpenseClaimUpdateWithWhereUniqueWithoutExpenseRoleConfigInput = {
    where: ExpenseClaimWhereUniqueInput
    data: XOR<ExpenseClaimUpdateWithoutExpenseRoleConfigInput, ExpenseClaimUncheckedUpdateWithoutExpenseRoleConfigInput>
  }

  export type ExpenseClaimUpdateManyWithWhereWithoutExpenseRoleConfigInput = {
    where: ExpenseClaimScalarWhereInput
    data: XOR<ExpenseClaimUpdateManyMutationInput, ExpenseClaimUncheckedUpdateManyWithoutExpenseRoleConfigInput>
  }

  export type EmployeeCreateWithoutExpenseClaimsInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    reportingManager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutReportingManagerInput
    team?: TeamCreateNestedOneWithoutTeamMembersInput
    leadsTeam?: TeamCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationCreateNestedManyWithoutCreatedByInput
    approvedClaims?: ExpenseClaimCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutExpenseClaimsInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    reportingManagerId?: string | null
    teamId?: string | null
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutReportingManagerInput
    leadsTeam?: TeamUncheckedCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryUncheckedCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordUncheckedCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteUncheckedCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteUncheckedCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderUncheckedCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorUncheckedCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugUncheckedCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistUncheckedCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutCreatedByInput
    approvedClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftUncheckedCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionUncheckedCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerUncheckedCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskUncheckedCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutExpenseClaimsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutExpenseClaimsInput, EmployeeUncheckedCreateWithoutExpenseClaimsInput>
  }

  export type ExpenseTypeCreateWithoutExpenseClaimsInput = {
    id?: string
    name: string
    description?: string | null
    icon?: string | null
    formFields: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    roleConfigs?: ExpenseRoleConfigCreateNestedManyWithoutExpenseTypeInput
  }

  export type ExpenseTypeUncheckedCreateWithoutExpenseClaimsInput = {
    id?: string
    name: string
    description?: string | null
    icon?: string | null
    formFields: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    roleConfigs?: ExpenseRoleConfigUncheckedCreateNestedManyWithoutExpenseTypeInput
  }

  export type ExpenseTypeCreateOrConnectWithoutExpenseClaimsInput = {
    where: ExpenseTypeWhereUniqueInput
    create: XOR<ExpenseTypeCreateWithoutExpenseClaimsInput, ExpenseTypeUncheckedCreateWithoutExpenseClaimsInput>
  }

  export type ExpenseRoleConfigCreateWithoutExpenseClaimsInput = {
    id?: string
    role: $Enums.EmployeeRole
    limits: JsonNullValueInput | InputJsonValue
    rates?: NullableJsonNullValueInput | InputJsonValue
    validationRules: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    expenseType: ExpenseTypeCreateNestedOneWithoutRoleConfigsInput
  }

  export type ExpenseRoleConfigUncheckedCreateWithoutExpenseClaimsInput = {
    id?: string
    expenseTypeId: string
    role: $Enums.EmployeeRole
    limits: JsonNullValueInput | InputJsonValue
    rates?: NullableJsonNullValueInput | InputJsonValue
    validationRules: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExpenseRoleConfigCreateOrConnectWithoutExpenseClaimsInput = {
    where: ExpenseRoleConfigWhereUniqueInput
    create: XOR<ExpenseRoleConfigCreateWithoutExpenseClaimsInput, ExpenseRoleConfigUncheckedCreateWithoutExpenseClaimsInput>
  }

  export type EmployeeCreateWithoutApprovedClaimsInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    reportingManager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutReportingManagerInput
    team?: TeamCreateNestedOneWithoutTeamMembersInput
    leadsTeam?: TeamCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimCreateNestedManyWithoutEmployeeInput
    drugInventories?: UserDrugInventoryCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutApprovedClaimsInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    reportingManagerId?: string | null
    teamId?: string | null
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutReportingManagerInput
    leadsTeam?: TeamUncheckedCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryUncheckedCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordUncheckedCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteUncheckedCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteUncheckedCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderUncheckedCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorUncheckedCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugUncheckedCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistUncheckedCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutEmployeeInput
    drugInventories?: UserDrugInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftUncheckedCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionUncheckedCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerUncheckedCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskUncheckedCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutApprovedClaimsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutApprovedClaimsInput, EmployeeUncheckedCreateWithoutApprovedClaimsInput>
  }

  export type EmployeeUpsertWithoutExpenseClaimsInput = {
    update: XOR<EmployeeUpdateWithoutExpenseClaimsInput, EmployeeUncheckedUpdateWithoutExpenseClaimsInput>
    create: XOR<EmployeeCreateWithoutExpenseClaimsInput, EmployeeUncheckedCreateWithoutExpenseClaimsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutExpenseClaimsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutExpenseClaimsInput, EmployeeUncheckedUpdateWithoutExpenseClaimsInput>
  }

  export type EmployeeUpdateWithoutExpenseClaimsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    reportingManager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutReportingManagerNestedInput
    team?: TeamUpdateOneWithoutTeamMembersNestedInput
    leadsTeam?: TeamUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUpdateManyWithoutCreatedByNestedInput
    approvedClaims?: ExpenseClaimUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutExpenseClaimsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    reportingManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    subordinates?: EmployeeUncheckedUpdateManyWithoutReportingManagerNestedInput
    leadsTeam?: TeamUncheckedUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUncheckedUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutCreatedByNestedInput
    approvedClaims?: ExpenseClaimUncheckedUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUncheckedUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type ExpenseTypeUpsertWithoutExpenseClaimsInput = {
    update: XOR<ExpenseTypeUpdateWithoutExpenseClaimsInput, ExpenseTypeUncheckedUpdateWithoutExpenseClaimsInput>
    create: XOR<ExpenseTypeCreateWithoutExpenseClaimsInput, ExpenseTypeUncheckedCreateWithoutExpenseClaimsInput>
    where?: ExpenseTypeWhereInput
  }

  export type ExpenseTypeUpdateToOneWithWhereWithoutExpenseClaimsInput = {
    where?: ExpenseTypeWhereInput
    data: XOR<ExpenseTypeUpdateWithoutExpenseClaimsInput, ExpenseTypeUncheckedUpdateWithoutExpenseClaimsInput>
  }

  export type ExpenseTypeUpdateWithoutExpenseClaimsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    formFields?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roleConfigs?: ExpenseRoleConfigUpdateManyWithoutExpenseTypeNestedInput
  }

  export type ExpenseTypeUncheckedUpdateWithoutExpenseClaimsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    formFields?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roleConfigs?: ExpenseRoleConfigUncheckedUpdateManyWithoutExpenseTypeNestedInput
  }

  export type ExpenseRoleConfigUpsertWithoutExpenseClaimsInput = {
    update: XOR<ExpenseRoleConfigUpdateWithoutExpenseClaimsInput, ExpenseRoleConfigUncheckedUpdateWithoutExpenseClaimsInput>
    create: XOR<ExpenseRoleConfigCreateWithoutExpenseClaimsInput, ExpenseRoleConfigUncheckedCreateWithoutExpenseClaimsInput>
    where?: ExpenseRoleConfigWhereInput
  }

  export type ExpenseRoleConfigUpdateToOneWithWhereWithoutExpenseClaimsInput = {
    where?: ExpenseRoleConfigWhereInput
    data: XOR<ExpenseRoleConfigUpdateWithoutExpenseClaimsInput, ExpenseRoleConfigUncheckedUpdateWithoutExpenseClaimsInput>
  }

  export type ExpenseRoleConfigUpdateWithoutExpenseClaimsInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    limits?: JsonNullValueInput | InputJsonValue
    rates?: NullableJsonNullValueInput | InputJsonValue
    validationRules?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expenseType?: ExpenseTypeUpdateOneRequiredWithoutRoleConfigsNestedInput
  }

  export type ExpenseRoleConfigUncheckedUpdateWithoutExpenseClaimsInput = {
    id?: StringFieldUpdateOperationsInput | string
    expenseTypeId?: StringFieldUpdateOperationsInput | string
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    limits?: JsonNullValueInput | InputJsonValue
    rates?: NullableJsonNullValueInput | InputJsonValue
    validationRules?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeUpsertWithoutApprovedClaimsInput = {
    update: XOR<EmployeeUpdateWithoutApprovedClaimsInput, EmployeeUncheckedUpdateWithoutApprovedClaimsInput>
    create: XOR<EmployeeCreateWithoutApprovedClaimsInput, EmployeeUncheckedCreateWithoutApprovedClaimsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutApprovedClaimsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutApprovedClaimsInput, EmployeeUncheckedUpdateWithoutApprovedClaimsInput>
  }

  export type EmployeeUpdateWithoutApprovedClaimsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    reportingManager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutReportingManagerNestedInput
    team?: TeamUpdateOneWithoutTeamMembersNestedInput
    leadsTeam?: TeamUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUpdateManyWithoutEmployeeNestedInput
    drugInventories?: UserDrugInventoryUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutApprovedClaimsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    reportingManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    subordinates?: EmployeeUncheckedUpdateManyWithoutReportingManagerNestedInput
    leadsTeam?: TeamUncheckedUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUncheckedUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUncheckedUpdateManyWithoutEmployeeNestedInput
    drugInventories?: UserDrugInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUncheckedUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeCreateWithoutGiftsCreatedInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    reportingManager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutReportingManagerInput
    team?: TeamCreateNestedOneWithoutTeamMembersInput
    leadsTeam?: TeamCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryCreateNestedManyWithoutEmployeeInput
    doctorDistributions?: DoctorDistributionCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutGiftsCreatedInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    reportingManagerId?: string | null
    teamId?: string | null
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutReportingManagerInput
    leadsTeam?: TeamUncheckedCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryUncheckedCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordUncheckedCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteUncheckedCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteUncheckedCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderUncheckedCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorUncheckedCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugUncheckedCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistUncheckedCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    doctorDistributions?: DoctorDistributionUncheckedCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerUncheckedCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskUncheckedCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutGiftsCreatedInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutGiftsCreatedInput, EmployeeUncheckedCreateWithoutGiftsCreatedInput>
  }

  export type UserGiftInventoryCreateWithoutGiftInput = {
    id?: string
    quantity: number
    lastRestockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutGiftInventoriesInput
    doctorDistributionGiftItems?: DoctorDistributionGiftItemCreateNestedManyWithoutFromInventoryInput
  }

  export type UserGiftInventoryUncheckedCreateWithoutGiftInput = {
    id?: string
    employeeId: string
    quantity: number
    lastRestockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorDistributionGiftItems?: DoctorDistributionGiftItemUncheckedCreateNestedManyWithoutFromInventoryInput
  }

  export type UserGiftInventoryCreateOrConnectWithoutGiftInput = {
    where: UserGiftInventoryWhereUniqueInput
    create: XOR<UserGiftInventoryCreateWithoutGiftInput, UserGiftInventoryUncheckedCreateWithoutGiftInput>
  }

  export type UserGiftInventoryCreateManyGiftInputEnvelope = {
    data: UserGiftInventoryCreateManyGiftInput | UserGiftInventoryCreateManyGiftInput[]
    skipDuplicates?: boolean
  }

  export type DoctorDistributionGiftItemCreateWithoutGiftInput = {
    id?: string
    quantity: number
    unitCost: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorDistribution: DoctorDistributionCreateNestedOneWithoutGiftItemsInput
    fromInventory: UserGiftInventoryCreateNestedOneWithoutDoctorDistributionGiftItemsInput
  }

  export type DoctorDistributionGiftItemUncheckedCreateWithoutGiftInput = {
    id?: string
    doctorDistributionId: string
    fromInventoryId: string
    quantity: number
    unitCost: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorDistributionGiftItemCreateOrConnectWithoutGiftInput = {
    where: DoctorDistributionGiftItemWhereUniqueInput
    create: XOR<DoctorDistributionGiftItemCreateWithoutGiftInput, DoctorDistributionGiftItemUncheckedCreateWithoutGiftInput>
  }

  export type DoctorDistributionGiftItemCreateManyGiftInputEnvelope = {
    data: DoctorDistributionGiftItemCreateManyGiftInput | DoctorDistributionGiftItemCreateManyGiftInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeUpsertWithoutGiftsCreatedInput = {
    update: XOR<EmployeeUpdateWithoutGiftsCreatedInput, EmployeeUncheckedUpdateWithoutGiftsCreatedInput>
    create: XOR<EmployeeCreateWithoutGiftsCreatedInput, EmployeeUncheckedCreateWithoutGiftsCreatedInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutGiftsCreatedInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutGiftsCreatedInput, EmployeeUncheckedUpdateWithoutGiftsCreatedInput>
  }

  export type EmployeeUpdateWithoutGiftsCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    reportingManager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutReportingManagerNestedInput
    team?: TeamUpdateOneWithoutTeamMembersNestedInput
    leadsTeam?: TeamUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUpdateManyWithoutEmployeeNestedInput
    doctorDistributions?: DoctorDistributionUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutGiftsCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    reportingManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    subordinates?: EmployeeUncheckedUpdateManyWithoutReportingManagerNestedInput
    leadsTeam?: TeamUncheckedUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUncheckedUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUncheckedUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUncheckedUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorDistributions?: DoctorDistributionUncheckedUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type UserGiftInventoryUpsertWithWhereUniqueWithoutGiftInput = {
    where: UserGiftInventoryWhereUniqueInput
    update: XOR<UserGiftInventoryUpdateWithoutGiftInput, UserGiftInventoryUncheckedUpdateWithoutGiftInput>
    create: XOR<UserGiftInventoryCreateWithoutGiftInput, UserGiftInventoryUncheckedCreateWithoutGiftInput>
  }

  export type UserGiftInventoryUpdateWithWhereUniqueWithoutGiftInput = {
    where: UserGiftInventoryWhereUniqueInput
    data: XOR<UserGiftInventoryUpdateWithoutGiftInput, UserGiftInventoryUncheckedUpdateWithoutGiftInput>
  }

  export type UserGiftInventoryUpdateManyWithWhereWithoutGiftInput = {
    where: UserGiftInventoryScalarWhereInput
    data: XOR<UserGiftInventoryUpdateManyMutationInput, UserGiftInventoryUncheckedUpdateManyWithoutGiftInput>
  }

  export type DoctorDistributionGiftItemUpsertWithWhereUniqueWithoutGiftInput = {
    where: DoctorDistributionGiftItemWhereUniqueInput
    update: XOR<DoctorDistributionGiftItemUpdateWithoutGiftInput, DoctorDistributionGiftItemUncheckedUpdateWithoutGiftInput>
    create: XOR<DoctorDistributionGiftItemCreateWithoutGiftInput, DoctorDistributionGiftItemUncheckedCreateWithoutGiftInput>
  }

  export type DoctorDistributionGiftItemUpdateWithWhereUniqueWithoutGiftInput = {
    where: DoctorDistributionGiftItemWhereUniqueInput
    data: XOR<DoctorDistributionGiftItemUpdateWithoutGiftInput, DoctorDistributionGiftItemUncheckedUpdateWithoutGiftInput>
  }

  export type DoctorDistributionGiftItemUpdateManyWithWhereWithoutGiftInput = {
    where: DoctorDistributionGiftItemScalarWhereInput
    data: XOR<DoctorDistributionGiftItemUpdateManyMutationInput, DoctorDistributionGiftItemUncheckedUpdateManyWithoutGiftInput>
  }

  export type DoctorDistributionGiftItemScalarWhereInput = {
    AND?: DoctorDistributionGiftItemScalarWhereInput | DoctorDistributionGiftItemScalarWhereInput[]
    OR?: DoctorDistributionGiftItemScalarWhereInput[]
    NOT?: DoctorDistributionGiftItemScalarWhereInput | DoctorDistributionGiftItemScalarWhereInput[]
    id?: StringFilter<"DoctorDistributionGiftItem"> | string
    doctorDistributionId?: StringFilter<"DoctorDistributionGiftItem"> | string
    giftId?: StringFilter<"DoctorDistributionGiftItem"> | string
    fromInventoryId?: StringFilter<"DoctorDistributionGiftItem"> | string
    quantity?: IntFilter<"DoctorDistributionGiftItem"> | number
    unitCost?: DecimalFilter<"DoctorDistributionGiftItem"> | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFilter<"DoctorDistributionGiftItem"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"DoctorDistributionGiftItem"> | Date | string
    updatedAt?: DateTimeFilter<"DoctorDistributionGiftItem"> | Date | string
  }

  export type EmployeeCreateWithoutDrugInventoriesInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    reportingManager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutReportingManagerInput
    team?: TeamCreateNestedOneWithoutTeamMembersInput
    leadsTeam?: TeamCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimCreateNestedManyWithoutApproverInput
    giftInventories?: UserGiftInventoryCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutDrugInventoriesInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    reportingManagerId?: string | null
    teamId?: string | null
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutReportingManagerInput
    leadsTeam?: TeamUncheckedCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryUncheckedCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordUncheckedCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteUncheckedCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteUncheckedCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderUncheckedCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorUncheckedCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugUncheckedCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistUncheckedCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutApproverInput
    giftInventories?: UserGiftInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftUncheckedCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionUncheckedCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerUncheckedCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskUncheckedCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutDrugInventoriesInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutDrugInventoriesInput, EmployeeUncheckedCreateWithoutDrugInventoriesInput>
  }

  export type DrugCreateWithoutUserDrugInventoryInput = {
    id?: string
    organizationId: string
    name: string
    composition?: string | null
    manufacturer?: string | null
    indications?: string | null
    sideEffects?: string | null
    safetyAdvice?: string | null
    dosageForms?: NullableJsonNullValueInput | InputJsonValue
    price?: Decimal | DecimalJsLike | number | string | null
    schedule?: string | null
    regulatoryApprovals?: string | null
    category?: string | null
    isAvailable?: boolean
    images?: NullableJsonNullValueInput | InputJsonValue
    marketingMaterials?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    createdBy: EmployeeCreateNestedOneWithoutDrugsCreatedInput
    orderItems?: OrderItemCreateNestedManyWithoutDrugInput
    rcpaData?: RcpaDrugDataCreateNestedManyWithoutDrugInput
    DoctorDistributionDrugItem?: DoctorDistributionDrugItemCreateNestedManyWithoutDrugInput
  }

  export type DrugUncheckedCreateWithoutUserDrugInventoryInput = {
    id?: string
    organizationId: string
    name: string
    composition?: string | null
    manufacturer?: string | null
    indications?: string | null
    sideEffects?: string | null
    safetyAdvice?: string | null
    dosageForms?: NullableJsonNullValueInput | InputJsonValue
    price?: Decimal | DecimalJsLike | number | string | null
    schedule?: string | null
    regulatoryApprovals?: string | null
    category?: string | null
    isAvailable?: boolean
    images?: NullableJsonNullValueInput | InputJsonValue
    marketingMaterials?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isActive?: boolean
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutDrugInput
    rcpaData?: RcpaDrugDataUncheckedCreateNestedManyWithoutDrugInput
    DoctorDistributionDrugItem?: DoctorDistributionDrugItemUncheckedCreateNestedManyWithoutDrugInput
  }

  export type DrugCreateOrConnectWithoutUserDrugInventoryInput = {
    where: DrugWhereUniqueInput
    create: XOR<DrugCreateWithoutUserDrugInventoryInput, DrugUncheckedCreateWithoutUserDrugInventoryInput>
  }

  export type DoctorDistributionDrugItemCreateWithoutFromInventoryInput = {
    id?: string
    quantity: number
    unitCost: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorDistribution: DoctorDistributionCreateNestedOneWithoutDrugItemsInput
    drug: DrugCreateNestedOneWithoutDoctorDistributionDrugItemInput
  }

  export type DoctorDistributionDrugItemUncheckedCreateWithoutFromInventoryInput = {
    id?: string
    doctorDistributionId: string
    drugId: string
    quantity: number
    unitCost: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorDistributionDrugItemCreateOrConnectWithoutFromInventoryInput = {
    where: DoctorDistributionDrugItemWhereUniqueInput
    create: XOR<DoctorDistributionDrugItemCreateWithoutFromInventoryInput, DoctorDistributionDrugItemUncheckedCreateWithoutFromInventoryInput>
  }

  export type DoctorDistributionDrugItemCreateManyFromInventoryInputEnvelope = {
    data: DoctorDistributionDrugItemCreateManyFromInventoryInput | DoctorDistributionDrugItemCreateManyFromInventoryInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeUpsertWithoutDrugInventoriesInput = {
    update: XOR<EmployeeUpdateWithoutDrugInventoriesInput, EmployeeUncheckedUpdateWithoutDrugInventoriesInput>
    create: XOR<EmployeeCreateWithoutDrugInventoriesInput, EmployeeUncheckedCreateWithoutDrugInventoriesInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutDrugInventoriesInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutDrugInventoriesInput, EmployeeUncheckedUpdateWithoutDrugInventoriesInput>
  }

  export type EmployeeUpdateWithoutDrugInventoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    reportingManager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutReportingManagerNestedInput
    team?: TeamUpdateOneWithoutTeamMembersNestedInput
    leadsTeam?: TeamUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUpdateManyWithoutApproverNestedInput
    giftInventories?: UserGiftInventoryUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutDrugInventoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    reportingManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    subordinates?: EmployeeUncheckedUpdateManyWithoutReportingManagerNestedInput
    leadsTeam?: TeamUncheckedUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUncheckedUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUncheckedUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUncheckedUpdateManyWithoutApproverNestedInput
    giftInventories?: UserGiftInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUncheckedUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type DrugUpsertWithoutUserDrugInventoryInput = {
    update: XOR<DrugUpdateWithoutUserDrugInventoryInput, DrugUncheckedUpdateWithoutUserDrugInventoryInput>
    create: XOR<DrugCreateWithoutUserDrugInventoryInput, DrugUncheckedCreateWithoutUserDrugInventoryInput>
    where?: DrugWhereInput
  }

  export type DrugUpdateToOneWithWhereWithoutUserDrugInventoryInput = {
    where?: DrugWhereInput
    data: XOR<DrugUpdateWithoutUserDrugInventoryInput, DrugUncheckedUpdateWithoutUserDrugInventoryInput>
  }

  export type DrugUpdateWithoutUserDrugInventoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    indications?: NullableStringFieldUpdateOperationsInput | string | null
    sideEffects?: NullableStringFieldUpdateOperationsInput | string | null
    safetyAdvice?: NullableStringFieldUpdateOperationsInput | string | null
    dosageForms?: NullableJsonNullValueInput | InputJsonValue
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryApprovals?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    images?: NullableJsonNullValueInput | InputJsonValue
    marketingMaterials?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: EmployeeUpdateOneRequiredWithoutDrugsCreatedNestedInput
    orderItems?: OrderItemUpdateManyWithoutDrugNestedInput
    rcpaData?: RcpaDrugDataUpdateManyWithoutDrugNestedInput
    DoctorDistributionDrugItem?: DoctorDistributionDrugItemUpdateManyWithoutDrugNestedInput
  }

  export type DrugUncheckedUpdateWithoutUserDrugInventoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    indications?: NullableStringFieldUpdateOperationsInput | string | null
    sideEffects?: NullableStringFieldUpdateOperationsInput | string | null
    safetyAdvice?: NullableStringFieldUpdateOperationsInput | string | null
    dosageForms?: NullableJsonNullValueInput | InputJsonValue
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryApprovals?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    images?: NullableJsonNullValueInput | InputJsonValue
    marketingMaterials?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    orderItems?: OrderItemUncheckedUpdateManyWithoutDrugNestedInput
    rcpaData?: RcpaDrugDataUncheckedUpdateManyWithoutDrugNestedInput
    DoctorDistributionDrugItem?: DoctorDistributionDrugItemUncheckedUpdateManyWithoutDrugNestedInput
  }

  export type DoctorDistributionDrugItemUpsertWithWhereUniqueWithoutFromInventoryInput = {
    where: DoctorDistributionDrugItemWhereUniqueInput
    update: XOR<DoctorDistributionDrugItemUpdateWithoutFromInventoryInput, DoctorDistributionDrugItemUncheckedUpdateWithoutFromInventoryInput>
    create: XOR<DoctorDistributionDrugItemCreateWithoutFromInventoryInput, DoctorDistributionDrugItemUncheckedCreateWithoutFromInventoryInput>
  }

  export type DoctorDistributionDrugItemUpdateWithWhereUniqueWithoutFromInventoryInput = {
    where: DoctorDistributionDrugItemWhereUniqueInput
    data: XOR<DoctorDistributionDrugItemUpdateWithoutFromInventoryInput, DoctorDistributionDrugItemUncheckedUpdateWithoutFromInventoryInput>
  }

  export type DoctorDistributionDrugItemUpdateManyWithWhereWithoutFromInventoryInput = {
    where: DoctorDistributionDrugItemScalarWhereInput
    data: XOR<DoctorDistributionDrugItemUpdateManyMutationInput, DoctorDistributionDrugItemUncheckedUpdateManyWithoutFromInventoryInput>
  }

  export type EmployeeCreateWithoutGiftInventoriesInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    reportingManager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutReportingManagerInput
    team?: TeamCreateNestedOneWithoutTeamMembersInput
    leadsTeam?: TeamCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutGiftInventoriesInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    reportingManagerId?: string | null
    teamId?: string | null
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutReportingManagerInput
    leadsTeam?: TeamUncheckedCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryUncheckedCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordUncheckedCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteUncheckedCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteUncheckedCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderUncheckedCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorUncheckedCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugUncheckedCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistUncheckedCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftUncheckedCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionUncheckedCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerUncheckedCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskUncheckedCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutGiftInventoriesInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutGiftInventoriesInput, EmployeeUncheckedCreateWithoutGiftInventoriesInput>
  }

  export type GiftCreateWithoutUserGiftInventoriesInput = {
    id?: string
    name: string
    description?: string | null
    unitCost: Decimal | DecimalJsLike | number | string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    giftImages?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    createdBy: EmployeeCreateNestedOneWithoutGiftsCreatedInput
    doctorDistributionGiftItems?: DoctorDistributionGiftItemCreateNestedManyWithoutGiftInput
  }

  export type GiftUncheckedCreateWithoutUserGiftInventoriesInput = {
    id?: string
    name: string
    description?: string | null
    unitCost: Decimal | DecimalJsLike | number | string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    giftImages?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isActive?: boolean
    doctorDistributionGiftItems?: DoctorDistributionGiftItemUncheckedCreateNestedManyWithoutGiftInput
  }

  export type GiftCreateOrConnectWithoutUserGiftInventoriesInput = {
    where: GiftWhereUniqueInput
    create: XOR<GiftCreateWithoutUserGiftInventoriesInput, GiftUncheckedCreateWithoutUserGiftInventoriesInput>
  }

  export type DoctorDistributionGiftItemCreateWithoutFromInventoryInput = {
    id?: string
    quantity: number
    unitCost: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorDistribution: DoctorDistributionCreateNestedOneWithoutGiftItemsInput
    gift: GiftCreateNestedOneWithoutDoctorDistributionGiftItemsInput
  }

  export type DoctorDistributionGiftItemUncheckedCreateWithoutFromInventoryInput = {
    id?: string
    doctorDistributionId: string
    giftId: string
    quantity: number
    unitCost: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorDistributionGiftItemCreateOrConnectWithoutFromInventoryInput = {
    where: DoctorDistributionGiftItemWhereUniqueInput
    create: XOR<DoctorDistributionGiftItemCreateWithoutFromInventoryInput, DoctorDistributionGiftItemUncheckedCreateWithoutFromInventoryInput>
  }

  export type DoctorDistributionGiftItemCreateManyFromInventoryInputEnvelope = {
    data: DoctorDistributionGiftItemCreateManyFromInventoryInput | DoctorDistributionGiftItemCreateManyFromInventoryInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeUpsertWithoutGiftInventoriesInput = {
    update: XOR<EmployeeUpdateWithoutGiftInventoriesInput, EmployeeUncheckedUpdateWithoutGiftInventoriesInput>
    create: XOR<EmployeeCreateWithoutGiftInventoriesInput, EmployeeUncheckedCreateWithoutGiftInventoriesInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutGiftInventoriesInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutGiftInventoriesInput, EmployeeUncheckedUpdateWithoutGiftInventoriesInput>
  }

  export type EmployeeUpdateWithoutGiftInventoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    reportingManager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutReportingManagerNestedInput
    team?: TeamUpdateOneWithoutTeamMembersNestedInput
    leadsTeam?: TeamUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutGiftInventoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    reportingManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    subordinates?: EmployeeUncheckedUpdateManyWithoutReportingManagerNestedInput
    leadsTeam?: TeamUncheckedUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUncheckedUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUncheckedUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUncheckedUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUncheckedUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type GiftUpsertWithoutUserGiftInventoriesInput = {
    update: XOR<GiftUpdateWithoutUserGiftInventoriesInput, GiftUncheckedUpdateWithoutUserGiftInventoriesInput>
    create: XOR<GiftCreateWithoutUserGiftInventoriesInput, GiftUncheckedCreateWithoutUserGiftInventoriesInput>
    where?: GiftWhereInput
  }

  export type GiftUpdateToOneWithWhereWithoutUserGiftInventoriesInput = {
    where?: GiftWhereInput
    data: XOR<GiftUpdateWithoutUserGiftInventoriesInput, GiftUncheckedUpdateWithoutUserGiftInventoriesInput>
  }

  export type GiftUpdateWithoutUserGiftInventoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    giftImages?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: EmployeeUpdateOneRequiredWithoutGiftsCreatedNestedInput
    doctorDistributionGiftItems?: DoctorDistributionGiftItemUpdateManyWithoutGiftNestedInput
  }

  export type GiftUncheckedUpdateWithoutUserGiftInventoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    giftImages?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    doctorDistributionGiftItems?: DoctorDistributionGiftItemUncheckedUpdateManyWithoutGiftNestedInput
  }

  export type DoctorDistributionGiftItemUpsertWithWhereUniqueWithoutFromInventoryInput = {
    where: DoctorDistributionGiftItemWhereUniqueInput
    update: XOR<DoctorDistributionGiftItemUpdateWithoutFromInventoryInput, DoctorDistributionGiftItemUncheckedUpdateWithoutFromInventoryInput>
    create: XOR<DoctorDistributionGiftItemCreateWithoutFromInventoryInput, DoctorDistributionGiftItemUncheckedCreateWithoutFromInventoryInput>
  }

  export type DoctorDistributionGiftItemUpdateWithWhereUniqueWithoutFromInventoryInput = {
    where: DoctorDistributionGiftItemWhereUniqueInput
    data: XOR<DoctorDistributionGiftItemUpdateWithoutFromInventoryInput, DoctorDistributionGiftItemUncheckedUpdateWithoutFromInventoryInput>
  }

  export type DoctorDistributionGiftItemUpdateManyWithWhereWithoutFromInventoryInput = {
    where: DoctorDistributionGiftItemScalarWhereInput
    data: XOR<DoctorDistributionGiftItemUpdateManyMutationInput, DoctorDistributionGiftItemUncheckedUpdateManyWithoutFromInventoryInput>
  }

  export type DoctorInteractionCreateWithoutDoctorDistributionInput = {
    id?: string
    interactionType: $Enums.InteractionType
    startTime: Date | string
    endTime?: Date | string | null
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    rating?: number | null
    createdAt?: Date | string
    doctor: DoctorCreateNestedOneWithoutInteractionsInput
    employee: EmployeeCreateNestedOneWithoutDoctorInteractionsInput
    hospital?: HospitalCreateNestedOneWithoutDoctorInteractionsInput
    DoctorTask?: DoctorTaskCreateNestedOneWithoutDoctorInteractionsInput
  }

  export type DoctorInteractionUncheckedCreateWithoutDoctorDistributionInput = {
    id?: string
    doctorId: string
    employeeId: string
    hospitalId?: string | null
    interactionType: $Enums.InteractionType
    startTime: Date | string
    endTime?: Date | string | null
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    rating?: number | null
    createdAt?: Date | string
    doctorTaskId?: string | null
  }

  export type DoctorInteractionCreateOrConnectWithoutDoctorDistributionInput = {
    where: DoctorInteractionWhereUniqueInput
    create: XOR<DoctorInteractionCreateWithoutDoctorDistributionInput, DoctorInteractionUncheckedCreateWithoutDoctorDistributionInput>
  }

  export type EmployeeCreateWithoutDoctorDistributionsInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    reportingManager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutReportingManagerInput
    team?: TeamCreateNestedOneWithoutTeamMembersInput
    leadsTeam?: TeamCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftCreateNestedManyWithoutCreatedByInput
    taskPlans?: TaskPlannerCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutDoctorDistributionsInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    reportingManagerId?: string | null
    teamId?: string | null
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutReportingManagerInput
    leadsTeam?: TeamUncheckedCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryUncheckedCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordUncheckedCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteUncheckedCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteUncheckedCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutEmployeeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderUncheckedCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorUncheckedCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugUncheckedCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistUncheckedCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftUncheckedCreateNestedManyWithoutCreatedByInput
    taskPlans?: TaskPlannerUncheckedCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskUncheckedCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutDoctorDistributionsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutDoctorDistributionsInput, EmployeeUncheckedCreateWithoutDoctorDistributionsInput>
  }

  export type DoctorDistributionDrugItemCreateWithoutDoctorDistributionInput = {
    id?: string
    quantity: number
    unitCost: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    drug: DrugCreateNestedOneWithoutDoctorDistributionDrugItemInput
    fromInventory: UserDrugInventoryCreateNestedOneWithoutDoctorDistributionDrugItemsInput
  }

  export type DoctorDistributionDrugItemUncheckedCreateWithoutDoctorDistributionInput = {
    id?: string
    drugId: string
    fromInventoryId: string
    quantity: number
    unitCost: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorDistributionDrugItemCreateOrConnectWithoutDoctorDistributionInput = {
    where: DoctorDistributionDrugItemWhereUniqueInput
    create: XOR<DoctorDistributionDrugItemCreateWithoutDoctorDistributionInput, DoctorDistributionDrugItemUncheckedCreateWithoutDoctorDistributionInput>
  }

  export type DoctorDistributionDrugItemCreateManyDoctorDistributionInputEnvelope = {
    data: DoctorDistributionDrugItemCreateManyDoctorDistributionInput | DoctorDistributionDrugItemCreateManyDoctorDistributionInput[]
    skipDuplicates?: boolean
  }

  export type DoctorDistributionGiftItemCreateWithoutDoctorDistributionInput = {
    id?: string
    quantity: number
    unitCost: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    gift: GiftCreateNestedOneWithoutDoctorDistributionGiftItemsInput
    fromInventory: UserGiftInventoryCreateNestedOneWithoutDoctorDistributionGiftItemsInput
  }

  export type DoctorDistributionGiftItemUncheckedCreateWithoutDoctorDistributionInput = {
    id?: string
    giftId: string
    fromInventoryId: string
    quantity: number
    unitCost: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorDistributionGiftItemCreateOrConnectWithoutDoctorDistributionInput = {
    where: DoctorDistributionGiftItemWhereUniqueInput
    create: XOR<DoctorDistributionGiftItemCreateWithoutDoctorDistributionInput, DoctorDistributionGiftItemUncheckedCreateWithoutDoctorDistributionInput>
  }

  export type DoctorDistributionGiftItemCreateManyDoctorDistributionInputEnvelope = {
    data: DoctorDistributionGiftItemCreateManyDoctorDistributionInput | DoctorDistributionGiftItemCreateManyDoctorDistributionInput[]
    skipDuplicates?: boolean
  }

  export type DoctorInteractionUpsertWithoutDoctorDistributionInput = {
    update: XOR<DoctorInteractionUpdateWithoutDoctorDistributionInput, DoctorInteractionUncheckedUpdateWithoutDoctorDistributionInput>
    create: XOR<DoctorInteractionCreateWithoutDoctorDistributionInput, DoctorInteractionUncheckedCreateWithoutDoctorDistributionInput>
    where?: DoctorInteractionWhereInput
  }

  export type DoctorInteractionUpdateToOneWithWhereWithoutDoctorDistributionInput = {
    where?: DoctorInteractionWhereInput
    data: XOR<DoctorInteractionUpdateWithoutDoctorDistributionInput, DoctorInteractionUncheckedUpdateWithoutDoctorDistributionInput>
  }

  export type DoctorInteractionUpdateWithoutDoctorDistributionInput = {
    id?: StringFieldUpdateOperationsInput | string
    interactionType?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneRequiredWithoutInteractionsNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutDoctorInteractionsNestedInput
    hospital?: HospitalUpdateOneWithoutDoctorInteractionsNestedInput
    DoctorTask?: DoctorTaskUpdateOneWithoutDoctorInteractionsNestedInput
  }

  export type DoctorInteractionUncheckedUpdateWithoutDoctorDistributionInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    interactionType?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorTaskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EmployeeUpsertWithoutDoctorDistributionsInput = {
    update: XOR<EmployeeUpdateWithoutDoctorDistributionsInput, EmployeeUncheckedUpdateWithoutDoctorDistributionsInput>
    create: XOR<EmployeeCreateWithoutDoctorDistributionsInput, EmployeeUncheckedCreateWithoutDoctorDistributionsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutDoctorDistributionsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutDoctorDistributionsInput, EmployeeUncheckedUpdateWithoutDoctorDistributionsInput>
  }

  export type EmployeeUpdateWithoutDoctorDistributionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    reportingManager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutReportingManagerNestedInput
    team?: TeamUpdateOneWithoutTeamMembersNestedInput
    leadsTeam?: TeamUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUpdateManyWithoutCreatedByNestedInput
    taskPlans?: TaskPlannerUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutDoctorDistributionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    reportingManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    subordinates?: EmployeeUncheckedUpdateManyWithoutReportingManagerNestedInput
    leadsTeam?: TeamUncheckedUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUncheckedUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUncheckedUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUncheckedUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUncheckedUpdateManyWithoutCreatedByNestedInput
    taskPlans?: TaskPlannerUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type DoctorDistributionDrugItemUpsertWithWhereUniqueWithoutDoctorDistributionInput = {
    where: DoctorDistributionDrugItemWhereUniqueInput
    update: XOR<DoctorDistributionDrugItemUpdateWithoutDoctorDistributionInput, DoctorDistributionDrugItemUncheckedUpdateWithoutDoctorDistributionInput>
    create: XOR<DoctorDistributionDrugItemCreateWithoutDoctorDistributionInput, DoctorDistributionDrugItemUncheckedCreateWithoutDoctorDistributionInput>
  }

  export type DoctorDistributionDrugItemUpdateWithWhereUniqueWithoutDoctorDistributionInput = {
    where: DoctorDistributionDrugItemWhereUniqueInput
    data: XOR<DoctorDistributionDrugItemUpdateWithoutDoctorDistributionInput, DoctorDistributionDrugItemUncheckedUpdateWithoutDoctorDistributionInput>
  }

  export type DoctorDistributionDrugItemUpdateManyWithWhereWithoutDoctorDistributionInput = {
    where: DoctorDistributionDrugItemScalarWhereInput
    data: XOR<DoctorDistributionDrugItemUpdateManyMutationInput, DoctorDistributionDrugItemUncheckedUpdateManyWithoutDoctorDistributionInput>
  }

  export type DoctorDistributionGiftItemUpsertWithWhereUniqueWithoutDoctorDistributionInput = {
    where: DoctorDistributionGiftItemWhereUniqueInput
    update: XOR<DoctorDistributionGiftItemUpdateWithoutDoctorDistributionInput, DoctorDistributionGiftItemUncheckedUpdateWithoutDoctorDistributionInput>
    create: XOR<DoctorDistributionGiftItemCreateWithoutDoctorDistributionInput, DoctorDistributionGiftItemUncheckedCreateWithoutDoctorDistributionInput>
  }

  export type DoctorDistributionGiftItemUpdateWithWhereUniqueWithoutDoctorDistributionInput = {
    where: DoctorDistributionGiftItemWhereUniqueInput
    data: XOR<DoctorDistributionGiftItemUpdateWithoutDoctorDistributionInput, DoctorDistributionGiftItemUncheckedUpdateWithoutDoctorDistributionInput>
  }

  export type DoctorDistributionGiftItemUpdateManyWithWhereWithoutDoctorDistributionInput = {
    where: DoctorDistributionGiftItemScalarWhereInput
    data: XOR<DoctorDistributionGiftItemUpdateManyMutationInput, DoctorDistributionGiftItemUncheckedUpdateManyWithoutDoctorDistributionInput>
  }

  export type DoctorDistributionCreateWithoutDrugItemsInput = {
    id?: string
    distributedAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorInteraction: DoctorInteractionCreateNestedOneWithoutDoctorDistributionInput
    employee: EmployeeCreateNestedOneWithoutDoctorDistributionsInput
    giftItems?: DoctorDistributionGiftItemCreateNestedManyWithoutDoctorDistributionInput
  }

  export type DoctorDistributionUncheckedCreateWithoutDrugItemsInput = {
    id?: string
    doctorInteractionId: string
    employeeId: string
    distributedAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    giftItems?: DoctorDistributionGiftItemUncheckedCreateNestedManyWithoutDoctorDistributionInput
  }

  export type DoctorDistributionCreateOrConnectWithoutDrugItemsInput = {
    where: DoctorDistributionWhereUniqueInput
    create: XOR<DoctorDistributionCreateWithoutDrugItemsInput, DoctorDistributionUncheckedCreateWithoutDrugItemsInput>
  }

  export type DrugCreateWithoutDoctorDistributionDrugItemInput = {
    id?: string
    organizationId: string
    name: string
    composition?: string | null
    manufacturer?: string | null
    indications?: string | null
    sideEffects?: string | null
    safetyAdvice?: string | null
    dosageForms?: NullableJsonNullValueInput | InputJsonValue
    price?: Decimal | DecimalJsLike | number | string | null
    schedule?: string | null
    regulatoryApprovals?: string | null
    category?: string | null
    isAvailable?: boolean
    images?: NullableJsonNullValueInput | InputJsonValue
    marketingMaterials?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    createdBy: EmployeeCreateNestedOneWithoutDrugsCreatedInput
    orderItems?: OrderItemCreateNestedManyWithoutDrugInput
    rcpaData?: RcpaDrugDataCreateNestedManyWithoutDrugInput
    UserDrugInventory?: UserDrugInventoryCreateNestedManyWithoutDrugInput
  }

  export type DrugUncheckedCreateWithoutDoctorDistributionDrugItemInput = {
    id?: string
    organizationId: string
    name: string
    composition?: string | null
    manufacturer?: string | null
    indications?: string | null
    sideEffects?: string | null
    safetyAdvice?: string | null
    dosageForms?: NullableJsonNullValueInput | InputJsonValue
    price?: Decimal | DecimalJsLike | number | string | null
    schedule?: string | null
    regulatoryApprovals?: string | null
    category?: string | null
    isAvailable?: boolean
    images?: NullableJsonNullValueInput | InputJsonValue
    marketingMaterials?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isActive?: boolean
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutDrugInput
    rcpaData?: RcpaDrugDataUncheckedCreateNestedManyWithoutDrugInput
    UserDrugInventory?: UserDrugInventoryUncheckedCreateNestedManyWithoutDrugInput
  }

  export type DrugCreateOrConnectWithoutDoctorDistributionDrugItemInput = {
    where: DrugWhereUniqueInput
    create: XOR<DrugCreateWithoutDoctorDistributionDrugItemInput, DrugUncheckedCreateWithoutDoctorDistributionDrugItemInput>
  }

  export type UserDrugInventoryCreateWithoutDoctorDistributionDrugItemsInput = {
    id?: string
    quantity: number
    lastRestockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutDrugInventoriesInput
    drug: DrugCreateNestedOneWithoutUserDrugInventoryInput
  }

  export type UserDrugInventoryUncheckedCreateWithoutDoctorDistributionDrugItemsInput = {
    id?: string
    employeeId: string
    drugId: string
    quantity: number
    lastRestockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserDrugInventoryCreateOrConnectWithoutDoctorDistributionDrugItemsInput = {
    where: UserDrugInventoryWhereUniqueInput
    create: XOR<UserDrugInventoryCreateWithoutDoctorDistributionDrugItemsInput, UserDrugInventoryUncheckedCreateWithoutDoctorDistributionDrugItemsInput>
  }

  export type DoctorDistributionUpsertWithoutDrugItemsInput = {
    update: XOR<DoctorDistributionUpdateWithoutDrugItemsInput, DoctorDistributionUncheckedUpdateWithoutDrugItemsInput>
    create: XOR<DoctorDistributionCreateWithoutDrugItemsInput, DoctorDistributionUncheckedCreateWithoutDrugItemsInput>
    where?: DoctorDistributionWhereInput
  }

  export type DoctorDistributionUpdateToOneWithWhereWithoutDrugItemsInput = {
    where?: DoctorDistributionWhereInput
    data: XOR<DoctorDistributionUpdateWithoutDrugItemsInput, DoctorDistributionUncheckedUpdateWithoutDrugItemsInput>
  }

  export type DoctorDistributionUpdateWithoutDrugItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    distributedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorInteraction?: DoctorInteractionUpdateOneRequiredWithoutDoctorDistributionNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutDoctorDistributionsNestedInput
    giftItems?: DoctorDistributionGiftItemUpdateManyWithoutDoctorDistributionNestedInput
  }

  export type DoctorDistributionUncheckedUpdateWithoutDrugItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorInteractionId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    distributedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    giftItems?: DoctorDistributionGiftItemUncheckedUpdateManyWithoutDoctorDistributionNestedInput
  }

  export type DrugUpsertWithoutDoctorDistributionDrugItemInput = {
    update: XOR<DrugUpdateWithoutDoctorDistributionDrugItemInput, DrugUncheckedUpdateWithoutDoctorDistributionDrugItemInput>
    create: XOR<DrugCreateWithoutDoctorDistributionDrugItemInput, DrugUncheckedCreateWithoutDoctorDistributionDrugItemInput>
    where?: DrugWhereInput
  }

  export type DrugUpdateToOneWithWhereWithoutDoctorDistributionDrugItemInput = {
    where?: DrugWhereInput
    data: XOR<DrugUpdateWithoutDoctorDistributionDrugItemInput, DrugUncheckedUpdateWithoutDoctorDistributionDrugItemInput>
  }

  export type DrugUpdateWithoutDoctorDistributionDrugItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    indications?: NullableStringFieldUpdateOperationsInput | string | null
    sideEffects?: NullableStringFieldUpdateOperationsInput | string | null
    safetyAdvice?: NullableStringFieldUpdateOperationsInput | string | null
    dosageForms?: NullableJsonNullValueInput | InputJsonValue
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryApprovals?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    images?: NullableJsonNullValueInput | InputJsonValue
    marketingMaterials?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: EmployeeUpdateOneRequiredWithoutDrugsCreatedNestedInput
    orderItems?: OrderItemUpdateManyWithoutDrugNestedInput
    rcpaData?: RcpaDrugDataUpdateManyWithoutDrugNestedInput
    UserDrugInventory?: UserDrugInventoryUpdateManyWithoutDrugNestedInput
  }

  export type DrugUncheckedUpdateWithoutDoctorDistributionDrugItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    indications?: NullableStringFieldUpdateOperationsInput | string | null
    sideEffects?: NullableStringFieldUpdateOperationsInput | string | null
    safetyAdvice?: NullableStringFieldUpdateOperationsInput | string | null
    dosageForms?: NullableJsonNullValueInput | InputJsonValue
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryApprovals?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    images?: NullableJsonNullValueInput | InputJsonValue
    marketingMaterials?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    orderItems?: OrderItemUncheckedUpdateManyWithoutDrugNestedInput
    rcpaData?: RcpaDrugDataUncheckedUpdateManyWithoutDrugNestedInput
    UserDrugInventory?: UserDrugInventoryUncheckedUpdateManyWithoutDrugNestedInput
  }

  export type UserDrugInventoryUpsertWithoutDoctorDistributionDrugItemsInput = {
    update: XOR<UserDrugInventoryUpdateWithoutDoctorDistributionDrugItemsInput, UserDrugInventoryUncheckedUpdateWithoutDoctorDistributionDrugItemsInput>
    create: XOR<UserDrugInventoryCreateWithoutDoctorDistributionDrugItemsInput, UserDrugInventoryUncheckedCreateWithoutDoctorDistributionDrugItemsInput>
    where?: UserDrugInventoryWhereInput
  }

  export type UserDrugInventoryUpdateToOneWithWhereWithoutDoctorDistributionDrugItemsInput = {
    where?: UserDrugInventoryWhereInput
    data: XOR<UserDrugInventoryUpdateWithoutDoctorDistributionDrugItemsInput, UserDrugInventoryUncheckedUpdateWithoutDoctorDistributionDrugItemsInput>
  }

  export type UserDrugInventoryUpdateWithoutDoctorDistributionDrugItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    lastRestockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutDrugInventoriesNestedInput
    drug?: DrugUpdateOneRequiredWithoutUserDrugInventoryNestedInput
  }

  export type UserDrugInventoryUncheckedUpdateWithoutDoctorDistributionDrugItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    drugId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    lastRestockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorDistributionCreateWithoutGiftItemsInput = {
    id?: string
    distributedAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorInteraction: DoctorInteractionCreateNestedOneWithoutDoctorDistributionInput
    employee: EmployeeCreateNestedOneWithoutDoctorDistributionsInput
    drugItems?: DoctorDistributionDrugItemCreateNestedManyWithoutDoctorDistributionInput
  }

  export type DoctorDistributionUncheckedCreateWithoutGiftItemsInput = {
    id?: string
    doctorInteractionId: string
    employeeId: string
    distributedAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    drugItems?: DoctorDistributionDrugItemUncheckedCreateNestedManyWithoutDoctorDistributionInput
  }

  export type DoctorDistributionCreateOrConnectWithoutGiftItemsInput = {
    where: DoctorDistributionWhereUniqueInput
    create: XOR<DoctorDistributionCreateWithoutGiftItemsInput, DoctorDistributionUncheckedCreateWithoutGiftItemsInput>
  }

  export type GiftCreateWithoutDoctorDistributionGiftItemsInput = {
    id?: string
    name: string
    description?: string | null
    unitCost: Decimal | DecimalJsLike | number | string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    giftImages?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    createdBy: EmployeeCreateNestedOneWithoutGiftsCreatedInput
    userGiftInventories?: UserGiftInventoryCreateNestedManyWithoutGiftInput
  }

  export type GiftUncheckedCreateWithoutDoctorDistributionGiftItemsInput = {
    id?: string
    name: string
    description?: string | null
    unitCost: Decimal | DecimalJsLike | number | string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    giftImages?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isActive?: boolean
    userGiftInventories?: UserGiftInventoryUncheckedCreateNestedManyWithoutGiftInput
  }

  export type GiftCreateOrConnectWithoutDoctorDistributionGiftItemsInput = {
    where: GiftWhereUniqueInput
    create: XOR<GiftCreateWithoutDoctorDistributionGiftItemsInput, GiftUncheckedCreateWithoutDoctorDistributionGiftItemsInput>
  }

  export type UserGiftInventoryCreateWithoutDoctorDistributionGiftItemsInput = {
    id?: string
    quantity: number
    lastRestockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutGiftInventoriesInput
    gift: GiftCreateNestedOneWithoutUserGiftInventoriesInput
  }

  export type UserGiftInventoryUncheckedCreateWithoutDoctorDistributionGiftItemsInput = {
    id?: string
    employeeId: string
    giftId: string
    quantity: number
    lastRestockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserGiftInventoryCreateOrConnectWithoutDoctorDistributionGiftItemsInput = {
    where: UserGiftInventoryWhereUniqueInput
    create: XOR<UserGiftInventoryCreateWithoutDoctorDistributionGiftItemsInput, UserGiftInventoryUncheckedCreateWithoutDoctorDistributionGiftItemsInput>
  }

  export type DoctorDistributionUpsertWithoutGiftItemsInput = {
    update: XOR<DoctorDistributionUpdateWithoutGiftItemsInput, DoctorDistributionUncheckedUpdateWithoutGiftItemsInput>
    create: XOR<DoctorDistributionCreateWithoutGiftItemsInput, DoctorDistributionUncheckedCreateWithoutGiftItemsInput>
    where?: DoctorDistributionWhereInput
  }

  export type DoctorDistributionUpdateToOneWithWhereWithoutGiftItemsInput = {
    where?: DoctorDistributionWhereInput
    data: XOR<DoctorDistributionUpdateWithoutGiftItemsInput, DoctorDistributionUncheckedUpdateWithoutGiftItemsInput>
  }

  export type DoctorDistributionUpdateWithoutGiftItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    distributedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorInteraction?: DoctorInteractionUpdateOneRequiredWithoutDoctorDistributionNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutDoctorDistributionsNestedInput
    drugItems?: DoctorDistributionDrugItemUpdateManyWithoutDoctorDistributionNestedInput
  }

  export type DoctorDistributionUncheckedUpdateWithoutGiftItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorInteractionId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    distributedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    drugItems?: DoctorDistributionDrugItemUncheckedUpdateManyWithoutDoctorDistributionNestedInput
  }

  export type GiftUpsertWithoutDoctorDistributionGiftItemsInput = {
    update: XOR<GiftUpdateWithoutDoctorDistributionGiftItemsInput, GiftUncheckedUpdateWithoutDoctorDistributionGiftItemsInput>
    create: XOR<GiftCreateWithoutDoctorDistributionGiftItemsInput, GiftUncheckedCreateWithoutDoctorDistributionGiftItemsInput>
    where?: GiftWhereInput
  }

  export type GiftUpdateToOneWithWhereWithoutDoctorDistributionGiftItemsInput = {
    where?: GiftWhereInput
    data: XOR<GiftUpdateWithoutDoctorDistributionGiftItemsInput, GiftUncheckedUpdateWithoutDoctorDistributionGiftItemsInput>
  }

  export type GiftUpdateWithoutDoctorDistributionGiftItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    giftImages?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: EmployeeUpdateOneRequiredWithoutGiftsCreatedNestedInput
    userGiftInventories?: UserGiftInventoryUpdateManyWithoutGiftNestedInput
  }

  export type GiftUncheckedUpdateWithoutDoctorDistributionGiftItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    giftImages?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userGiftInventories?: UserGiftInventoryUncheckedUpdateManyWithoutGiftNestedInput
  }

  export type UserGiftInventoryUpsertWithoutDoctorDistributionGiftItemsInput = {
    update: XOR<UserGiftInventoryUpdateWithoutDoctorDistributionGiftItemsInput, UserGiftInventoryUncheckedUpdateWithoutDoctorDistributionGiftItemsInput>
    create: XOR<UserGiftInventoryCreateWithoutDoctorDistributionGiftItemsInput, UserGiftInventoryUncheckedCreateWithoutDoctorDistributionGiftItemsInput>
    where?: UserGiftInventoryWhereInput
  }

  export type UserGiftInventoryUpdateToOneWithWhereWithoutDoctorDistributionGiftItemsInput = {
    where?: UserGiftInventoryWhereInput
    data: XOR<UserGiftInventoryUpdateWithoutDoctorDistributionGiftItemsInput, UserGiftInventoryUncheckedUpdateWithoutDoctorDistributionGiftItemsInput>
  }

  export type UserGiftInventoryUpdateWithoutDoctorDistributionGiftItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    lastRestockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutGiftInventoriesNestedInput
    gift?: GiftUpdateOneRequiredWithoutUserGiftInventoriesNestedInput
  }

  export type UserGiftInventoryUncheckedUpdateWithoutDoctorDistributionGiftItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    giftId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    lastRestockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeCreateWithoutAuditLogsInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    reportingManager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutReportingManagerInput
    team?: TeamCreateNestedOneWithoutTeamMembersInput
    leadsTeam?: TeamCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    reportingManagerId?: string | null
    teamId?: string | null
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutReportingManagerInput
    leadsTeam?: TeamUncheckedCreateNestedOneWithoutLeadNameInput
    territories?: EmployeeTerritoryUncheckedCreateNestedManyWithoutEmployeeInput
    trainingRecords?: EmployeeTrainingRecordUncheckedCreateNestedManyWithoutEmployeeInput
    doctorNotes?: DoctorNoteUncheckedCreateNestedManyWithoutCreatedByInput
    chemistNotes?: ChemistNoteUncheckedCreateNestedManyWithoutCreatedByInput
    doctorInteractions?: DoctorInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    chemistInteractions?: ChemistInteractionUncheckedCreateNestedManyWithoutEmployeeInput
    dcrReports?: DcrReportUncheckedCreateNestedManyWithoutEmployeeInput
    rcpaReports?: RcpaReportUncheckedCreateNestedManyWithoutEmployeeInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutEmployeeInput
    ordersCreated?: OrderUncheckedCreateNestedManyWithoutCreatedByInput
    doctorsCreated?: DoctorUncheckedCreateNestedManyWithoutCreatedByInput
    drugsCreated?: DrugUncheckedCreateNestedManyWithoutCreatedByInput
    chemistsCreated?: ChemistUncheckedCreateNestedManyWithoutCreatedByInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedCreateNestedManyWithoutCreatedByInput
    expenseClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutEmployeeInput
    approvedClaims?: ExpenseClaimUncheckedCreateNestedManyWithoutApproverInput
    drugInventories?: UserDrugInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftInventories?: UserGiftInventoryUncheckedCreateNestedManyWithoutEmployeeInput
    giftsCreated?: GiftUncheckedCreateNestedManyWithoutCreatedByInput
    doctorDistributions?: DoctorDistributionUncheckedCreateNestedManyWithoutEmployeeInput
    taskPlans?: TaskPlannerUncheckedCreateNestedManyWithoutEmployeeInput
    doctorTasks?: DoctorTaskUncheckedCreateNestedManyWithoutEmployeeInput
    chemistTasks?: ChemistTaskUncheckedCreateNestedManyWithoutEmployeeInput
    tourPlanTasks?: TourPlanTaskUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutAuditLogsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutAuditLogsInput, EmployeeUncheckedCreateWithoutAuditLogsInput>
  }

  export type EmployeeUpsertWithoutAuditLogsInput = {
    update: XOR<EmployeeUpdateWithoutAuditLogsInput, EmployeeUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<EmployeeCreateWithoutAuditLogsInput, EmployeeUncheckedCreateWithoutAuditLogsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutAuditLogsInput, EmployeeUncheckedUpdateWithoutAuditLogsInput>
  }

  export type EmployeeUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    reportingManager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutReportingManagerNestedInput
    team?: TeamUpdateOneWithoutTeamMembersNestedInput
    leadsTeam?: TeamUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    reportingManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    subordinates?: EmployeeUncheckedUpdateManyWithoutReportingManagerNestedInput
    leadsTeam?: TeamUncheckedUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUncheckedUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUncheckedUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUncheckedUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUncheckedUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeCreateManyReportingManagerInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    teamId?: string | null
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
  }

  export type EmployeeTerritoryCreateManyEmployeeInput = {
    id?: string
    territoryId: string
    assignedAt: Date | string
    unassignedAt?: Date | string | null
    isPrimary?: boolean
  }

  export type EmployeeTrainingRecordCreateManyEmployeeInput = {
    id?: string
    trainingName: string
    description?: string | null
    completionDate: Date | string
    createdAt?: Date | string
  }

  export type DoctorNoteCreateManyCreatedByInput = {
    id?: string
    doctorId: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChemistNoteCreateManyCreatedByInput = {
    id?: string
    chemistId: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorInteractionCreateManyEmployeeInput = {
    id?: string
    doctorId: string
    hospitalId?: string | null
    interactionType: $Enums.InteractionType
    startTime: Date | string
    endTime?: Date | string | null
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    rating?: number | null
    createdAt?: Date | string
    doctorTaskId?: string | null
  }

  export type ChemistInteractionCreateManyEmployeeInput = {
    id?: string
    chemistId: string
    interactionType: $Enums.InteractionType
    startTime: Date | string
    endTime?: Date | string | null
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    rating?: number | null
    createdAt?: Date | string
    chemistTaskId?: string | null
  }

  export type DcrReportCreateManyEmployeeInput = {
    id?: string
    organizationId: string
    taskId?: string | null
    taskType?: $Enums.TaskTypeReference | null
    reportDate: Date | string
    productsDiscussed?: string | null
    comments?: string | null
    isDraft?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RcpaReportCreateManyEmployeeInput = {
    id?: string
    organizationId: string
    chemistId: string
    remarks?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CheckInCreateManyEmployeeInput = {
    id?: string
    organizationId: string
    checkInTime?: Date | string | null
    checkOutTime?: Date | string | null
    checkInLatitude?: Decimal | DecimalJsLike | number | string | null
    checkInLongitude?: Decimal | DecimalJsLike | number | string | null
    checkOutLatitude?: Decimal | DecimalJsLike | number | string | null
    checkOutLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
  }

  export type AuditLogCreateManyEmployeeInput = {
    id?: string
    organizationId: string
    tableName: string
    actionType: string
    recordId: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    createdAt?: Date | string
  }

  export type OrderCreateManyCreatedByInput = {
    id?: string
    organizationId: string
    chemistId?: string | null
    totalAmount: Decimal | DecimalJsLike | number | string
    status: $Enums.OrderStatus
    orderDate: Date | string
    deliveryDate?: Date | string | null
    specialInstructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorCreateManyCreatedByInput = {
    id?: string
    organizationId: string
    name: string
    designation?: string | null
    specialization?: string | null
    email?: string | null
    phone?: string | null
    description?: string | null
    profilePictureUrl?: string | null
    qualification?: string | null
    experienceYears?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
  }

  export type DrugCreateManyCreatedByInput = {
    id?: string
    organizationId: string
    name: string
    composition?: string | null
    manufacturer?: string | null
    indications?: string | null
    sideEffects?: string | null
    safetyAdvice?: string | null
    dosageForms?: NullableJsonNullValueInput | InputJsonValue
    price?: Decimal | DecimalJsLike | number | string | null
    schedule?: string | null
    regulatoryApprovals?: string | null
    category?: string | null
    isAvailable?: boolean
    images?: NullableJsonNullValueInput | InputJsonValue
    marketingMaterials?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
  }

  export type ChemistCreateManyCreatedByInput = {
    id?: string
    organizationId: string
    chemistChainId?: string | null
    territoryId: string
    name: string
    type: $Enums.ChemistType
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    profilePictureUrl?: string | null
    visitingHours?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
  }

  export type DoctorChemistRelationCreateManyCreatedByInput = {
    id?: string
    doctorId: string
    chemistId: string
    createdAt?: Date | string
  }

  export type ExpenseClaimCreateManyEmployeeInput = {
    id?: string
    claimNumber: string
    expenseTypeId: string
    expenseRoleConfigId: string
    expenseData: JsonNullValueInput | InputJsonValue
    status?: $Enums.ExpenseClaimStatus
    submittedAt?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    approvalComments?: string | null
    rejectionReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExpenseClaimCreateManyApproverInput = {
    id?: string
    claimNumber: string
    employeeId: string
    expenseTypeId: string
    expenseRoleConfigId: string
    expenseData: JsonNullValueInput | InputJsonValue
    status?: $Enums.ExpenseClaimStatus
    submittedAt?: Date | string
    approvedAt?: Date | string | null
    approvalComments?: string | null
    rejectionReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserDrugInventoryCreateManyEmployeeInput = {
    id?: string
    drugId: string
    quantity: number
    lastRestockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserGiftInventoryCreateManyEmployeeInput = {
    id?: string
    giftId: string
    quantity: number
    lastRestockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GiftCreateManyCreatedByInput = {
    id?: string
    name: string
    description?: string | null
    unitCost: Decimal | DecimalJsLike | number | string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    giftImages?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
  }

  export type DoctorDistributionCreateManyEmployeeInput = {
    id?: string
    doctorInteractionId: string
    distributedAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskPlannerCreateManyEmployeeInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.TaskPlannerStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorTaskCreateManyEmployeeInput = {
    id?: string
    plannerId: string
    doctorId: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChemistTaskCreateManyEmployeeInput = {
    id?: string
    plannerId: string
    chemistId: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TourPlanTaskCreateManyEmployeeInput = {
    id?: string
    plannerId: string
    tourPlanId: string
    location: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployeeUpdateWithoutReportingManagerInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    subordinates?: EmployeeUpdateManyWithoutReportingManagerNestedInput
    team?: TeamUpdateOneWithoutTeamMembersNestedInput
    leadsTeam?: TeamUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutReportingManagerInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    subordinates?: EmployeeUncheckedUpdateManyWithoutReportingManagerNestedInput
    leadsTeam?: TeamUncheckedUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUncheckedUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUncheckedUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUncheckedUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUncheckedUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateManyWithoutReportingManagerInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EmployeeTerritoryUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unassignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    territory?: TerritoryUpdateOneRequiredWithoutEmployeesNestedInput
  }

  export type EmployeeTerritoryUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    territoryId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unassignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EmployeeTerritoryUncheckedUpdateManyWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    territoryId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unassignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EmployeeTrainingRecordUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    trainingName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    completionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeTrainingRecordUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    trainingName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    completionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeTrainingRecordUncheckedUpdateManyWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    trainingName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    completionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorNoteUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneRequiredWithoutNotesNestedInput
  }

  export type DoctorNoteUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorNoteUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChemistNoteUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chemist?: ChemistUpdateOneRequiredWithoutNotesNestedInput
  }

  export type ChemistNoteUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    chemistId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChemistNoteUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    chemistId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorInteractionUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    interactionType?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneRequiredWithoutInteractionsNestedInput
    hospital?: HospitalUpdateOneWithoutDoctorInteractionsNestedInput
    DoctorDistribution?: DoctorDistributionUpdateManyWithoutDoctorInteractionNestedInput
    DoctorTask?: DoctorTaskUpdateOneWithoutDoctorInteractionsNestedInput
  }

  export type DoctorInteractionUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    interactionType?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    DoctorDistribution?: DoctorDistributionUncheckedUpdateManyWithoutDoctorInteractionNestedInput
  }

  export type DoctorInteractionUncheckedUpdateManyWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    interactionType?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorTaskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChemistInteractionUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    interactionType?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chemist?: ChemistUpdateOneRequiredWithoutInteractionsNestedInput
    chemistTask?: ChemistTaskUpdateOneWithoutChemistInteractionsNestedInput
  }

  export type ChemistInteractionUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    chemistId?: StringFieldUpdateOperationsInput | string
    interactionType?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chemistTaskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChemistInteractionUncheckedUpdateManyWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    chemistId?: StringFieldUpdateOperationsInput | string
    interactionType?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chemistTaskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DcrReportUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    taskType?: NullableEnumTaskTypeReferenceFieldUpdateOperationsInput | $Enums.TaskTypeReference | null
    reportDate?: DateTimeFieldUpdateOperationsInput | Date | string
    productsDiscussed?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    isDraft?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorTask?: DoctorTaskUpdateOneWithoutDcrReportsNestedInput
    chemistTask?: ChemistTaskUpdateOneWithoutDcrReportsNestedInput
    tourPlanTask?: TourPlanTaskUpdateOneWithoutDcrReportsNestedInput
  }

  export type DcrReportUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    taskType?: NullableEnumTaskTypeReferenceFieldUpdateOperationsInput | $Enums.TaskTypeReference | null
    reportDate?: DateTimeFieldUpdateOperationsInput | Date | string
    productsDiscussed?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    isDraft?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DcrReportUncheckedUpdateManyWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    taskType?: NullableEnumTaskTypeReferenceFieldUpdateOperationsInput | $Enums.TaskTypeReference | null
    reportDate?: DateTimeFieldUpdateOperationsInput | Date | string
    productsDiscussed?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    isDraft?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RcpaReportUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chemist?: ChemistUpdateOneRequiredWithoutRcpaReportsNestedInput
    drugData?: RcpaDrugDataUpdateManyWithoutRcpaReportNestedInput
  }

  export type RcpaReportUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    chemistId?: StringFieldUpdateOperationsInput | string
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    drugData?: RcpaDrugDataUncheckedUpdateManyWithoutRcpaReportNestedInput
  }

  export type RcpaReportUncheckedUpdateManyWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    chemistId?: StringFieldUpdateOperationsInput | string
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CheckInUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkInLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    checkInLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    checkOutLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    checkOutLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CheckInUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkInLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    checkInLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    checkOutLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    checkOutLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CheckInUncheckedUpdateManyWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkInLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    checkInLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    checkOutLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    checkOutLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chemist?: ChemistUpdateOneWithoutOrdersNestedInput
    items?: OrderItemUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    chemistId?: NullableStringFieldUpdateOperationsInput | string | null
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    chemistId?: NullableStringFieldUpdateOperationsInput | string | null
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qualification?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hospitalAssociations?: DoctorHospitalAssociationUpdateManyWithoutDoctorNestedInput
    consultationSchedules?: DoctorConsultationScheduleUpdateManyWithoutDoctorNestedInput
    interactions?: DoctorInteractionUpdateManyWithoutDoctorNestedInput
    notes?: DoctorNoteUpdateManyWithoutDoctorNestedInput
    chemistRelations?: DoctorChemistRelationUpdateManyWithoutDoctorNestedInput
    DoctorTask?: DoctorTaskUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qualification?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hospitalAssociations?: DoctorHospitalAssociationUncheckedUpdateManyWithoutDoctorNestedInput
    consultationSchedules?: DoctorConsultationScheduleUncheckedUpdateManyWithoutDoctorNestedInput
    interactions?: DoctorInteractionUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: DoctorNoteUncheckedUpdateManyWithoutDoctorNestedInput
    chemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutDoctorNestedInput
    DoctorTask?: DoctorTaskUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qualification?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DrugUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    indications?: NullableStringFieldUpdateOperationsInput | string | null
    sideEffects?: NullableStringFieldUpdateOperationsInput | string | null
    safetyAdvice?: NullableStringFieldUpdateOperationsInput | string | null
    dosageForms?: NullableJsonNullValueInput | InputJsonValue
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryApprovals?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    images?: NullableJsonNullValueInput | InputJsonValue
    marketingMaterials?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    orderItems?: OrderItemUpdateManyWithoutDrugNestedInput
    rcpaData?: RcpaDrugDataUpdateManyWithoutDrugNestedInput
    UserDrugInventory?: UserDrugInventoryUpdateManyWithoutDrugNestedInput
    DoctorDistributionDrugItem?: DoctorDistributionDrugItemUpdateManyWithoutDrugNestedInput
  }

  export type DrugUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    indications?: NullableStringFieldUpdateOperationsInput | string | null
    sideEffects?: NullableStringFieldUpdateOperationsInput | string | null
    safetyAdvice?: NullableStringFieldUpdateOperationsInput | string | null
    dosageForms?: NullableJsonNullValueInput | InputJsonValue
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryApprovals?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    images?: NullableJsonNullValueInput | InputJsonValue
    marketingMaterials?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    orderItems?: OrderItemUncheckedUpdateManyWithoutDrugNestedInput
    rcpaData?: RcpaDrugDataUncheckedUpdateManyWithoutDrugNestedInput
    UserDrugInventory?: UserDrugInventoryUncheckedUpdateManyWithoutDrugNestedInput
    DoctorDistributionDrugItem?: DoctorDistributionDrugItemUncheckedUpdateManyWithoutDrugNestedInput
  }

  export type DrugUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    indications?: NullableStringFieldUpdateOperationsInput | string | null
    sideEffects?: NullableStringFieldUpdateOperationsInput | string | null
    safetyAdvice?: NullableStringFieldUpdateOperationsInput | string | null
    dosageForms?: NullableJsonNullValueInput | InputJsonValue
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryApprovals?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    images?: NullableJsonNullValueInput | InputJsonValue
    marketingMaterials?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ChemistUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChemistTypeFieldUpdateOperationsInput | $Enums.ChemistType
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    visitingHours?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    chemistChain?: ChemistChainUpdateOneWithoutChemistsNestedInput
    territory?: TerritoryUpdateOneRequiredWithoutChemistsNestedInput
    notes?: ChemistNoteUpdateManyWithoutChemistNestedInput
    interactions?: ChemistInteractionUpdateManyWithoutChemistNestedInput
    doctorRelations?: DoctorChemistRelationUpdateManyWithoutChemistNestedInput
    orders?: OrderUpdateManyWithoutChemistNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutChemistNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutChemistNestedInput
  }

  export type ChemistUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    chemistChainId?: NullableStringFieldUpdateOperationsInput | string | null
    territoryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChemistTypeFieldUpdateOperationsInput | $Enums.ChemistType
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    visitingHours?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: ChemistNoteUncheckedUpdateManyWithoutChemistNestedInput
    interactions?: ChemistInteractionUncheckedUpdateManyWithoutChemistNestedInput
    doctorRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutChemistNestedInput
    orders?: OrderUncheckedUpdateManyWithoutChemistNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutChemistNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutChemistNestedInput
  }

  export type ChemistUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    chemistChainId?: NullableStringFieldUpdateOperationsInput | string | null
    territoryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChemistTypeFieldUpdateOperationsInput | $Enums.ChemistType
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    visitingHours?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DoctorChemistRelationUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneRequiredWithoutChemistRelationsNestedInput
    chemist?: ChemistUpdateOneRequiredWithoutDoctorRelationsNestedInput
  }

  export type DoctorChemistRelationUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    chemistId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorChemistRelationUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    chemistId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExpenseClaimUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    claimNumber?: StringFieldUpdateOperationsInput | string
    expenseData?: JsonNullValueInput | InputJsonValue
    status?: EnumExpenseClaimStatusFieldUpdateOperationsInput | $Enums.ExpenseClaimStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalComments?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expenseType?: ExpenseTypeUpdateOneRequiredWithoutExpenseClaimsNestedInput
    expenseRoleConfig?: ExpenseRoleConfigUpdateOneRequiredWithoutExpenseClaimsNestedInput
    approver?: EmployeeUpdateOneWithoutApprovedClaimsNestedInput
  }

  export type ExpenseClaimUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    claimNumber?: StringFieldUpdateOperationsInput | string
    expenseTypeId?: StringFieldUpdateOperationsInput | string
    expenseRoleConfigId?: StringFieldUpdateOperationsInput | string
    expenseData?: JsonNullValueInput | InputJsonValue
    status?: EnumExpenseClaimStatusFieldUpdateOperationsInput | $Enums.ExpenseClaimStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvalComments?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExpenseClaimUncheckedUpdateManyWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    claimNumber?: StringFieldUpdateOperationsInput | string
    expenseTypeId?: StringFieldUpdateOperationsInput | string
    expenseRoleConfigId?: StringFieldUpdateOperationsInput | string
    expenseData?: JsonNullValueInput | InputJsonValue
    status?: EnumExpenseClaimStatusFieldUpdateOperationsInput | $Enums.ExpenseClaimStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvalComments?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExpenseClaimUpdateWithoutApproverInput = {
    id?: StringFieldUpdateOperationsInput | string
    claimNumber?: StringFieldUpdateOperationsInput | string
    expenseData?: JsonNullValueInput | InputJsonValue
    status?: EnumExpenseClaimStatusFieldUpdateOperationsInput | $Enums.ExpenseClaimStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalComments?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutExpenseClaimsNestedInput
    expenseType?: ExpenseTypeUpdateOneRequiredWithoutExpenseClaimsNestedInput
    expenseRoleConfig?: ExpenseRoleConfigUpdateOneRequiredWithoutExpenseClaimsNestedInput
  }

  export type ExpenseClaimUncheckedUpdateWithoutApproverInput = {
    id?: StringFieldUpdateOperationsInput | string
    claimNumber?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    expenseTypeId?: StringFieldUpdateOperationsInput | string
    expenseRoleConfigId?: StringFieldUpdateOperationsInput | string
    expenseData?: JsonNullValueInput | InputJsonValue
    status?: EnumExpenseClaimStatusFieldUpdateOperationsInput | $Enums.ExpenseClaimStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalComments?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExpenseClaimUncheckedUpdateManyWithoutApproverInput = {
    id?: StringFieldUpdateOperationsInput | string
    claimNumber?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    expenseTypeId?: StringFieldUpdateOperationsInput | string
    expenseRoleConfigId?: StringFieldUpdateOperationsInput | string
    expenseData?: JsonNullValueInput | InputJsonValue
    status?: EnumExpenseClaimStatusFieldUpdateOperationsInput | $Enums.ExpenseClaimStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalComments?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserDrugInventoryUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    lastRestockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    drug?: DrugUpdateOneRequiredWithoutUserDrugInventoryNestedInput
    doctorDistributionDrugItems?: DoctorDistributionDrugItemUpdateManyWithoutFromInventoryNestedInput
  }

  export type UserDrugInventoryUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    drugId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    lastRestockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorDistributionDrugItems?: DoctorDistributionDrugItemUncheckedUpdateManyWithoutFromInventoryNestedInput
  }

  export type UserDrugInventoryUncheckedUpdateManyWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    drugId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    lastRestockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserGiftInventoryUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    lastRestockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gift?: GiftUpdateOneRequiredWithoutUserGiftInventoriesNestedInput
    doctorDistributionGiftItems?: DoctorDistributionGiftItemUpdateManyWithoutFromInventoryNestedInput
  }

  export type UserGiftInventoryUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    giftId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    lastRestockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorDistributionGiftItems?: DoctorDistributionGiftItemUncheckedUpdateManyWithoutFromInventoryNestedInput
  }

  export type UserGiftInventoryUncheckedUpdateManyWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    giftId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    lastRestockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GiftUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    giftImages?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userGiftInventories?: UserGiftInventoryUpdateManyWithoutGiftNestedInput
    doctorDistributionGiftItems?: DoctorDistributionGiftItemUpdateManyWithoutGiftNestedInput
  }

  export type GiftUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    giftImages?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userGiftInventories?: UserGiftInventoryUncheckedUpdateManyWithoutGiftNestedInput
    doctorDistributionGiftItems?: DoctorDistributionGiftItemUncheckedUpdateManyWithoutGiftNestedInput
  }

  export type GiftUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    giftImages?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DoctorDistributionUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    distributedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorInteraction?: DoctorInteractionUpdateOneRequiredWithoutDoctorDistributionNestedInput
    drugItems?: DoctorDistributionDrugItemUpdateManyWithoutDoctorDistributionNestedInput
    giftItems?: DoctorDistributionGiftItemUpdateManyWithoutDoctorDistributionNestedInput
  }

  export type DoctorDistributionUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorInteractionId?: StringFieldUpdateOperationsInput | string
    distributedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    drugItems?: DoctorDistributionDrugItemUncheckedUpdateManyWithoutDoctorDistributionNestedInput
    giftItems?: DoctorDistributionGiftItemUncheckedUpdateManyWithoutDoctorDistributionNestedInput
  }

  export type DoctorDistributionUncheckedUpdateManyWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorInteractionId?: StringFieldUpdateOperationsInput | string
    distributedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskPlannerUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTaskPlannerStatusFieldUpdateOperationsInput | $Enums.TaskPlannerStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorTasks?: DoctorTaskUpdateManyWithoutPlannerNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutPlannerNestedInput
    tourPlanTasks?: TourPlanTaskUpdateManyWithoutPlannerNestedInput
  }

  export type TaskPlannerUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTaskPlannerStatusFieldUpdateOperationsInput | $Enums.TaskPlannerStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorTasks?: DoctorTaskUncheckedUpdateManyWithoutPlannerNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutPlannerNestedInput
    tourPlanTasks?: TourPlanTaskUncheckedUpdateManyWithoutPlannerNestedInput
  }

  export type TaskPlannerUncheckedUpdateManyWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTaskPlannerStatusFieldUpdateOperationsInput | $Enums.TaskPlannerStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorTaskUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    planner?: TaskPlannerUpdateOneRequiredWithoutDoctorTasksNestedInput
    doctor?: DoctorUpdateOneRequiredWithoutDoctorTaskNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutDoctorTaskNestedInput
    dcrReports?: DcrReportUpdateManyWithoutDoctorTaskNestedInput
  }

  export type DoctorTaskUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    plannerId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutDoctorTaskNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutDoctorTaskNestedInput
  }

  export type DoctorTaskUncheckedUpdateManyWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    plannerId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChemistTaskUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    planner?: TaskPlannerUpdateOneRequiredWithoutChemistTasksNestedInput
    chemist?: ChemistUpdateOneRequiredWithoutChemistTasksNestedInput
    chemistInteractions?: ChemistInteractionUpdateManyWithoutChemistTaskNestedInput
    dcrReports?: DcrReportUpdateManyWithoutChemistTaskNestedInput
  }

  export type ChemistTaskUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    plannerId?: StringFieldUpdateOperationsInput | string
    chemistId?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chemistInteractions?: ChemistInteractionUncheckedUpdateManyWithoutChemistTaskNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutChemistTaskNestedInput
  }

  export type ChemistTaskUncheckedUpdateManyWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    plannerId?: StringFieldUpdateOperationsInput | string
    chemistId?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TourPlanTaskUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    planner?: TaskPlannerUpdateOneRequiredWithoutTourPlanTasksNestedInput
    tourPlan?: TourPlanUpdateOneRequiredWithoutTourTasksNestedInput
    tourPlanReports?: TourPlanReportUpdateManyWithoutTourTaskNestedInput
    dcrReports?: DcrReportUpdateManyWithoutTourPlanTaskNestedInput
  }

  export type TourPlanTaskUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    plannerId?: StringFieldUpdateOperationsInput | string
    tourPlanId?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tourPlanReports?: TourPlanReportUncheckedUpdateManyWithoutTourTaskNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutTourPlanTaskNestedInput
  }

  export type TourPlanTaskUncheckedUpdateManyWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    plannerId?: StringFieldUpdateOperationsInput | string
    tourPlanId?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeCreateManyTeamInput = {
    id?: string
    organizationId: string
    email: string
    passwordHash: string
    firstName: string
    lastName?: string | null
    phone?: string | null
    profilePic?: string | null
    role: $Enums.EmployeeRole
    reportingManagerId?: string | null
    employeeCode?: string | null
    city?: string | null
    state?: string | null
    assignedLatitude?: Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
  }

  export type EmployeeUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    reportingManager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutReportingManagerNestedInput
    leadsTeam?: TeamUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    reportingManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    subordinates?: EmployeeUncheckedUpdateManyWithoutReportingManagerNestedInput
    leadsTeam?: TeamUncheckedUpdateOneWithoutLeadNameNestedInput
    territories?: EmployeeTerritoryUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingRecords?: EmployeeTrainingRecordUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorNotes?: DoctorNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistNotes?: ChemistNoteUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistInteractions?: ChemistInteractionUncheckedUpdateManyWithoutEmployeeNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutEmployeeNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutEmployeeNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutEmployeeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutEmployeeNestedInput
    ordersCreated?: OrderUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorsCreated?: DoctorUncheckedUpdateManyWithoutCreatedByNestedInput
    drugsCreated?: DrugUncheckedUpdateManyWithoutCreatedByNestedInput
    chemistsCreated?: ChemistUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorChemistRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutCreatedByNestedInput
    expenseClaims?: ExpenseClaimUncheckedUpdateManyWithoutEmployeeNestedInput
    approvedClaims?: ExpenseClaimUncheckedUpdateManyWithoutApproverNestedInput
    drugInventories?: UserDrugInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftInventories?: UserGiftInventoryUncheckedUpdateManyWithoutEmployeeNestedInput
    giftsCreated?: GiftUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorDistributions?: DoctorDistributionUncheckedUpdateManyWithoutEmployeeNestedInput
    taskPlans?: TaskPlannerUncheckedUpdateManyWithoutEmployeeNestedInput
    doctorTasks?: DoctorTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutEmployeeNestedInput
    tourPlanTasks?: TourPlanTaskUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateManyWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    reportingManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    assignedLatitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignedLongitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TerritoryCreateManyParentTerritoryInput = {
    id?: string
    organizationId: string
    name: string
    type: string
    boundaries?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployeeTerritoryCreateManyTerritoryInput = {
    id?: string
    employeeId: string
    assignedAt: Date | string
    unassignedAt?: Date | string | null
    isPrimary?: boolean
  }

  export type HospitalCreateManyTerritoryInput = {
    id?: string
    organizationId: string
    hospitalChainId?: string | null
    name: string
    type: string
    address: string
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
  }

  export type ChemistCreateManyTerritoryInput = {
    id?: string
    organizationId: string
    chemistChainId?: string | null
    name: string
    type: $Enums.ChemistType
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    profilePictureUrl?: string | null
    visitingHours?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isActive?: boolean
  }

  export type TerritoryUpdateWithoutParentTerritoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    boundaries?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    childTerritories?: TerritoryUpdateManyWithoutParentTerritoryNestedInput
    employees?: EmployeeTerritoryUpdateManyWithoutTerritoryNestedInput
    hospitals?: HospitalUpdateManyWithoutTerritoryNestedInput
    chemists?: ChemistUpdateManyWithoutTerritoryNestedInput
  }

  export type TerritoryUncheckedUpdateWithoutParentTerritoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    boundaries?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    childTerritories?: TerritoryUncheckedUpdateManyWithoutParentTerritoryNestedInput
    employees?: EmployeeTerritoryUncheckedUpdateManyWithoutTerritoryNestedInput
    hospitals?: HospitalUncheckedUpdateManyWithoutTerritoryNestedInput
    chemists?: ChemistUncheckedUpdateManyWithoutTerritoryNestedInput
  }

  export type TerritoryUncheckedUpdateManyWithoutParentTerritoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    boundaries?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeTerritoryUpdateWithoutTerritoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unassignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    employee?: EmployeeUpdateOneRequiredWithoutTerritoriesNestedInput
  }

  export type EmployeeTerritoryUncheckedUpdateWithoutTerritoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unassignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EmployeeTerritoryUncheckedUpdateManyWithoutTerritoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unassignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
  }

  export type HospitalUpdateWithoutTerritoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hospitalChain?: HospitalChainUpdateOneWithoutHospitalsNestedInput
    doctorAssociations?: DoctorHospitalAssociationUpdateManyWithoutHospitalNestedInput
    consultationSchedules?: DoctorConsultationScheduleUpdateManyWithoutHospitalNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateWithoutTerritoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    hospitalChainId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    doctorAssociations?: DoctorHospitalAssociationUncheckedUpdateManyWithoutHospitalNestedInput
    consultationSchedules?: DoctorConsultationScheduleUncheckedUpdateManyWithoutHospitalNestedInput
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateManyWithoutTerritoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    hospitalChainId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ChemistUpdateWithoutTerritoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChemistTypeFieldUpdateOperationsInput | $Enums.ChemistType
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    visitingHours?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    chemistChain?: ChemistChainUpdateOneWithoutChemistsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutChemistsCreatedNestedInput
    notes?: ChemistNoteUpdateManyWithoutChemistNestedInput
    interactions?: ChemistInteractionUpdateManyWithoutChemistNestedInput
    doctorRelations?: DoctorChemistRelationUpdateManyWithoutChemistNestedInput
    orders?: OrderUpdateManyWithoutChemistNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutChemistNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutChemistNestedInput
  }

  export type ChemistUncheckedUpdateWithoutTerritoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    chemistChainId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChemistTypeFieldUpdateOperationsInput | $Enums.ChemistType
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    visitingHours?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: ChemistNoteUncheckedUpdateManyWithoutChemistNestedInput
    interactions?: ChemistInteractionUncheckedUpdateManyWithoutChemistNestedInput
    doctorRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutChemistNestedInput
    orders?: OrderUncheckedUpdateManyWithoutChemistNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutChemistNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutChemistNestedInput
  }

  export type ChemistUncheckedUpdateManyWithoutTerritoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    chemistChainId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChemistTypeFieldUpdateOperationsInput | $Enums.ChemistType
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    visitingHours?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type HospitalCreateManyHospitalChainInput = {
    id?: string
    organizationId: string
    territoryId: string
    name: string
    type: string
    address: string
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
  }

  export type HospitalUpdateWithoutHospitalChainInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    territory?: TerritoryUpdateOneRequiredWithoutHospitalsNestedInput
    doctorAssociations?: DoctorHospitalAssociationUpdateManyWithoutHospitalNestedInput
    consultationSchedules?: DoctorConsultationScheduleUpdateManyWithoutHospitalNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateWithoutHospitalChainInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    territoryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    doctorAssociations?: DoctorHospitalAssociationUncheckedUpdateManyWithoutHospitalNestedInput
    consultationSchedules?: DoctorConsultationScheduleUncheckedUpdateManyWithoutHospitalNestedInput
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateManyWithoutHospitalChainInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    territoryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ChemistCreateManyChemistChainInput = {
    id?: string
    organizationId: string
    territoryId: string
    name: string
    type: $Enums.ChemistType
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    pincode?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    profilePictureUrl?: string | null
    visitingHours?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isActive?: boolean
  }

  export type ChemistUpdateWithoutChemistChainInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChemistTypeFieldUpdateOperationsInput | $Enums.ChemistType
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    visitingHours?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    territory?: TerritoryUpdateOneRequiredWithoutChemistsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutChemistsCreatedNestedInput
    notes?: ChemistNoteUpdateManyWithoutChemistNestedInput
    interactions?: ChemistInteractionUpdateManyWithoutChemistNestedInput
    doctorRelations?: DoctorChemistRelationUpdateManyWithoutChemistNestedInput
    orders?: OrderUpdateManyWithoutChemistNestedInput
    rcpaReports?: RcpaReportUpdateManyWithoutChemistNestedInput
    chemistTasks?: ChemistTaskUpdateManyWithoutChemistNestedInput
  }

  export type ChemistUncheckedUpdateWithoutChemistChainInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    territoryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChemistTypeFieldUpdateOperationsInput | $Enums.ChemistType
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    visitingHours?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: ChemistNoteUncheckedUpdateManyWithoutChemistNestedInput
    interactions?: ChemistInteractionUncheckedUpdateManyWithoutChemistNestedInput
    doctorRelations?: DoctorChemistRelationUncheckedUpdateManyWithoutChemistNestedInput
    orders?: OrderUncheckedUpdateManyWithoutChemistNestedInput
    rcpaReports?: RcpaReportUncheckedUpdateManyWithoutChemistNestedInput
    chemistTasks?: ChemistTaskUncheckedUpdateManyWithoutChemistNestedInput
  }

  export type ChemistUncheckedUpdateManyWithoutChemistChainInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    territoryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChemistTypeFieldUpdateOperationsInput | $Enums.ChemistType
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    pincode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    visitingHours?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DoctorHospitalAssociationCreateManyHospitalInput = {
    id?: string
    doctorId: string
    department?: string | null
    position?: string | null
    isPrimary?: boolean
    associationStartDate?: Date | string | null
    associationEndDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorConsultationScheduleCreateManyHospitalInput = {
    id?: string
    doctorId: string
    dayOfWeek: $Enums.DayOfWeek
    startTime: Date | string
    endTime: Date | string
    consultationType: $Enums.ConsultationType
    isActive?: boolean
    effectiveFrom?: Date | string | null
    effectiveTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorInteractionCreateManyHospitalInput = {
    id?: string
    doctorId: string
    employeeId: string
    interactionType: $Enums.InteractionType
    startTime: Date | string
    endTime?: Date | string | null
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    rating?: number | null
    createdAt?: Date | string
    doctorTaskId?: string | null
  }

  export type DoctorHospitalAssociationUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    associationStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    associationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneRequiredWithoutHospitalAssociationsNestedInput
  }

  export type DoctorHospitalAssociationUncheckedUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    associationStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    associationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorHospitalAssociationUncheckedUpdateManyWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    associationStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    associationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorConsultationScheduleUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    consultationType?: EnumConsultationTypeFieldUpdateOperationsInput | $Enums.ConsultationType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    effectiveTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneRequiredWithoutConsultationSchedulesNestedInput
  }

  export type DoctorConsultationScheduleUncheckedUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    consultationType?: EnumConsultationTypeFieldUpdateOperationsInput | $Enums.ConsultationType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    effectiveTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorConsultationScheduleUncheckedUpdateManyWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    consultationType?: EnumConsultationTypeFieldUpdateOperationsInput | $Enums.ConsultationType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    effectiveTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorInteractionUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    interactionType?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneRequiredWithoutInteractionsNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutDoctorInteractionsNestedInput
    DoctorDistribution?: DoctorDistributionUpdateManyWithoutDoctorInteractionNestedInput
    DoctorTask?: DoctorTaskUpdateOneWithoutDoctorInteractionsNestedInput
  }

  export type DoctorInteractionUncheckedUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    interactionType?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    DoctorDistribution?: DoctorDistributionUncheckedUpdateManyWithoutDoctorInteractionNestedInput
  }

  export type DoctorInteractionUncheckedUpdateManyWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    interactionType?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorTaskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DoctorHospitalAssociationCreateManyDoctorInput = {
    id?: string
    hospitalId: string
    department?: string | null
    position?: string | null
    isPrimary?: boolean
    associationStartDate?: Date | string | null
    associationEndDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorConsultationScheduleCreateManyDoctorInput = {
    id?: string
    hospitalId: string
    dayOfWeek: $Enums.DayOfWeek
    startTime: Date | string
    endTime: Date | string
    consultationType: $Enums.ConsultationType
    isActive?: boolean
    effectiveFrom?: Date | string | null
    effectiveTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorInteractionCreateManyDoctorInput = {
    id?: string
    employeeId: string
    hospitalId?: string | null
    interactionType: $Enums.InteractionType
    startTime: Date | string
    endTime?: Date | string | null
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    rating?: number | null
    createdAt?: Date | string
    doctorTaskId?: string | null
  }

  export type DoctorNoteCreateManyDoctorInput = {
    id?: string
    createdById: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorChemistRelationCreateManyDoctorInput = {
    id?: string
    chemistId: string
    createdAt?: Date | string
    createdById: string
  }

  export type DoctorTaskCreateManyDoctorInput = {
    id?: string
    plannerId: string
    employeeId: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorHospitalAssociationUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    associationStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    associationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hospital?: HospitalUpdateOneRequiredWithoutDoctorAssociationsNestedInput
  }

  export type DoctorHospitalAssociationUncheckedUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    associationStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    associationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorHospitalAssociationUncheckedUpdateManyWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    associationStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    associationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorConsultationScheduleUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    consultationType?: EnumConsultationTypeFieldUpdateOperationsInput | $Enums.ConsultationType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    effectiveTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hospital?: HospitalUpdateOneRequiredWithoutConsultationSchedulesNestedInput
  }

  export type DoctorConsultationScheduleUncheckedUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    consultationType?: EnumConsultationTypeFieldUpdateOperationsInput | $Enums.ConsultationType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    effectiveTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorConsultationScheduleUncheckedUpdateManyWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    consultationType?: EnumConsultationTypeFieldUpdateOperationsInput | $Enums.ConsultationType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    effectiveTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorInteractionUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    interactionType?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutDoctorInteractionsNestedInput
    hospital?: HospitalUpdateOneWithoutDoctorInteractionsNestedInput
    DoctorDistribution?: DoctorDistributionUpdateManyWithoutDoctorInteractionNestedInput
    DoctorTask?: DoctorTaskUpdateOneWithoutDoctorInteractionsNestedInput
  }

  export type DoctorInteractionUncheckedUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    interactionType?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    DoctorDistribution?: DoctorDistributionUncheckedUpdateManyWithoutDoctorInteractionNestedInput
  }

  export type DoctorInteractionUncheckedUpdateManyWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    interactionType?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorTaskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DoctorNoteUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: EmployeeUpdateOneRequiredWithoutDoctorNotesNestedInput
  }

  export type DoctorNoteUncheckedUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorNoteUncheckedUpdateManyWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorChemistRelationUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chemist?: ChemistUpdateOneRequiredWithoutDoctorRelationsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutDoctorChemistRelationsNestedInput
  }

  export type DoctorChemistRelationUncheckedUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    chemistId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type DoctorChemistRelationUncheckedUpdateManyWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    chemistId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type DoctorTaskUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    planner?: TaskPlannerUpdateOneRequiredWithoutDoctorTasksNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutDoctorTasksNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutDoctorTaskNestedInput
    dcrReports?: DcrReportUpdateManyWithoutDoctorTaskNestedInput
  }

  export type DoctorTaskUncheckedUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    plannerId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutDoctorTaskNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutDoctorTaskNestedInput
  }

  export type DoctorTaskUncheckedUpdateManyWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    plannerId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorDistributionCreateManyDoctorInteractionInput = {
    id?: string
    employeeId: string
    distributedAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorDistributionUpdateWithoutDoctorInteractionInput = {
    id?: StringFieldUpdateOperationsInput | string
    distributedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutDoctorDistributionsNestedInput
    drugItems?: DoctorDistributionDrugItemUpdateManyWithoutDoctorDistributionNestedInput
    giftItems?: DoctorDistributionGiftItemUpdateManyWithoutDoctorDistributionNestedInput
  }

  export type DoctorDistributionUncheckedUpdateWithoutDoctorInteractionInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    distributedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    drugItems?: DoctorDistributionDrugItemUncheckedUpdateManyWithoutDoctorDistributionNestedInput
    giftItems?: DoctorDistributionGiftItemUncheckedUpdateManyWithoutDoctorDistributionNestedInput
  }

  export type DoctorDistributionUncheckedUpdateManyWithoutDoctorInteractionInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    distributedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemCreateManyDrugInput = {
    orderId: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    subtotal: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
  }

  export type RcpaDrugDataCreateManyDrugInput = {
    id?: string
    rcpaReportId: string
    competitorDrugName?: string | null
    ownQuantity: number
    competitorQuantity: number
    createdAt?: Date | string
  }

  export type UserDrugInventoryCreateManyDrugInput = {
    id?: string
    employeeId: string
    quantity: number
    lastRestockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorDistributionDrugItemCreateManyDrugInput = {
    id?: string
    doctorDistributionId: string
    fromInventoryId: string
    quantity: number
    unitCost: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderItemUpdateWithoutDrugInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneRequiredWithoutItemsNestedInput
  }

  export type OrderItemUncheckedUpdateWithoutDrugInput = {
    orderId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemUncheckedUpdateManyWithoutDrugInput = {
    orderId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RcpaDrugDataUpdateWithoutDrugInput = {
    id?: StringFieldUpdateOperationsInput | string
    competitorDrugName?: NullableStringFieldUpdateOperationsInput | string | null
    ownQuantity?: IntFieldUpdateOperationsInput | number
    competitorQuantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rcpaReport?: RcpaReportUpdateOneRequiredWithoutDrugDataNestedInput
  }

  export type RcpaDrugDataUncheckedUpdateWithoutDrugInput = {
    id?: StringFieldUpdateOperationsInput | string
    rcpaReportId?: StringFieldUpdateOperationsInput | string
    competitorDrugName?: NullableStringFieldUpdateOperationsInput | string | null
    ownQuantity?: IntFieldUpdateOperationsInput | number
    competitorQuantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RcpaDrugDataUncheckedUpdateManyWithoutDrugInput = {
    id?: StringFieldUpdateOperationsInput | string
    rcpaReportId?: StringFieldUpdateOperationsInput | string
    competitorDrugName?: NullableStringFieldUpdateOperationsInput | string | null
    ownQuantity?: IntFieldUpdateOperationsInput | number
    competitorQuantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserDrugInventoryUpdateWithoutDrugInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    lastRestockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutDrugInventoriesNestedInput
    doctorDistributionDrugItems?: DoctorDistributionDrugItemUpdateManyWithoutFromInventoryNestedInput
  }

  export type UserDrugInventoryUncheckedUpdateWithoutDrugInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    lastRestockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorDistributionDrugItems?: DoctorDistributionDrugItemUncheckedUpdateManyWithoutFromInventoryNestedInput
  }

  export type UserDrugInventoryUncheckedUpdateManyWithoutDrugInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    lastRestockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorDistributionDrugItemUpdateWithoutDrugInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorDistribution?: DoctorDistributionUpdateOneRequiredWithoutDrugItemsNestedInput
    fromInventory?: UserDrugInventoryUpdateOneRequiredWithoutDoctorDistributionDrugItemsNestedInput
  }

  export type DoctorDistributionDrugItemUncheckedUpdateWithoutDrugInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorDistributionId?: StringFieldUpdateOperationsInput | string
    fromInventoryId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorDistributionDrugItemUncheckedUpdateManyWithoutDrugInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorDistributionId?: StringFieldUpdateOperationsInput | string
    fromInventoryId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChemistNoteCreateManyChemistInput = {
    id?: string
    createdById: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChemistInteractionCreateManyChemistInput = {
    id?: string
    employeeId: string
    interactionType: $Enums.InteractionType
    startTime: Date | string
    endTime?: Date | string | null
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    rating?: number | null
    createdAt?: Date | string
    chemistTaskId?: string | null
  }

  export type DoctorChemistRelationCreateManyChemistInput = {
    id?: string
    doctorId: string
    createdAt?: Date | string
    createdById: string
  }

  export type OrderCreateManyChemistInput = {
    id?: string
    organizationId: string
    totalAmount: Decimal | DecimalJsLike | number | string
    status: $Enums.OrderStatus
    orderDate: Date | string
    deliveryDate?: Date | string | null
    specialInstructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
  }

  export type RcpaReportCreateManyChemistInput = {
    id?: string
    organizationId: string
    employeeId: string
    remarks?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChemistTaskCreateManyChemistInput = {
    id?: string
    plannerId: string
    employeeId: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChemistNoteUpdateWithoutChemistInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: EmployeeUpdateOneRequiredWithoutChemistNotesNestedInput
  }

  export type ChemistNoteUncheckedUpdateWithoutChemistInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChemistNoteUncheckedUpdateManyWithoutChemistInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChemistInteractionUpdateWithoutChemistInput = {
    id?: StringFieldUpdateOperationsInput | string
    interactionType?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutChemistInteractionsNestedInput
    chemistTask?: ChemistTaskUpdateOneWithoutChemistInteractionsNestedInput
  }

  export type ChemistInteractionUncheckedUpdateWithoutChemistInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    interactionType?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chemistTaskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChemistInteractionUncheckedUpdateManyWithoutChemistInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    interactionType?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chemistTaskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DoctorChemistRelationUpdateWithoutChemistInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneRequiredWithoutChemistRelationsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutDoctorChemistRelationsNestedInput
  }

  export type DoctorChemistRelationUncheckedUpdateWithoutChemistInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type DoctorChemistRelationUncheckedUpdateManyWithoutChemistInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type OrderUpdateWithoutChemistInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: EmployeeUpdateOneRequiredWithoutOrdersCreatedNestedInput
    items?: OrderItemUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutChemistInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    items?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutChemistInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type RcpaReportUpdateWithoutChemistInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutRcpaReportsNestedInput
    drugData?: RcpaDrugDataUpdateManyWithoutRcpaReportNestedInput
  }

  export type RcpaReportUncheckedUpdateWithoutChemistInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    drugData?: RcpaDrugDataUncheckedUpdateManyWithoutRcpaReportNestedInput
  }

  export type RcpaReportUncheckedUpdateManyWithoutChemistInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChemistTaskUpdateWithoutChemistInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    planner?: TaskPlannerUpdateOneRequiredWithoutChemistTasksNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutChemistTasksNestedInput
    chemistInteractions?: ChemistInteractionUpdateManyWithoutChemistTaskNestedInput
    dcrReports?: DcrReportUpdateManyWithoutChemistTaskNestedInput
  }

  export type ChemistTaskUncheckedUpdateWithoutChemistInput = {
    id?: StringFieldUpdateOperationsInput | string
    plannerId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chemistInteractions?: ChemistInteractionUncheckedUpdateManyWithoutChemistTaskNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutChemistTaskNestedInput
  }

  export type ChemistTaskUncheckedUpdateManyWithoutChemistInput = {
    id?: StringFieldUpdateOperationsInput | string
    plannerId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemCreateManyOrderInput = {
    drugId: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    subtotal: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
  }

  export type OrderItemUpdateWithoutOrderInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    drug?: DrugUpdateOneRequiredWithoutOrderItemsNestedInput
  }

  export type OrderItemUncheckedUpdateWithoutOrderInput = {
    drugId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemUncheckedUpdateManyWithoutOrderInput = {
    drugId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RcpaDrugDataCreateManyRcpaReportInput = {
    id?: string
    drugId?: string | null
    competitorDrugName?: string | null
    ownQuantity: number
    competitorQuantity: number
    createdAt?: Date | string
  }

  export type RcpaDrugDataUpdateWithoutRcpaReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    competitorDrugName?: NullableStringFieldUpdateOperationsInput | string | null
    ownQuantity?: IntFieldUpdateOperationsInput | number
    competitorQuantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    drug?: DrugUpdateOneWithoutRcpaDataNestedInput
  }

  export type RcpaDrugDataUncheckedUpdateWithoutRcpaReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    drugId?: NullableStringFieldUpdateOperationsInput | string | null
    competitorDrugName?: NullableStringFieldUpdateOperationsInput | string | null
    ownQuantity?: IntFieldUpdateOperationsInput | number
    competitorQuantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RcpaDrugDataUncheckedUpdateManyWithoutRcpaReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    drugId?: NullableStringFieldUpdateOperationsInput | string | null
    competitorDrugName?: NullableStringFieldUpdateOperationsInput | string | null
    ownQuantity?: IntFieldUpdateOperationsInput | number
    competitorQuantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorTaskCreateManyPlannerInput = {
    id?: string
    employeeId: string
    doctorId: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChemistTaskCreateManyPlannerInput = {
    id?: string
    employeeId: string
    chemistId: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TourPlanTaskCreateManyPlannerInput = {
    id?: string
    employeeId: string
    tourPlanId: string
    location: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorTaskUpdateWithoutPlannerInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutDoctorTasksNestedInput
    doctor?: DoctorUpdateOneRequiredWithoutDoctorTaskNestedInput
    doctorInteractions?: DoctorInteractionUpdateManyWithoutDoctorTaskNestedInput
    dcrReports?: DcrReportUpdateManyWithoutDoctorTaskNestedInput
  }

  export type DoctorTaskUncheckedUpdateWithoutPlannerInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorInteractions?: DoctorInteractionUncheckedUpdateManyWithoutDoctorTaskNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutDoctorTaskNestedInput
  }

  export type DoctorTaskUncheckedUpdateManyWithoutPlannerInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChemistTaskUpdateWithoutPlannerInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutChemistTasksNestedInput
    chemist?: ChemistUpdateOneRequiredWithoutChemistTasksNestedInput
    chemistInteractions?: ChemistInteractionUpdateManyWithoutChemistTaskNestedInput
    dcrReports?: DcrReportUpdateManyWithoutChemistTaskNestedInput
  }

  export type ChemistTaskUncheckedUpdateWithoutPlannerInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    chemistId?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chemistInteractions?: ChemistInteractionUncheckedUpdateManyWithoutChemistTaskNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutChemistTaskNestedInput
  }

  export type ChemistTaskUncheckedUpdateManyWithoutPlannerInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    chemistId?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TourPlanTaskUpdateWithoutPlannerInput = {
    id?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutTourPlanTasksNestedInput
    tourPlan?: TourPlanUpdateOneRequiredWithoutTourTasksNestedInput
    tourPlanReports?: TourPlanReportUpdateManyWithoutTourTaskNestedInput
    dcrReports?: DcrReportUpdateManyWithoutTourPlanTaskNestedInput
  }

  export type TourPlanTaskUncheckedUpdateWithoutPlannerInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    tourPlanId?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tourPlanReports?: TourPlanReportUncheckedUpdateManyWithoutTourTaskNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutTourPlanTaskNestedInput
  }

  export type TourPlanTaskUncheckedUpdateManyWithoutPlannerInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    tourPlanId?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorInteractionCreateManyDoctorTaskInput = {
    id?: string
    doctorId: string
    employeeId: string
    hospitalId?: string | null
    interactionType: $Enums.InteractionType
    startTime: Date | string
    endTime?: Date | string | null
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    rating?: number | null
    createdAt?: Date | string
  }

  export type DcrReportCreateManyDoctorTaskInput = {
    id?: string
    organizationId: string
    employeeId: string
    taskType?: $Enums.TaskTypeReference | null
    reportDate: Date | string
    productsDiscussed?: string | null
    comments?: string | null
    isDraft?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorInteractionUpdateWithoutDoctorTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    interactionType?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneRequiredWithoutInteractionsNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutDoctorInteractionsNestedInput
    hospital?: HospitalUpdateOneWithoutDoctorInteractionsNestedInput
    DoctorDistribution?: DoctorDistributionUpdateManyWithoutDoctorInteractionNestedInput
  }

  export type DoctorInteractionUncheckedUpdateWithoutDoctorTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    interactionType?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    DoctorDistribution?: DoctorDistributionUncheckedUpdateManyWithoutDoctorInteractionNestedInput
  }

  export type DoctorInteractionUncheckedUpdateManyWithoutDoctorTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    interactionType?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DcrReportUpdateWithoutDoctorTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    taskType?: NullableEnumTaskTypeReferenceFieldUpdateOperationsInput | $Enums.TaskTypeReference | null
    reportDate?: DateTimeFieldUpdateOperationsInput | Date | string
    productsDiscussed?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    isDraft?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutDcrReportsNestedInput
    chemistTask?: ChemistTaskUpdateOneWithoutDcrReportsNestedInput
    tourPlanTask?: TourPlanTaskUpdateOneWithoutDcrReportsNestedInput
  }

  export type DcrReportUncheckedUpdateWithoutDoctorTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    taskType?: NullableEnumTaskTypeReferenceFieldUpdateOperationsInput | $Enums.TaskTypeReference | null
    reportDate?: DateTimeFieldUpdateOperationsInput | Date | string
    productsDiscussed?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    isDraft?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DcrReportUncheckedUpdateManyWithoutDoctorTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    taskType?: NullableEnumTaskTypeReferenceFieldUpdateOperationsInput | $Enums.TaskTypeReference | null
    reportDate?: DateTimeFieldUpdateOperationsInput | Date | string
    productsDiscussed?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    isDraft?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChemistInteractionCreateManyChemistTaskInput = {
    id?: string
    chemistId: string
    employeeId: string
    interactionType: $Enums.InteractionType
    startTime: Date | string
    endTime?: Date | string | null
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    rating?: number | null
    createdAt?: Date | string
  }

  export type DcrReportCreateManyChemistTaskInput = {
    id?: string
    organizationId: string
    employeeId: string
    taskType?: $Enums.TaskTypeReference | null
    reportDate: Date | string
    productsDiscussed?: string | null
    comments?: string | null
    isDraft?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChemistInteractionUpdateWithoutChemistTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    interactionType?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chemist?: ChemistUpdateOneRequiredWithoutInteractionsNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutChemistInteractionsNestedInput
  }

  export type ChemistInteractionUncheckedUpdateWithoutChemistTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    chemistId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    interactionType?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChemistInteractionUncheckedUpdateManyWithoutChemistTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    chemistId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    interactionType?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DcrReportUpdateWithoutChemistTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    taskType?: NullableEnumTaskTypeReferenceFieldUpdateOperationsInput | $Enums.TaskTypeReference | null
    reportDate?: DateTimeFieldUpdateOperationsInput | Date | string
    productsDiscussed?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    isDraft?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutDcrReportsNestedInput
    doctorTask?: DoctorTaskUpdateOneWithoutDcrReportsNestedInput
    tourPlanTask?: TourPlanTaskUpdateOneWithoutDcrReportsNestedInput
  }

  export type DcrReportUncheckedUpdateWithoutChemistTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    taskType?: NullableEnumTaskTypeReferenceFieldUpdateOperationsInput | $Enums.TaskTypeReference | null
    reportDate?: DateTimeFieldUpdateOperationsInput | Date | string
    productsDiscussed?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    isDraft?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DcrReportUncheckedUpdateManyWithoutChemistTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    taskType?: NullableEnumTaskTypeReferenceFieldUpdateOperationsInput | $Enums.TaskTypeReference | null
    reportDate?: DateTimeFieldUpdateOperationsInput | Date | string
    productsDiscussed?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    isDraft?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TourPlanReportCreateManyTourTaskInput = {
    id?: string
    interactionTime?: Date | string
    purpose?: string | null
    outcome?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DcrReportCreateManyTourPlanTaskInput = {
    id?: string
    organizationId: string
    employeeId: string
    taskType?: $Enums.TaskTypeReference | null
    reportDate: Date | string
    productsDiscussed?: string | null
    comments?: string | null
    isDraft?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TourPlanReportUpdateWithoutTourTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    interactionTime?: DateTimeFieldUpdateOperationsInput | Date | string
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TourPlanReportUncheckedUpdateWithoutTourTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    interactionTime?: DateTimeFieldUpdateOperationsInput | Date | string
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TourPlanReportUncheckedUpdateManyWithoutTourTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    interactionTime?: DateTimeFieldUpdateOperationsInput | Date | string
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DcrReportUpdateWithoutTourPlanTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    taskType?: NullableEnumTaskTypeReferenceFieldUpdateOperationsInput | $Enums.TaskTypeReference | null
    reportDate?: DateTimeFieldUpdateOperationsInput | Date | string
    productsDiscussed?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    isDraft?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutDcrReportsNestedInput
    doctorTask?: DoctorTaskUpdateOneWithoutDcrReportsNestedInput
    chemistTask?: ChemistTaskUpdateOneWithoutDcrReportsNestedInput
  }

  export type DcrReportUncheckedUpdateWithoutTourPlanTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    taskType?: NullableEnumTaskTypeReferenceFieldUpdateOperationsInput | $Enums.TaskTypeReference | null
    reportDate?: DateTimeFieldUpdateOperationsInput | Date | string
    productsDiscussed?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    isDraft?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DcrReportUncheckedUpdateManyWithoutTourPlanTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    taskType?: NullableEnumTaskTypeReferenceFieldUpdateOperationsInput | $Enums.TaskTypeReference | null
    reportDate?: DateTimeFieldUpdateOperationsInput | Date | string
    productsDiscussed?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    isDraft?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TourPlanTaskCreateManyTourPlanInput = {
    id?: string
    plannerId: string
    employeeId: string
    location: string
    taskDate: Date | string
    startTime: Date | string
    endTime: Date | string
    taskStatus?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TourPlanTaskUpdateWithoutTourPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    planner?: TaskPlannerUpdateOneRequiredWithoutTourPlanTasksNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutTourPlanTasksNestedInput
    tourPlanReports?: TourPlanReportUpdateManyWithoutTourTaskNestedInput
    dcrReports?: DcrReportUpdateManyWithoutTourPlanTaskNestedInput
  }

  export type TourPlanTaskUncheckedUpdateWithoutTourPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    plannerId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tourPlanReports?: TourPlanReportUncheckedUpdateManyWithoutTourTaskNestedInput
    dcrReports?: DcrReportUncheckedUpdateManyWithoutTourPlanTaskNestedInput
  }

  export type TourPlanTaskUncheckedUpdateManyWithoutTourPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    plannerId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    taskDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    taskStatus?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExpenseRoleConfigCreateManyExpenseTypeInput = {
    id?: string
    role: $Enums.EmployeeRole
    limits: JsonNullValueInput | InputJsonValue
    rates?: NullableJsonNullValueInput | InputJsonValue
    validationRules: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExpenseClaimCreateManyExpenseTypeInput = {
    id?: string
    claimNumber: string
    employeeId: string
    expenseRoleConfigId: string
    expenseData: JsonNullValueInput | InputJsonValue
    status?: $Enums.ExpenseClaimStatus
    submittedAt?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    approvalComments?: string | null
    rejectionReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExpenseRoleConfigUpdateWithoutExpenseTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    limits?: JsonNullValueInput | InputJsonValue
    rates?: NullableJsonNullValueInput | InputJsonValue
    validationRules?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expenseClaims?: ExpenseClaimUpdateManyWithoutExpenseRoleConfigNestedInput
  }

  export type ExpenseRoleConfigUncheckedUpdateWithoutExpenseTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    limits?: JsonNullValueInput | InputJsonValue
    rates?: NullableJsonNullValueInput | InputJsonValue
    validationRules?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expenseClaims?: ExpenseClaimUncheckedUpdateManyWithoutExpenseRoleConfigNestedInput
  }

  export type ExpenseRoleConfigUncheckedUpdateManyWithoutExpenseTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
    limits?: JsonNullValueInput | InputJsonValue
    rates?: NullableJsonNullValueInput | InputJsonValue
    validationRules?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExpenseClaimUpdateWithoutExpenseTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    claimNumber?: StringFieldUpdateOperationsInput | string
    expenseData?: JsonNullValueInput | InputJsonValue
    status?: EnumExpenseClaimStatusFieldUpdateOperationsInput | $Enums.ExpenseClaimStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalComments?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutExpenseClaimsNestedInput
    expenseRoleConfig?: ExpenseRoleConfigUpdateOneRequiredWithoutExpenseClaimsNestedInput
    approver?: EmployeeUpdateOneWithoutApprovedClaimsNestedInput
  }

  export type ExpenseClaimUncheckedUpdateWithoutExpenseTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    claimNumber?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    expenseRoleConfigId?: StringFieldUpdateOperationsInput | string
    expenseData?: JsonNullValueInput | InputJsonValue
    status?: EnumExpenseClaimStatusFieldUpdateOperationsInput | $Enums.ExpenseClaimStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvalComments?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExpenseClaimUncheckedUpdateManyWithoutExpenseTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    claimNumber?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    expenseRoleConfigId?: StringFieldUpdateOperationsInput | string
    expenseData?: JsonNullValueInput | InputJsonValue
    status?: EnumExpenseClaimStatusFieldUpdateOperationsInput | $Enums.ExpenseClaimStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvalComments?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExpenseClaimCreateManyExpenseRoleConfigInput = {
    id?: string
    claimNumber: string
    employeeId: string
    expenseTypeId: string
    expenseData: JsonNullValueInput | InputJsonValue
    status?: $Enums.ExpenseClaimStatus
    submittedAt?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    approvalComments?: string | null
    rejectionReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExpenseClaimUpdateWithoutExpenseRoleConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    claimNumber?: StringFieldUpdateOperationsInput | string
    expenseData?: JsonNullValueInput | InputJsonValue
    status?: EnumExpenseClaimStatusFieldUpdateOperationsInput | $Enums.ExpenseClaimStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalComments?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutExpenseClaimsNestedInput
    expenseType?: ExpenseTypeUpdateOneRequiredWithoutExpenseClaimsNestedInput
    approver?: EmployeeUpdateOneWithoutApprovedClaimsNestedInput
  }

  export type ExpenseClaimUncheckedUpdateWithoutExpenseRoleConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    claimNumber?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    expenseTypeId?: StringFieldUpdateOperationsInput | string
    expenseData?: JsonNullValueInput | InputJsonValue
    status?: EnumExpenseClaimStatusFieldUpdateOperationsInput | $Enums.ExpenseClaimStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvalComments?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExpenseClaimUncheckedUpdateManyWithoutExpenseRoleConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    claimNumber?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    expenseTypeId?: StringFieldUpdateOperationsInput | string
    expenseData?: JsonNullValueInput | InputJsonValue
    status?: EnumExpenseClaimStatusFieldUpdateOperationsInput | $Enums.ExpenseClaimStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvalComments?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserGiftInventoryCreateManyGiftInput = {
    id?: string
    employeeId: string
    quantity: number
    lastRestockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorDistributionGiftItemCreateManyGiftInput = {
    id?: string
    doctorDistributionId: string
    fromInventoryId: string
    quantity: number
    unitCost: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserGiftInventoryUpdateWithoutGiftInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    lastRestockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutGiftInventoriesNestedInput
    doctorDistributionGiftItems?: DoctorDistributionGiftItemUpdateManyWithoutFromInventoryNestedInput
  }

  export type UserGiftInventoryUncheckedUpdateWithoutGiftInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    lastRestockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorDistributionGiftItems?: DoctorDistributionGiftItemUncheckedUpdateManyWithoutFromInventoryNestedInput
  }

  export type UserGiftInventoryUncheckedUpdateManyWithoutGiftInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    lastRestockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorDistributionGiftItemUpdateWithoutGiftInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorDistribution?: DoctorDistributionUpdateOneRequiredWithoutGiftItemsNestedInput
    fromInventory?: UserGiftInventoryUpdateOneRequiredWithoutDoctorDistributionGiftItemsNestedInput
  }

  export type DoctorDistributionGiftItemUncheckedUpdateWithoutGiftInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorDistributionId?: StringFieldUpdateOperationsInput | string
    fromInventoryId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorDistributionGiftItemUncheckedUpdateManyWithoutGiftInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorDistributionId?: StringFieldUpdateOperationsInput | string
    fromInventoryId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorDistributionDrugItemCreateManyFromInventoryInput = {
    id?: string
    doctorDistributionId: string
    drugId: string
    quantity: number
    unitCost: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorDistributionDrugItemUpdateWithoutFromInventoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorDistribution?: DoctorDistributionUpdateOneRequiredWithoutDrugItemsNestedInput
    drug?: DrugUpdateOneRequiredWithoutDoctorDistributionDrugItemNestedInput
  }

  export type DoctorDistributionDrugItemUncheckedUpdateWithoutFromInventoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorDistributionId?: StringFieldUpdateOperationsInput | string
    drugId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorDistributionDrugItemUncheckedUpdateManyWithoutFromInventoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorDistributionId?: StringFieldUpdateOperationsInput | string
    drugId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorDistributionGiftItemCreateManyFromInventoryInput = {
    id?: string
    doctorDistributionId: string
    giftId: string
    quantity: number
    unitCost: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorDistributionGiftItemUpdateWithoutFromInventoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorDistribution?: DoctorDistributionUpdateOneRequiredWithoutGiftItemsNestedInput
    gift?: GiftUpdateOneRequiredWithoutDoctorDistributionGiftItemsNestedInput
  }

  export type DoctorDistributionGiftItemUncheckedUpdateWithoutFromInventoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorDistributionId?: StringFieldUpdateOperationsInput | string
    giftId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorDistributionGiftItemUncheckedUpdateManyWithoutFromInventoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorDistributionId?: StringFieldUpdateOperationsInput | string
    giftId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorDistributionDrugItemCreateManyDoctorDistributionInput = {
    id?: string
    drugId: string
    fromInventoryId: string
    quantity: number
    unitCost: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorDistributionGiftItemCreateManyDoctorDistributionInput = {
    id?: string
    giftId: string
    fromInventoryId: string
    quantity: number
    unitCost: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorDistributionDrugItemUpdateWithoutDoctorDistributionInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    drug?: DrugUpdateOneRequiredWithoutDoctorDistributionDrugItemNestedInput
    fromInventory?: UserDrugInventoryUpdateOneRequiredWithoutDoctorDistributionDrugItemsNestedInput
  }

  export type DoctorDistributionDrugItemUncheckedUpdateWithoutDoctorDistributionInput = {
    id?: StringFieldUpdateOperationsInput | string
    drugId?: StringFieldUpdateOperationsInput | string
    fromInventoryId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorDistributionDrugItemUncheckedUpdateManyWithoutDoctorDistributionInput = {
    id?: StringFieldUpdateOperationsInput | string
    drugId?: StringFieldUpdateOperationsInput | string
    fromInventoryId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorDistributionGiftItemUpdateWithoutDoctorDistributionInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gift?: GiftUpdateOneRequiredWithoutDoctorDistributionGiftItemsNestedInput
    fromInventory?: UserGiftInventoryUpdateOneRequiredWithoutDoctorDistributionGiftItemsNestedInput
  }

  export type DoctorDistributionGiftItemUncheckedUpdateWithoutDoctorDistributionInput = {
    id?: StringFieldUpdateOperationsInput | string
    giftId?: StringFieldUpdateOperationsInput | string
    fromInventoryId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorDistributionGiftItemUncheckedUpdateManyWithoutDoctorDistributionInput = {
    id?: StringFieldUpdateOperationsInput | string
    giftId?: StringFieldUpdateOperationsInput | string
    fromInventoryId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}