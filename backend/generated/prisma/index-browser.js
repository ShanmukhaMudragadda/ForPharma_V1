
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.OrganizationScalarFieldEnum = {
  organization_id: 'organization_id',
  name: 'name',
  organizationEmail: 'organizationEmail',
  headquarterAddress: 'headquarterAddress',
  orgWebsite: 'orgWebsite',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  is_active: 'is_active'
};

exports.Prisma.EmployeeScalarFieldEnum = {
  employee_id: 'employee_id',
  organization_id: 'organization_id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  profilePic: 'profilePic',
  role: 'role',
  reportingManagerId: 'reportingManagerId',
  employeeCode: 'employeeCode',
  city: 'city',
  state: 'state',
  country: 'country',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  is_active: 'is_active',
  teamId: 'teamId'
};

exports.Prisma.TeamScalarFieldEnum = {
  teamId: 'teamId',
  teamName: 'teamName',
  lead_id: 'lead_id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  is_active: 'is_active'
};

exports.Prisma.CheckInCheckOutScalarFieldEnum = {
  id: 'id',
  employee_id: 'employee_id',
  checkInLatitude: 'checkInLatitude',
  checkInLongitude: 'checkInLongitude',
  checkOutLatitude: 'checkOutLatitude',
  checkOutLongitude: 'checkOutLongitude',
  checkInTime: 'checkInTime',
  checkOutTime: 'checkOutTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  is_active: 'is_active'
};

exports.Prisma.TaskScalarFieldEnum = {
  taskId: 'taskId',
  employee_id: 'employee_id',
  taskType: 'taskType',
  visitId: 'visitId',
  date: 'date',
  taskStatus: 'taskStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  is_active: 'is_active'
};

exports.Prisma.HospitalScalarFieldEnum = {
  hospital_id: 'hospital_id',
  organization_id: 'organization_id',
  name: 'name',
  type: 'type',
  address: 'address',
  city: 'city',
  state: 'state',
  country: 'country',
  pincode: 'pincode',
  phone: 'phone',
  email: 'email',
  website: 'website',
  description: 'description',
  created_at: 'created_at',
  updated_at: 'updated_at',
  is_active: 'is_active'
};

exports.Prisma.DoctorScalarFieldEnum = {
  doctor_id: 'doctor_id',
  name: 'name',
  specialization: 'specialization',
  email: 'email',
  phone: 'phone',
  address: 'address',
  description: 'description',
  profilePictureUrl: 'profilePictureUrl',
  qualification: 'qualification',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy',
  is_active: 'is_active'
};

exports.Prisma.DoctorHospitalAssociationScalarFieldEnum = {
  id: 'id',
  doctor_id: 'doctor_id',
  hospital_id: 'hospital_id',
  department: 'department',
  position: 'position',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DoctorConsultationScheduleScalarFieldEnum = {
  id: 'id',
  doctor_id: 'doctor_id',
  hospital_id: 'hospital_id',
  dayOfWeek: 'dayOfWeek',
  startTime: 'startTime',
  endTime: 'endTime',
  consultationType: 'consultationType',
  is_active: 'is_active',
  effective_from: 'effective_from',
  effective_to: 'effective_to',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.DoctorInteractionScalarFieldEnum = {
  id: 'id',
  doctor_id: 'doctor_id',
  employee_id: 'employee_id',
  interactionType: 'interactionType',
  startTime: 'startTime',
  endTime: 'endTime',
  purpose: 'purpose',
  outcome: 'outcome',
  comments: 'comments',
  rating: 'rating',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.EmployeeRole = exports.$Enums.EmployeeRole = {
  MEDICAL_REPRESENTATIVE: 'MEDICAL_REPRESENTATIVE',
  SALES_MANAGER: 'SALES_MANAGER',
  SYSTEM_ADMINISTRATOR: 'SYSTEM_ADMINISTRATOR'
};

exports.TaskType = exports.$Enums.TaskType = {
  DOCTOR: 'DOCTOR',
  CHEMIST: 'CHEMIST',
  TOUR_PLANNER: 'TOUR_PLANNER'
};

exports.TaskStatus = exports.$Enums.TaskStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  RESCHEDULE: 'RESCHEDULE'
};

exports.DayOfWeek = exports.$Enums.DayOfWeek = {
  MONDAY: 'MONDAY',
  TUESDAY: 'TUESDAY',
  WEDNESDAY: 'WEDNESDAY',
  THURSDAY: 'THURSDAY',
  FRIDAY: 'FRIDAY',
  SATURDAY: 'SATURDAY',
  SUNDAY: 'SUNDAY'
};

exports.ConsultationType = exports.$Enums.ConsultationType = {
  OPD: 'OPD',
  EMERGENCY: 'EMERGENCY',
  SURGERY: 'SURGERY',
  SPECIAL: 'SPECIAL'
};

exports.InteractionType = exports.$Enums.InteractionType = {
  MEETING: 'MEETING',
  CALL: 'CALL',
  EMAIL: 'EMAIL',
  WHATSAPP: 'WHATSAPP'
};

exports.Prisma.ModelName = {
  Organization: 'Organization',
  Employee: 'Employee',
  Team: 'Team',
  checkInCheckOut: 'checkInCheckOut',
  Task: 'Task',
  Hospital: 'Hospital',
  Doctor: 'Doctor',
  DoctorHospitalAssociation: 'DoctorHospitalAssociation',
  DoctorConsultationSchedule: 'DoctorConsultationSchedule',
  DoctorInteraction: 'DoctorInteraction'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
