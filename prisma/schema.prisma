generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EmployeeRole {
  MEDICAL_REPRESENTATIVE
  SALES_MANAGER
  SYSTEM_ADMINISTRATOR
}
enum TaskType {
  DOCTOR
  CHEMIST
  TOUR_PLANNER
}
enum TaskStatus {
  PENDING
  COMPLETED
  RESCHEDULE
}
enum AssociationType {
  DOCTOR
  CHEMIST
}
enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
enum ConsultationType {
  OPD
  EMERGENCY
  SURGERY
  SPECIAL
}
enum InteractionType {
  MEETING
  CALL
  EMAIL
  WHATSAPP
}

model Organization {
  organization_id      Int       @id @default(autoincrement())
  name                String    @db.VarChar(255)
  organizationEmail   String    
  headquarterAddress  String?     
  orgWebsite          String?   
  createdAt           DateTime  @default(now()) 
  updatedAt           DateTime  @updatedAt
  is_active            Boolean   @default(true)
  employees           Employee[]
  hospital            Hospital[]
}

model Employee {
  employee_id         Int           @id @default(autoincrement())
  // relation 
  organization_id     Int
  organization        Organization  @relation(fields:[organization_id], references: [organization_id])
  
  email               String        @unique @db.VarChar(255)
  password            String        @db.VarChar(255)
  firstName           String        @db.VarChar(100)
  lastName            String?       @db.VarChar(100)
  phone               String?       @db.VarChar(20)
  profilePic          String?       
  role                EmployeeRole
  //relation
  reportingManagerId  Int?
  reportingManager    Employee?     @relation("employee_manager",fields: [reportingManagerId], references: [employee_id])
  subordinates        Employee[]    @relation("employee_manager")
         
  employeeCode        String?       @db.VarChar(50)         
  city                String?       @db.VarChar(100)
  state               String?       @db.VarChar(100)
  country             String?       @db.VarChar(100)
  createdAt           DateTime      @default(now()) 
  updatedAt           DateTime      @updatedAt
  is_active            Boolean       @default(true)
  //relation
  teamId              Int? 
  team                Team?         @relation("TeamMembers", fields: [teamId], references: [teamId])
 
  leadsTeam           Team?         @relation("TeamLead")

  checkInCheckOut     checkInCheckOut[]
  task                Task[]
  doctorinteraction   DoctorInteraction[]
}


model Team {
  teamId              Int       @id @default(autoincrement()) 
  teamName            String    @db.VarChar(255)
  //relation
  lead_id             Int       @unique  
  team_name           Employee  @relation("TeamLead", fields: [lead_id] , references: [employee_id])  
 
  teamMembers         Employee[]  @relation("TeamMembers")

  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")
  is_active            Boolean   @default(true) @map("is_active")
}


model checkInCheckOut {
  id                 Int      @id @default(autoincrement())
  //relation
  employee_id        Int
  employee           Employee   @relation(fields: [employee_id] , references: [employee_id])
  checkInLatitude     Float?    
  checkInLongitude    Float?    
  checkOutLatitude    Float?    
  checkOutLongitude   Float?    
  checkInTime         DateTime? 
  checkOutTime        DateTime? 

  createdAt           DateTime  @default(now()) 
  updatedAt           DateTime  @updatedAt 
  is_active            Boolean   @default(true) 

}


model Task {
  taskId              Int         @id @default(autoincrement())
  //relation
  employee_id              Int        
  employee            Employee    @relation(fields: [employee_id] , references: [employee_id])
  taskType            TaskType    
  visitId             Int?         
  date                DateTime    @db.Date
  taskStatus          TaskStatus  @default(PENDING)
  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime    @updatedAt @map("updated_at")
  is_active            Boolean     @default(true) @map("is_active")
}

// who are the doctors or chemist under a particular med rep
// model UserDoctorChemistAssociation {
//   id                  Int             @id @default(autoincrement())
//   //relation 
//   employee_id              Int 
//   employee            Employee        @relation(fields: [employee_id] , references: [employee_id])     
//   type                AssociationType        
//   associatedId        Int 
//   doctor              Doctor?         @relation(fields: [associatedId], references: [doctor_id])
//   chemist             Chemist?        @relation(fields: [associatedId], references: [chemistId]) 

//   createdAt           DateTime        @default(now()) 
//   updatedAt           DateTime        @updatedAt
//   is_active            Boolean         @default(true)

//   @@unique([employee_id, associatedId])
// }

model Hospital{
  hospital_id         Int             @id @default(autoincrement())
  organization_id     Int
  organization        Organization    @relation(fields: [organization_id], references: [organization_id])
  name                String                   
  type                String
  address             String    
  city                String?
  state               String?
  country             String?
  pincode             String?
  phone               Int    
  email               String?
  website             String?
  description         String?
  created_at          DateTime         @default(now())
  updated_at          DateTime         @updatedAt
  is_active           Boolean

  //relation
  doctorhospitalAssociations DoctorHospitalAssociation[]
  doctorconsultationcchedule DoctorConsultationSchedule[]

  // hospital_chain_id

}

model Doctor {
  doctor_id            Int      @id @default(autoincrement())
  name                String      @db.VarChar(255)
  specialization      String?     @db.VarChar(255)
  email               String?     @db.VarChar(255)
  phone               String?     @db.VarChar(20)
  address             String?     @db.Text
  description         String?     @db.Text
  profilePictureUrl   String?     @db.VarChar(500)
  qualification       String?     @db.VarChar(255)
  

  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime    @updatedAt @map("updated_at")
  createdBy           Int         @map("created_by")
  is_active            Boolean     @default(true) @map("is_active")
  
  // Relations
  // hospital            Organization @relation(fields: [hospital_id], references: [organizationId])
  // createdByEmployee   Employee     @relation("DoctorCreatedBy", fields: [createdBy], references: [userId])
  
  // // User associations

  // userAssociations    UserDoctorChemistAssociation[]
  
  // Hospital associations (Many-to-Many)
  doctorhospitalAssociations DoctorHospitalAssociation[]
  consultationSchedules DoctorConsultationSchedule[]
  doctorInteractions  DoctorInteraction[]

}

model DoctorHospitalAssociation {
  id                  Int         @id @default(autoincrement())
  // relation
  doctor_id            Int 
  doctor              Doctor      @relation(fields: [doctor_id], references: [doctor_id])

  hospital_id          Int
  hospital            Hospital @relation(fields: [hospital_id], references: [hospital_id])         

  department          String?     @db.VarChar(255)
  position            String?     @db.VarChar(255)
  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime    @updatedAt @map("updated_at")

  @@unique([doctor_id, hospital_id])
}


model DoctorConsultationSchedule {
  id                  Int             @id @default(autoincrement())
  
  // relation
  doctor_id            Int   
  doctor              Doctor          @relation(fields: [doctor_id], references: [doctor_id])       
  hospital_id          Int 
  hospital            Hospital    @relation(fields: [hospital_id], references: [hospital_id])            
  
  // Schedule information
  dayOfWeek           DayOfWeek       
  startTime           DateTime        @db.Time
  endTime             DateTime        @db.Time
  consultationType    ConsultationType 

  is_active            Boolean         @default(true)
  effective_from       DateTime?        
  effective_to         DateTime?       
  created_at           DateTime        @default(now()) 
  updated_at           DateTime        @updatedAt

}


model DoctorInteraction {
  id                  Int             @id @default(autoincrement())
  
  // relation
  doctor_id            Int      
  doctor              Doctor          @relation(fields: [doctor_id], references: [doctor_id])    
  employee_id          Int     
  employee            Employee      @relation(fields: [employee_id], references: [employee_id])        
  
  // Interaction information
  interactionType     InteractionType 
  startTime           DateTime        
  endTime             DateTime?       
  purpose             String?         @db.Text
  outcome             String?         @db.Text
  comments            String?         @db.Text
  rating              Int?            @db.SmallInt 
  
  created_at          DateTime        @default(now()) 
  updated_at           DateTime        @updatedAt 
}




